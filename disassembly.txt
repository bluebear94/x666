
x666:     file format elf64-x86-64


Disassembly of section .init:

0000000000432650 <_init>:
  432650:	48 83 ec 08          	sub    $0x8,%rsp
  432654:	48 8b 05 9d e9 21 00 	mov    0x21e99d(%rip),%rax        # 650ff8 <__gmon_start__>
  43265b:	48 85 c0             	test   %rax,%rax
  43265e:	74 02                	je     432662 <_init+0x12>
  432660:	ff d0                	callq  *%rax
  432662:	48 83 c4 08          	add    $0x8,%rsp
  432666:	c3                   	retq   

Disassembly of section .plt:

0000000000432670 <.plt>:
  432670:	ff 35 92 e9 21 00    	pushq  0x21e992(%rip)        # 651008 <_GLOBAL_OFFSET_TABLE_+0x8>
  432676:	ff 25 94 e9 21 00    	jmpq   *0x21e994(%rip)        # 651010 <_GLOBAL_OFFSET_TABLE_+0x10>
  43267c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000432680 <std::basic_ios<char, std::char_traits<char> >::fail() const@plt>:
  432680:	ff 25 92 e9 21 00    	jmpq   *0x21e992(%rip)        # 651018 <std::basic_ios<char, std::char_traits<char> >::fail() const@GLIBCXX_3.4>
  432686:	68 00 00 00 00       	pushq  $0x0
  43268b:	e9 e0 ff ff ff       	jmpq   432670 <.plt>

0000000000432690 <std::allocator<char>::~allocator()@plt>:
  432690:	ff 25 8a e9 21 00    	jmpq   *0x21e98a(%rip)        # 651020 <std::allocator<char>::~allocator()@GLIBCXX_3.4>
  432696:	68 01 00 00 00       	pushq  $0x1
  43269b:	e9 d0 ff ff ff       	jmpq   432670 <.plt>

00000000004326a0 <std::basic_fstream<char, std::char_traits<char> >::~basic_fstream()@plt>:
  4326a0:	ff 25 82 e9 21 00    	jmpq   *0x21e982(%rip)        # 651028 <std::basic_fstream<char, std::char_traits<char> >::~basic_fstream()@GLIBCXX_3.4>
  4326a6:	68 02 00 00 00       	pushq  $0x2
  4326ab:	e9 c0 ff ff ff       	jmpq   432670 <.plt>

00000000004326b0 <std::ostream::operator<<(unsigned long)@plt>:
  4326b0:	ff 25 7a e9 21 00    	jmpq   *0x21e97a(%rip)        # 651030 <std::ostream::operator<<(unsigned long)@GLIBCXX_3.4>
  4326b6:	68 03 00 00 00       	pushq  $0x3
  4326bb:	e9 b0 ff ff ff       	jmpq   432670 <.plt>

00000000004326c0 <std::__throw_bad_alloc()@plt>:
  4326c0:	ff 25 72 e9 21 00    	jmpq   *0x21e972(%rip)        # 651038 <std::__throw_bad_alloc()@GLIBCXX_3.4>
  4326c6:	68 04 00 00 00       	pushq  $0x4
  4326cb:	e9 a0 ff ff ff       	jmpq   432670 <.plt>

00000000004326d0 <std::istream::peek()@plt>:
  4326d0:	ff 25 6a e9 21 00    	jmpq   *0x21e96a(%rip)        # 651040 <std::istream::peek()@GLIBCXX_3.4>
  4326d6:	68 05 00 00 00       	pushq  $0x5
  4326db:	e9 90 ff ff ff       	jmpq   432670 <.plt>

00000000004326e0 <__cxa_begin_catch@plt>:
  4326e0:	ff 25 62 e9 21 00    	jmpq   *0x21e962(%rip)        # 651048 <__cxa_begin_catch@CXXABI_1.3>
  4326e6:	68 06 00 00 00       	pushq  $0x6
  4326eb:	e9 80 ff ff ff       	jmpq   432670 <.plt>

00000000004326f0 <abs@plt>:
  4326f0:	ff 25 5a e9 21 00    	jmpq   *0x21e95a(%rip)        # 651050 <abs@GLIBC_2.2.5>
  4326f6:	68 07 00 00 00       	pushq  $0x7
  4326fb:	e9 70 ff ff ff       	jmpq   432670 <.plt>

0000000000432700 <__cxa_allocate_exception@plt>:
  432700:	ff 25 52 e9 21 00    	jmpq   *0x21e952(%rip)        # 651058 <__cxa_allocate_exception@CXXABI_1.3>
  432706:	68 08 00 00 00       	pushq  $0x8
  43270b:	e9 60 ff ff ff       	jmpq   432670 <.plt>

0000000000432710 <std::__throw_length_error(char const*)@plt>:
  432710:	ff 25 4a e9 21 00    	jmpq   *0x21e94a(%rip)        # 651060 <std::__throw_length_error(char const*)@GLIBCXX_3.4>
  432716:	68 09 00 00 00       	pushq  $0x9
  43271b:	e9 50 ff ff ff       	jmpq   432670 <.plt>

0000000000432720 <memset@plt>:
  432720:	ff 25 42 e9 21 00    	jmpq   *0x21e942(%rip)        # 651068 <memset@GLIBC_2.2.5>
  432726:	68 0a 00 00 00       	pushq  $0xa
  43272b:	e9 40 ff ff ff       	jmpq   432670 <.plt>

0000000000432730 <std::allocator<char>::allocator(std::allocator<char> const&)@plt>:
  432730:	ff 25 3a e9 21 00    	jmpq   *0x21e93a(%rip)        # 651070 <std::allocator<char>::allocator(std::allocator<char> const&)@GLIBCXX_3.4>
  432736:	68 0b 00 00 00       	pushq  $0xb
  43273b:	e9 30 ff ff ff       	jmpq   432670 <.plt>

0000000000432740 <std::istream::ignore(long, int)@plt>:
  432740:	ff 25 32 e9 21 00    	jmpq   *0x21e932(%rip)        # 651078 <std::istream::ignore(long, int)@GLIBCXX_3.4>
  432746:	68 0c 00 00 00       	pushq  $0xc
  43274b:	e9 20 ff ff ff       	jmpq   432670 <.plt>

0000000000432750 <__assert_fail@plt>:
  432750:	ff 25 2a e9 21 00    	jmpq   *0x21e92a(%rip)        # 651080 <__assert_fail@GLIBC_2.2.5>
  432756:	68 0d 00 00 00       	pushq  $0xd
  43275b:	e9 10 ff ff ff       	jmpq   432670 <.plt>

0000000000432760 <std::__throw_logic_error(char const*)@plt>:
  432760:	ff 25 22 e9 21 00    	jmpq   *0x21e922(%rip)        # 651088 <std::__throw_logic_error(char const*)@GLIBCXX_3.4>
  432766:	68 0e 00 00 00       	pushq  $0xe
  43276b:	e9 00 ff ff ff       	jmpq   432670 <.plt>

0000000000432770 <isupper@plt>:
  432770:	ff 25 1a e9 21 00    	jmpq   *0x21e91a(%rip)        # 651090 <isupper@GLIBC_2.2.5>
  432776:	68 0f 00 00 00       	pushq  $0xf
  43277b:	e9 f0 fe ff ff       	jmpq   432670 <.plt>

0000000000432780 <iswspace@plt>:
  432780:	ff 25 12 e9 21 00    	jmpq   *0x21e912(%rip)        # 651098 <iswspace@GLIBC_2.2.5>
  432786:	68 10 00 00 00       	pushq  $0x10
  43278b:	e9 e0 fe ff ff       	jmpq   432670 <.plt>

0000000000432790 <memcpy@plt>:
  432790:	ff 25 0a e9 21 00    	jmpq   *0x21e90a(%rip)        # 6510a0 <memcpy@GLIBC_2.14>
  432796:	68 11 00 00 00       	pushq  $0x11
  43279b:	e9 d0 fe ff ff       	jmpq   432670 <.plt>

00000000004327a0 <__cxa_atexit@plt>:
  4327a0:	ff 25 02 e9 21 00    	jmpq   *0x21e902(%rip)        # 6510a8 <__cxa_atexit@GLIBC_2.2.5>
  4327a6:	68 12 00 00 00       	pushq  $0x12
  4327ab:	e9 c0 fe ff ff       	jmpq   432670 <.plt>

00000000004327b0 <isdigit@plt>:
  4327b0:	ff 25 fa e8 21 00    	jmpq   *0x21e8fa(%rip)        # 6510b0 <isdigit@GLIBC_2.2.5>
  4327b6:	68 13 00 00 00       	pushq  $0x13
  4327bb:	e9 b0 fe ff ff       	jmpq   432670 <.plt>

00000000004327c0 <operator delete(void*)@plt>:
  4327c0:	ff 25 f2 e8 21 00    	jmpq   *0x21e8f2(%rip)        # 6510b8 <operator delete(void*)@GLIBCXX_3.4>
  4327c6:	68 14 00 00 00       	pushq  $0x14
  4327cb:	e9 a0 fe ff ff       	jmpq   432670 <.plt>

00000000004327d0 <std::basic_ios<char, std::char_traits<char> >::widen(char) const@plt>:
  4327d0:	ff 25 ea e8 21 00    	jmpq   *0x21e8ea(%rip)        # 6510c0 <std::basic_ios<char, std::char_traits<char> >::widen(char) const@GLIBCXX_3.4>
  4327d6:	68 15 00 00 00       	pushq  $0x15
  4327db:	e9 90 fe ff ff       	jmpq   432670 <.plt>

00000000004327e0 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*)@plt>:
  4327e0:	ff 25 e2 e8 21 00    	jmpq   *0x21e8e2(%rip)        # 6510c8 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*)@GLIBCXX_3.4>
  4327e6:	68 16 00 00 00       	pushq  $0x16
  4327eb:	e9 80 fe ff ff       	jmpq   432670 <.plt>

00000000004327f0 <operator new(unsigned long)@plt>:
  4327f0:	ff 25 da e8 21 00    	jmpq   *0x21e8da(%rip)        # 6510d0 <operator new(unsigned long)@GLIBCXX_3.4>
  4327f6:	68 17 00 00 00       	pushq  $0x17
  4327fb:	e9 70 fe ff ff       	jmpq   432670 <.plt>

0000000000432800 <operator delete(void*, unsigned long)@plt>:
  432800:	ff 25 d2 e8 21 00    	jmpq   *0x21e8d2(%rip)        # 6510d8 <operator delete(void*, unsigned long)@CXXABI_1.3.9>
  432806:	68 18 00 00 00       	pushq  $0x18
  43280b:	e9 60 fe ff ff       	jmpq   432670 <.plt>

0000000000432810 <std::allocator<char>::~allocator()@plt>:
  432810:	ff 25 ca e8 21 00    	jmpq   *0x21e8ca(%rip)        # 6510e0 <std::allocator<char>::~allocator()@GLIBCXX_3.4>
  432816:	68 19 00 00 00       	pushq  $0x19
  43281b:	e9 50 fe ff ff       	jmpq   432670 <.plt>

0000000000432820 <__dynamic_cast@plt>:
  432820:	ff 25 c2 e8 21 00    	jmpq   *0x21e8c2(%rip)        # 6510e8 <__dynamic_cast@CXXABI_1.3>
  432826:	68 1a 00 00 00       	pushq  $0x1a
  43282b:	e9 40 fe ff ff       	jmpq   432670 <.plt>

0000000000432830 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>:
  432830:	ff 25 ba e8 21 00    	jmpq   *0x21e8ba(%rip)        # 6510f0 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@GLIBCXX_3.4.9>
  432836:	68 1b 00 00 00       	pushq  $0x1b
  43283b:	e9 30 fe ff ff       	jmpq   432670 <.plt>

0000000000432840 <std::istream::get()@plt>:
  432840:	ff 25 b2 e8 21 00    	jmpq   *0x21e8b2(%rip)        # 6510f8 <std::istream::get()@GLIBCXX_3.4>
  432846:	68 1c 00 00 00       	pushq  $0x1c
  43284b:	e9 20 fe ff ff       	jmpq   432670 <.plt>

0000000000432850 <std::istream::seekg(std::fpos<__mbstate_t>)@plt>:
  432850:	ff 25 aa e8 21 00    	jmpq   *0x21e8aa(%rip)        # 651100 <std::istream::seekg(std::fpos<__mbstate_t>)@GLIBCXX_3.4>
  432856:	68 1d 00 00 00       	pushq  $0x1d
  43285b:	e9 10 fe ff ff       	jmpq   432670 <.plt>

0000000000432860 <std::basic_fstream<char, std::char_traits<char> >::basic_fstream(char const*, std::_Ios_Openmode)@plt>:
  432860:	ff 25 a2 e8 21 00    	jmpq   *0x21e8a2(%rip)        # 651108 <std::basic_fstream<char, std::char_traits<char> >::basic_fstream(char const*, std::_Ios_Openmode)@GLIBCXX_3.4>
  432866:	68 1e 00 00 00       	pushq  $0x1e
  43286b:	e9 00 fe ff ff       	jmpq   432670 <.plt>

0000000000432870 <std::allocator<char>::allocator(std::allocator<char> const&)@plt>:
  432870:	ff 25 9a e8 21 00    	jmpq   *0x21e89a(%rip)        # 651110 <std::allocator<char>::allocator(std::allocator<char> const&)@GLIBCXX_3.4>
  432876:	68 1f 00 00 00       	pushq  $0x1f
  43287b:	e9 f0 fd ff ff       	jmpq   432670 <.plt>

0000000000432880 <__cxa_rethrow@plt>:
  432880:	ff 25 92 e8 21 00    	jmpq   *0x21e892(%rip)        # 651118 <__cxa_rethrow@CXXABI_1.3>
  432886:	68 20 00 00 00       	pushq  $0x20
  43288b:	e9 e0 fd ff ff       	jmpq   432670 <.plt>

0000000000432890 <std::ios_base::Init::Init()@plt>:
  432890:	ff 25 8a e8 21 00    	jmpq   *0x21e88a(%rip)        # 651120 <std::ios_base::Init::Init()@GLIBCXX_3.4>
  432896:	68 21 00 00 00       	pushq  $0x21
  43289b:	e9 d0 fd ff ff       	jmpq   432670 <.plt>

00000000004328a0 <isalpha@plt>:
  4328a0:	ff 25 82 e8 21 00    	jmpq   *0x21e882(%rip)        # 651128 <isalpha@GLIBC_2.2.5>
  4328a6:	68 22 00 00 00       	pushq  $0x22
  4328ab:	e9 c0 fd ff ff       	jmpq   432670 <.plt>

00000000004328b0 <memmove@plt>:
  4328b0:	ff 25 7a e8 21 00    	jmpq   *0x21e87a(%rip)        # 651130 <memmove@GLIBC_2.2.5>
  4328b6:	68 23 00 00 00       	pushq  $0x23
  4328bb:	e9 b0 fd ff ff       	jmpq   432670 <.plt>

00000000004328c0 <__cxa_end_catch@plt>:
  4328c0:	ff 25 72 e8 21 00    	jmpq   *0x21e872(%rip)        # 651138 <__cxa_end_catch@CXXABI_1.3>
  4328c6:	68 24 00 00 00       	pushq  $0x24
  4328cb:	e9 a0 fd ff ff       	jmpq   432670 <.plt>

00000000004328d0 <__gxx_personality_v0@plt>:
  4328d0:	ff 25 6a e8 21 00    	jmpq   *0x21e86a(%rip)        # 651140 <__gxx_personality_v0@CXXABI_1.3>
  4328d6:	68 25 00 00 00       	pushq  $0x25
  4328db:	e9 90 fd ff ff       	jmpq   432670 <.plt>

00000000004328e0 <std::basic_ios<char, std::char_traits<char> >::clear(std::_Ios_Iostate)@plt>:
  4328e0:	ff 25 62 e8 21 00    	jmpq   *0x21e862(%rip)        # 651148 <std::basic_ios<char, std::char_traits<char> >::clear(std::_Ios_Iostate)@GLIBCXX_3.4>
  4328e6:	68 26 00 00 00       	pushq  $0x26
  4328eb:	e9 80 fd ff ff       	jmpq   432670 <.plt>

00000000004328f0 <__cxa_throw@plt>:
  4328f0:	ff 25 5a e8 21 00    	jmpq   *0x21e85a(%rip)        # 651150 <__cxa_throw@CXXABI_1.3>
  4328f6:	68 27 00 00 00       	pushq  $0x27
  4328fb:	e9 70 fd ff ff       	jmpq   432670 <.plt>

0000000000432900 <std::istream::tellg()@plt>:
  432900:	ff 25 52 e8 21 00    	jmpq   *0x21e852(%rip)        # 651158 <std::istream::tellg()@GLIBCXX_3.4>
  432906:	68 28 00 00 00       	pushq  $0x28
  43290b:	e9 60 fd ff ff       	jmpq   432670 <.plt>

0000000000432910 <_Unwind_Resume@plt>:
  432910:	ff 25 4a e8 21 00    	jmpq   *0x21e84a(%rip)        # 651160 <_Unwind_Resume@GCC_3.0>
  432916:	68 29 00 00 00       	pushq  $0x29
  43291b:	e9 50 fd ff ff       	jmpq   432670 <.plt>

0000000000432920 <std::allocator<char>::allocator()@plt>:
  432920:	ff 25 42 e8 21 00    	jmpq   *0x21e842(%rip)        # 651168 <std::allocator<char>::allocator()@GLIBCXX_3.4>
  432926:	68 2a 00 00 00       	pushq  $0x2a
  43292b:	e9 40 fd ff ff       	jmpq   432670 <.plt>

0000000000432930 <std::ostream::operator<<(long)@plt>:
  432930:	ff 25 3a e8 21 00    	jmpq   *0x21e83a(%rip)        # 651170 <std::ostream::operator<<(long)@GLIBCXX_3.4>
  432936:	68 2b 00 00 00       	pushq  $0x2b
  43293b:	e9 30 fd ff ff       	jmpq   432670 <.plt>

0000000000432940 <std::exception::~exception()@plt>:
  432940:	ff 25 32 e8 21 00    	jmpq   *0x21e832(%rip)        # 651178 <std::exception::~exception()@GLIBCXX_3.4>
  432946:	68 2c 00 00 00       	pushq  $0x2c
  43294b:	e9 20 fd ff ff       	jmpq   432670 <.plt>

0000000000432950 <std::basic_istream<char, std::char_traits<char> >& std::getline<char, std::char_traits<char>, std::allocator<char> >(std::basic_istream<char, std::char_traits<char> >&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, char)@plt>:
  432950:	ff 25 2a e8 21 00    	jmpq   *0x21e82a(%rip)        # 651180 <std::basic_istream<char, std::char_traits<char> >& std::getline<char, std::char_traits<char>, std::allocator<char> >(std::basic_istream<char, std::char_traits<char> >&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, char)@GLIBCXX_3.4.21>
  432956:	68 2d 00 00 00       	pushq  $0x2d
  43295b:	e9 10 fd ff ff       	jmpq   432670 <.plt>

0000000000432960 <toupper@plt>:
  432960:	ff 25 22 e8 21 00    	jmpq   *0x21e822(%rip)        # 651188 <toupper@GLIBC_2.2.5>
  432966:	68 2e 00 00 00       	pushq  $0x2e
  43296b:	e9 00 fd ff ff       	jmpq   432670 <.plt>

0000000000432970 <__cxa_pure_virtual@plt>:
  432970:	ff 25 1a e8 21 00    	jmpq   *0x21e81a(%rip)        # 651190 <__cxa_pure_virtual@CXXABI_1.3>
  432976:	68 2f 00 00 00       	pushq  $0x2f
  43297b:	e9 f0 fc ff ff       	jmpq   432670 <.plt>

0000000000432980 <std::ios_base::Init::~Init()@plt>:
  432980:	ff 25 12 e8 21 00    	jmpq   *0x21e812(%rip)        # 651198 <std::ios_base::Init::~Init()@GLIBCXX_3.4>
  432986:	68 30 00 00 00       	pushq  $0x30
  43298b:	e9 e0 fc ff ff       	jmpq   432670 <.plt>

Disassembly of section .text:

0000000000432990 <_start>:
  432990:	31 ed                	xor    %ebp,%ebp
  432992:	49 89 d1             	mov    %rdx,%r9
  432995:	5e                   	pop    %rsi
  432996:	48 89 e2             	mov    %rsp,%rdx
  432999:	48 83 e4 f0          	and    $0xfffffffffffffff0,%rsp
  43299d:	50                   	push   %rax
  43299e:	54                   	push   %rsp
  43299f:	49 c7 c0 f0 41 44 00 	mov    $0x4441f0,%r8
  4329a6:	48 c7 c1 80 41 44 00 	mov    $0x444180,%rcx
  4329ad:	48 c7 c7 62 2a 43 00 	mov    $0x432a62,%rdi
  4329b4:	ff 15 36 e6 21 00    	callq  *0x21e636(%rip)        # 650ff0 <__libc_start_main@GLIBC_2.2.5>
  4329ba:	f4                   	hlt    
  4329bb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000004329c0 <deregister_tm_clones>:
  4329c0:	b8 40 13 65 00       	mov    $0x651340,%eax
  4329c5:	48 3d 40 13 65 00    	cmp    $0x651340,%rax
  4329cb:	74 13                	je     4329e0 <deregister_tm_clones+0x20>
  4329cd:	b8 00 00 00 00       	mov    $0x0,%eax
  4329d2:	48 85 c0             	test   %rax,%rax
  4329d5:	74 09                	je     4329e0 <deregister_tm_clones+0x20>
  4329d7:	bf 40 13 65 00       	mov    $0x651340,%edi
  4329dc:	ff e0                	jmpq   *%rax
  4329de:	66 90                	xchg   %ax,%ax
  4329e0:	f3 c3                	repz retq 
  4329e2:	0f 1f 40 00          	nopl   0x0(%rax)
  4329e6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  4329ed:	00 00 00 

00000000004329f0 <register_tm_clones>:
  4329f0:	be 40 13 65 00       	mov    $0x651340,%esi
  4329f5:	48 81 ee 40 13 65 00 	sub    $0x651340,%rsi
  4329fc:	48 c1 fe 03          	sar    $0x3,%rsi
  432a00:	48 89 f0             	mov    %rsi,%rax
  432a03:	48 c1 e8 3f          	shr    $0x3f,%rax
  432a07:	48 01 c6             	add    %rax,%rsi
  432a0a:	48 d1 fe             	sar    %rsi
  432a0d:	74 11                	je     432a20 <register_tm_clones+0x30>
  432a0f:	b8 00 00 00 00       	mov    $0x0,%eax
  432a14:	48 85 c0             	test   %rax,%rax
  432a17:	74 07                	je     432a20 <register_tm_clones+0x30>
  432a19:	bf 40 13 65 00       	mov    $0x651340,%edi
  432a1e:	ff e0                	jmpq   *%rax
  432a20:	f3 c3                	repz retq 
  432a22:	0f 1f 40 00          	nopl   0x0(%rax)
  432a26:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  432a2d:	00 00 00 

0000000000432a30 <__do_global_dtors_aux>:
  432a30:	80 3d 39 eb 21 00 00 	cmpb   $0x0,0x21eb39(%rip)        # 651570 <completed.7152>
  432a37:	75 17                	jne    432a50 <__do_global_dtors_aux+0x20>
  432a39:	55                   	push   %rbp
  432a3a:	48 89 e5             	mov    %rsp,%rbp
  432a3d:	e8 7e ff ff ff       	callq  4329c0 <deregister_tm_clones>
  432a42:	c6 05 27 eb 21 00 01 	movb   $0x1,0x21eb27(%rip)        # 651570 <completed.7152>
  432a49:	5d                   	pop    %rbp
  432a4a:	c3                   	retq   
  432a4b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  432a50:	f3 c3                	repz retq 
  432a52:	0f 1f 40 00          	nopl   0x0(%rax)
  432a56:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  432a5d:	00 00 00 

0000000000432a60 <frame_dummy>:
  432a60:	eb 8e                	jmp    4329f0 <register_tm_clones>

0000000000432a62 <main>:
#include <variant>

#include "Lexer.h"
#include "Parser.h"

int main(int argc, char** argv) {
  432a62:	55                   	push   %rbp
  432a63:	48 89 e5             	mov    %rsp,%rbp
  432a66:	53                   	push   %rbx
  432a67:	48 81 ec c8 03 00 00 	sub    $0x3c8,%rsp
  432a6e:	89 bd 3c fc ff ff    	mov    %edi,-0x3c4(%rbp)
  432a74:	48 89 b5 30 fc ff ff 	mov    %rsi,-0x3d0(%rbp)
  if (argc == 1) {
  432a7b:	83 bd 3c fc ff ff 01 	cmpl   $0x1,-0x3c4(%rbp)
  432a82:	75 19                	jne    432a9d <main+0x3b>
    std::cerr << "Please give a file name\n";
  432a84:	be 08 42 44 00       	mov    $0x444208,%esi
  432a89:	bf 60 14 65 00       	mov    $0x651460,%edi
  432a8e:	e8 4d fd ff ff       	callq  4327e0 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*)@plt>
    return -1;
  432a93:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
  432a98:	e9 ed 01 00 00       	jmpq   432c8a <main+0x228>
  }
  const char* fname = argv[1];
  432a9d:	48 8b 85 30 fc ff ff 	mov    -0x3d0(%rbp),%rax
  432aa4:	48 8b 40 08          	mov    0x8(%rax),%rax
  432aa8:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  std::fstream fh(fname);
  432aac:	be 10 00 00 00       	mov    $0x10,%esi
  432ab1:	bf 08 00 00 00       	mov    $0x8,%edi
  432ab6:	e8 61 02 00 00       	callq  432d1c <std::operator|(std::_Ios_Openmode, std::_Ios_Openmode)>
  432abb:	89 c2                	mov    %eax,%edx
  432abd:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  432ac1:	48 8d 85 b0 fd ff ff 	lea    -0x250(%rbp),%rax
  432ac8:	48 89 ce             	mov    %rcx,%rsi
  432acb:	48 89 c7             	mov    %rax,%rdi
  432ace:	e8 8d fd ff ff       	callq  432860 <std::basic_fstream<char, std::char_traits<char> >::basic_fstream(char const*, std::_Ios_Openmode)@plt>
  x666::Parser p(&fh);
  432ad3:	48 8d 95 b0 fd ff ff 	lea    -0x250(%rbp),%rdx
  432ada:	48 8d 85 60 fc ff ff 	lea    -0x3a0(%rbp),%rax
  432ae1:	48 89 d6             	mov    %rdx,%rsi
  432ae4:	48 89 c7             	mov    %rax,%rdi
  432ae7:	e8 76 67 00 00       	callq  439262 <x666::Parser::Parser(std::istream*)>
  p.parse();
  432aec:	48 8d 85 60 fc ff ff 	lea    -0x3a0(%rbp),%rax
  432af3:	48 89 c7             	mov    %rax,%rdi
  432af6:	e8 29 6a 00 00       	callq  439524 <x666::Parser::parse()>
  if (p.errorLog.empty()) {
  432afb:	48 8d 85 60 fc ff ff 	lea    -0x3a0(%rbp),%rax
  432b02:	48 05 08 01 00 00    	add    $0x108,%rax
  432b08:	48 89 c7             	mov    %rax,%rdi
  432b0b:	e8 26 05 00 00       	callq  433036 <std::vector<x666::LexError, std::allocator<x666::LexError> >::empty() const>
  432b10:	84 c0                	test   %al,%al
  432b12:	0f 84 b2 00 00 00    	je     432bca <main+0x168>
    std::cout << "Compilation succeeded\n";
  432b18:	be 21 42 44 00       	mov    $0x444221,%esi
  432b1d:	bf 40 13 65 00       	mov    $0x651340,%edi
  432b22:	e8 b9 fc ff ff       	callq  4327e0 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*)@plt>
    for (const x666::ExpressionPtr& ex : p.expressions) {
  432b27:	48 8d 85 60 fc ff ff 	lea    -0x3a0(%rbp),%rax
  432b2e:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  432b32:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  432b36:	48 89 c7             	mov    %rax,%rdi
  432b39:	e8 3a 05 00 00       	callq  433078 <std::vector<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > >::begin()>
  432b3e:	48 89 85 58 fc ff ff 	mov    %rax,-0x3a8(%rbp)
  432b45:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  432b49:	48 89 c7             	mov    %rax,%rdi
  432b4c:	e8 4d 05 00 00       	callq  43309e <std::vector<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > >::end()>
  432b51:	48 89 85 50 fc ff ff 	mov    %rax,-0x3b0(%rbp)
  432b58:	48 8d 95 50 fc ff ff 	lea    -0x3b0(%rbp),%rdx
  432b5f:	48 8d 85 58 fc ff ff 	lea    -0x3a8(%rbp),%rax
  432b66:	48 89 d6             	mov    %rdx,%rsi
  432b69:	48 89 c7             	mov    %rax,%rdi
  432b6c:	e8 56 05 00 00       	callq  4330c7 <bool __gnu_cxx::operator!=<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*, std::vector<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > > >(__gnu_cxx::__normal_iterator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*, std::vector<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > > > const&, __gnu_cxx::__normal_iterator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*, std::vector<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > > > const&)>
  432b71:	84 c0                	test   %al,%al
  432b73:	0f 84 ee 00 00 00    	je     432c67 <main+0x205>
  432b79:	48 8d 85 58 fc ff ff 	lea    -0x3a8(%rbp),%rax
  432b80:	48 89 c7             	mov    %rax,%rdi
  432b83:	e8 9c 05 00 00       	callq  433124 <__gnu_cxx::__normal_iterator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*, std::vector<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > > >::operator*() const>
  432b88:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
      ex->trace();
  432b8c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  432b90:	48 89 c7             	mov    %rax,%rdi
  432b93:	e8 9e 05 00 00       	callq  433136 <std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >::operator->() const>
  432b98:	48 89 c2             	mov    %rax,%rdx
  432b9b:	48 8b 02             	mov    (%rdx),%rax
  432b9e:	48 83 c0 28          	add    $0x28,%rax
  432ba2:	48 8b 00             	mov    (%rax),%rax
  432ba5:	48 89 d7             	mov    %rdx,%rdi
  432ba8:	ff d0                	callq  *%rax
      std::cout << "\n";
  432baa:	be 38 42 44 00       	mov    $0x444238,%esi
  432baf:	bf 40 13 65 00       	mov    $0x651340,%edi
  432bb4:	e8 27 fc ff ff       	callq  4327e0 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*)@plt>
    for (const x666::ExpressionPtr& ex : p.expressions) {
  432bb9:	48 8d 85 58 fc ff ff 	lea    -0x3a8(%rbp),%rax
  432bc0:	48 89 c7             	mov    %rax,%rdi
  432bc3:	e8 3c 05 00 00       	callq  433104 <__gnu_cxx::__normal_iterator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*, std::vector<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > > >::operator++()>
  432bc8:	eb 8e                	jmp    432b58 <main+0xf6>
    }
  } else {
    std::cout << "Parsing failed:\n";
  432bca:	be 3a 42 44 00       	mov    $0x44423a,%esi
  432bcf:	bf 40 13 65 00       	mov    $0x651340,%edi
  432bd4:	e8 07 fc ff ff       	callq  4327e0 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*)@plt>
    for (const x666::LexError& le : p.errorLog) {
  432bd9:	48 8d 85 60 fc ff ff 	lea    -0x3a0(%rbp),%rax
  432be0:	48 05 08 01 00 00    	add    $0x108,%rax
  432be6:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  432bea:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  432bee:	48 89 c7             	mov    %rax,%rdi
  432bf1:	e8 5a 05 00 00       	callq  433150 <std::vector<x666::LexError, std::allocator<x666::LexError> >::begin()>
  432bf6:	48 89 85 48 fc ff ff 	mov    %rax,-0x3b8(%rbp)
  432bfd:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  432c01:	48 89 c7             	mov    %rax,%rdi
  432c04:	e8 6d 05 00 00       	callq  433176 <std::vector<x666::LexError, std::allocator<x666::LexError> >::end()>
  432c09:	48 89 85 40 fc ff ff 	mov    %rax,-0x3c0(%rbp)
  432c10:	48 8d 95 40 fc ff ff 	lea    -0x3c0(%rbp),%rdx
  432c17:	48 8d 85 48 fc ff ff 	lea    -0x3b8(%rbp),%rax
  432c1e:	48 89 d6             	mov    %rdx,%rsi
  432c21:	48 89 c7             	mov    %rax,%rdi
  432c24:	e8 76 05 00 00       	callq  43319f <bool __gnu_cxx::operator!=<x666::LexError*, std::vector<x666::LexError, std::allocator<x666::LexError> > >(__gnu_cxx::__normal_iterator<x666::LexError*, std::vector<x666::LexError, std::allocator<x666::LexError> > > const&, __gnu_cxx::__normal_iterator<x666::LexError*, std::vector<x666::LexError, std::allocator<x666::LexError> > > const&)>
  432c29:	84 c0                	test   %al,%al
  432c2b:	74 3a                	je     432c67 <main+0x205>
  432c2d:	48 8d 85 48 fc ff ff 	lea    -0x3b8(%rbp),%rax
  432c34:	48 89 c7             	mov    %rax,%rdi
  432c37:	e8 c0 05 00 00       	callq  4331fc <__gnu_cxx::__normal_iterator<x666::LexError*, std::vector<x666::LexError, std::allocator<x666::LexError> > >::operator*() const>
  432c3c:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
      le.print(fh);
  432c40:	48 8d 85 b0 fd ff ff 	lea    -0x250(%rbp),%rax
  432c47:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  432c4b:	48 89 c6             	mov    %rax,%rsi
  432c4e:	48 89 d7             	mov    %rdx,%rdi
  432c51:	e8 4e 27 00 00       	callq  4353a4 <x666::LexError::print(std::istream&) const>
    for (const x666::LexError& le : p.errorLog) {
  432c56:	48 8d 85 48 fc ff ff 	lea    -0x3b8(%rbp),%rax
  432c5d:	48 89 c7             	mov    %rax,%rdi
  432c60:	e8 77 05 00 00       	callq  4331dc <__gnu_cxx::__normal_iterator<x666::LexError*, std::vector<x666::LexError, std::allocator<x666::LexError> > >::operator++()>
  432c65:	eb a9                	jmp    432c10 <main+0x1ae>
    }
  }
  return 0;
  432c67:	bb 00 00 00 00       	mov    $0x0,%ebx
  x666::Parser p(&fh);
  432c6c:	48 8d 85 60 fc ff ff 	lea    -0x3a0(%rbp),%rax
  432c73:	48 89 c7             	mov    %rax,%rdi
  432c76:	e8 31 01 00 00       	callq  432dac <x666::Parser::~Parser()>
  std::fstream fh(fname);
  432c7b:	48 8d 85 b0 fd ff ff 	lea    -0x250(%rbp),%rax
  432c82:	48 89 c7             	mov    %rax,%rdi
  432c85:	e8 16 fa ff ff       	callq  4326a0 <std::basic_fstream<char, std::char_traits<char> >::~basic_fstream()@plt>
  432c8a:	89 d8                	mov    %ebx,%eax
  432c8c:	eb 31                	jmp    432cbf <main+0x25d>
  432c8e:	48 89 c3             	mov    %rax,%rbx
  x666::Parser p(&fh);
  432c91:	48 8d 85 60 fc ff ff 	lea    -0x3a0(%rbp),%rax
  432c98:	48 89 c7             	mov    %rax,%rdi
  432c9b:	e8 0c 01 00 00       	callq  432dac <x666::Parser::~Parser()>
  432ca0:	eb 03                	jmp    432ca5 <main+0x243>
  432ca2:	48 89 c3             	mov    %rax,%rbx
  std::fstream fh(fname);
  432ca5:	48 8d 85 b0 fd ff ff 	lea    -0x250(%rbp),%rax
  432cac:	48 89 c7             	mov    %rax,%rdi
  432caf:	e8 ec f9 ff ff       	callq  4326a0 <std::basic_fstream<char, std::char_traits<char> >::~basic_fstream()@plt>
  432cb4:	48 89 d8             	mov    %rbx,%rax
  432cb7:	48 89 c7             	mov    %rax,%rdi
  432cba:	e8 51 fc ff ff       	callq  432910 <_Unwind_Resume@plt>
  432cbf:	48 81 c4 c8 03 00 00 	add    $0x3c8,%rsp
  432cc6:	5b                   	pop    %rbx
  432cc7:	5d                   	pop    %rbp
  432cc8:	c3                   	retq   

0000000000432cc9 <__static_initialization_and_destruction_0(int, int)>:
  432cc9:	55                   	push   %rbp
  432cca:	48 89 e5             	mov    %rsp,%rbp
  432ccd:	48 83 ec 10          	sub    $0x10,%rsp
  432cd1:	89 7d fc             	mov    %edi,-0x4(%rbp)
  432cd4:	89 75 f8             	mov    %esi,-0x8(%rbp)
  432cd7:	83 7d fc 01          	cmpl   $0x1,-0x4(%rbp)
  432cdb:	75 27                	jne    432d04 <__static_initialization_and_destruction_0(int, int)+0x3b>
  432cdd:	81 7d f8 ff ff 00 00 	cmpl   $0xffff,-0x8(%rbp)
  432ce4:	75 1e                	jne    432d04 <__static_initialization_and_destruction_0(int, int)+0x3b>
  extern wostream wclog;	/// Linked to standard error (buffered)
#endif
  //@}

  // For construction of filebuffers for cout, cin, cerr, clog et. al.
  static ios_base::Init __ioinit;
  432ce6:	bf 71 15 65 00       	mov    $0x651571,%edi
  432ceb:	e8 a0 fb ff ff       	callq  432890 <std::ios_base::Init::Init()@plt>
  432cf0:	ba a8 11 65 00       	mov    $0x6511a8,%edx
  432cf5:	be 71 15 65 00       	mov    $0x651571,%esi
  432cfa:	bf 80 29 43 00       	mov    $0x432980,%edi
  432cff:	e8 9c fa ff ff       	callq  4327a0 <__cxa_atexit@plt>
  432d04:	90                   	nop
  432d05:	c9                   	leaveq 
  432d06:	c3                   	retq   

0000000000432d07 <_GLOBAL__sub_I_main>:
  432d07:	55                   	push   %rbp
  432d08:	48 89 e5             	mov    %rsp,%rbp
  432d0b:	be ff ff 00 00       	mov    $0xffff,%esi
  432d10:	bf 01 00 00 00       	mov    $0x1,%edi
  432d15:	e8 af ff ff ff       	callq  432cc9 <__static_initialization_and_destruction_0(int, int)>
  432d1a:	5d                   	pop    %rbp
  432d1b:	c3                   	retq   

0000000000432d1c <std::operator|(std::_Ios_Openmode, std::_Ios_Openmode)>:
  operator&(_Ios_Openmode __a, _Ios_Openmode __b)
  { return _Ios_Openmode(static_cast<int>(__a) & static_cast<int>(__b)); }

  inline _GLIBCXX_CONSTEXPR _Ios_Openmode
  operator|(_Ios_Openmode __a, _Ios_Openmode __b)
  { return _Ios_Openmode(static_cast<int>(__a) | static_cast<int>(__b)); }
  432d1c:	55                   	push   %rbp
  432d1d:	48 89 e5             	mov    %rsp,%rbp
  432d20:	89 7d fc             	mov    %edi,-0x4(%rbp)
  432d23:	89 75 f8             	mov    %esi,-0x8(%rbp)
  432d26:	8b 45 fc             	mov    -0x4(%rbp),%eax
  432d29:	0b 45 f8             	or     -0x8(%rbp),%eax
  432d2c:	5d                   	pop    %rbp
  432d2d:	c3                   	retq   

0000000000432d2e <std::__deque_buf_size(unsigned long)>:
#define _GLIBCXX_DEQUE_BUF_SIZE 512
#endif

  _GLIBCXX_CONSTEXPR inline size_t
  __deque_buf_size(size_t __size)
  { return (__size < _GLIBCXX_DEQUE_BUF_SIZE
  432d2e:	55                   	push   %rbp
  432d2f:	48 89 e5             	mov    %rsp,%rbp
  432d32:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	    ? size_t(_GLIBCXX_DEQUE_BUF_SIZE / __size) : size_t(1)); }
  432d36:	48 81 7d f8 ff 01 00 	cmpq   $0x1ff,-0x8(%rbp)
  432d3d:	00 
  432d3e:	77 10                	ja     432d50 <std::__deque_buf_size(unsigned long)+0x22>
  432d40:	b8 00 02 00 00       	mov    $0x200,%eax
  432d45:	ba 00 00 00 00       	mov    $0x0,%edx
  432d4a:	48 f7 75 f8          	divq   -0x8(%rbp)
  432d4e:	eb 05                	jmp    432d55 <std::__deque_buf_size(unsigned long)+0x27>
  432d50:	b8 01 00 00 00       	mov    $0x1,%eax
  432d55:	5d                   	pop    %rbp
  432d56:	c3                   	retq   
  432d57:	90                   	nop

0000000000432d58 <std::stack<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::deque<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > > >::~stack()>:
   *  which is a typedef for the second Sequence parameter, and @c
   *  push, @c pop, and @c top, which are standard %stack/FILO
   *  operations.
  */
  template<typename _Tp, typename _Sequence = deque<_Tp> >
    class stack
  432d58:	55                   	push   %rbp
  432d59:	48 89 e5             	mov    %rsp,%rbp
  432d5c:	48 83 ec 10          	sub    $0x10,%rsp
  432d60:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  432d64:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  432d68:	48 89 c7             	mov    %rax,%rdi
  432d6b:	e8 38 01 00 00       	callq  432ea8 <std::deque<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > >::~deque()>
  432d70:	90                   	nop
  432d71:	c9                   	leaveq 
  432d72:	c3                   	retq   
  432d73:	90                   	nop

0000000000432d74 <std::stack<x666::LineInfo, std::deque<x666::LineInfo, std::allocator<x666::LineInfo> > >::~stack()>:
  432d74:	55                   	push   %rbp
  432d75:	48 89 e5             	mov    %rsp,%rbp
  432d78:	48 83 ec 10          	sub    $0x10,%rsp
  432d7c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  432d80:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  432d84:	48 89 c7             	mov    %rax,%rdi
  432d87:	e8 8a 01 00 00       	callq  432f16 <std::deque<x666::LineInfo, std::allocator<x666::LineInfo> >::~deque()>
  432d8c:	90                   	nop
  432d8d:	c9                   	leaveq 
  432d8e:	c3                   	retq   
  432d8f:	90                   	nop

0000000000432d90 <std::stack<x666::Parser::BracketEntry, std::deque<x666::Parser::BracketEntry, std::allocator<x666::Parser::BracketEntry> > >::~stack()>:
  432d90:	55                   	push   %rbp
  432d91:	48 89 e5             	mov    %rsp,%rbp
  432d94:	48 83 ec 10          	sub    $0x10,%rsp
  432d98:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  432d9c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  432da0:	48 89 c7             	mov    %rax,%rdi
  432da3:	e8 dc 01 00 00       	callq  432f84 <std::deque<x666::Parser::BracketEntry, std::allocator<x666::Parser::BracketEntry> >::~deque()>
  432da8:	90                   	nop
  432da9:	c9                   	leaveq 
  432daa:	c3                   	retq   
  432dab:	90                   	nop

0000000000432dac <x666::Parser::~Parser()>:
    void trace() const override;
  };
  /**
   * A parser object.
   */
  class Parser {
  432dac:	55                   	push   %rbp
  432dad:	48 89 e5             	mov    %rsp,%rbp
  432db0:	48 83 ec 10          	sub    $0x10,%rsp
  432db4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  432db8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  432dbc:	48 05 08 01 00 00    	add    $0x108,%rax
  432dc2:	48 89 c7             	mov    %rax,%rdi
  432dc5:	e8 28 02 00 00       	callq  432ff2 <std::vector<x666::LexError, std::allocator<x666::LexError> >::~vector()>
  432dca:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  432dce:	48 05 b8 00 00 00    	add    $0xb8,%rax
  432dd4:	48 89 c7             	mov    %rax,%rdi
  432dd7:	e8 b4 ff ff ff       	callq  432d90 <std::stack<x666::Parser::BracketEntry, std::deque<x666::Parser::BracketEntry, std::allocator<x666::Parser::BracketEntry> > >::~stack()>
  432ddc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  432de0:	48 83 c0 68          	add    $0x68,%rax
  432de4:	48 89 c7             	mov    %rax,%rdi
  432de7:	e8 88 ff ff ff       	callq  432d74 <std::stack<x666::LineInfo, std::deque<x666::LineInfo, std::allocator<x666::LineInfo> > >::~stack()>
  432dec:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  432df0:	48 83 c0 18          	add    $0x18,%rax
  432df4:	48 89 c7             	mov    %rax,%rdi
  432df7:	e8 5c ff ff ff       	callq  432d58 <std::stack<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::deque<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > > >::~stack()>
  432dfc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  432e00:	48 89 c7             	mov    %rax,%rdi
  432e03:	e8 5c 00 00 00       	callq  432e64 <std::vector<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > >::~vector()>
  432e08:	90                   	nop
  432e09:	c9                   	leaveq 
  432e0a:	c3                   	retq   
  432e0b:	90                   	nop

0000000000432e0c <std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >::~unique_ptr()>:
	unique_ptr(auto_ptr<_Up>&& __u) noexcept;
#pragma GCC diagnostic pop
#endif

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
  432e0c:	55                   	push   %rbp
  432e0d:	48 89 e5             	mov    %rsp,%rbp
  432e10:	48 83 ec 20          	sub    $0x20,%rsp
  432e14:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
      {
	auto& __ptr = _M_t._M_ptr();
  432e18:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  432e1c:	48 89 c7             	mov    %rax,%rdi
  432e1f:	e8 04 04 00 00       	callq  433228 <std::__uniq_ptr_impl<x666::Expression, std::default_delete<x666::Expression> >::_M_ptr()>
  432e24:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	if (__ptr != nullptr)
  432e28:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  432e2c:	48 8b 00             	mov    (%rax),%rax
  432e2f:	48 85 c0             	test   %rax,%rax
  432e32:	74 21                	je     432e55 <std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >::~unique_ptr()+0x49>
	  get_deleter()(__ptr);
  432e34:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  432e38:	48 89 c7             	mov    %rax,%rdi
  432e3b:	e8 ce 03 00 00       	callq  43320e <std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >::get_deleter()>
  432e40:	48 89 c2             	mov    %rax,%rdx
  432e43:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  432e47:	48 8b 00             	mov    (%rax),%rax
  432e4a:	48 89 c6             	mov    %rax,%rsi
  432e4d:	48 89 d7             	mov    %rdx,%rdi
  432e50:	e8 ed 03 00 00       	callq  433242 <std::default_delete<x666::Expression>::operator()(x666::Expression*) const>
	__ptr = pointer();
  432e55:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  432e59:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
      }
  432e60:	90                   	nop
  432e61:	c9                   	leaveq 
  432e62:	c3                   	retq   
  432e63:	90                   	nop

0000000000432e64 <std::vector<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > >::~vector()>:
       *  The dtor only erases the elements, and note that if the
       *  elements themselves are pointers, the pointed-to memory is
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */
      ~vector() _GLIBCXX_NOEXCEPT
  432e64:	55                   	push   %rbp
  432e65:	48 89 e5             	mov    %rsp,%rbp
  432e68:	48 83 ec 10          	sub    $0x10,%rsp
  432e6c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      {
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
		      _M_get_Tp_allocator());
  432e70:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  432e74:	48 89 c7             	mov    %rax,%rdi
  432e77:	e8 64 04 00 00       	callq  4332e0 <std::_Vector_base<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > >::_M_get_Tp_allocator()>
  432e7c:	48 89 c2             	mov    %rax,%rdx
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
  432e7f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  432e83:	48 8b 48 08          	mov    0x8(%rax),%rcx
  432e87:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  432e8b:	48 8b 00             	mov    (%rax),%rax
  432e8e:	48 89 ce             	mov    %rcx,%rsi
  432e91:	48 89 c7             	mov    %rax,%rdi
  432e94:	e8 55 04 00 00       	callq  4332ee <void std::_Destroy<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > >(std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*, std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > >&)>
	_GLIBCXX_ASAN_ANNOTATE_BEFORE_DEALLOC;
      }
  432e99:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  432e9d:	48 89 c7             	mov    %rax,%rdi
  432ea0:	e8 eb 03 00 00       	callq  433290 <std::_Vector_base<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > >::~_Vector_base()>
  432ea5:	90                   	nop
  432ea6:	c9                   	leaveq 
  432ea7:	c3                   	retq   

0000000000432ea8 <std::deque<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > >::~deque()>:
      /**
       *  The dtor only erases the elements, and note that if the elements
       *  themselves are pointers, the pointed-to memory is not touched in any
       *  way.  Managing the pointer is the user's responsibility.
       */
      ~deque()
  432ea8:	55                   	push   %rbp
  432ea9:	48 89 e5             	mov    %rsp,%rbp
  432eac:	53                   	push   %rbx
  432ead:	48 83 ec 58          	sub    $0x58,%rsp
  432eb1:	48 89 7d a8          	mov    %rdi,-0x58(%rbp)
      { _M_destroy_data(begin(), end(), _M_get_Tp_allocator()); }
  432eb5:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  432eb9:	48 89 c7             	mov    %rax,%rdi
  432ebc:	e8 37 05 00 00       	callq  4333f8 <std::_Deque_base<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > >::_M_get_Tp_allocator()>
  432ec1:	48 89 c3             	mov    %rax,%rbx
  432ec4:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
  432ec8:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  432ecc:	48 89 d6             	mov    %rdx,%rsi
  432ecf:	48 89 c7             	mov    %rax,%rdi
  432ed2:	e8 f3 04 00 00       	callq  4333ca <std::deque<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > >::end()>
  432ed7:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  432edb:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  432edf:	48 89 d6             	mov    %rdx,%rsi
  432ee2:	48 89 c7             	mov    %rax,%rdi
  432ee5:	e8 b2 04 00 00       	callq  43339c <std::deque<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > >::begin()>
  432eea:	48 8d 55 b0          	lea    -0x50(%rbp),%rdx
  432eee:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  432ef2:	48 8b 7d a8          	mov    -0x58(%rbp),%rdi
  432ef6:	48 89 d9             	mov    %rbx,%rcx
  432ef9:	48 89 c6             	mov    %rax,%rsi
  432efc:	e8 05 05 00 00       	callq  433406 <std::deque<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > >::_M_destroy_data(std::_Deque_iterator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*>, std::_Deque_iterator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*>, std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > const&)>
  432f01:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  432f05:	48 89 c7             	mov    %rax,%rdi
  432f08:	e8 27 04 00 00       	callq  433334 <std::_Deque_base<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > >::~_Deque_base()>
  432f0d:	90                   	nop
  432f0e:	48 83 c4 58          	add    $0x58,%rsp
  432f12:	5b                   	pop    %rbx
  432f13:	5d                   	pop    %rbp
  432f14:	c3                   	retq   
  432f15:	90                   	nop

0000000000432f16 <std::deque<x666::LineInfo, std::allocator<x666::LineInfo> >::~deque()>:
      ~deque()
  432f16:	55                   	push   %rbp
  432f17:	48 89 e5             	mov    %rsp,%rbp
  432f1a:	53                   	push   %rbx
  432f1b:	48 83 ec 58          	sub    $0x58,%rsp
  432f1f:	48 89 7d a8          	mov    %rdi,-0x58(%rbp)
      { _M_destroy_data(begin(), end(), _M_get_Tp_allocator()); }
  432f23:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  432f27:	48 89 c7             	mov    %rax,%rdi
  432f2a:	e8 0f 06 00 00       	callq  43353e <std::_Deque_base<x666::LineInfo, std::allocator<x666::LineInfo> >::_M_get_Tp_allocator()>
  432f2f:	48 89 c3             	mov    %rax,%rbx
  432f32:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
  432f36:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  432f3a:	48 89 d6             	mov    %rdx,%rsi
  432f3d:	48 89 c7             	mov    %rax,%rdi
  432f40:	e8 cb 05 00 00       	callq  433510 <std::deque<x666::LineInfo, std::allocator<x666::LineInfo> >::end()>
  432f45:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  432f49:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  432f4d:	48 89 d6             	mov    %rdx,%rsi
  432f50:	48 89 c7             	mov    %rax,%rdi
  432f53:	e8 8a 05 00 00       	callq  4334e2 <std::deque<x666::LineInfo, std::allocator<x666::LineInfo> >::begin()>
  432f58:	48 8d 55 b0          	lea    -0x50(%rbp),%rdx
  432f5c:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  432f60:	48 8b 7d a8          	mov    -0x58(%rbp),%rdi
  432f64:	48 89 d9             	mov    %rbx,%rcx
  432f67:	48 89 c6             	mov    %rax,%rsi
  432f6a:	e8 dd 05 00 00       	callq  43354c <std::deque<x666::LineInfo, std::allocator<x666::LineInfo> >::_M_destroy_data(std::_Deque_iterator<x666::LineInfo, x666::LineInfo&, x666::LineInfo*>, std::_Deque_iterator<x666::LineInfo, x666::LineInfo&, x666::LineInfo*>, std::allocator<x666::LineInfo> const&)>
  432f6f:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  432f73:	48 89 c7             	mov    %rax,%rdi
  432f76:	e8 ff 04 00 00       	callq  43347a <std::_Deque_base<x666::LineInfo, std::allocator<x666::LineInfo> >::~_Deque_base()>
  432f7b:	90                   	nop
  432f7c:	48 83 c4 58          	add    $0x58,%rsp
  432f80:	5b                   	pop    %rbx
  432f81:	5d                   	pop    %rbp
  432f82:	c3                   	retq   
  432f83:	90                   	nop

0000000000432f84 <std::deque<x666::Parser::BracketEntry, std::allocator<x666::Parser::BracketEntry> >::~deque()>:
      ~deque()
  432f84:	55                   	push   %rbp
  432f85:	48 89 e5             	mov    %rsp,%rbp
  432f88:	53                   	push   %rbx
  432f89:	48 83 ec 58          	sub    $0x58,%rsp
  432f8d:	48 89 7d a8          	mov    %rdi,-0x58(%rbp)
      { _M_destroy_data(begin(), end(), _M_get_Tp_allocator()); }
  432f91:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  432f95:	48 89 c7             	mov    %rax,%rdi
  432f98:	e8 a7 06 00 00       	callq  433644 <std::_Deque_base<x666::Parser::BracketEntry, std::allocator<x666::Parser::BracketEntry> >::_M_get_Tp_allocator()>
  432f9d:	48 89 c3             	mov    %rax,%rbx
  432fa0:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
  432fa4:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  432fa8:	48 89 d6             	mov    %rdx,%rsi
  432fab:	48 89 c7             	mov    %rax,%rdi
  432fae:	e8 63 06 00 00       	callq  433616 <std::deque<x666::Parser::BracketEntry, std::allocator<x666::Parser::BracketEntry> >::end()>
  432fb3:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  432fb7:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  432fbb:	48 89 d6             	mov    %rdx,%rsi
  432fbe:	48 89 c7             	mov    %rax,%rdi
  432fc1:	e8 22 06 00 00       	callq  4335e8 <std::deque<x666::Parser::BracketEntry, std::allocator<x666::Parser::BracketEntry> >::begin()>
  432fc6:	48 8d 55 b0          	lea    -0x50(%rbp),%rdx
  432fca:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  432fce:	48 8b 7d a8          	mov    -0x58(%rbp),%rdi
  432fd2:	48 89 d9             	mov    %rbx,%rcx
  432fd5:	48 89 c6             	mov    %rax,%rsi
  432fd8:	e8 75 06 00 00       	callq  433652 <std::deque<x666::Parser::BracketEntry, std::allocator<x666::Parser::BracketEntry> >::_M_destroy_data(std::_Deque_iterator<x666::Parser::BracketEntry, x666::Parser::BracketEntry&, x666::Parser::BracketEntry*>, std::_Deque_iterator<x666::Parser::BracketEntry, x666::Parser::BracketEntry&, x666::Parser::BracketEntry*>, std::allocator<x666::Parser::BracketEntry> const&)>
  432fdd:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  432fe1:	48 89 c7             	mov    %rax,%rdi
  432fe4:	e8 97 05 00 00       	callq  433580 <std::_Deque_base<x666::Parser::BracketEntry, std::allocator<x666::Parser::BracketEntry> >::~_Deque_base()>
  432fe9:	90                   	nop
  432fea:	48 83 c4 58          	add    $0x58,%rsp
  432fee:	5b                   	pop    %rbx
  432fef:	5d                   	pop    %rbp
  432ff0:	c3                   	retq   
  432ff1:	90                   	nop

0000000000432ff2 <std::vector<x666::LexError, std::allocator<x666::LexError> >::~vector()>:
      ~vector() _GLIBCXX_NOEXCEPT
  432ff2:	55                   	push   %rbp
  432ff3:	48 89 e5             	mov    %rsp,%rbp
  432ff6:	48 83 ec 10          	sub    $0x10,%rsp
  432ffa:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
		      _M_get_Tp_allocator());
  432ffe:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  433002:	48 89 c7             	mov    %rax,%rdi
  433005:	e8 de 06 00 00       	callq  4336e8 <std::_Vector_base<x666::LexError, std::allocator<x666::LexError> >::_M_get_Tp_allocator()>
  43300a:	48 89 c2             	mov    %rax,%rdx
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
  43300d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  433011:	48 8b 48 08          	mov    0x8(%rax),%rcx
  433015:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  433019:	48 8b 00             	mov    (%rax),%rax
  43301c:	48 89 ce             	mov    %rcx,%rsi
  43301f:	48 89 c7             	mov    %rax,%rdi
  433022:	e8 cf 06 00 00       	callq  4336f6 <void std::_Destroy<x666::LexError*, x666::LexError>(x666::LexError*, x666::LexError*, std::allocator<x666::LexError>&)>
      }
  433027:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43302b:	48 89 c7             	mov    %rax,%rdi
  43302e:	e8 53 06 00 00       	callq  433686 <std::_Vector_base<x666::LexError, std::allocator<x666::LexError> >::~_Vector_base()>
  433033:	90                   	nop
  433034:	c9                   	leaveq 
  433035:	c3                   	retq   

0000000000433036 <std::vector<x666::LexError, std::allocator<x666::LexError> >::empty() const>:
      /**
       *  Returns true if the %vector is empty.  (Thus begin() would
       *  equal end().)
       */
      bool
      empty() const _GLIBCXX_NOEXCEPT
  433036:	55                   	push   %rbp
  433037:	48 89 e5             	mov    %rsp,%rbp
  43303a:	48 83 ec 20          	sub    $0x20,%rsp
  43303e:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
      { return begin() == end(); }
  433042:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  433046:	48 89 c7             	mov    %rax,%rdi
  433049:	e8 02 07 00 00       	callq  433750 <std::vector<x666::LexError, std::allocator<x666::LexError> >::end() const>
  43304e:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  433052:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  433056:	48 89 c7             	mov    %rax,%rdi
  433059:	e8 c2 06 00 00       	callq  433720 <std::vector<x666::LexError, std::allocator<x666::LexError> >::begin() const>
  43305e:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  433062:	48 8d 55 f0          	lea    -0x10(%rbp),%rdx
  433066:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
  43306a:	48 89 d6             	mov    %rdx,%rsi
  43306d:	48 89 c7             	mov    %rax,%rdi
  433070:	e8 0c 07 00 00       	callq  433781 <bool __gnu_cxx::operator==<x666::LexError const*, std::vector<x666::LexError, std::allocator<x666::LexError> > >(__gnu_cxx::__normal_iterator<x666::LexError const*, std::vector<x666::LexError, std::allocator<x666::LexError> > > const&, __gnu_cxx::__normal_iterator<x666::LexError const*, std::vector<x666::LexError, std::allocator<x666::LexError> > > const&)>
  433075:	c9                   	leaveq 
  433076:	c3                   	retq   
  433077:	90                   	nop

0000000000433078 <std::vector<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > >::begin()>:
      begin() _GLIBCXX_NOEXCEPT
  433078:	55                   	push   %rbp
  433079:	48 89 e5             	mov    %rsp,%rbp
  43307c:	48 83 ec 20          	sub    $0x20,%rsp
  433080:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
      { return iterator(this->_M_impl._M_start); }
  433084:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  433088:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
  43308c:	48 89 d6             	mov    %rdx,%rsi
  43308f:	48 89 c7             	mov    %rax,%rdi
  433092:	e8 27 07 00 00       	callq  4337be <__gnu_cxx::__normal_iterator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*, std::vector<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > > >::__normal_iterator(std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >* const&)>
  433097:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43309b:	c9                   	leaveq 
  43309c:	c3                   	retq   
  43309d:	90                   	nop

000000000043309e <std::vector<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > >::end()>:
      end() _GLIBCXX_NOEXCEPT
  43309e:	55                   	push   %rbp
  43309f:	48 89 e5             	mov    %rsp,%rbp
  4330a2:	48 83 ec 20          	sub    $0x20,%rsp
  4330a6:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
      { return iterator(this->_M_impl._M_finish); }
  4330aa:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4330ae:	48 8d 50 08          	lea    0x8(%rax),%rdx
  4330b2:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
  4330b6:	48 89 d6             	mov    %rdx,%rsi
  4330b9:	48 89 c7             	mov    %rax,%rdi
  4330bc:	e8 fd 06 00 00       	callq  4337be <__gnu_cxx::__normal_iterator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*, std::vector<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > > >::__normal_iterator(std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >* const&)>
  4330c1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4330c5:	c9                   	leaveq 
  4330c6:	c3                   	retq   

00000000004330c7 <bool __gnu_cxx::operator!=<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*, std::vector<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > > >(__gnu_cxx::__normal_iterator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*, std::vector<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > > > const&, __gnu_cxx::__normal_iterator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*, std::vector<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > > > const&)>:
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() != __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline bool
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
  4330c7:	55                   	push   %rbp
  4330c8:	48 89 e5             	mov    %rsp,%rbp
  4330cb:	53                   	push   %rbx
  4330cc:	48 83 ec 18          	sub    $0x18,%rsp
  4330d0:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  4330d4:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	       const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() != __rhs.base(); }
  4330d8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4330dc:	48 89 c7             	mov    %rax,%rdi
  4330df:	e8 f8 06 00 00       	callq  4337dc <__gnu_cxx::__normal_iterator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*, std::vector<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > > >::base() const>
  4330e4:	48 8b 18             	mov    (%rax),%rbx
  4330e7:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4330eb:	48 89 c7             	mov    %rax,%rdi
  4330ee:	e8 e9 06 00 00       	callq  4337dc <__gnu_cxx::__normal_iterator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*, std::vector<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > > >::base() const>
  4330f3:	48 8b 00             	mov    (%rax),%rax
  4330f6:	48 39 c3             	cmp    %rax,%rbx
  4330f9:	0f 95 c0             	setne  %al
  4330fc:	48 83 c4 18          	add    $0x18,%rsp
  433100:	5b                   	pop    %rbx
  433101:	5d                   	pop    %rbp
  433102:	c3                   	retq   
  433103:	90                   	nop

0000000000433104 <__gnu_cxx::__normal_iterator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*, std::vector<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > > >::operator++()>:
      operator++() _GLIBCXX_NOEXCEPT
  433104:	55                   	push   %rbp
  433105:	48 89 e5             	mov    %rsp,%rbp
  433108:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	++_M_current;
  43310c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  433110:	48 8b 00             	mov    (%rax),%rax
  433113:	48 8d 50 08          	lea    0x8(%rax),%rdx
  433117:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43311b:	48 89 10             	mov    %rdx,(%rax)
	return *this;
  43311e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
      }
  433122:	5d                   	pop    %rbp
  433123:	c3                   	retq   

0000000000433124 <__gnu_cxx::__normal_iterator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*, std::vector<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > > >::operator*() const>:
      operator*() const _GLIBCXX_NOEXCEPT
  433124:	55                   	push   %rbp
  433125:	48 89 e5             	mov    %rsp,%rbp
  433128:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return *_M_current; }
  43312c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  433130:	48 8b 00             	mov    (%rax),%rax
  433133:	5d                   	pop    %rbp
  433134:	c3                   	retq   
  433135:	90                   	nop

0000000000433136 <std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >::operator->() const>:
	return *get();
      }

      /// Return the stored pointer.
      pointer
      operator->() const noexcept
  433136:	55                   	push   %rbp
  433137:	48 89 e5             	mov    %rsp,%rbp
  43313a:	48 83 ec 10          	sub    $0x10,%rsp
  43313e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      {
	_GLIBCXX_DEBUG_PEDASSERT(get() != pointer());
	return get();
  433142:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  433146:	48 89 c7             	mov    %rax,%rdi
  433149:	e8 9c 06 00 00       	callq  4337ea <std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >::get() const>
      }
  43314e:	c9                   	leaveq 
  43314f:	c3                   	retq   

0000000000433150 <std::vector<x666::LexError, std::allocator<x666::LexError> >::begin()>:
      begin() _GLIBCXX_NOEXCEPT
  433150:	55                   	push   %rbp
  433151:	48 89 e5             	mov    %rsp,%rbp
  433154:	48 83 ec 20          	sub    $0x20,%rsp
  433158:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
      { return iterator(this->_M_impl._M_start); }
  43315c:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  433160:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
  433164:	48 89 d6             	mov    %rdx,%rsi
  433167:	48 89 c7             	mov    %rax,%rdi
  43316a:	e8 95 06 00 00       	callq  433804 <__gnu_cxx::__normal_iterator<x666::LexError*, std::vector<x666::LexError, std::allocator<x666::LexError> > >::__normal_iterator(x666::LexError* const&)>
  43316f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  433173:	c9                   	leaveq 
  433174:	c3                   	retq   
  433175:	90                   	nop

0000000000433176 <std::vector<x666::LexError, std::allocator<x666::LexError> >::end()>:
      end() _GLIBCXX_NOEXCEPT
  433176:	55                   	push   %rbp
  433177:	48 89 e5             	mov    %rsp,%rbp
  43317a:	48 83 ec 20          	sub    $0x20,%rsp
  43317e:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
      { return iterator(this->_M_impl._M_finish); }
  433182:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  433186:	48 8d 50 08          	lea    0x8(%rax),%rdx
  43318a:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
  43318e:	48 89 d6             	mov    %rdx,%rsi
  433191:	48 89 c7             	mov    %rax,%rdi
  433194:	e8 6b 06 00 00       	callq  433804 <__gnu_cxx::__normal_iterator<x666::LexError*, std::vector<x666::LexError, std::allocator<x666::LexError> > >::__normal_iterator(x666::LexError* const&)>
  433199:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43319d:	c9                   	leaveq 
  43319e:	c3                   	retq   

000000000043319f <bool __gnu_cxx::operator!=<x666::LexError*, std::vector<x666::LexError, std::allocator<x666::LexError> > >(__gnu_cxx::__normal_iterator<x666::LexError*, std::vector<x666::LexError, std::allocator<x666::LexError> > > const&, __gnu_cxx::__normal_iterator<x666::LexError*, std::vector<x666::LexError, std::allocator<x666::LexError> > > const&)>:
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
  43319f:	55                   	push   %rbp
  4331a0:	48 89 e5             	mov    %rsp,%rbp
  4331a3:	53                   	push   %rbx
  4331a4:	48 83 ec 18          	sub    $0x18,%rsp
  4331a8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  4331ac:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    { return __lhs.base() != __rhs.base(); }
  4331b0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4331b4:	48 89 c7             	mov    %rax,%rdi
  4331b7:	e8 66 06 00 00       	callq  433822 <__gnu_cxx::__normal_iterator<x666::LexError*, std::vector<x666::LexError, std::allocator<x666::LexError> > >::base() const>
  4331bc:	48 8b 18             	mov    (%rax),%rbx
  4331bf:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4331c3:	48 89 c7             	mov    %rax,%rdi
  4331c6:	e8 57 06 00 00       	callq  433822 <__gnu_cxx::__normal_iterator<x666::LexError*, std::vector<x666::LexError, std::allocator<x666::LexError> > >::base() const>
  4331cb:	48 8b 00             	mov    (%rax),%rax
  4331ce:	48 39 c3             	cmp    %rax,%rbx
  4331d1:	0f 95 c0             	setne  %al
  4331d4:	48 83 c4 18          	add    $0x18,%rsp
  4331d8:	5b                   	pop    %rbx
  4331d9:	5d                   	pop    %rbp
  4331da:	c3                   	retq   
  4331db:	90                   	nop

00000000004331dc <__gnu_cxx::__normal_iterator<x666::LexError*, std::vector<x666::LexError, std::allocator<x666::LexError> > >::operator++()>:
      operator++() _GLIBCXX_NOEXCEPT
  4331dc:	55                   	push   %rbp
  4331dd:	48 89 e5             	mov    %rsp,%rbp
  4331e0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	++_M_current;
  4331e4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4331e8:	48 8b 00             	mov    (%rax),%rax
  4331eb:	48 8d 50 28          	lea    0x28(%rax),%rdx
  4331ef:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4331f3:	48 89 10             	mov    %rdx,(%rax)
	return *this;
  4331f6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
      }
  4331fa:	5d                   	pop    %rbp
  4331fb:	c3                   	retq   

00000000004331fc <__gnu_cxx::__normal_iterator<x666::LexError*, std::vector<x666::LexError, std::allocator<x666::LexError> > >::operator*() const>:
      operator*() const _GLIBCXX_NOEXCEPT
  4331fc:	55                   	push   %rbp
  4331fd:	48 89 e5             	mov    %rsp,%rbp
  433200:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return *_M_current; }
  433204:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  433208:	48 8b 00             	mov    (%rax),%rax
  43320b:	5d                   	pop    %rbp
  43320c:	c3                   	retq   
  43320d:	90                   	nop

000000000043320e <std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >::get_deleter()>:
      get() const noexcept
      { return _M_t._M_ptr(); }

      /// Return a reference to the stored deleter.
      deleter_type&
      get_deleter() noexcept
  43320e:	55                   	push   %rbp
  43320f:	48 89 e5             	mov    %rsp,%rbp
  433212:	48 83 ec 10          	sub    $0x10,%rsp
  433216:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_t._M_deleter(); }
  43321a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43321e:	48 89 c7             	mov    %rax,%rdi
  433221:	e8 0a 06 00 00       	callq  433830 <std::__uniq_ptr_impl<x666::Expression, std::default_delete<x666::Expression> >::_M_deleter()>
  433226:	c9                   	leaveq 
  433227:	c3                   	retq   

0000000000433228 <std::__uniq_ptr_impl<x666::Expression, std::default_delete<x666::Expression> >::_M_ptr()>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
  433228:	55                   	push   %rbp
  433229:	48 89 e5             	mov    %rsp,%rbp
  43322c:	48 83 ec 10          	sub    $0x10,%rsp
  433230:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  433234:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  433238:	48 89 c7             	mov    %rax,%rdi
  43323b:	e8 0a 06 00 00       	callq  43384a <std::tuple_element<0ul, std::tuple<x666::Expression*, std::default_delete<x666::Expression> > >::type& std::get<0ul, x666::Expression*, std::default_delete<x666::Expression> >(std::tuple<x666::Expression*, std::default_delete<x666::Expression> >&)>
  433240:	c9                   	leaveq 
  433241:	c3                   	retq   

0000000000433242 <std::default_delete<x666::Expression>::operator()(x666::Expression*) const>:
      operator()(_Tp* __ptr) const
  433242:	55                   	push   %rbp
  433243:	48 89 e5             	mov    %rsp,%rbp
  433246:	48 83 ec 10          	sub    $0x10,%rsp
  43324a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  43324e:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	delete __ptr;
  433252:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
  433257:	74 17                	je     433270 <std::default_delete<x666::Expression>::operator()(x666::Expression*) const+0x2e>
  433259:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  43325d:	48 8b 00             	mov    (%rax),%rax
  433260:	48 83 c0 08          	add    $0x8,%rax
  433264:	48 8b 00             	mov    (%rax),%rax
  433267:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  43326b:	48 89 d7             	mov    %rdx,%rdi
  43326e:	ff d0                	callq  *%rax
      }
  433270:	90                   	nop
  433271:	c9                   	leaveq 
  433272:	c3                   	retq   
  433273:	90                   	nop

0000000000433274 <std::_Vector_base<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > >::_Vector_impl::~_Vector_impl()>:
      struct _Vector_impl
  433274:	55                   	push   %rbp
  433275:	48 89 e5             	mov    %rsp,%rbp
  433278:	48 83 ec 10          	sub    $0x10,%rsp
  43327c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  433280:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  433284:	48 89 c7             	mov    %rax,%rdi
  433287:	e8 d8 05 00 00       	callq  433864 <std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > >::~allocator()>
  43328c:	90                   	nop
  43328d:	c9                   	leaveq 
  43328e:	c3                   	retq   
  43328f:	90                   	nop

0000000000433290 <std::_Vector_base<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > >::~_Vector_base()>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
  433290:	55                   	push   %rbp
  433291:	48 89 e5             	mov    %rsp,%rbp
  433294:	48 83 ec 10          	sub    $0x10,%rsp
  433298:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
		      _M_impl._M_end_of_storage - _M_impl._M_start);
  43329c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4332a0:	48 8b 40 10          	mov    0x10(%rax),%rax
  4332a4:	48 89 c2             	mov    %rax,%rdx
  4332a7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4332ab:	48 8b 00             	mov    (%rax),%rax
  4332ae:	48 29 c2             	sub    %rax,%rdx
  4332b1:	48 89 d0             	mov    %rdx,%rax
  4332b4:	48 c1 f8 03          	sar    $0x3,%rax
	_M_deallocate(_M_impl._M_start,
  4332b8:	48 89 c2             	mov    %rax,%rdx
  4332bb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4332bf:	48 8b 08             	mov    (%rax),%rcx
  4332c2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4332c6:	48 89 ce             	mov    %rcx,%rsi
  4332c9:	48 89 c7             	mov    %rax,%rdi
  4332cc:	e8 af 05 00 00       	callq  433880 <std::_Vector_base<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > >::_M_deallocate(std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*, unsigned long)>
      }
  4332d1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4332d5:	48 89 c7             	mov    %rax,%rdi
  4332d8:	e8 97 ff ff ff       	callq  433274 <std::_Vector_base<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > >::_Vector_impl::~_Vector_impl()>
  4332dd:	90                   	nop
  4332de:	c9                   	leaveq 
  4332df:	c3                   	retq   

00000000004332e0 <std::_Vector_base<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > >::_M_get_Tp_allocator()>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
  4332e0:	55                   	push   %rbp
  4332e1:	48 89 e5             	mov    %rsp,%rbp
  4332e4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return *static_cast<_Tp_alloc_type*>(&this->_M_impl); }
  4332e8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4332ec:	5d                   	pop    %rbp
  4332ed:	c3                   	retq   

00000000004332ee <void std::_Destroy<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > >(std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*, std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > >&)>:
	__traits::destroy(__alloc, std::__addressof(*__first));
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
  4332ee:	55                   	push   %rbp
  4332ef:	48 89 e5             	mov    %rsp,%rbp
  4332f2:	48 83 ec 20          	sub    $0x20,%rsp
  4332f6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4332fa:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  4332fe:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
  433302:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  433306:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43330a:	48 89 d6             	mov    %rdx,%rsi
  43330d:	48 89 c7             	mov    %rax,%rdi
  433310:	e8 a0 05 00 00       	callq  4338b5 <void std::_Destroy<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*>(std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*)>
    }
  433315:	90                   	nop
  433316:	c9                   	leaveq 
  433317:	c3                   	retq   

0000000000433318 <std::_Deque_base<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > >::_Deque_impl::~_Deque_impl()>:
      struct _Deque_impl
  433318:	55                   	push   %rbp
  433319:	48 89 e5             	mov    %rsp,%rbp
  43331c:	48 83 ec 10          	sub    $0x10,%rsp
  433320:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  433324:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  433328:	48 89 c7             	mov    %rax,%rdi
  43332b:	e8 34 05 00 00       	callq  433864 <std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > >::~allocator()>
  433330:	90                   	nop
  433331:	c9                   	leaveq 
  433332:	c3                   	retq   
  433333:	90                   	nop

0000000000433334 <std::_Deque_base<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > >::~_Deque_base()>:
    _Deque_base<_Tp, _Alloc>::
  433334:	55                   	push   %rbp
  433335:	48 89 e5             	mov    %rsp,%rbp
  433338:	48 83 ec 10          	sub    $0x10,%rsp
  43333c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      if (this->_M_impl._M_map)
  433340:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  433344:	48 8b 00             	mov    (%rax),%rax
  433347:	48 85 c0             	test   %rax,%rax
  43334a:	74 41                	je     43338d <std::_Deque_base<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > >::~_Deque_base()+0x59>
			   this->_M_impl._M_finish._M_node + 1);
  43334c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  433350:	48 8b 40 48          	mov    0x48(%rax),%rax
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
  433354:	48 8d 50 08          	lea    0x8(%rax),%rdx
  433358:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43335c:	48 8b 48 28          	mov    0x28(%rax),%rcx
  433360:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  433364:	48 89 ce             	mov    %rcx,%rsi
  433367:	48 89 c7             	mov    %rax,%rdi
  43336a:	e8 6d 05 00 00       	callq  4338dc <std::_Deque_base<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > >::_M_destroy_nodes(std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >**, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >**)>
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
  43336f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  433373:	48 8b 50 08          	mov    0x8(%rax),%rdx
  433377:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43337b:	48 8b 08             	mov    (%rax),%rcx
  43337e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  433382:	48 89 ce             	mov    %rcx,%rsi
  433385:	48 89 c7             	mov    %rax,%rdi
  433388:	e8 95 05 00 00       	callq  433922 <std::_Deque_base<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > >::_M_deallocate_map(std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >**, unsigned long)>
    }
  43338d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  433391:	48 89 c7             	mov    %rax,%rdi
  433394:	e8 7f ff ff ff       	callq  433318 <std::_Deque_base<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > >::_Deque_impl::~_Deque_impl()>
  433399:	90                   	nop
  43339a:	c9                   	leaveq 
  43339b:	c3                   	retq   

000000000043339c <std::deque<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > >::begin()>:
      /**
       *  Returns a read/write iterator that points to the first element in the
       *  %deque.  Iteration is done in ordinary element order.
       */
      iterator
      begin() _GLIBCXX_NOEXCEPT
  43339c:	55                   	push   %rbp
  43339d:	48 89 e5             	mov    %rsp,%rbp
  4333a0:	48 83 ec 10          	sub    $0x10,%rsp
  4333a4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4333a8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      { return this->_M_impl._M_start; }
  4333ac:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4333b0:	48 8d 50 10          	lea    0x10(%rax),%rdx
  4333b4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4333b8:	48 89 d6             	mov    %rdx,%rsi
  4333bb:	48 89 c7             	mov    %rax,%rdi
  4333be:	e8 ad 05 00 00       	callq  433970 <std::_Deque_iterator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*>::_Deque_iterator(std::_Deque_iterator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*> const&)>
  4333c3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4333c7:	c9                   	leaveq 
  4333c8:	c3                   	retq   
  4333c9:	90                   	nop

00000000004333ca <std::deque<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > >::end()>:
       *  Returns a read/write iterator that points one past the last
       *  element in the %deque.  Iteration is done in ordinary
       *  element order.
       */
      iterator
      end() _GLIBCXX_NOEXCEPT
  4333ca:	55                   	push   %rbp
  4333cb:	48 89 e5             	mov    %rsp,%rbp
  4333ce:	48 83 ec 10          	sub    $0x10,%rsp
  4333d2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4333d6:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      { return this->_M_impl._M_finish; }
  4333da:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4333de:	48 8d 50 30          	lea    0x30(%rax),%rdx
  4333e2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4333e6:	48 89 d6             	mov    %rdx,%rsi
  4333e9:	48 89 c7             	mov    %rax,%rdi
  4333ec:	e8 7f 05 00 00       	callq  433970 <std::_Deque_iterator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*>::_Deque_iterator(std::_Deque_iterator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*> const&)>
  4333f1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4333f5:	c9                   	leaveq 
  4333f6:	c3                   	retq   
  4333f7:	90                   	nop

00000000004333f8 <std::_Deque_base<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > >::_M_get_Tp_allocator()>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
  4333f8:	55                   	push   %rbp
  4333f9:	48 89 e5             	mov    %rsp,%rbp
  4333fc:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return *static_cast<_Tp_alloc_type*>(&this->_M_impl); }
  433400:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  433404:	5d                   	pop    %rbp
  433405:	c3                   	retq   

0000000000433406 <std::deque<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > >::_M_destroy_data(std::_Deque_iterator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*>, std::_Deque_iterator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*>, std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > const&)>:
	void
	_M_destroy_data(iterator __first, iterator __last, const _Alloc1&)
	{ _M_destroy_data_aux(__first, __last); }

      void
      _M_destroy_data(iterator __first, iterator __last,
  433406:	55                   	push   %rbp
  433407:	48 89 e5             	mov    %rsp,%rbp
  43340a:	48 83 ec 60          	sub    $0x60,%rsp
  43340e:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
  433412:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
  433416:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
  43341a:	48 89 4d a0          	mov    %rcx,-0x60(%rbp)
		      const std::allocator<_Tp>&)
      {
	if (!__has_trivial_destructor(value_type))
	  _M_destroy_data_aux(__first, __last);
  43341e:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  433422:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
  433426:	48 89 d6             	mov    %rdx,%rsi
  433429:	48 89 c7             	mov    %rax,%rdi
  43342c:	e8 3f 05 00 00       	callq  433970 <std::_Deque_iterator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*>::_Deque_iterator(std::_Deque_iterator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*> const&)>
  433431:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  433435:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  433439:	48 89 d6             	mov    %rdx,%rsi
  43343c:	48 89 c7             	mov    %rax,%rdi
  43343f:	e8 2c 05 00 00       	callq  433970 <std::_Deque_iterator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*>::_Deque_iterator(std::_Deque_iterator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*> const&)>
  433444:	48 8d 55 c0          	lea    -0x40(%rbp),%rdx
  433448:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  43344c:	48 8b 4d b8          	mov    -0x48(%rbp),%rcx
  433450:	48 89 c6             	mov    %rax,%rsi
  433453:	48 89 cf             	mov    %rcx,%rdi
  433456:	e8 63 05 00 00       	callq  4339be <std::deque<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > >::_M_destroy_data_aux(std::_Deque_iterator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*>, std::_Deque_iterator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*>)>
      }
  43345b:	90                   	nop
  43345c:	c9                   	leaveq 
  43345d:	c3                   	retq   

000000000043345e <std::_Deque_base<x666::LineInfo, std::allocator<x666::LineInfo> >::_Deque_impl::~_Deque_impl()>:
      struct _Deque_impl
  43345e:	55                   	push   %rbp
  43345f:	48 89 e5             	mov    %rsp,%rbp
  433462:	48 83 ec 10          	sub    $0x10,%rsp
  433466:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  43346a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43346e:	48 89 c7             	mov    %rax,%rdi
  433471:	e8 58 06 00 00       	callq  433ace <std::allocator<x666::LineInfo>::~allocator()>
  433476:	90                   	nop
  433477:	c9                   	leaveq 
  433478:	c3                   	retq   
  433479:	90                   	nop

000000000043347a <std::_Deque_base<x666::LineInfo, std::allocator<x666::LineInfo> >::~_Deque_base()>:
    _Deque_base<_Tp, _Alloc>::
  43347a:	55                   	push   %rbp
  43347b:	48 89 e5             	mov    %rsp,%rbp
  43347e:	48 83 ec 10          	sub    $0x10,%rsp
  433482:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      if (this->_M_impl._M_map)
  433486:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43348a:	48 8b 00             	mov    (%rax),%rax
  43348d:	48 85 c0             	test   %rax,%rax
  433490:	74 41                	je     4334d3 <std::_Deque_base<x666::LineInfo, std::allocator<x666::LineInfo> >::~_Deque_base()+0x59>
			   this->_M_impl._M_finish._M_node + 1);
  433492:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  433496:	48 8b 40 48          	mov    0x48(%rax),%rax
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
  43349a:	48 8d 50 08          	lea    0x8(%rax),%rdx
  43349e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4334a2:	48 8b 48 28          	mov    0x28(%rax),%rcx
  4334a6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4334aa:	48 89 ce             	mov    %rcx,%rsi
  4334ad:	48 89 c7             	mov    %rax,%rdi
  4334b0:	e8 35 06 00 00       	callq  433aea <std::_Deque_base<x666::LineInfo, std::allocator<x666::LineInfo> >::_M_destroy_nodes(x666::LineInfo**, x666::LineInfo**)>
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
  4334b5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4334b9:	48 8b 50 08          	mov    0x8(%rax),%rdx
  4334bd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4334c1:	48 8b 08             	mov    (%rax),%rcx
  4334c4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4334c8:	48 89 ce             	mov    %rcx,%rsi
  4334cb:	48 89 c7             	mov    %rax,%rdi
  4334ce:	e8 5d 06 00 00       	callq  433b30 <std::_Deque_base<x666::LineInfo, std::allocator<x666::LineInfo> >::_M_deallocate_map(x666::LineInfo**, unsigned long)>
    }
  4334d3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4334d7:	48 89 c7             	mov    %rax,%rdi
  4334da:	e8 7f ff ff ff       	callq  43345e <std::_Deque_base<x666::LineInfo, std::allocator<x666::LineInfo> >::_Deque_impl::~_Deque_impl()>
  4334df:	90                   	nop
  4334e0:	c9                   	leaveq 
  4334e1:	c3                   	retq   

00000000004334e2 <std::deque<x666::LineInfo, std::allocator<x666::LineInfo> >::begin()>:
      begin() _GLIBCXX_NOEXCEPT
  4334e2:	55                   	push   %rbp
  4334e3:	48 89 e5             	mov    %rsp,%rbp
  4334e6:	48 83 ec 10          	sub    $0x10,%rsp
  4334ea:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4334ee:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      { return this->_M_impl._M_start; }
  4334f2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4334f6:	48 8d 50 10          	lea    0x10(%rax),%rdx
  4334fa:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4334fe:	48 89 d6             	mov    %rdx,%rsi
  433501:	48 89 c7             	mov    %rax,%rdi
  433504:	e8 75 06 00 00       	callq  433b7e <std::_Deque_iterator<x666::LineInfo, x666::LineInfo&, x666::LineInfo*>::_Deque_iterator(std::_Deque_iterator<x666::LineInfo, x666::LineInfo&, x666::LineInfo*> const&)>
  433509:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43350d:	c9                   	leaveq 
  43350e:	c3                   	retq   
  43350f:	90                   	nop

0000000000433510 <std::deque<x666::LineInfo, std::allocator<x666::LineInfo> >::end()>:
      end() _GLIBCXX_NOEXCEPT
  433510:	55                   	push   %rbp
  433511:	48 89 e5             	mov    %rsp,%rbp
  433514:	48 83 ec 10          	sub    $0x10,%rsp
  433518:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  43351c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      { return this->_M_impl._M_finish; }
  433520:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  433524:	48 8d 50 30          	lea    0x30(%rax),%rdx
  433528:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43352c:	48 89 d6             	mov    %rdx,%rsi
  43352f:	48 89 c7             	mov    %rax,%rdi
  433532:	e8 47 06 00 00       	callq  433b7e <std::_Deque_iterator<x666::LineInfo, x666::LineInfo&, x666::LineInfo*>::_Deque_iterator(std::_Deque_iterator<x666::LineInfo, x666::LineInfo&, x666::LineInfo*> const&)>
  433537:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43353b:	c9                   	leaveq 
  43353c:	c3                   	retq   
  43353d:	90                   	nop

000000000043353e <std::_Deque_base<x666::LineInfo, std::allocator<x666::LineInfo> >::_M_get_Tp_allocator()>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
  43353e:	55                   	push   %rbp
  43353f:	48 89 e5             	mov    %rsp,%rbp
  433542:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return *static_cast<_Tp_alloc_type*>(&this->_M_impl); }
  433546:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43354a:	5d                   	pop    %rbp
  43354b:	c3                   	retq   

000000000043354c <std::deque<x666::LineInfo, std::allocator<x666::LineInfo> >::_M_destroy_data(std::_Deque_iterator<x666::LineInfo, x666::LineInfo&, x666::LineInfo*>, std::_Deque_iterator<x666::LineInfo, x666::LineInfo&, x666::LineInfo*>, std::allocator<x666::LineInfo> const&)>:
      _M_destroy_data(iterator __first, iterator __last,
  43354c:	55                   	push   %rbp
  43354d:	48 89 e5             	mov    %rsp,%rbp
  433550:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
  433554:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
  433558:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
  43355c:	48 89 4d a0          	mov    %rcx,-0x60(%rbp)
      }
  433560:	90                   	nop
  433561:	5d                   	pop    %rbp
  433562:	c3                   	retq   
  433563:	90                   	nop

0000000000433564 <std::_Deque_base<x666::Parser::BracketEntry, std::allocator<x666::Parser::BracketEntry> >::_Deque_impl::~_Deque_impl()>:
      struct _Deque_impl
  433564:	55                   	push   %rbp
  433565:	48 89 e5             	mov    %rsp,%rbp
  433568:	48 83 ec 10          	sub    $0x10,%rsp
  43356c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  433570:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  433574:	48 89 c7             	mov    %rax,%rdi
  433577:	e8 50 06 00 00       	callq  433bcc <std::allocator<x666::Parser::BracketEntry>::~allocator()>
  43357c:	90                   	nop
  43357d:	c9                   	leaveq 
  43357e:	c3                   	retq   
  43357f:	90                   	nop

0000000000433580 <std::_Deque_base<x666::Parser::BracketEntry, std::allocator<x666::Parser::BracketEntry> >::~_Deque_base()>:
    _Deque_base<_Tp, _Alloc>::
  433580:	55                   	push   %rbp
  433581:	48 89 e5             	mov    %rsp,%rbp
  433584:	48 83 ec 10          	sub    $0x10,%rsp
  433588:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      if (this->_M_impl._M_map)
  43358c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  433590:	48 8b 00             	mov    (%rax),%rax
  433593:	48 85 c0             	test   %rax,%rax
  433596:	74 41                	je     4335d9 <std::_Deque_base<x666::Parser::BracketEntry, std::allocator<x666::Parser::BracketEntry> >::~_Deque_base()+0x59>
			   this->_M_impl._M_finish._M_node + 1);
  433598:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43359c:	48 8b 40 48          	mov    0x48(%rax),%rax
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
  4335a0:	48 8d 50 08          	lea    0x8(%rax),%rdx
  4335a4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4335a8:	48 8b 48 28          	mov    0x28(%rax),%rcx
  4335ac:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4335b0:	48 89 ce             	mov    %rcx,%rsi
  4335b3:	48 89 c7             	mov    %rax,%rdi
  4335b6:	e8 2d 06 00 00       	callq  433be8 <std::_Deque_base<x666::Parser::BracketEntry, std::allocator<x666::Parser::BracketEntry> >::_M_destroy_nodes(x666::Parser::BracketEntry**, x666::Parser::BracketEntry**)>
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
  4335bb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4335bf:	48 8b 50 08          	mov    0x8(%rax),%rdx
  4335c3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4335c7:	48 8b 08             	mov    (%rax),%rcx
  4335ca:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4335ce:	48 89 ce             	mov    %rcx,%rsi
  4335d1:	48 89 c7             	mov    %rax,%rdi
  4335d4:	e8 55 06 00 00       	callq  433c2e <std::_Deque_base<x666::Parser::BracketEntry, std::allocator<x666::Parser::BracketEntry> >::_M_deallocate_map(x666::Parser::BracketEntry**, unsigned long)>
    }
  4335d9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4335dd:	48 89 c7             	mov    %rax,%rdi
  4335e0:	e8 7f ff ff ff       	callq  433564 <std::_Deque_base<x666::Parser::BracketEntry, std::allocator<x666::Parser::BracketEntry> >::_Deque_impl::~_Deque_impl()>
  4335e5:	90                   	nop
  4335e6:	c9                   	leaveq 
  4335e7:	c3                   	retq   

00000000004335e8 <std::deque<x666::Parser::BracketEntry, std::allocator<x666::Parser::BracketEntry> >::begin()>:
      begin() _GLIBCXX_NOEXCEPT
  4335e8:	55                   	push   %rbp
  4335e9:	48 89 e5             	mov    %rsp,%rbp
  4335ec:	48 83 ec 10          	sub    $0x10,%rsp
  4335f0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4335f4:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      { return this->_M_impl._M_start; }
  4335f8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4335fc:	48 8d 50 10          	lea    0x10(%rax),%rdx
  433600:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  433604:	48 89 d6             	mov    %rdx,%rsi
  433607:	48 89 c7             	mov    %rax,%rdi
  43360a:	e8 6d 06 00 00       	callq  433c7c <std::_Deque_iterator<x666::Parser::BracketEntry, x666::Parser::BracketEntry&, x666::Parser::BracketEntry*>::_Deque_iterator(std::_Deque_iterator<x666::Parser::BracketEntry, x666::Parser::BracketEntry&, x666::Parser::BracketEntry*> const&)>
  43360f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  433613:	c9                   	leaveq 
  433614:	c3                   	retq   
  433615:	90                   	nop

0000000000433616 <std::deque<x666::Parser::BracketEntry, std::allocator<x666::Parser::BracketEntry> >::end()>:
      end() _GLIBCXX_NOEXCEPT
  433616:	55                   	push   %rbp
  433617:	48 89 e5             	mov    %rsp,%rbp
  43361a:	48 83 ec 10          	sub    $0x10,%rsp
  43361e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  433622:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      { return this->_M_impl._M_finish; }
  433626:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  43362a:	48 8d 50 30          	lea    0x30(%rax),%rdx
  43362e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  433632:	48 89 d6             	mov    %rdx,%rsi
  433635:	48 89 c7             	mov    %rax,%rdi
  433638:	e8 3f 06 00 00       	callq  433c7c <std::_Deque_iterator<x666::Parser::BracketEntry, x666::Parser::BracketEntry&, x666::Parser::BracketEntry*>::_Deque_iterator(std::_Deque_iterator<x666::Parser::BracketEntry, x666::Parser::BracketEntry&, x666::Parser::BracketEntry*> const&)>
  43363d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  433641:	c9                   	leaveq 
  433642:	c3                   	retq   
  433643:	90                   	nop

0000000000433644 <std::_Deque_base<x666::Parser::BracketEntry, std::allocator<x666::Parser::BracketEntry> >::_M_get_Tp_allocator()>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
  433644:	55                   	push   %rbp
  433645:	48 89 e5             	mov    %rsp,%rbp
  433648:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return *static_cast<_Tp_alloc_type*>(&this->_M_impl); }
  43364c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  433650:	5d                   	pop    %rbp
  433651:	c3                   	retq   

0000000000433652 <std::deque<x666::Parser::BracketEntry, std::allocator<x666::Parser::BracketEntry> >::_M_destroy_data(std::_Deque_iterator<x666::Parser::BracketEntry, x666::Parser::BracketEntry&, x666::Parser::BracketEntry*>, std::_Deque_iterator<x666::Parser::BracketEntry, x666::Parser::BracketEntry&, x666::Parser::BracketEntry*>, std::allocator<x666::Parser::BracketEntry> const&)>:
      _M_destroy_data(iterator __first, iterator __last,
  433652:	55                   	push   %rbp
  433653:	48 89 e5             	mov    %rsp,%rbp
  433656:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
  43365a:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
  43365e:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
  433662:	48 89 4d a0          	mov    %rcx,-0x60(%rbp)
      }
  433666:	90                   	nop
  433667:	5d                   	pop    %rbp
  433668:	c3                   	retq   
  433669:	90                   	nop

000000000043366a <std::_Vector_base<x666::LexError, std::allocator<x666::LexError> >::_Vector_impl::~_Vector_impl()>:
      struct _Vector_impl
  43366a:	55                   	push   %rbp
  43366b:	48 89 e5             	mov    %rsp,%rbp
  43366e:	48 83 ec 10          	sub    $0x10,%rsp
  433672:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  433676:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43367a:	48 89 c7             	mov    %rax,%rdi
  43367d:	e8 48 06 00 00       	callq  433cca <std::allocator<x666::LexError>::~allocator()>
  433682:	90                   	nop
  433683:	c9                   	leaveq 
  433684:	c3                   	retq   
  433685:	90                   	nop

0000000000433686 <std::_Vector_base<x666::LexError, std::allocator<x666::LexError> >::~_Vector_base()>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
  433686:	55                   	push   %rbp
  433687:	48 89 e5             	mov    %rsp,%rbp
  43368a:	48 83 ec 10          	sub    $0x10,%rsp
  43368e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
		      _M_impl._M_end_of_storage - _M_impl._M_start);
  433692:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  433696:	48 8b 40 10          	mov    0x10(%rax),%rax
  43369a:	48 89 c2             	mov    %rax,%rdx
  43369d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4336a1:	48 8b 00             	mov    (%rax),%rax
  4336a4:	48 29 c2             	sub    %rax,%rdx
  4336a7:	48 89 d0             	mov    %rdx,%rax
  4336aa:	48 c1 f8 03          	sar    $0x3,%rax
  4336ae:	48 89 c2             	mov    %rax,%rdx
  4336b1:	48 b8 cd cc cc cc cc 	movabs $0xcccccccccccccccd,%rax
  4336b8:	cc cc cc 
  4336bb:	48 0f af c2          	imul   %rdx,%rax
	_M_deallocate(_M_impl._M_start,
  4336bf:	48 89 c2             	mov    %rax,%rdx
  4336c2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4336c6:	48 8b 08             	mov    (%rax),%rcx
  4336c9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4336cd:	48 89 ce             	mov    %rcx,%rsi
  4336d0:	48 89 c7             	mov    %rax,%rdi
  4336d3:	e8 0e 06 00 00       	callq  433ce6 <std::_Vector_base<x666::LexError, std::allocator<x666::LexError> >::_M_deallocate(x666::LexError*, unsigned long)>
      }
  4336d8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4336dc:	48 89 c7             	mov    %rax,%rdi
  4336df:	e8 86 ff ff ff       	callq  43366a <std::_Vector_base<x666::LexError, std::allocator<x666::LexError> >::_Vector_impl::~_Vector_impl()>
  4336e4:	90                   	nop
  4336e5:	c9                   	leaveq 
  4336e6:	c3                   	retq   
  4336e7:	90                   	nop

00000000004336e8 <std::_Vector_base<x666::LexError, std::allocator<x666::LexError> >::_M_get_Tp_allocator()>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
  4336e8:	55                   	push   %rbp
  4336e9:	48 89 e5             	mov    %rsp,%rbp
  4336ec:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return *static_cast<_Tp_alloc_type*>(&this->_M_impl); }
  4336f0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4336f4:	5d                   	pop    %rbp
  4336f5:	c3                   	retq   

00000000004336f6 <void std::_Destroy<x666::LexError*, x666::LexError>(x666::LexError*, x666::LexError*, std::allocator<x666::LexError>&)>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
  4336f6:	55                   	push   %rbp
  4336f7:	48 89 e5             	mov    %rsp,%rbp
  4336fa:	48 83 ec 20          	sub    $0x20,%rsp
  4336fe:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  433702:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  433706:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      _Destroy(__first, __last);
  43370a:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  43370e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  433712:	48 89 d6             	mov    %rdx,%rsi
  433715:	48 89 c7             	mov    %rax,%rdi
  433718:	e8 fe 05 00 00       	callq  433d1b <void std::_Destroy<x666::LexError*>(x666::LexError*, x666::LexError*)>
    }
  43371d:	90                   	nop
  43371e:	c9                   	leaveq 
  43371f:	c3                   	retq   

0000000000433720 <std::vector<x666::LexError, std::allocator<x666::LexError> >::begin() const>:
      begin() const _GLIBCXX_NOEXCEPT
  433720:	55                   	push   %rbp
  433721:	48 89 e5             	mov    %rsp,%rbp
  433724:	48 83 ec 20          	sub    $0x20,%rsp
  433728:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
      { return const_iterator(this->_M_impl._M_start); }
  43372c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  433730:	48 8b 00             	mov    (%rax),%rax
  433733:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  433737:	48 8d 55 f8          	lea    -0x8(%rbp),%rdx
  43373b:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
  43373f:	48 89 d6             	mov    %rdx,%rsi
  433742:	48 89 c7             	mov    %rax,%rdi
  433745:	e8 f8 05 00 00       	callq  433d42 <__gnu_cxx::__normal_iterator<x666::LexError const*, std::vector<x666::LexError, std::allocator<x666::LexError> > >::__normal_iterator(x666::LexError const* const&)>
  43374a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  43374e:	c9                   	leaveq 
  43374f:	c3                   	retq   

0000000000433750 <std::vector<x666::LexError, std::allocator<x666::LexError> >::end() const>:
      end() const _GLIBCXX_NOEXCEPT
  433750:	55                   	push   %rbp
  433751:	48 89 e5             	mov    %rsp,%rbp
  433754:	48 83 ec 20          	sub    $0x20,%rsp
  433758:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
      { return const_iterator(this->_M_impl._M_finish); }
  43375c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  433760:	48 8b 40 08          	mov    0x8(%rax),%rax
  433764:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  433768:	48 8d 55 f8          	lea    -0x8(%rbp),%rdx
  43376c:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
  433770:	48 89 d6             	mov    %rdx,%rsi
  433773:	48 89 c7             	mov    %rax,%rdi
  433776:	e8 c7 05 00 00       	callq  433d42 <__gnu_cxx::__normal_iterator<x666::LexError const*, std::vector<x666::LexError, std::allocator<x666::LexError> > >::__normal_iterator(x666::LexError const* const&)>
  43377b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  43377f:	c9                   	leaveq 
  433780:	c3                   	retq   

0000000000433781 <bool __gnu_cxx::operator==<x666::LexError const*, std::vector<x666::LexError, std::allocator<x666::LexError> > >(__gnu_cxx::__normal_iterator<x666::LexError const*, std::vector<x666::LexError, std::allocator<x666::LexError> > > const&, __gnu_cxx::__normal_iterator<x666::LexError const*, std::vector<x666::LexError, std::allocator<x666::LexError> > > const&)>:
    operator==(const __normal_iterator<_Iterator, _Container>& __lhs,
  433781:	55                   	push   %rbp
  433782:	48 89 e5             	mov    %rsp,%rbp
  433785:	53                   	push   %rbx
  433786:	48 83 ec 18          	sub    $0x18,%rsp
  43378a:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  43378e:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    { return __lhs.base() == __rhs.base(); }
  433792:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  433796:	48 89 c7             	mov    %rax,%rdi
  433799:	e8 c2 05 00 00       	callq  433d60 <__gnu_cxx::__normal_iterator<x666::LexError const*, std::vector<x666::LexError, std::allocator<x666::LexError> > >::base() const>
  43379e:	48 8b 18             	mov    (%rax),%rbx
  4337a1:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4337a5:	48 89 c7             	mov    %rax,%rdi
  4337a8:	e8 b3 05 00 00       	callq  433d60 <__gnu_cxx::__normal_iterator<x666::LexError const*, std::vector<x666::LexError, std::allocator<x666::LexError> > >::base() const>
  4337ad:	48 8b 00             	mov    (%rax),%rax
  4337b0:	48 39 c3             	cmp    %rax,%rbx
  4337b3:	0f 94 c0             	sete   %al
  4337b6:	48 83 c4 18          	add    $0x18,%rsp
  4337ba:	5b                   	pop    %rbx
  4337bb:	5d                   	pop    %rbp
  4337bc:	c3                   	retq   
  4337bd:	90                   	nop

00000000004337be <__gnu_cxx::__normal_iterator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*, std::vector<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > > >::__normal_iterator(std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >* const&)>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
  4337be:	55                   	push   %rbp
  4337bf:	48 89 e5             	mov    %rsp,%rbp
  4337c2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4337c6:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      : _M_current(__i) { }
  4337ca:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4337ce:	48 8b 10             	mov    (%rax),%rdx
  4337d1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4337d5:	48 89 10             	mov    %rdx,(%rax)
  4337d8:	90                   	nop
  4337d9:	5d                   	pop    %rbp
  4337da:	c3                   	retq   
  4337db:	90                   	nop

00000000004337dc <__gnu_cxx::__normal_iterator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*, std::vector<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > > >::base() const>:
      base() const _GLIBCXX_NOEXCEPT
  4337dc:	55                   	push   %rbp
  4337dd:	48 89 e5             	mov    %rsp,%rbp
  4337e0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_current; }
  4337e4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4337e8:	5d                   	pop    %rbp
  4337e9:	c3                   	retq   

00000000004337ea <std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >::get() const>:
      get() const noexcept
  4337ea:	55                   	push   %rbp
  4337eb:	48 89 e5             	mov    %rsp,%rbp
  4337ee:	48 83 ec 10          	sub    $0x10,%rsp
  4337f2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_t._M_ptr(); }
  4337f6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4337fa:	48 89 c7             	mov    %rax,%rdi
  4337fd:	e8 6c 05 00 00       	callq  433d6e <std::__uniq_ptr_impl<x666::Expression, std::default_delete<x666::Expression> >::_M_ptr() const>
  433802:	c9                   	leaveq 
  433803:	c3                   	retq   

0000000000433804 <__gnu_cxx::__normal_iterator<x666::LexError*, std::vector<x666::LexError, std::allocator<x666::LexError> > >::__normal_iterator(x666::LexError* const&)>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
  433804:	55                   	push   %rbp
  433805:	48 89 e5             	mov    %rsp,%rbp
  433808:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  43380c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      : _M_current(__i) { }
  433810:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  433814:	48 8b 10             	mov    (%rax),%rdx
  433817:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43381b:	48 89 10             	mov    %rdx,(%rax)
  43381e:	90                   	nop
  43381f:	5d                   	pop    %rbp
  433820:	c3                   	retq   
  433821:	90                   	nop

0000000000433822 <__gnu_cxx::__normal_iterator<x666::LexError*, std::vector<x666::LexError, std::allocator<x666::LexError> > >::base() const>:
      base() const _GLIBCXX_NOEXCEPT
  433822:	55                   	push   %rbp
  433823:	48 89 e5             	mov    %rsp,%rbp
  433826:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_current; }
  43382a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43382e:	5d                   	pop    %rbp
  43382f:	c3                   	retq   

0000000000433830 <std::__uniq_ptr_impl<x666::Expression, std::default_delete<x666::Expression> >::_M_deleter()>:
      _Dp&       _M_deleter() { return std::get<1>(_M_t); }
  433830:	55                   	push   %rbp
  433831:	48 89 e5             	mov    %rsp,%rbp
  433834:	48 83 ec 10          	sub    $0x10,%rsp
  433838:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  43383c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  433840:	48 89 c7             	mov    %rax,%rdi
  433843:	e8 43 05 00 00       	callq  433d8b <std::tuple_element<1ul, std::tuple<x666::Expression*, std::default_delete<x666::Expression> > >::type& std::get<1ul, x666::Expression*, std::default_delete<x666::Expression> >(std::tuple<x666::Expression*, std::default_delete<x666::Expression> >&)>
  433848:	c9                   	leaveq 
  433849:	c3                   	retq   

000000000043384a <std::tuple_element<0ul, std::tuple<x666::Expression*, std::default_delete<x666::Expression> > >::type& std::get<0ul, x666::Expression*, std::default_delete<x666::Expression> >(std::tuple<x666::Expression*, std::default_delete<x666::Expression> >&)>:
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }

  /// Return a reference to the ith element of a tuple.
  template<std::size_t __i, typename... _Elements>
    constexpr __tuple_element_t<__i, tuple<_Elements...>>&
    get(tuple<_Elements...>& __t) noexcept
  43384a:	55                   	push   %rbp
  43384b:	48 89 e5             	mov    %rsp,%rbp
  43384e:	48 83 ec 10          	sub    $0x10,%rsp
  433852:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return std::__get_helper<__i>(__t); }
  433856:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43385a:	48 89 c7             	mov    %rax,%rdi
  43385d:	e8 43 05 00 00       	callq  433da5 <x666::Expression*& std::__get_helper<0ul, x666::Expression*, std::default_delete<x666::Expression> >(std::_Tuple_impl<0ul, x666::Expression*, std::default_delete<x666::Expression> >&)>
  433862:	c9                   	leaveq 
  433863:	c3                   	retq   

0000000000433864 <std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > >::~allocator()>:
      : __allocator_base<_Tp>(__a) { }

      template<typename _Tp1>
	allocator(const allocator<_Tp1>&) throw() { }

      ~allocator() throw() { }
  433864:	55                   	push   %rbp
  433865:	48 89 e5             	mov    %rsp,%rbp
  433868:	48 83 ec 10          	sub    $0x10,%rsp
  43386c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  433870:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  433874:	48 89 c7             	mov    %rax,%rdi
  433877:	e8 44 05 00 00       	callq  433dc0 <__gnu_cxx::new_allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > >::~new_allocator()>
  43387c:	90                   	nop
  43387d:	c9                   	leaveq 
  43387e:	c3                   	retq   
  43387f:	90                   	nop

0000000000433880 <std::_Vector_base<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > >::_M_deallocate(std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*, unsigned long)>:
      _M_deallocate(pointer __p, size_t __n)
  433880:	55                   	push   %rbp
  433881:	48 89 e5             	mov    %rsp,%rbp
  433884:	48 83 ec 20          	sub    $0x20,%rsp
  433888:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  43388c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  433890:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	if (__p)
  433894:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
  433899:	74 17                	je     4338b2 <std::_Vector_base<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > >::_M_deallocate(std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*, unsigned long)+0x32>
	  _Tr::deallocate(_M_impl, __p, __n);
  43389b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43389f:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  4338a3:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  4338a7:	48 89 ce             	mov    %rcx,%rsi
  4338aa:	48 89 c7             	mov    %rax,%rdi
  4338ad:	e8 19 05 00 00       	callq  433dcb <std::allocator_traits<std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > >::deallocate(std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > >&, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*, unsigned long)>
      }
  4338b2:	90                   	nop
  4338b3:	c9                   	leaveq 
  4338b4:	c3                   	retq   

00000000004338b5 <void std::_Destroy<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*>(std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*)>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
  4338b5:	55                   	push   %rbp
  4338b6:	48 89 e5             	mov    %rsp,%rbp
  4338b9:	48 83 ec 10          	sub    $0x10,%rsp
  4338bd:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4338c1:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	__destroy(__first, __last);
  4338c5:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  4338c9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4338cd:	48 89 d6             	mov    %rdx,%rsi
  4338d0:	48 89 c7             	mov    %rax,%rdi
  4338d3:	e8 2f 05 00 00       	callq  433e07 <void std::_Destroy_aux<false>::__destroy<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*>(std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*)>
    }
  4338d8:	90                   	nop
  4338d9:	c9                   	leaveq 
  4338da:	c3                   	retq   
  4338db:	90                   	nop

00000000004338dc <std::_Deque_base<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > >::_M_destroy_nodes(std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >**, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >**)>:
    _Deque_base<_Tp, _Alloc>::
  4338dc:	55                   	push   %rbp
  4338dd:	48 89 e5             	mov    %rsp,%rbp
  4338e0:	48 83 ec 30          	sub    $0x30,%rsp
  4338e4:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  4338e8:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  4338ec:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
  4338f0:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4338f4:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  4338f8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4338fc:	48 3b 45 d8          	cmp    -0x28(%rbp),%rax
  433900:	73 1d                	jae    43391f <std::_Deque_base<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > >::_M_destroy_nodes(std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >**, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >**)+0x43>
	_M_deallocate_node(*__n);
  433902:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  433906:	48 8b 10             	mov    (%rax),%rdx
  433909:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  43390d:	48 89 d6             	mov    %rdx,%rsi
  433910:	48 89 c7             	mov    %rax,%rdi
  433913:	e8 28 05 00 00       	callq  433e40 <std::_Deque_base<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > >::_M_deallocate_node(std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*)>
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
  433918:	48 83 45 f8 08       	addq   $0x8,-0x8(%rbp)
  43391d:	eb d9                	jmp    4338f8 <std::_Deque_base<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > >::_M_destroy_nodes(std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >**, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >**)+0x1c>
    }
  43391f:	90                   	nop
  433920:	c9                   	leaveq 
  433921:	c3                   	retq   

0000000000433922 <std::_Deque_base<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > >::_M_deallocate_map(std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >**, unsigned long)>:
      _M_deallocate_map(_Map_pointer __p, size_t __n) _GLIBCXX_NOEXCEPT
  433922:	55                   	push   %rbp
  433923:	48 89 e5             	mov    %rsp,%rbp
  433926:	48 83 ec 30          	sub    $0x30,%rsp
  43392a:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  43392e:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  433932:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
  433936:	48 8d 45 ff          	lea    -0x1(%rbp),%rax
  43393a:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  43393e:	48 89 d6             	mov    %rdx,%rsi
  433941:	48 89 c7             	mov    %rax,%rdi
  433944:	e8 2b 05 00 00       	callq  433e74 <std::_Deque_base<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > >::_M_get_map_allocator() const>
	_Map_alloc_traits::deallocate(__map_alloc, __p, __n);
  433949:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  43394d:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  433951:	48 8d 45 ff          	lea    -0x1(%rbp),%rax
  433955:	48 89 ce             	mov    %rcx,%rsi
  433958:	48 89 c7             	mov    %rax,%rdi
  43395b:	e8 63 05 00 00       	callq  433ec3 <std::allocator_traits<std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*> >::deallocate(std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*>&, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >**, unsigned long)>
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
  433960:	48 8d 45 ff          	lea    -0x1(%rbp),%rax
  433964:	48 89 c7             	mov    %rax,%rdi
  433967:	e8 3c 05 00 00       	callq  433ea8 <std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*>::~allocator()>
      }
  43396c:	90                   	nop
  43396d:	c9                   	leaveq 
  43396e:	c3                   	retq   
  43396f:	90                   	nop

0000000000433970 <std::_Deque_iterator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*>::_Deque_iterator(std::_Deque_iterator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*> const&)>:
      _Deque_iterator(const iterator& __x) _GLIBCXX_NOEXCEPT
  433970:	55                   	push   %rbp
  433971:	48 89 e5             	mov    %rsp,%rbp
  433974:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  433978:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      : _M_cur(__x._M_cur), _M_first(__x._M_first),
  43397c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  433980:	48 8b 10             	mov    (%rax),%rdx
	_M_last(__x._M_last), _M_node(__x._M_node) { }
  433983:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  433987:	48 89 10             	mov    %rdx,(%rax)
      : _M_cur(__x._M_cur), _M_first(__x._M_first),
  43398a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  43398e:	48 8b 50 08          	mov    0x8(%rax),%rdx
	_M_last(__x._M_last), _M_node(__x._M_node) { }
  433992:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  433996:	48 89 50 08          	mov    %rdx,0x8(%rax)
  43399a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  43399e:	48 8b 50 10          	mov    0x10(%rax),%rdx
  4339a2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4339a6:	48 89 50 10          	mov    %rdx,0x10(%rax)
  4339aa:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4339ae:	48 8b 50 18          	mov    0x18(%rax),%rdx
  4339b2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4339b6:	48 89 50 18          	mov    %rdx,0x18(%rax)
  4339ba:	90                   	nop
  4339bb:	5d                   	pop    %rbp
  4339bc:	c3                   	retq   
  4339bd:	90                   	nop

00000000004339be <std::deque<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > >::_M_destroy_data_aux(std::_Deque_iterator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*>, std::_Deque_iterator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*>)>:
        }
      }

   template<typename _Tp, typename _Alloc>
     void
     deque<_Tp, _Alloc>::
  4339be:	55                   	push   %rbp
  4339bf:	48 89 e5             	mov    %rsp,%rbp
  4339c2:	41 54                	push   %r12
  4339c4:	53                   	push   %rbx
  4339c5:	48 83 ec 30          	sub    $0x30,%rsp
  4339c9:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  4339cd:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  4339d1:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
     _M_destroy_data_aux(iterator __first, iterator __last)
     {
       for (_Map_pointer __node = __first._M_node + 1;
  4339d5:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  4339d9:	48 8b 40 18          	mov    0x18(%rax),%rax
  4339dd:	48 83 c0 08          	add    $0x8,%rax
  4339e1:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	    __node < __last._M_node; ++__node)
  4339e5:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  4339e9:	48 8b 40 18          	mov    0x18(%rax),%rax
  4339ed:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
  4339f1:	73 3f                	jae    433a32 <std::deque<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > >::_M_destroy_data_aux(std::_Deque_iterator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*>, std::_Deque_iterator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*>)+0x74>
	 std::_Destroy(*__node, *__node + _S_buffer_size(),
		       _M_get_Tp_allocator());
  4339f3:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4339f7:	48 89 c7             	mov    %rax,%rdi
  4339fa:	e8 f9 f9 ff ff       	callq  4333f8 <std::_Deque_base<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > >::_M_get_Tp_allocator()>
  4339ff:	49 89 c4             	mov    %rax,%r12
	 std::_Destroy(*__node, *__node + _S_buffer_size(),
  433a02:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  433a06:	48 8b 18             	mov    (%rax),%rbx
  433a09:	e8 e3 04 00 00       	callq  433ef1 <std::deque<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > >::_S_buffer_size()>
  433a0e:	48 c1 e0 03          	shl    $0x3,%rax
  433a12:	48 8d 0c 03          	lea    (%rbx,%rax,1),%rcx
  433a16:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  433a1a:	48 8b 00             	mov    (%rax),%rax
  433a1d:	4c 89 e2             	mov    %r12,%rdx
  433a20:	48 89 ce             	mov    %rcx,%rsi
  433a23:	48 89 c7             	mov    %rax,%rdi
  433a26:	e8 c3 f8 ff ff       	callq  4332ee <void std::_Destroy<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > >(std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*, std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > >&)>
       for (_Map_pointer __node = __first._M_node + 1;
  433a2b:	48 83 45 e8 08       	addq   $0x8,-0x18(%rbp)
  433a30:	eb b3                	jmp    4339e5 <std::deque<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > >::_M_destroy_data_aux(std::_Deque_iterator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*>, std::_Deque_iterator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*>)+0x27>

       if (__first._M_node != __last._M_node)
  433a32:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  433a36:	48 8b 50 18          	mov    0x18(%rax),%rdx
  433a3a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  433a3e:	48 8b 40 18          	mov    0x18(%rax),%rax
  433a42:	48 39 c2             	cmp    %rax,%rdx
  433a45:	74 54                	je     433a9b <std::deque<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > >::_M_destroy_data_aux(std::_Deque_iterator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*>, std::_Deque_iterator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*>)+0xdd>
	 {
	   std::_Destroy(__first._M_cur, __first._M_last,
			 _M_get_Tp_allocator());
  433a47:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  433a4b:	48 89 c7             	mov    %rax,%rdi
  433a4e:	e8 a5 f9 ff ff       	callq  4333f8 <std::_Deque_base<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > >::_M_get_Tp_allocator()>
  433a53:	48 89 c2             	mov    %rax,%rdx
	   std::_Destroy(__first._M_cur, __first._M_last,
  433a56:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  433a5a:	48 8b 48 10          	mov    0x10(%rax),%rcx
  433a5e:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  433a62:	48 8b 00             	mov    (%rax),%rax
  433a65:	48 89 ce             	mov    %rcx,%rsi
  433a68:	48 89 c7             	mov    %rax,%rdi
  433a6b:	e8 7e f8 ff ff       	callq  4332ee <void std::_Destroy<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > >(std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*, std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > >&)>
	   std::_Destroy(__last._M_first, __last._M_cur,
			 _M_get_Tp_allocator());
  433a70:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  433a74:	48 89 c7             	mov    %rax,%rdi
  433a77:	e8 7c f9 ff ff       	callq  4333f8 <std::_Deque_base<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > >::_M_get_Tp_allocator()>
  433a7c:	48 89 c2             	mov    %rax,%rdx
	   std::_Destroy(__last._M_first, __last._M_cur,
  433a7f:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  433a83:	48 8b 08             	mov    (%rax),%rcx
  433a86:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  433a8a:	48 8b 40 08          	mov    0x8(%rax),%rax
  433a8e:	48 89 ce             	mov    %rcx,%rsi
  433a91:	48 89 c7             	mov    %rax,%rdi
  433a94:	e8 55 f8 ff ff       	callq  4332ee <void std::_Destroy<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > >(std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*, std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > >&)>
	 }
       else
	 std::_Destroy(__first._M_cur, __last._M_cur,
		       _M_get_Tp_allocator());
     }
  433a99:	eb 28                	jmp    433ac3 <std::deque<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > >::_M_destroy_data_aux(std::_Deque_iterator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*>, std::_Deque_iterator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*>)+0x105>
		       _M_get_Tp_allocator());
  433a9b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  433a9f:	48 89 c7             	mov    %rax,%rdi
  433aa2:	e8 51 f9 ff ff       	callq  4333f8 <std::_Deque_base<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > >::_M_get_Tp_allocator()>
  433aa7:	48 89 c2             	mov    %rax,%rdx
	 std::_Destroy(__first._M_cur, __last._M_cur,
  433aaa:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  433aae:	48 8b 08             	mov    (%rax),%rcx
  433ab1:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  433ab5:	48 8b 00             	mov    (%rax),%rax
  433ab8:	48 89 ce             	mov    %rcx,%rsi
  433abb:	48 89 c7             	mov    %rax,%rdi
  433abe:	e8 2b f8 ff ff       	callq  4332ee <void std::_Destroy<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > >(std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*, std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > >&)>
     }
  433ac3:	90                   	nop
  433ac4:	48 83 c4 30          	add    $0x30,%rsp
  433ac8:	5b                   	pop    %rbx
  433ac9:	41 5c                	pop    %r12
  433acb:	5d                   	pop    %rbp
  433acc:	c3                   	retq   
  433acd:	90                   	nop

0000000000433ace <std::allocator<x666::LineInfo>::~allocator()>:
  433ace:	55                   	push   %rbp
  433acf:	48 89 e5             	mov    %rsp,%rbp
  433ad2:	48 83 ec 10          	sub    $0x10,%rsp
  433ad6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  433ada:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  433ade:	48 89 c7             	mov    %rax,%rdi
  433ae1:	e8 1c 04 00 00       	callq  433f02 <__gnu_cxx::new_allocator<x666::LineInfo>::~new_allocator()>
  433ae6:	90                   	nop
  433ae7:	c9                   	leaveq 
  433ae8:	c3                   	retq   
  433ae9:	90                   	nop

0000000000433aea <std::_Deque_base<x666::LineInfo, std::allocator<x666::LineInfo> >::_M_destroy_nodes(x666::LineInfo**, x666::LineInfo**)>:
    _Deque_base<_Tp, _Alloc>::
  433aea:	55                   	push   %rbp
  433aeb:	48 89 e5             	mov    %rsp,%rbp
  433aee:	48 83 ec 30          	sub    $0x30,%rsp
  433af2:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  433af6:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  433afa:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
  433afe:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  433b02:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  433b06:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  433b0a:	48 3b 45 d8          	cmp    -0x28(%rbp),%rax
  433b0e:	73 1d                	jae    433b2d <std::_Deque_base<x666::LineInfo, std::allocator<x666::LineInfo> >::_M_destroy_nodes(x666::LineInfo**, x666::LineInfo**)+0x43>
	_M_deallocate_node(*__n);
  433b10:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  433b14:	48 8b 10             	mov    (%rax),%rdx
  433b17:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  433b1b:	48 89 d6             	mov    %rdx,%rsi
  433b1e:	48 89 c7             	mov    %rax,%rdi
  433b21:	e8 e8 03 00 00       	callq  433f0e <std::_Deque_base<x666::LineInfo, std::allocator<x666::LineInfo> >::_M_deallocate_node(x666::LineInfo*)>
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
  433b26:	48 83 45 f8 08       	addq   $0x8,-0x8(%rbp)
  433b2b:	eb d9                	jmp    433b06 <std::_Deque_base<x666::LineInfo, std::allocator<x666::LineInfo> >::_M_destroy_nodes(x666::LineInfo**, x666::LineInfo**)+0x1c>
    }
  433b2d:	90                   	nop
  433b2e:	c9                   	leaveq 
  433b2f:	c3                   	retq   

0000000000433b30 <std::_Deque_base<x666::LineInfo, std::allocator<x666::LineInfo> >::_M_deallocate_map(x666::LineInfo**, unsigned long)>:
      _M_deallocate_map(_Map_pointer __p, size_t __n) _GLIBCXX_NOEXCEPT
  433b30:	55                   	push   %rbp
  433b31:	48 89 e5             	mov    %rsp,%rbp
  433b34:	48 83 ec 30          	sub    $0x30,%rsp
  433b38:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  433b3c:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  433b40:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
  433b44:	48 8d 45 ff          	lea    -0x1(%rbp),%rax
  433b48:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  433b4c:	48 89 d6             	mov    %rdx,%rsi
  433b4f:	48 89 c7             	mov    %rax,%rdi
  433b52:	e8 eb 03 00 00       	callq  433f42 <std::_Deque_base<x666::LineInfo, std::allocator<x666::LineInfo> >::_M_get_map_allocator() const>
	_Map_alloc_traits::deallocate(__map_alloc, __p, __n);
  433b57:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  433b5b:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  433b5f:	48 8d 45 ff          	lea    -0x1(%rbp),%rax
  433b63:	48 89 ce             	mov    %rcx,%rsi
  433b66:	48 89 c7             	mov    %rax,%rdi
  433b69:	e8 23 04 00 00       	callq  433f91 <std::allocator_traits<std::allocator<x666::LineInfo*> >::deallocate(std::allocator<x666::LineInfo*>&, x666::LineInfo**, unsigned long)>
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
  433b6e:	48 8d 45 ff          	lea    -0x1(%rbp),%rax
  433b72:	48 89 c7             	mov    %rax,%rdi
  433b75:	e8 fc 03 00 00       	callq  433f76 <std::allocator<x666::LineInfo*>::~allocator()>
      }
  433b7a:	90                   	nop
  433b7b:	c9                   	leaveq 
  433b7c:	c3                   	retq   
  433b7d:	90                   	nop

0000000000433b7e <std::_Deque_iterator<x666::LineInfo, x666::LineInfo&, x666::LineInfo*>::_Deque_iterator(std::_Deque_iterator<x666::LineInfo, x666::LineInfo&, x666::LineInfo*> const&)>:
      _Deque_iterator(const iterator& __x) _GLIBCXX_NOEXCEPT
  433b7e:	55                   	push   %rbp
  433b7f:	48 89 e5             	mov    %rsp,%rbp
  433b82:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  433b86:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      : _M_cur(__x._M_cur), _M_first(__x._M_first),
  433b8a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  433b8e:	48 8b 10             	mov    (%rax),%rdx
	_M_last(__x._M_last), _M_node(__x._M_node) { }
  433b91:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  433b95:	48 89 10             	mov    %rdx,(%rax)
      : _M_cur(__x._M_cur), _M_first(__x._M_first),
  433b98:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  433b9c:	48 8b 50 08          	mov    0x8(%rax),%rdx
	_M_last(__x._M_last), _M_node(__x._M_node) { }
  433ba0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  433ba4:	48 89 50 08          	mov    %rdx,0x8(%rax)
  433ba8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  433bac:	48 8b 50 10          	mov    0x10(%rax),%rdx
  433bb0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  433bb4:	48 89 50 10          	mov    %rdx,0x10(%rax)
  433bb8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  433bbc:	48 8b 50 18          	mov    0x18(%rax),%rdx
  433bc0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  433bc4:	48 89 50 18          	mov    %rdx,0x18(%rax)
  433bc8:	90                   	nop
  433bc9:	5d                   	pop    %rbp
  433bca:	c3                   	retq   
  433bcb:	90                   	nop

0000000000433bcc <std::allocator<x666::Parser::BracketEntry>::~allocator()>:
  433bcc:	55                   	push   %rbp
  433bcd:	48 89 e5             	mov    %rsp,%rbp
  433bd0:	48 83 ec 10          	sub    $0x10,%rsp
  433bd4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  433bd8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  433bdc:	48 89 c7             	mov    %rax,%rdi
  433bdf:	e8 dc 03 00 00       	callq  433fc0 <__gnu_cxx::new_allocator<x666::Parser::BracketEntry>::~new_allocator()>
  433be4:	90                   	nop
  433be5:	c9                   	leaveq 
  433be6:	c3                   	retq   
  433be7:	90                   	nop

0000000000433be8 <std::_Deque_base<x666::Parser::BracketEntry, std::allocator<x666::Parser::BracketEntry> >::_M_destroy_nodes(x666::Parser::BracketEntry**, x666::Parser::BracketEntry**)>:
    _Deque_base<_Tp, _Alloc>::
  433be8:	55                   	push   %rbp
  433be9:	48 89 e5             	mov    %rsp,%rbp
  433bec:	48 83 ec 30          	sub    $0x30,%rsp
  433bf0:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  433bf4:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  433bf8:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
  433bfc:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  433c00:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  433c04:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  433c08:	48 3b 45 d8          	cmp    -0x28(%rbp),%rax
  433c0c:	73 1d                	jae    433c2b <std::_Deque_base<x666::Parser::BracketEntry, std::allocator<x666::Parser::BracketEntry> >::_M_destroy_nodes(x666::Parser::BracketEntry**, x666::Parser::BracketEntry**)+0x43>
	_M_deallocate_node(*__n);
  433c0e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  433c12:	48 8b 10             	mov    (%rax),%rdx
  433c15:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  433c19:	48 89 d6             	mov    %rdx,%rsi
  433c1c:	48 89 c7             	mov    %rax,%rdi
  433c1f:	e8 a8 03 00 00       	callq  433fcc <std::_Deque_base<x666::Parser::BracketEntry, std::allocator<x666::Parser::BracketEntry> >::_M_deallocate_node(x666::Parser::BracketEntry*)>
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
  433c24:	48 83 45 f8 08       	addq   $0x8,-0x8(%rbp)
  433c29:	eb d9                	jmp    433c04 <std::_Deque_base<x666::Parser::BracketEntry, std::allocator<x666::Parser::BracketEntry> >::_M_destroy_nodes(x666::Parser::BracketEntry**, x666::Parser::BracketEntry**)+0x1c>
    }
  433c2b:	90                   	nop
  433c2c:	c9                   	leaveq 
  433c2d:	c3                   	retq   

0000000000433c2e <std::_Deque_base<x666::Parser::BracketEntry, std::allocator<x666::Parser::BracketEntry> >::_M_deallocate_map(x666::Parser::BracketEntry**, unsigned long)>:
      _M_deallocate_map(_Map_pointer __p, size_t __n) _GLIBCXX_NOEXCEPT
  433c2e:	55                   	push   %rbp
  433c2f:	48 89 e5             	mov    %rsp,%rbp
  433c32:	48 83 ec 30          	sub    $0x30,%rsp
  433c36:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  433c3a:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  433c3e:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
  433c42:	48 8d 45 ff          	lea    -0x1(%rbp),%rax
  433c46:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  433c4a:	48 89 d6             	mov    %rdx,%rsi
  433c4d:	48 89 c7             	mov    %rax,%rdi
  433c50:	e8 ab 03 00 00       	callq  434000 <std::_Deque_base<x666::Parser::BracketEntry, std::allocator<x666::Parser::BracketEntry> >::_M_get_map_allocator() const>
	_Map_alloc_traits::deallocate(__map_alloc, __p, __n);
  433c55:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  433c59:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  433c5d:	48 8d 45 ff          	lea    -0x1(%rbp),%rax
  433c61:	48 89 ce             	mov    %rcx,%rsi
  433c64:	48 89 c7             	mov    %rax,%rdi
  433c67:	e8 e3 03 00 00       	callq  43404f <std::allocator_traits<std::allocator<x666::Parser::BracketEntry*> >::deallocate(std::allocator<x666::Parser::BracketEntry*>&, x666::Parser::BracketEntry**, unsigned long)>
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
  433c6c:	48 8d 45 ff          	lea    -0x1(%rbp),%rax
  433c70:	48 89 c7             	mov    %rax,%rdi
  433c73:	e8 bc 03 00 00       	callq  434034 <std::allocator<x666::Parser::BracketEntry*>::~allocator()>
      }
  433c78:	90                   	nop
  433c79:	c9                   	leaveq 
  433c7a:	c3                   	retq   
  433c7b:	90                   	nop

0000000000433c7c <std::_Deque_iterator<x666::Parser::BracketEntry, x666::Parser::BracketEntry&, x666::Parser::BracketEntry*>::_Deque_iterator(std::_Deque_iterator<x666::Parser::BracketEntry, x666::Parser::BracketEntry&, x666::Parser::BracketEntry*> const&)>:
      _Deque_iterator(const iterator& __x) _GLIBCXX_NOEXCEPT
  433c7c:	55                   	push   %rbp
  433c7d:	48 89 e5             	mov    %rsp,%rbp
  433c80:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  433c84:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      : _M_cur(__x._M_cur), _M_first(__x._M_first),
  433c88:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  433c8c:	48 8b 10             	mov    (%rax),%rdx
	_M_last(__x._M_last), _M_node(__x._M_node) { }
  433c8f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  433c93:	48 89 10             	mov    %rdx,(%rax)
      : _M_cur(__x._M_cur), _M_first(__x._M_first),
  433c96:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  433c9a:	48 8b 50 08          	mov    0x8(%rax),%rdx
	_M_last(__x._M_last), _M_node(__x._M_node) { }
  433c9e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  433ca2:	48 89 50 08          	mov    %rdx,0x8(%rax)
  433ca6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  433caa:	48 8b 50 10          	mov    0x10(%rax),%rdx
  433cae:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  433cb2:	48 89 50 10          	mov    %rdx,0x10(%rax)
  433cb6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  433cba:	48 8b 50 18          	mov    0x18(%rax),%rdx
  433cbe:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  433cc2:	48 89 50 18          	mov    %rdx,0x18(%rax)
  433cc6:	90                   	nop
  433cc7:	5d                   	pop    %rbp
  433cc8:	c3                   	retq   
  433cc9:	90                   	nop

0000000000433cca <std::allocator<x666::LexError>::~allocator()>:
  433cca:	55                   	push   %rbp
  433ccb:	48 89 e5             	mov    %rsp,%rbp
  433cce:	48 83 ec 10          	sub    $0x10,%rsp
  433cd2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  433cd6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  433cda:	48 89 c7             	mov    %rax,%rdi
  433cdd:	e8 9c 03 00 00       	callq  43407e <__gnu_cxx::new_allocator<x666::LexError>::~new_allocator()>
  433ce2:	90                   	nop
  433ce3:	c9                   	leaveq 
  433ce4:	c3                   	retq   
  433ce5:	90                   	nop

0000000000433ce6 <std::_Vector_base<x666::LexError, std::allocator<x666::LexError> >::_M_deallocate(x666::LexError*, unsigned long)>:
      _M_deallocate(pointer __p, size_t __n)
  433ce6:	55                   	push   %rbp
  433ce7:	48 89 e5             	mov    %rsp,%rbp
  433cea:	48 83 ec 20          	sub    $0x20,%rsp
  433cee:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  433cf2:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  433cf6:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	if (__p)
  433cfa:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
  433cff:	74 17                	je     433d18 <std::_Vector_base<x666::LexError, std::allocator<x666::LexError> >::_M_deallocate(x666::LexError*, unsigned long)+0x32>
	  _Tr::deallocate(_M_impl, __p, __n);
  433d01:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  433d05:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  433d09:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  433d0d:	48 89 ce             	mov    %rcx,%rsi
  433d10:	48 89 c7             	mov    %rax,%rdi
  433d13:	e8 71 03 00 00       	callq  434089 <std::allocator_traits<std::allocator<x666::LexError> >::deallocate(std::allocator<x666::LexError>&, x666::LexError*, unsigned long)>
      }
  433d18:	90                   	nop
  433d19:	c9                   	leaveq 
  433d1a:	c3                   	retq   

0000000000433d1b <void std::_Destroy<x666::LexError*>(x666::LexError*, x666::LexError*)>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
  433d1b:	55                   	push   %rbp
  433d1c:	48 89 e5             	mov    %rsp,%rbp
  433d1f:	48 83 ec 10          	sub    $0x10,%rsp
  433d23:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  433d27:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	__destroy(__first, __last);
  433d2b:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  433d2f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  433d33:	48 89 d6             	mov    %rdx,%rsi
  433d36:	48 89 c7             	mov    %rax,%rdi
  433d39:	e8 79 03 00 00       	callq  4340b7 <void std::_Destroy_aux<true>::__destroy<x666::LexError*>(x666::LexError*, x666::LexError*)>
    }
  433d3e:	90                   	nop
  433d3f:	c9                   	leaveq 
  433d40:	c3                   	retq   
  433d41:	90                   	nop

0000000000433d42 <__gnu_cxx::__normal_iterator<x666::LexError const*, std::vector<x666::LexError, std::allocator<x666::LexError> > >::__normal_iterator(x666::LexError const* const&)>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
  433d42:	55                   	push   %rbp
  433d43:	48 89 e5             	mov    %rsp,%rbp
  433d46:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  433d4a:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      : _M_current(__i) { }
  433d4e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  433d52:	48 8b 10             	mov    (%rax),%rdx
  433d55:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  433d59:	48 89 10             	mov    %rdx,(%rax)
  433d5c:	90                   	nop
  433d5d:	5d                   	pop    %rbp
  433d5e:	c3                   	retq   
  433d5f:	90                   	nop

0000000000433d60 <__gnu_cxx::__normal_iterator<x666::LexError const*, std::vector<x666::LexError, std::allocator<x666::LexError> > >::base() const>:
      base() const _GLIBCXX_NOEXCEPT
  433d60:	55                   	push   %rbp
  433d61:	48 89 e5             	mov    %rsp,%rbp
  433d64:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_current; }
  433d68:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  433d6c:	5d                   	pop    %rbp
  433d6d:	c3                   	retq   

0000000000433d6e <std::__uniq_ptr_impl<x666::Expression, std::default_delete<x666::Expression> >::_M_ptr() const>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
  433d6e:	55                   	push   %rbp
  433d6f:	48 89 e5             	mov    %rsp,%rbp
  433d72:	48 83 ec 10          	sub    $0x10,%rsp
  433d76:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  433d7a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  433d7e:	48 89 c7             	mov    %rax,%rdi
  433d81:	e8 40 03 00 00       	callq  4340c6 <std::tuple_element<0ul, std::tuple<x666::Expression*, std::default_delete<x666::Expression> > >::type const& std::get<0ul, x666::Expression*, std::default_delete<x666::Expression> >(std::tuple<x666::Expression*, std::default_delete<x666::Expression> > const&)>
  433d86:	48 8b 00             	mov    (%rax),%rax
  433d89:	c9                   	leaveq 
  433d8a:	c3                   	retq   

0000000000433d8b <std::tuple_element<1ul, std::tuple<x666::Expression*, std::default_delete<x666::Expression> > >::type& std::get<1ul, x666::Expression*, std::default_delete<x666::Expression> >(std::tuple<x666::Expression*, std::default_delete<x666::Expression> >&)>:
    get(tuple<_Elements...>& __t) noexcept
  433d8b:	55                   	push   %rbp
  433d8c:	48 89 e5             	mov    %rsp,%rbp
  433d8f:	48 83 ec 10          	sub    $0x10,%rsp
  433d93:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return std::__get_helper<__i>(__t); }
  433d97:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  433d9b:	48 89 c7             	mov    %rax,%rdi
  433d9e:	e8 3d 03 00 00       	callq  4340e0 <std::default_delete<x666::Expression>& std::__get_helper<1ul, std::default_delete<x666::Expression>>(std::_Tuple_impl<1ul, std::default_delete<x666::Expression>>&)>
  433da3:	c9                   	leaveq 
  433da4:	c3                   	retq   

0000000000433da5 <x666::Expression*& std::__get_helper<0ul, x666::Expression*, std::default_delete<x666::Expression> >(std::_Tuple_impl<0ul, x666::Expression*, std::default_delete<x666::Expression> >&)>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
  433da5:	55                   	push   %rbp
  433da6:	48 89 e5             	mov    %rsp,%rbp
  433da9:	48 83 ec 10          	sub    $0x10,%rsp
  433dad:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
  433db1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  433db5:	48 89 c7             	mov    %rax,%rdi
  433db8:	e8 3d 03 00 00       	callq  4340fa <std::_Tuple_impl<0ul, x666::Expression*, std::default_delete<x666::Expression> >::_M_head(std::_Tuple_impl<0ul, x666::Expression*, std::default_delete<x666::Expression> >&)>
  433dbd:	c9                   	leaveq 
  433dbe:	c3                   	retq   
  433dbf:	90                   	nop

0000000000433dc0 <__gnu_cxx::new_allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > >::~new_allocator()>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }

      template<typename _Tp1>
	new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
  433dc0:	55                   	push   %rbp
  433dc1:	48 89 e5             	mov    %rsp,%rbp
  433dc4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  433dc8:	90                   	nop
  433dc9:	5d                   	pop    %rbp
  433dca:	c3                   	retq   

0000000000433dcb <std::allocator_traits<std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > >::deallocate(std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > >&, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*, unsigned long)>:
       *  @param  __n  The number of objects space was allocated for.
       *
       *  Calls <tt> a.deallocate(p, n) </tt>
      */
      static void
      deallocate(allocator_type& __a, pointer __p, size_type __n)
  433dcb:	55                   	push   %rbp
  433dcc:	48 89 e5             	mov    %rsp,%rbp
  433dcf:	48 83 ec 20          	sub    $0x20,%rsp
  433dd3:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  433dd7:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  433ddb:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      { __a.deallocate(__p, __n); }
  433ddf:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  433de3:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  433de7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  433deb:	48 89 ce             	mov    %rcx,%rsi
  433dee:	48 89 c7             	mov    %rax,%rdi
  433df1:	e8 1e 03 00 00       	callq  434114 <__gnu_cxx::new_allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > >::deallocate(std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*, unsigned long)>
  433df6:	90                   	nop
  433df7:	c9                   	leaveq 
  433df8:	c3                   	retq   

0000000000433df9 <std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >* std::__addressof<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > >(std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&)>:
   *  @brief Same as C++11 std::addressof
   *  @ingroup utilities
   */
  template<typename _Tp>
    inline _GLIBCXX_CONSTEXPR _Tp*
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
  433df9:	55                   	push   %rbp
  433dfa:	48 89 e5             	mov    %rsp,%rbp
  433dfd:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return __builtin_addressof(__r); }
  433e01:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  433e05:	5d                   	pop    %rbp
  433e06:	c3                   	retq   

0000000000433e07 <void std::_Destroy_aux<false>::__destroy<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*>(std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*)>:
        __destroy(_ForwardIterator __first, _ForwardIterator __last)
  433e07:	55                   	push   %rbp
  433e08:	48 89 e5             	mov    %rsp,%rbp
  433e0b:	48 83 ec 10          	sub    $0x10,%rsp
  433e0f:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  433e13:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	  for (; __first != __last; ++__first)
  433e17:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  433e1b:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
  433e1f:	74 1b                	je     433e3c <void std::_Destroy_aux<false>::__destroy<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*>(std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*)+0x35>
	    std::_Destroy(std::__addressof(*__first));
  433e21:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  433e25:	48 89 c7             	mov    %rax,%rdi
  433e28:	e8 cc ff ff ff       	callq  433df9 <std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >* std::__addressof<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > >(std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&)>
  433e2d:	48 89 c7             	mov    %rax,%rdi
  433e30:	e8 01 03 00 00       	callq  434136 <void std::_Destroy<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > >(std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*)>
	  for (; __first != __last; ++__first)
  433e35:	48 83 45 f8 08       	addq   $0x8,-0x8(%rbp)
  433e3a:	eb db                	jmp    433e17 <void std::_Destroy_aux<false>::__destroy<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*>(std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*)+0x10>
	}
  433e3c:	90                   	nop
  433e3d:	c9                   	leaveq 
  433e3e:	c3                   	retq   
  433e3f:	90                   	nop

0000000000433e40 <std::_Deque_base<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > >::_M_deallocate_node(std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*)>:
      _M_deallocate_node(_Ptr __p) _GLIBCXX_NOEXCEPT
  433e40:	55                   	push   %rbp
  433e41:	48 89 e5             	mov    %rsp,%rbp
  433e44:	48 83 ec 10          	sub    $0x10,%rsp
  433e48:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  433e4c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	_Traits::deallocate(_M_impl, __p, __deque_buf_size(sizeof(_Tp)));
  433e50:	bf 08 00 00 00       	mov    $0x8,%edi
  433e55:	e8 d4 ee ff ff       	callq  432d2e <std::__deque_buf_size(unsigned long)>
  433e5a:	48 89 c2             	mov    %rax,%rdx
  433e5d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  433e61:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  433e65:	48 89 ce             	mov    %rcx,%rsi
  433e68:	48 89 c7             	mov    %rax,%rdi
  433e6b:	e8 5b ff ff ff       	callq  433dcb <std::allocator_traits<std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > >::deallocate(std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > >&, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*, unsigned long)>
      }
  433e70:	90                   	nop
  433e71:	c9                   	leaveq 
  433e72:	c3                   	retq   
  433e73:	90                   	nop

0000000000433e74 <std::_Deque_base<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > >::_M_get_map_allocator() const>:
      _M_get_map_allocator() const _GLIBCXX_NOEXCEPT
  433e74:	55                   	push   %rbp
  433e75:	48 89 e5             	mov    %rsp,%rbp
  433e78:	48 83 ec 10          	sub    $0x10,%rsp
  433e7c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  433e80:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      { return _Map_alloc_type(_M_get_Tp_allocator()); }
  433e84:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  433e88:	48 89 c7             	mov    %rax,%rdi
  433e8b:	e8 c2 02 00 00       	callq  434152 <std::_Deque_base<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > >::_M_get_Tp_allocator() const>
  433e90:	48 89 c2             	mov    %rax,%rdx
  433e93:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  433e97:	48 89 d6             	mov    %rdx,%rsi
  433e9a:	48 89 c7             	mov    %rax,%rdi
  433e9d:	e8 be 02 00 00       	callq  434160 <std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*>::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > >(std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > const&)>
  433ea2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  433ea6:	c9                   	leaveq 
  433ea7:	c3                   	retq   

0000000000433ea8 <std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*>::~allocator()>:
  433ea8:	55                   	push   %rbp
  433ea9:	48 89 e5             	mov    %rsp,%rbp
  433eac:	48 83 ec 10          	sub    $0x10,%rsp
  433eb0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  433eb4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  433eb8:	48 89 c7             	mov    %rax,%rdi
  433ebb:	e8 c0 02 00 00       	callq  434180 <__gnu_cxx::new_allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*>::~new_allocator()>
  433ec0:	90                   	nop
  433ec1:	c9                   	leaveq 
  433ec2:	c3                   	retq   

0000000000433ec3 <std::allocator_traits<std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*> >::deallocate(std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*>&, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >**, unsigned long)>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
  433ec3:	55                   	push   %rbp
  433ec4:	48 89 e5             	mov    %rsp,%rbp
  433ec7:	48 83 ec 20          	sub    $0x20,%rsp
  433ecb:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  433ecf:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  433ed3:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      { __a.deallocate(__p, __n); }
  433ed7:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  433edb:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  433edf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  433ee3:	48 89 ce             	mov    %rcx,%rsi
  433ee6:	48 89 c7             	mov    %rax,%rdi
  433ee9:	e8 9e 02 00 00       	callq  43418c <__gnu_cxx::new_allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*>::deallocate(std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >**, unsigned long)>
  433eee:	90                   	nop
  433eef:	c9                   	leaveq 
  433ef0:	c3                   	retq   

0000000000433ef1 <std::deque<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > >::_S_buffer_size()>:
      static size_t _S_buffer_size() _GLIBCXX_NOEXCEPT
  433ef1:	55                   	push   %rbp
  433ef2:	48 89 e5             	mov    %rsp,%rbp
      { return __deque_buf_size(sizeof(_Tp)); }
  433ef5:	bf 08 00 00 00       	mov    $0x8,%edi
  433efa:	e8 2f ee ff ff       	callq  432d2e <std::__deque_buf_size(unsigned long)>
  433eff:	5d                   	pop    %rbp
  433f00:	c3                   	retq   
  433f01:	90                   	nop

0000000000433f02 <__gnu_cxx::new_allocator<x666::LineInfo>::~new_allocator()>:
  433f02:	55                   	push   %rbp
  433f03:	48 89 e5             	mov    %rsp,%rbp
  433f06:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  433f0a:	90                   	nop
  433f0b:	5d                   	pop    %rbp
  433f0c:	c3                   	retq   
  433f0d:	90                   	nop

0000000000433f0e <std::_Deque_base<x666::LineInfo, std::allocator<x666::LineInfo> >::_M_deallocate_node(x666::LineInfo*)>:
      _M_deallocate_node(_Ptr __p) _GLIBCXX_NOEXCEPT
  433f0e:	55                   	push   %rbp
  433f0f:	48 89 e5             	mov    %rsp,%rbp
  433f12:	48 83 ec 10          	sub    $0x10,%rsp
  433f16:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  433f1a:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	_Traits::deallocate(_M_impl, __p, __deque_buf_size(sizeof(_Tp)));
  433f1e:	bf 20 00 00 00       	mov    $0x20,%edi
  433f23:	e8 06 ee ff ff       	callq  432d2e <std::__deque_buf_size(unsigned long)>
  433f28:	48 89 c2             	mov    %rax,%rdx
  433f2b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  433f2f:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  433f33:	48 89 ce             	mov    %rcx,%rsi
  433f36:	48 89 c7             	mov    %rax,%rdi
  433f39:	e8 70 02 00 00       	callq  4341ae <std::allocator_traits<std::allocator<x666::LineInfo> >::deallocate(std::allocator<x666::LineInfo>&, x666::LineInfo*, unsigned long)>
      }
  433f3e:	90                   	nop
  433f3f:	c9                   	leaveq 
  433f40:	c3                   	retq   
  433f41:	90                   	nop

0000000000433f42 <std::_Deque_base<x666::LineInfo, std::allocator<x666::LineInfo> >::_M_get_map_allocator() const>:
      _M_get_map_allocator() const _GLIBCXX_NOEXCEPT
  433f42:	55                   	push   %rbp
  433f43:	48 89 e5             	mov    %rsp,%rbp
  433f46:	48 83 ec 10          	sub    $0x10,%rsp
  433f4a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  433f4e:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      { return _Map_alloc_type(_M_get_Tp_allocator()); }
  433f52:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  433f56:	48 89 c7             	mov    %rax,%rdi
  433f59:	e8 7e 02 00 00       	callq  4341dc <std::_Deque_base<x666::LineInfo, std::allocator<x666::LineInfo> >::_M_get_Tp_allocator() const>
  433f5e:	48 89 c2             	mov    %rax,%rdx
  433f61:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  433f65:	48 89 d6             	mov    %rdx,%rsi
  433f68:	48 89 c7             	mov    %rax,%rdi
  433f6b:	e8 7a 02 00 00       	callq  4341ea <std::allocator<x666::LineInfo*>::allocator<x666::LineInfo>(std::allocator<x666::LineInfo> const&)>
  433f70:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  433f74:	c9                   	leaveq 
  433f75:	c3                   	retq   

0000000000433f76 <std::allocator<x666::LineInfo*>::~allocator()>:
  433f76:	55                   	push   %rbp
  433f77:	48 89 e5             	mov    %rsp,%rbp
  433f7a:	48 83 ec 10          	sub    $0x10,%rsp
  433f7e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  433f82:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  433f86:	48 89 c7             	mov    %rax,%rdi
  433f89:	e8 7c 02 00 00       	callq  43420a <__gnu_cxx::new_allocator<x666::LineInfo*>::~new_allocator()>
  433f8e:	90                   	nop
  433f8f:	c9                   	leaveq 
  433f90:	c3                   	retq   

0000000000433f91 <std::allocator_traits<std::allocator<x666::LineInfo*> >::deallocate(std::allocator<x666::LineInfo*>&, x666::LineInfo**, unsigned long)>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
  433f91:	55                   	push   %rbp
  433f92:	48 89 e5             	mov    %rsp,%rbp
  433f95:	48 83 ec 20          	sub    $0x20,%rsp
  433f99:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  433f9d:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  433fa1:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      { __a.deallocate(__p, __n); }
  433fa5:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  433fa9:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  433fad:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  433fb1:	48 89 ce             	mov    %rcx,%rsi
  433fb4:	48 89 c7             	mov    %rax,%rdi
  433fb7:	e8 5a 02 00 00       	callq  434216 <__gnu_cxx::new_allocator<x666::LineInfo*>::deallocate(x666::LineInfo**, unsigned long)>
  433fbc:	90                   	nop
  433fbd:	c9                   	leaveq 
  433fbe:	c3                   	retq   
  433fbf:	90                   	nop

0000000000433fc0 <__gnu_cxx::new_allocator<x666::Parser::BracketEntry>::~new_allocator()>:
  433fc0:	55                   	push   %rbp
  433fc1:	48 89 e5             	mov    %rsp,%rbp
  433fc4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  433fc8:	90                   	nop
  433fc9:	5d                   	pop    %rbp
  433fca:	c3                   	retq   
  433fcb:	90                   	nop

0000000000433fcc <std::_Deque_base<x666::Parser::BracketEntry, std::allocator<x666::Parser::BracketEntry> >::_M_deallocate_node(x666::Parser::BracketEntry*)>:
      _M_deallocate_node(_Ptr __p) _GLIBCXX_NOEXCEPT
  433fcc:	55                   	push   %rbp
  433fcd:	48 89 e5             	mov    %rsp,%rbp
  433fd0:	48 83 ec 10          	sub    $0x10,%rsp
  433fd4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  433fd8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	_Traits::deallocate(_M_impl, __p, __deque_buf_size(sizeof(_Tp)));
  433fdc:	bf 10 00 00 00       	mov    $0x10,%edi
  433fe1:	e8 48 ed ff ff       	callq  432d2e <std::__deque_buf_size(unsigned long)>
  433fe6:	48 89 c2             	mov    %rax,%rdx
  433fe9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  433fed:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  433ff1:	48 89 ce             	mov    %rcx,%rsi
  433ff4:	48 89 c7             	mov    %rax,%rdi
  433ff7:	e8 3c 02 00 00       	callq  434238 <std::allocator_traits<std::allocator<x666::Parser::BracketEntry> >::deallocate(std::allocator<x666::Parser::BracketEntry>&, x666::Parser::BracketEntry*, unsigned long)>
      }
  433ffc:	90                   	nop
  433ffd:	c9                   	leaveq 
  433ffe:	c3                   	retq   
  433fff:	90                   	nop

0000000000434000 <std::_Deque_base<x666::Parser::BracketEntry, std::allocator<x666::Parser::BracketEntry> >::_M_get_map_allocator() const>:
      _M_get_map_allocator() const _GLIBCXX_NOEXCEPT
  434000:	55                   	push   %rbp
  434001:	48 89 e5             	mov    %rsp,%rbp
  434004:	48 83 ec 10          	sub    $0x10,%rsp
  434008:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  43400c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      { return _Map_alloc_type(_M_get_Tp_allocator()); }
  434010:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  434014:	48 89 c7             	mov    %rax,%rdi
  434017:	e8 4a 02 00 00       	callq  434266 <std::_Deque_base<x666::Parser::BracketEntry, std::allocator<x666::Parser::BracketEntry> >::_M_get_Tp_allocator() const>
  43401c:	48 89 c2             	mov    %rax,%rdx
  43401f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  434023:	48 89 d6             	mov    %rdx,%rsi
  434026:	48 89 c7             	mov    %rax,%rdi
  434029:	e8 46 02 00 00       	callq  434274 <std::allocator<x666::Parser::BracketEntry*>::allocator<x666::Parser::BracketEntry>(std::allocator<x666::Parser::BracketEntry> const&)>
  43402e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  434032:	c9                   	leaveq 
  434033:	c3                   	retq   

0000000000434034 <std::allocator<x666::Parser::BracketEntry*>::~allocator()>:
  434034:	55                   	push   %rbp
  434035:	48 89 e5             	mov    %rsp,%rbp
  434038:	48 83 ec 10          	sub    $0x10,%rsp
  43403c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  434040:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  434044:	48 89 c7             	mov    %rax,%rdi
  434047:	e8 48 02 00 00       	callq  434294 <__gnu_cxx::new_allocator<x666::Parser::BracketEntry*>::~new_allocator()>
  43404c:	90                   	nop
  43404d:	c9                   	leaveq 
  43404e:	c3                   	retq   

000000000043404f <std::allocator_traits<std::allocator<x666::Parser::BracketEntry*> >::deallocate(std::allocator<x666::Parser::BracketEntry*>&, x666::Parser::BracketEntry**, unsigned long)>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
  43404f:	55                   	push   %rbp
  434050:	48 89 e5             	mov    %rsp,%rbp
  434053:	48 83 ec 20          	sub    $0x20,%rsp
  434057:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  43405b:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  43405f:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      { __a.deallocate(__p, __n); }
  434063:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  434067:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  43406b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43406f:	48 89 ce             	mov    %rcx,%rsi
  434072:	48 89 c7             	mov    %rax,%rdi
  434075:	e8 26 02 00 00       	callq  4342a0 <__gnu_cxx::new_allocator<x666::Parser::BracketEntry*>::deallocate(x666::Parser::BracketEntry**, unsigned long)>
  43407a:	90                   	nop
  43407b:	c9                   	leaveq 
  43407c:	c3                   	retq   
  43407d:	90                   	nop

000000000043407e <__gnu_cxx::new_allocator<x666::LexError>::~new_allocator()>:
  43407e:	55                   	push   %rbp
  43407f:	48 89 e5             	mov    %rsp,%rbp
  434082:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  434086:	90                   	nop
  434087:	5d                   	pop    %rbp
  434088:	c3                   	retq   

0000000000434089 <std::allocator_traits<std::allocator<x666::LexError> >::deallocate(std::allocator<x666::LexError>&, x666::LexError*, unsigned long)>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
  434089:	55                   	push   %rbp
  43408a:	48 89 e5             	mov    %rsp,%rbp
  43408d:	48 83 ec 20          	sub    $0x20,%rsp
  434091:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  434095:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  434099:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      { __a.deallocate(__p, __n); }
  43409d:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  4340a1:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  4340a5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4340a9:	48 89 ce             	mov    %rcx,%rsi
  4340ac:	48 89 c7             	mov    %rax,%rdi
  4340af:	e8 0e 02 00 00       	callq  4342c2 <__gnu_cxx::new_allocator<x666::LexError>::deallocate(x666::LexError*, unsigned long)>
  4340b4:	90                   	nop
  4340b5:	c9                   	leaveq 
  4340b6:	c3                   	retq   

00000000004340b7 <void std::_Destroy_aux<true>::__destroy<x666::LexError*>(x666::LexError*, x666::LexError*)>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
  4340b7:	55                   	push   %rbp
  4340b8:	48 89 e5             	mov    %rsp,%rbp
  4340bb:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4340bf:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  4340c3:	90                   	nop
  4340c4:	5d                   	pop    %rbp
  4340c5:	c3                   	retq   

00000000004340c6 <std::tuple_element<0ul, std::tuple<x666::Expression*, std::default_delete<x666::Expression> > >::type const& std::get<0ul, x666::Expression*, std::default_delete<x666::Expression> >(std::tuple<x666::Expression*, std::default_delete<x666::Expression> > const&)>:

  /// Return a const reference to the ith element of a const tuple.
  template<std::size_t __i, typename... _Elements>
    constexpr const __tuple_element_t<__i, tuple<_Elements...>>&
    get(const tuple<_Elements...>& __t) noexcept
  4340c6:	55                   	push   %rbp
  4340c7:	48 89 e5             	mov    %rsp,%rbp
  4340ca:	48 83 ec 10          	sub    $0x10,%rsp
  4340ce:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return std::__get_helper<__i>(__t); }
  4340d2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4340d6:	48 89 c7             	mov    %rax,%rdi
  4340d9:	e8 06 02 00 00       	callq  4342e4 <x666::Expression* const& std::__get_helper<0ul, x666::Expression*, std::default_delete<x666::Expression> >(std::_Tuple_impl<0ul, x666::Expression*, std::default_delete<x666::Expression> > const&)>
  4340de:	c9                   	leaveq 
  4340df:	c3                   	retq   

00000000004340e0 <std::default_delete<x666::Expression>& std::__get_helper<1ul, std::default_delete<x666::Expression>>(std::_Tuple_impl<1ul, std::default_delete<x666::Expression>>&)>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
  4340e0:	55                   	push   %rbp
  4340e1:	48 89 e5             	mov    %rsp,%rbp
  4340e4:	48 83 ec 10          	sub    $0x10,%rsp
  4340e8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
  4340ec:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4340f0:	48 89 c7             	mov    %rax,%rdi
  4340f3:	e8 06 02 00 00       	callq  4342fe <std::_Tuple_impl<1ul, std::default_delete<x666::Expression> >::_M_head(std::_Tuple_impl<1ul, std::default_delete<x666::Expression> >&)>
  4340f8:	c9                   	leaveq 
  4340f9:	c3                   	retq   

00000000004340fa <std::_Tuple_impl<0ul, x666::Expression*, std::default_delete<x666::Expression> >::_M_head(std::_Tuple_impl<0ul, x666::Expression*, std::default_delete<x666::Expression> >&)>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
  4340fa:	55                   	push   %rbp
  4340fb:	48 89 e5             	mov    %rsp,%rbp
  4340fe:	48 83 ec 10          	sub    $0x10,%rsp
  434102:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  434106:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43410a:	48 89 c7             	mov    %rax,%rdi
  43410d:	e8 06 02 00 00       	callq  434318 <std::_Head_base<0ul, x666::Expression*, false>::_M_head(std::_Head_base<0ul, x666::Expression*, false>&)>
  434112:	c9                   	leaveq 
  434113:	c3                   	retq   

0000000000434114 <__gnu_cxx::new_allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > >::deallocate(std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*, unsigned long)>:
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
  434114:	55                   	push   %rbp
  434115:	48 89 e5             	mov    %rsp,%rbp
  434118:	48 83 ec 20          	sub    $0x20,%rsp
  43411c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  434120:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  434124:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	  {
	    ::operator delete(__p, std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p);
  434128:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  43412c:	48 89 c7             	mov    %rax,%rdi
  43412f:	e8 8c e6 ff ff       	callq  4327c0 <operator delete(void*)@plt>
      }
  434134:	c9                   	leaveq 
  434135:	c3                   	retq   

0000000000434136 <void std::_Destroy<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > >(std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*)>:
    _Destroy(_Tp* __pointer)
  434136:	55                   	push   %rbp
  434137:	48 89 e5             	mov    %rsp,%rbp
  43413a:	48 83 ec 10          	sub    $0x10,%rsp
  43413e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { __pointer->~_Tp(); }
  434142:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  434146:	48 89 c7             	mov    %rax,%rdi
  434149:	e8 be ec ff ff       	callq  432e0c <std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >::~unique_ptr()>
  43414e:	90                   	nop
  43414f:	c9                   	leaveq 
  434150:	c3                   	retq   
  434151:	90                   	nop

0000000000434152 <std::_Deque_base<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > >::_M_get_Tp_allocator() const>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
  434152:	55                   	push   %rbp
  434153:	48 89 e5             	mov    %rsp,%rbp
  434156:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return *static_cast<const _Tp_alloc_type*>(&this->_M_impl); }
  43415a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43415e:	5d                   	pop    %rbp
  43415f:	c3                   	retq   

0000000000434160 <std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*>::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > >(std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > const&)>:
	allocator(const allocator<_Tp1>&) throw() { }
  434160:	55                   	push   %rbp
  434161:	48 89 e5             	mov    %rsp,%rbp
  434164:	48 83 ec 10          	sub    $0x10,%rsp
  434168:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  43416c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  434170:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  434174:	48 89 c7             	mov    %rax,%rdi
  434177:	e8 aa 01 00 00       	callq  434326 <__gnu_cxx::new_allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*>::new_allocator()>
  43417c:	90                   	nop
  43417d:	c9                   	leaveq 
  43417e:	c3                   	retq   
  43417f:	90                   	nop

0000000000434180 <__gnu_cxx::new_allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*>::~new_allocator()>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
  434180:	55                   	push   %rbp
  434181:	48 89 e5             	mov    %rsp,%rbp
  434184:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  434188:	90                   	nop
  434189:	5d                   	pop    %rbp
  43418a:	c3                   	retq   
  43418b:	90                   	nop

000000000043418c <__gnu_cxx::new_allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*>::deallocate(std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >**, unsigned long)>:
      deallocate(pointer __p, size_type)
  43418c:	55                   	push   %rbp
  43418d:	48 89 e5             	mov    %rsp,%rbp
  434190:	48 83 ec 20          	sub    $0x20,%rsp
  434194:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  434198:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  43419c:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	::operator delete(__p);
  4341a0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4341a4:	48 89 c7             	mov    %rax,%rdi
  4341a7:	e8 14 e6 ff ff       	callq  4327c0 <operator delete(void*)@plt>
      }
  4341ac:	c9                   	leaveq 
  4341ad:	c3                   	retq   

00000000004341ae <std::allocator_traits<std::allocator<x666::LineInfo> >::deallocate(std::allocator<x666::LineInfo>&, x666::LineInfo*, unsigned long)>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
  4341ae:	55                   	push   %rbp
  4341af:	48 89 e5             	mov    %rsp,%rbp
  4341b2:	48 83 ec 20          	sub    $0x20,%rsp
  4341b6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4341ba:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  4341be:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      { __a.deallocate(__p, __n); }
  4341c2:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  4341c6:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  4341ca:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4341ce:	48 89 ce             	mov    %rcx,%rsi
  4341d1:	48 89 c7             	mov    %rax,%rdi
  4341d4:	e8 59 01 00 00       	callq  434332 <__gnu_cxx::new_allocator<x666::LineInfo>::deallocate(x666::LineInfo*, unsigned long)>
  4341d9:	90                   	nop
  4341da:	c9                   	leaveq 
  4341db:	c3                   	retq   

00000000004341dc <std::_Deque_base<x666::LineInfo, std::allocator<x666::LineInfo> >::_M_get_Tp_allocator() const>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
  4341dc:	55                   	push   %rbp
  4341dd:	48 89 e5             	mov    %rsp,%rbp
  4341e0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return *static_cast<const _Tp_alloc_type*>(&this->_M_impl); }
  4341e4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4341e8:	5d                   	pop    %rbp
  4341e9:	c3                   	retq   

00000000004341ea <std::allocator<x666::LineInfo*>::allocator<x666::LineInfo>(std::allocator<x666::LineInfo> const&)>:
  4341ea:	55                   	push   %rbp
  4341eb:	48 89 e5             	mov    %rsp,%rbp
  4341ee:	48 83 ec 10          	sub    $0x10,%rsp
  4341f2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4341f6:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  4341fa:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4341fe:	48 89 c7             	mov    %rax,%rdi
  434201:	e8 4e 01 00 00       	callq  434354 <__gnu_cxx::new_allocator<x666::LineInfo*>::new_allocator()>
  434206:	90                   	nop
  434207:	c9                   	leaveq 
  434208:	c3                   	retq   
  434209:	90                   	nop

000000000043420a <__gnu_cxx::new_allocator<x666::LineInfo*>::~new_allocator()>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
  43420a:	55                   	push   %rbp
  43420b:	48 89 e5             	mov    %rsp,%rbp
  43420e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  434212:	90                   	nop
  434213:	5d                   	pop    %rbp
  434214:	c3                   	retq   
  434215:	90                   	nop

0000000000434216 <__gnu_cxx::new_allocator<x666::LineInfo*>::deallocate(x666::LineInfo**, unsigned long)>:
      deallocate(pointer __p, size_type)
  434216:	55                   	push   %rbp
  434217:	48 89 e5             	mov    %rsp,%rbp
  43421a:	48 83 ec 20          	sub    $0x20,%rsp
  43421e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  434222:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  434226:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	::operator delete(__p);
  43422a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  43422e:	48 89 c7             	mov    %rax,%rdi
  434231:	e8 8a e5 ff ff       	callq  4327c0 <operator delete(void*)@plt>
      }
  434236:	c9                   	leaveq 
  434237:	c3                   	retq   

0000000000434238 <std::allocator_traits<std::allocator<x666::Parser::BracketEntry> >::deallocate(std::allocator<x666::Parser::BracketEntry>&, x666::Parser::BracketEntry*, unsigned long)>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
  434238:	55                   	push   %rbp
  434239:	48 89 e5             	mov    %rsp,%rbp
  43423c:	48 83 ec 20          	sub    $0x20,%rsp
  434240:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  434244:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  434248:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      { __a.deallocate(__p, __n); }
  43424c:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  434250:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  434254:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  434258:	48 89 ce             	mov    %rcx,%rsi
  43425b:	48 89 c7             	mov    %rax,%rdi
  43425e:	e8 fd 00 00 00       	callq  434360 <__gnu_cxx::new_allocator<x666::Parser::BracketEntry>::deallocate(x666::Parser::BracketEntry*, unsigned long)>
  434263:	90                   	nop
  434264:	c9                   	leaveq 
  434265:	c3                   	retq   

0000000000434266 <std::_Deque_base<x666::Parser::BracketEntry, std::allocator<x666::Parser::BracketEntry> >::_M_get_Tp_allocator() const>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
  434266:	55                   	push   %rbp
  434267:	48 89 e5             	mov    %rsp,%rbp
  43426a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return *static_cast<const _Tp_alloc_type*>(&this->_M_impl); }
  43426e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  434272:	5d                   	pop    %rbp
  434273:	c3                   	retq   

0000000000434274 <std::allocator<x666::Parser::BracketEntry*>::allocator<x666::Parser::BracketEntry>(std::allocator<x666::Parser::BracketEntry> const&)>:
  434274:	55                   	push   %rbp
  434275:	48 89 e5             	mov    %rsp,%rbp
  434278:	48 83 ec 10          	sub    $0x10,%rsp
  43427c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  434280:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  434284:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  434288:	48 89 c7             	mov    %rax,%rdi
  43428b:	e8 f2 00 00 00       	callq  434382 <__gnu_cxx::new_allocator<x666::Parser::BracketEntry*>::new_allocator()>
  434290:	90                   	nop
  434291:	c9                   	leaveq 
  434292:	c3                   	retq   
  434293:	90                   	nop

0000000000434294 <__gnu_cxx::new_allocator<x666::Parser::BracketEntry*>::~new_allocator()>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
  434294:	55                   	push   %rbp
  434295:	48 89 e5             	mov    %rsp,%rbp
  434298:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  43429c:	90                   	nop
  43429d:	5d                   	pop    %rbp
  43429e:	c3                   	retq   
  43429f:	90                   	nop

00000000004342a0 <__gnu_cxx::new_allocator<x666::Parser::BracketEntry*>::deallocate(x666::Parser::BracketEntry**, unsigned long)>:
      deallocate(pointer __p, size_type)
  4342a0:	55                   	push   %rbp
  4342a1:	48 89 e5             	mov    %rsp,%rbp
  4342a4:	48 83 ec 20          	sub    $0x20,%rsp
  4342a8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4342ac:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  4342b0:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	::operator delete(__p);
  4342b4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4342b8:	48 89 c7             	mov    %rax,%rdi
  4342bb:	e8 00 e5 ff ff       	callq  4327c0 <operator delete(void*)@plt>
      }
  4342c0:	c9                   	leaveq 
  4342c1:	c3                   	retq   

00000000004342c2 <__gnu_cxx::new_allocator<x666::LexError>::deallocate(x666::LexError*, unsigned long)>:
      deallocate(pointer __p, size_type)
  4342c2:	55                   	push   %rbp
  4342c3:	48 89 e5             	mov    %rsp,%rbp
  4342c6:	48 83 ec 20          	sub    $0x20,%rsp
  4342ca:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4342ce:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  4342d2:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	::operator delete(__p);
  4342d6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4342da:	48 89 c7             	mov    %rax,%rdi
  4342dd:	e8 de e4 ff ff       	callq  4327c0 <operator delete(void*)@plt>
      }
  4342e2:	c9                   	leaveq 
  4342e3:	c3                   	retq   

00000000004342e4 <x666::Expression* const& std::__get_helper<0ul, x666::Expression*, std::default_delete<x666::Expression> >(std::_Tuple_impl<0ul, x666::Expression*, std::default_delete<x666::Expression> > const&)>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
  4342e4:	55                   	push   %rbp
  4342e5:	48 89 e5             	mov    %rsp,%rbp
  4342e8:	48 83 ec 10          	sub    $0x10,%rsp
  4342ec:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
  4342f0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4342f4:	48 89 c7             	mov    %rax,%rdi
  4342f7:	e8 91 00 00 00       	callq  43438d <std::_Tuple_impl<0ul, x666::Expression*, std::default_delete<x666::Expression> >::_M_head(std::_Tuple_impl<0ul, x666::Expression*, std::default_delete<x666::Expression> > const&)>
  4342fc:	c9                   	leaveq 
  4342fd:	c3                   	retq   

00000000004342fe <std::_Tuple_impl<1ul, std::default_delete<x666::Expression> >::_M_head(std::_Tuple_impl<1ul, std::default_delete<x666::Expression> >&)>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
  4342fe:	55                   	push   %rbp
  4342ff:	48 89 e5             	mov    %rsp,%rbp
  434302:	48 83 ec 10          	sub    $0x10,%rsp
  434306:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  43430a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43430e:	48 89 c7             	mov    %rax,%rdi
  434311:	e8 91 00 00 00       	callq  4343a7 <std::_Head_base<1ul, std::default_delete<x666::Expression>, true>::_M_head(std::_Head_base<1ul, std::default_delete<x666::Expression>, true>&)>
  434316:	c9                   	leaveq 
  434317:	c3                   	retq   

0000000000434318 <std::_Head_base<0ul, x666::Expression*, false>::_M_head(std::_Head_base<0ul, x666::Expression*, false>&)>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
  434318:	55                   	push   %rbp
  434319:	48 89 e5             	mov    %rsp,%rbp
  43431c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  434320:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  434324:	5d                   	pop    %rbp
  434325:	c3                   	retq   

0000000000434326 <__gnu_cxx::new_allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*>::new_allocator()>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
  434326:	55                   	push   %rbp
  434327:	48 89 e5             	mov    %rsp,%rbp
  43432a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  43432e:	90                   	nop
  43432f:	5d                   	pop    %rbp
  434330:	c3                   	retq   
  434331:	90                   	nop

0000000000434332 <__gnu_cxx::new_allocator<x666::LineInfo>::deallocate(x666::LineInfo*, unsigned long)>:
      deallocate(pointer __p, size_type)
  434332:	55                   	push   %rbp
  434333:	48 89 e5             	mov    %rsp,%rbp
  434336:	48 83 ec 20          	sub    $0x20,%rsp
  43433a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  43433e:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  434342:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	::operator delete(__p);
  434346:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  43434a:	48 89 c7             	mov    %rax,%rdi
  43434d:	e8 6e e4 ff ff       	callq  4327c0 <operator delete(void*)@plt>
      }
  434352:	c9                   	leaveq 
  434353:	c3                   	retq   

0000000000434354 <__gnu_cxx::new_allocator<x666::LineInfo*>::new_allocator()>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
  434354:	55                   	push   %rbp
  434355:	48 89 e5             	mov    %rsp,%rbp
  434358:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  43435c:	90                   	nop
  43435d:	5d                   	pop    %rbp
  43435e:	c3                   	retq   
  43435f:	90                   	nop

0000000000434360 <__gnu_cxx::new_allocator<x666::Parser::BracketEntry>::deallocate(x666::Parser::BracketEntry*, unsigned long)>:
      deallocate(pointer __p, size_type)
  434360:	55                   	push   %rbp
  434361:	48 89 e5             	mov    %rsp,%rbp
  434364:	48 83 ec 20          	sub    $0x20,%rsp
  434368:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  43436c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  434370:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	::operator delete(__p);
  434374:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  434378:	48 89 c7             	mov    %rax,%rdi
  43437b:	e8 40 e4 ff ff       	callq  4327c0 <operator delete(void*)@plt>
      }
  434380:	c9                   	leaveq 
  434381:	c3                   	retq   

0000000000434382 <__gnu_cxx::new_allocator<x666::Parser::BracketEntry*>::new_allocator()>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
  434382:	55                   	push   %rbp
  434383:	48 89 e5             	mov    %rsp,%rbp
  434386:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  43438a:	90                   	nop
  43438b:	5d                   	pop    %rbp
  43438c:	c3                   	retq   

000000000043438d <std::_Tuple_impl<0ul, x666::Expression*, std::default_delete<x666::Expression> >::_M_head(std::_Tuple_impl<0ul, x666::Expression*, std::default_delete<x666::Expression> > const&)>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
  43438d:	55                   	push   %rbp
  43438e:	48 89 e5             	mov    %rsp,%rbp
  434391:	48 83 ec 10          	sub    $0x10,%rsp
  434395:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  434399:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43439d:	48 89 c7             	mov    %rax,%rdi
  4343a0:	e8 10 00 00 00       	callq  4343b5 <std::_Head_base<0ul, x666::Expression*, false>::_M_head(std::_Head_base<0ul, x666::Expression*, false> const&)>
  4343a5:	c9                   	leaveq 
  4343a6:	c3                   	retq   

00000000004343a7 <std::_Head_base<1ul, std::default_delete<x666::Expression>, true>::_M_head(std::_Head_base<1ul, std::default_delete<x666::Expression>, true>&)>:
      _M_head(_Head_base& __b) noexcept { return __b; }
  4343a7:	55                   	push   %rbp
  4343a8:	48 89 e5             	mov    %rsp,%rbp
  4343ab:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4343af:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4343b3:	5d                   	pop    %rbp
  4343b4:	c3                   	retq   

00000000004343b5 <std::_Head_base<0ul, x666::Expression*, false>::_M_head(std::_Head_base<0ul, x666::Expression*, false> const&)>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
  4343b5:	55                   	push   %rbp
  4343b6:	48 89 e5             	mov    %rsp,%rbp
  4343b9:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4343bd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4343c1:	5d                   	pop    %rbp
  4343c2:	c3                   	retq   
  4343c3:	90                   	nop

00000000004343c4 <x666::getChar(std::istream&, x666::LineInfo&)>:
    "~", "<-", "=", "<", ">",
    "/=", "<=", ">=", "??", "?&",
    "!!", "&>", "?", ":", "@", "@@",
    "@#", "!", "&", "|", "|*", "#", ",",
  };
  static int getChar(std::istream& fh, LineInfo& li) {
  4343c4:	55                   	push   %rbp
  4343c5:	48 89 e5             	mov    %rsp,%rbp
  4343c8:	48 83 ec 20          	sub    $0x20,%rsp
  4343cc:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  4343d0:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    int c = fh.get();
  4343d4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4343d8:	48 89 c7             	mov    %rax,%rdi
  4343db:	e8 60 e4 ff ff       	callq  432840 <std::istream::get()@plt>
  4343e0:	89 45 fc             	mov    %eax,-0x4(%rbp)
    if (c == '\n') {
  4343e3:	83 7d fc 0a          	cmpl   $0xa,-0x4(%rbp)
  4343e7:	75 20                	jne    434409 <x666::getChar(std::istream&, x666::LineInfo&)+0x45>
      ++li.line;
  4343e9:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4343ed:	48 8b 00             	mov    (%rax),%rax
  4343f0:	48 8d 50 01          	lea    0x1(%rax),%rdx
  4343f4:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4343f8:	48 89 10             	mov    %rdx,(%rax)
      li.col = 0;
  4343fb:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4343ff:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
  434406:	00 
  434407:	eb 14                	jmp    43441d <x666::getChar(std::istream&, x666::LineInfo&)+0x59>
    } else {
      ++li.col;
  434409:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  43440d:	48 8b 40 08          	mov    0x8(%rax),%rax
  434411:	48 8d 50 01          	lea    0x1(%rax),%rdx
  434415:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  434419:	48 89 50 08          	mov    %rdx,0x8(%rax)
    }
    ++li.byte;
  43441d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  434421:	48 8b 40 10          	mov    0x10(%rax),%rax
  434425:	48 8d 50 01          	lea    0x1(%rax),%rdx
  434429:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  43442d:	48 89 50 10          	mov    %rdx,0x10(%rax)
    return c;
  434431:	8b 45 fc             	mov    -0x4(%rbp),%eax
  }
  434434:	c9                   	leaveq 
  434435:	c3                   	retq   

0000000000434436 <x666::getDigit(char)>:
  int getDigit(char c) {
  434436:	55                   	push   %rbp
  434437:	48 89 e5             	mov    %rsp,%rbp
  43443a:	48 83 ec 20          	sub    $0x20,%rsp
  43443e:	89 f8                	mov    %edi,%eax
  434440:	88 45 ec             	mov    %al,-0x14(%rbp)
    char cap = toupper(c);
  434443:	0f be 45 ec          	movsbl -0x14(%rbp),%eax
  434447:	89 c7                	mov    %eax,%edi
  434449:	e8 12 e5 ff ff       	callq  432960 <toupper@plt>
  43444e:	88 45 ff             	mov    %al,-0x1(%rbp)
    return isdigit(c) ? (c - '0') :
  434451:	0f be 45 ec          	movsbl -0x14(%rbp),%eax
  434455:	89 c7                	mov    %eax,%edi
  434457:	e8 54 e3 ff ff       	callq  4327b0 <isdigit@plt>
  43445c:	85 c0                	test   %eax,%eax
  43445e:	74 09                	je     434469 <x666::getDigit(char)+0x33>
  434460:	0f be 45 ec          	movsbl -0x14(%rbp),%eax
  434464:	83 e8 30             	sub    $0x30,%eax
      isupper(cap) ? (cap - 'A' + 10) : -1;
  434467:	eb 1d                	jmp    434486 <x666::getDigit(char)+0x50>
  434469:	0f be 45 ff          	movsbl -0x1(%rbp),%eax
  43446d:	89 c7                	mov    %eax,%edi
  43446f:	e8 fc e2 ff ff       	callq  432770 <isupper@plt>
  434474:	85 c0                	test   %eax,%eax
  434476:	74 09                	je     434481 <x666::getDigit(char)+0x4b>
  434478:	0f be 45 ff          	movsbl -0x1(%rbp),%eax
  43447c:	83 e8 37             	sub    $0x37,%eax
  43447f:	eb 05                	jmp    434486 <x666::getDigit(char)+0x50>
  434481:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  }
  434486:	c9                   	leaveq 
  434487:	c3                   	retq   

0000000000434488 <x666::wouldMAddOverflow(int, long, int)>:
  // Check if (a * n + b) would overflow.
  // NEEDS a != 0
  bool wouldMAddOverflow(int32_t a, int64_t n, int32_t b) {
  434488:	55                   	push   %rbp
  434489:	48 89 e5             	mov    %rsp,%rbp
  43448c:	89 7d fc             	mov    %edi,-0x4(%rbp)
  43448f:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  434493:	89 55 f8             	mov    %edx,-0x8(%rbp)
#if defined(__GNUC__) || defined(__GNUG__)
    // Use compiler intrinsics for checks
    return
      __builtin_smull_overflow(a, n, &n) ||
  434496:	8b 45 fc             	mov    -0x4(%rbp),%eax
  434499:	48 98                	cltq   
  43449b:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  43449f:	b9 00 00 00 00       	mov    $0x0,%ecx
  4344a4:	48 0f af c2          	imul   %rdx,%rax
  4344a8:	71 05                	jno    4344af <x666::wouldMAddOverflow(int, long, int)+0x27>
  4344aa:	b9 01 00 00 00       	mov    $0x1,%ecx
  4344af:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  4344b3:	48 89 c8             	mov    %rcx,%rax
  4344b6:	83 e0 01             	and    $0x1,%eax
  4344b9:	84 c0                	test   %al,%al
  4344bb:	75 26                	jne    4344e3 <x666::wouldMAddOverflow(int, long, int)+0x5b>
      __builtin_saddl_overflow(n, b, &n);
  4344bd:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  4344c1:	8b 45 f8             	mov    -0x8(%rbp),%eax
  4344c4:	48 98                	cltq   
  4344c6:	b9 00 00 00 00       	mov    $0x0,%ecx
  4344cb:	48 01 d0             	add    %rdx,%rax
  4344ce:	71 05                	jno    4344d5 <x666::wouldMAddOverflow(int, long, int)+0x4d>
  4344d0:	b9 01 00 00 00       	mov    $0x1,%ecx
  4344d5:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  4344d9:	48 89 c8             	mov    %rcx,%rax
  4344dc:	83 e0 01             	and    $0x1,%eax
      __builtin_smull_overflow(a, n, &n) ||
  4344df:	84 c0                	test   %al,%al
  4344e1:	74 07                	je     4344ea <x666::wouldMAddOverflow(int, long, int)+0x62>
  4344e3:	b8 01 00 00 00       	mov    $0x1,%eax
  4344e8:	eb 05                	jmp    4344ef <x666::wouldMAddOverflow(int, long, int)+0x67>
  4344ea:	b8 00 00 00 00       	mov    $0x0,%eax
    int64_t axn = a * n;
    if (b > 0 && n > std::numeric_limits<int64_t>::max() - b) return true;
    if (b < 0 && n > std::numeric_limits<int64_t>::min() - b) return true;
    return false;
#endif
  }
  4344ef:	5d                   	pop    %rbp
  4344f0:	c3                   	retq   

00000000004344f1 <x666::parseStringLiteral[abi:cxx11](std::istream&, x666::LineInfo&)>:
  std::string parseStringLiteral(std::istream& fh, LineInfo& li) {
  4344f1:	55                   	push   %rbp
  4344f2:	48 89 e5             	mov    %rsp,%rbp
  4344f5:	53                   	push   %rbx
  4344f6:	48 83 ec 38          	sub    $0x38,%rsp
  4344fa:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  4344fe:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  434502:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
    std::string s;
  434506:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  43450a:	48 89 c7             	mov    %rax,%rdi
  43450d:	e8 56 1a 00 00       	callq  435f68 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string()>
    while (true) {
      int c = getChar(fh, li);
  434512:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  434516:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  43451a:	48 89 d6             	mov    %rdx,%rsi
  43451d:	48 89 c7             	mov    %rax,%rdi
  434520:	e8 9f fe ff ff       	callq  4343c4 <x666::getChar(std::istream&, x666::LineInfo&)>
  434525:	89 45 ec             	mov    %eax,-0x14(%rbp)
      if (c == '\n' ||c == std::char_traits<char>::eof() || c == '\x22') {
  434528:	83 7d ec 0a          	cmpl   $0xa,-0x14(%rbp)
  43452c:	74 10                	je     43453e <x666::parseStringLiteral[abi:cxx11](std::istream&, x666::LineInfo&)+0x4d>
  43452e:	e8 53 16 00 00       	callq  435b86 <std::char_traits<char>::eof()>
  434533:	39 45 ec             	cmp    %eax,-0x14(%rbp)
  434536:	74 06                	je     43453e <x666::parseStringLiteral[abi:cxx11](std::istream&, x666::LineInfo&)+0x4d>
  434538:	83 7d ec 22          	cmpl   $0x22,-0x14(%rbp)
  43453c:	75 07                	jne    434545 <x666::parseStringLiteral[abi:cxx11](std::istream&, x666::LineInfo&)+0x54>
  43453e:	b8 01 00 00 00       	mov    $0x1,%eax
  434543:	eb 05                	jmp    43454a <x666::parseStringLiteral[abi:cxx11](std::istream&, x666::LineInfo&)+0x59>
  434545:	b8 00 00 00 00       	mov    $0x0,%eax
  43454a:	84 c0                	test   %al,%al
  43454c:	0f 85 9b 00 00 00    	jne    4345ed <x666::parseStringLiteral[abi:cxx11](std::istream&, x666::LineInfo&)+0xfc>
        break;
      } else if (c == '\\') {
  434552:	83 7d ec 5c          	cmpl   $0x5c,-0x14(%rbp)
  434556:	75 7c                	jne    4345d4 <x666::parseStringLiteral[abi:cxx11](std::istream&, x666::LineInfo&)+0xe3>
        // Escape sequence
        c = getChar(fh, li);
  434558:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  43455c:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  434560:	48 89 d6             	mov    %rdx,%rsi
  434563:	48 89 c7             	mov    %rax,%rdi
  434566:	e8 59 fe ff ff       	callq  4343c4 <x666::getChar(std::istream&, x666::LineInfo&)>
  43456b:	89 45 ec             	mov    %eax,-0x14(%rbp)
  43456e:	83 7d ec 5c          	cmpl   $0x5c,-0x14(%rbp)
  434572:	74 21                	je     434595 <x666::parseStringLiteral[abi:cxx11](std::istream&, x666::LineInfo&)+0xa4>
  434574:	83 7d ec 6e          	cmpl   $0x6e,-0x14(%rbp)
  434578:	74 08                	je     434582 <x666::parseStringLiteral[abi:cxx11](std::istream&, x666::LineInfo&)+0x91>
  43457a:	83 7d ec 22          	cmpl   $0x22,-0x14(%rbp)
  43457e:	74 28                	je     4345a8 <x666::parseStringLiteral[abi:cxx11](std::istream&, x666::LineInfo&)+0xb7>
  434580:	eb 39                	jmp    4345bb <x666::parseStringLiteral[abi:cxx11](std::istream&, x666::LineInfo&)+0xca>
        switch (c) {
          case 'n': s += '\n'; break;
  434582:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  434586:	be 0a 00 00 00       	mov    $0xa,%esi
  43458b:	48 89 c7             	mov    %rax,%rdi
  43458e:	e8 39 1a 00 00       	callq  435fcc <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator+=(char)>
  434593:	eb 53                	jmp    4345e8 <x666::parseStringLiteral[abi:cxx11](std::istream&, x666::LineInfo&)+0xf7>
          case '\\': s += '\\'; break;
  434595:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  434599:	be 5c 00 00 00       	mov    $0x5c,%esi
  43459e:	48 89 c7             	mov    %rax,%rdi
  4345a1:	e8 26 1a 00 00       	callq  435fcc <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator+=(char)>
  4345a6:	eb 40                	jmp    4345e8 <x666::parseStringLiteral[abi:cxx11](std::istream&, x666::LineInfo&)+0xf7>
          case '\x22': s += '\x22'; break;
  4345a8:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4345ac:	be 22 00 00 00       	mov    $0x22,%esi
  4345b1:	48 89 c7             	mov    %rax,%rdi
  4345b4:	e8 13 1a 00 00       	callq  435fcc <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator+=(char)>
  4345b9:	eb 2d                	jmp    4345e8 <x666::parseStringLiteral[abi:cxx11](std::istream&, x666::LineInfo&)+0xf7>
          default: s += c;
  4345bb:	8b 45 ec             	mov    -0x14(%rbp),%eax
  4345be:	0f be c0             	movsbl %al,%eax
  4345c1:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  4345c5:	89 c6                	mov    %eax,%esi
  4345c7:	48 89 d7             	mov    %rdx,%rdi
  4345ca:	e8 fd 19 00 00       	callq  435fcc <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator+=(char)>
  4345cf:	e9 3e ff ff ff       	jmpq   434512 <x666::parseStringLiteral[abi:cxx11](std::istream&, x666::LineInfo&)+0x21>
        }
      } else {
        s += (char) c;
  4345d4:	8b 45 ec             	mov    -0x14(%rbp),%eax
  4345d7:	0f be c0             	movsbl %al,%eax
  4345da:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  4345de:	89 c6                	mov    %eax,%esi
  4345e0:	48 89 d7             	mov    %rdx,%rdi
  4345e3:	e8 e4 19 00 00       	callq  435fcc <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator+=(char)>
      }
    }
  4345e8:	e9 25 ff ff ff       	jmpq   434512 <x666::parseStringLiteral[abi:cxx11](std::istream&, x666::LineInfo&)+0x21>
        break;
  4345ed:	90                   	nop
    return s;
  4345ee:	eb 1a                	jmp    43460a <x666::parseStringLiteral[abi:cxx11](std::istream&, x666::LineInfo&)+0x119>
  4345f0:	48 89 c3             	mov    %rax,%rbx
  4345f3:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4345f7:	48 89 c7             	mov    %rax,%rdi
  4345fa:	e8 75 17 00 00       	callq  435d74 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()>
  4345ff:	48 89 d8             	mov    %rbx,%rax
  434602:	48 89 c7             	mov    %rax,%rdi
  434605:	e8 06 e3 ff ff       	callq  432910 <_Unwind_Resume@plt>
  }
  43460a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  43460e:	48 83 c4 38          	add    $0x38,%rsp
  434612:	5b                   	pop    %rbx
  434613:	5d                   	pop    %rbp
  434614:	c3                   	retq   

0000000000434615 <x666::unescape(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>:
  std::string unescape(const std::string& s) {
  434615:	55                   	push   %rbp
  434616:	48 89 e5             	mov    %rsp,%rbp
  434619:	53                   	push   %rbx
  43461a:	48 83 ec 38          	sub    $0x38,%rsp
  43461e:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  434622:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
    std::string res;
  434626:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  43462a:	48 89 c7             	mov    %rax,%rdi
  43462d:	e8 36 19 00 00       	callq  435f68 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string()>
    for (char c : s) {
  434632:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  434636:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  43463a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  43463e:	48 89 c7             	mov    %rax,%rdi
  434641:	e8 b6 1a 00 00       	callq  4360fc <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::begin() const>
  434646:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  43464a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  43464e:	48 89 c7             	mov    %rax,%rdi
  434651:	e8 dc 1a 00 00       	callq  436132 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::end() const>
  434656:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  43465a:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
  43465e:	48 8d 45 d8          	lea    -0x28(%rbp),%rax
  434662:	48 89 d6             	mov    %rdx,%rsi
  434665:	48 89 c7             	mov    %rax,%rdi
  434668:	e8 12 1b 00 00       	callq  43617f <bool __gnu_cxx::operator!=<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > const&, __gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > const&)>
  43466d:	84 c0                	test   %al,%al
  43466f:	0f 84 9a 00 00 00    	je     43470f <x666::unescape(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xfa>
  434675:	48 8d 45 d8          	lea    -0x28(%rbp),%rax
  434679:	48 89 c7             	mov    %rax,%rdi
  43467c:	e8 5b 1b 00 00       	callq  4361dc <__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::operator*() const>
  434681:	0f b6 00             	movzbl (%rax),%eax
  434684:	88 45 e7             	mov    %al,-0x19(%rbp)
      if (c == '\n') res += "\\n";
  434687:	80 7d e7 0a          	cmpb   $0xa,-0x19(%rbp)
  43468b:	75 13                	jne    4346a0 <x666::unescape(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x8b>
  43468d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  434691:	be 59 43 44 00       	mov    $0x444359,%esi
  434696:	48 89 c7             	mov    %rax,%rdi
  434699:	e8 50 1b 00 00       	callq  4361ee <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator+=(char const*)>
  43469e:	eb 44                	jmp    4346e4 <x666::unescape(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xcf>
      else if (c == '\\') res += "\\\\";
  4346a0:	80 7d e7 5c          	cmpb   $0x5c,-0x19(%rbp)
  4346a4:	75 13                	jne    4346b9 <x666::unescape(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xa4>
  4346a6:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  4346aa:	be 5c 43 44 00       	mov    $0x44435c,%esi
  4346af:	48 89 c7             	mov    %rax,%rdi
  4346b2:	e8 37 1b 00 00       	callq  4361ee <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator+=(char const*)>
  4346b7:	eb 2b                	jmp    4346e4 <x666::unescape(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xcf>
      else if (c == '\x22') res += "\\\"";
  4346b9:	80 7d e7 22          	cmpb   $0x22,-0x19(%rbp)
  4346bd:	75 13                	jne    4346d2 <x666::unescape(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xbd>
  4346bf:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  4346c3:	be 5f 43 44 00       	mov    $0x44435f,%esi
  4346c8:	48 89 c7             	mov    %rax,%rdi
  4346cb:	e8 1e 1b 00 00       	callq  4361ee <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator+=(char const*)>
  4346d0:	eb 12                	jmp    4346e4 <x666::unescape(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xcf>
      else res += c;
  4346d2:	0f be 45 e7          	movsbl -0x19(%rbp),%eax
  4346d6:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  4346da:	89 c6                	mov    %eax,%esi
  4346dc:	48 89 d7             	mov    %rdx,%rdi
  4346df:	e8 e8 18 00 00       	callq  435fcc <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator+=(char)>
    for (char c : s) {
  4346e4:	48 8d 45 d8          	lea    -0x28(%rbp),%rax
  4346e8:	48 89 c7             	mov    %rax,%rdi
  4346eb:	e8 cc 1a 00 00       	callq  4361bc <__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::operator++()>
  4346f0:	e9 65 ff ff ff       	jmpq   43465a <x666::unescape(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x45>
  4346f5:	48 89 c3             	mov    %rax,%rbx
  4346f8:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  4346fc:	48 89 c7             	mov    %rax,%rdi
  4346ff:	e8 70 16 00 00       	callq  435d74 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()>
  434704:	48 89 d8             	mov    %rbx,%rax
  434707:	48 89 c7             	mov    %rax,%rdi
  43470a:	e8 01 e2 ff ff       	callq  432910 <_Unwind_Resume@plt>
    }
    return res;
  43470f:	90                   	nop
  }
  434710:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  434714:	48 83 c4 38          	add    $0x38,%rsp
  434718:	5b                   	pop    %rbx
  434719:	5d                   	pop    %rbp
  43471a:	c3                   	retq   

000000000043471b <x666::getNextToken(std::istream&, x666::LineInfo&)>:
  Token getNextToken(std::istream& fh, LineInfo& li) {
  43471b:	55                   	push   %rbp
  43471c:	48 89 e5             	mov    %rsp,%rbp
  43471f:	53                   	push   %rbx
  434720:	48 81 ec d8 01 00 00 	sub    $0x1d8,%rsp
  434727:	48 89 bd 38 fe ff ff 	mov    %rdi,-0x1c8(%rbp)
  43472e:	48 89 b5 30 fe ff ff 	mov    %rsi,-0x1d0(%rbp)
  434735:	48 89 95 28 fe ff ff 	mov    %rdx,-0x1d8(%rbp)
    int c;
    do {
      c = getChar(fh, li);
  43473c:	48 8b 95 28 fe ff ff 	mov    -0x1d8(%rbp),%rdx
  434743:	48 8b 85 30 fe ff ff 	mov    -0x1d0(%rbp),%rax
  43474a:	48 89 d6             	mov    %rdx,%rsi
  43474d:	48 89 c7             	mov    %rax,%rdi
  434750:	e8 6f fc ff ff       	callq  4343c4 <x666::getChar(std::istream&, x666::LineInfo&)>
  434755:	89 45 ec             	mov    %eax,-0x14(%rbp)
      if (c == '\n' || c == ';') return Newline();
  434758:	83 7d ec 0a          	cmpl   $0xa,-0x14(%rbp)
  43475c:	74 06                	je     434764 <x666::getNextToken(std::istream&, x666::LineInfo&)+0x49>
  43475e:	83 7d ec 3b          	cmpl   $0x3b,-0x14(%rbp)
  434762:	75 1e                	jne    434782 <x666::getNextToken(std::istream&, x666::LineInfo&)+0x67>
  434764:	48 8d 85 6f fe ff ff 	lea    -0x191(%rbp),%rax
  43476b:	48 8b 95 38 fe ff ff 	mov    -0x1c8(%rbp),%rdx
  434772:	48 89 c6             	mov    %rax,%rsi
  434775:	48 89 d7             	mov    %rdx,%rdi
  434778:	e8 01 1b 00 00       	callq  43627e <std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>::variant<x666::Newline, void, void, void>(x666::Newline&&)>
  43477d:	e9 11 0c 00 00       	jmpq   435393 <x666::getNextToken(std::istream&, x666::LineInfo&)+0xc78>
      if (c == '#') {
  434782:	83 7d ec 23          	cmpl   $0x23,-0x14(%rbp)
  434786:	0f 85 d1 00 00 00    	jne    43485d <x666::getNextToken(std::istream&, x666::LineInfo&)+0x142>
        if (fh.peek() == '#') {
  43478c:	48 8b 85 30 fe ff ff 	mov    -0x1d0(%rbp),%rax
  434793:	48 89 c7             	mov    %rax,%rdi
  434796:	e8 35 df ff ff       	callq  4326d0 <std::istream::peek()@plt>
  43479b:	83 f8 23             	cmp    $0x23,%eax
  43479e:	0f 94 c0             	sete   %al
  4347a1:	84 c0                	test   %al,%al
  4347a3:	0f 84 b4 00 00 00    	je     43485d <x666::getNextToken(std::istream&, x666::LineInfo&)+0x142>
          // Comment syntax (tentative)
          fh.ignore(std::numeric_limits<std::streamsize>::max(), '\n');
  4347a9:	e8 f0 13 00 00       	callq  435b9e <std::numeric_limits<long>::max()>
  4347ae:	48 89 c1             	mov    %rax,%rcx
  4347b1:	48 8b 85 30 fe ff ff 	mov    -0x1d0(%rbp),%rax
  4347b8:	ba 0a 00 00 00       	mov    $0xa,%edx
  4347bd:	48 89 ce             	mov    %rcx,%rsi
  4347c0:	48 89 c7             	mov    %rax,%rdi
  4347c3:	e8 78 df ff ff       	callq  432740 <std::istream::ignore(long, int)@plt>
          li.col = 0;
  4347c8:	48 8b 85 28 fe ff ff 	mov    -0x1d8(%rbp),%rax
  4347cf:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
  4347d6:	00 
          ++li.line;
  4347d7:	48 8b 85 28 fe ff ff 	mov    -0x1d8(%rbp),%rax
  4347de:	48 8b 00             	mov    (%rax),%rax
  4347e1:	48 8d 50 01          	lea    0x1(%rax),%rdx
  4347e5:	48 8b 85 28 fe ff ff 	mov    -0x1d8(%rbp),%rax
  4347ec:	48 89 10             	mov    %rdx,(%rax)
          li.byte = fh.tellg();
  4347ef:	48 8b 85 30 fe ff ff 	mov    -0x1d0(%rbp),%rax
  4347f6:	48 89 c7             	mov    %rax,%rdi
  4347f9:	e8 02 e1 ff ff       	callq  432900 <std::istream::tellg()@plt>
  4347fe:	48 89 85 70 fe ff ff 	mov    %rax,-0x190(%rbp)
  434805:	48 89 95 78 fe ff ff 	mov    %rdx,-0x188(%rbp)
  43480c:	48 8d 85 70 fe ff ff 	lea    -0x190(%rbp),%rax
  434813:	48 89 c7             	mov    %rax,%rdi
  434816:	e8 a3 1a 00 00       	callq  4362be <std::fpos<__mbstate_t>::operator long() const>
  43481b:	48 89 c2             	mov    %rax,%rdx
  43481e:	48 8b 85 28 fe ff ff 	mov    -0x1d8(%rbp),%rax
  434825:	48 89 50 10          	mov    %rdx,0x10(%rax)
          li.sot = li.byte;
  434829:	48 8b 85 28 fe ff ff 	mov    -0x1d8(%rbp),%rax
  434830:	48 8b 50 10          	mov    0x10(%rax),%rdx
  434834:	48 8b 85 28 fe ff ff 	mov    -0x1d8(%rbp),%rax
  43483b:	48 89 50 18          	mov    %rdx,0x18(%rax)
          return Newline();
  43483f:	48 8d 85 8a fe ff ff 	lea    -0x176(%rbp),%rax
  434846:	48 8b 95 38 fe ff ff 	mov    -0x1c8(%rbp),%rdx
  43484d:	48 89 c6             	mov    %rax,%rsi
  434850:	48 89 d7             	mov    %rdx,%rdi
  434853:	e8 26 1a 00 00       	callq  43627e <std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>::variant<x666::Newline, void, void, void>(x666::Newline&&)>
  434858:	e9 36 0b 00 00       	jmpq   435393 <x666::getNextToken(std::istream&, x666::LineInfo&)+0xc78>
        }
      }
    } while (iswspace(c));
  43485d:	8b 45 ec             	mov    -0x14(%rbp),%eax
  434860:	89 c7                	mov    %eax,%edi
  434862:	e8 19 df ff ff       	callq  432780 <iswspace@plt>
  434867:	85 c0                	test   %eax,%eax
  434869:	0f 95 c0             	setne  %al
  43486c:	84 c0                	test   %al,%al
  43486e:	74 05                	je     434875 <x666::getNextToken(std::istream&, x666::LineInfo&)+0x15a>
    do {
  434870:	e9 c7 fe ff ff       	jmpq   43473c <x666::getNextToken(std::istream&, x666::LineInfo&)+0x21>
    if (fh.fail()) return EndOfFile();
  434875:	48 8b 85 30 fe ff ff 	mov    -0x1d0(%rbp),%rax
  43487c:	48 8b 00             	mov    (%rax),%rax
  43487f:	48 83 e8 18          	sub    $0x18,%rax
  434883:	48 8b 00             	mov    (%rax),%rax
  434886:	48 89 c2             	mov    %rax,%rdx
  434889:	48 8b 85 30 fe ff ff 	mov    -0x1d0(%rbp),%rax
  434890:	48 01 d0             	add    %rdx,%rax
  434893:	48 89 c7             	mov    %rax,%rdi
  434896:	e8 e5 dd ff ff       	callq  432680 <std::basic_ios<char, std::char_traits<char> >::fail() const@plt>
  43489b:	84 c0                	test   %al,%al
  43489d:	74 1e                	je     4348bd <x666::getNextToken(std::istream&, x666::LineInfo&)+0x1a2>
  43489f:	48 8d 85 8b fe ff ff 	lea    -0x175(%rbp),%rax
  4348a6:	48 8b 95 38 fe ff ff 	mov    -0x1c8(%rbp),%rdx
  4348ad:	48 89 c6             	mov    %rax,%rsi
  4348b0:	48 89 d7             	mov    %rdx,%rdi
  4348b3:	e8 82 1a 00 00       	callq  43633a <std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>::variant<x666::EndOfFile, void, void, void>(x666::EndOfFile&&)>
  4348b8:	e9 d6 0a 00 00       	jmpq   435393 <x666::getNextToken(std::istream&, x666::LineInfo&)+0xc78>
    li.sot = li.byte - 1;
  4348bd:	48 8b 85 28 fe ff ff 	mov    -0x1d8(%rbp),%rax
  4348c4:	48 8b 40 10          	mov    0x10(%rax),%rax
  4348c8:	48 8d 50 ff          	lea    -0x1(%rax),%rdx
  4348cc:	48 8b 85 28 fe ff ff 	mov    -0x1d8(%rbp),%rax
  4348d3:	48 89 50 18          	mov    %rdx,0x18(%rax)
    bool negative = false;
  4348d7:	c6 45 eb 00          	movb   $0x0,-0x15(%rbp)
    if (c == '-') { // Negative integers are handled specially
  4348db:	83 7d ec 2d          	cmpl   $0x2d,-0x14(%rbp)
  4348df:	75 6c                	jne    43494d <x666::getNextToken(std::istream&, x666::LineInfo&)+0x232>
      c = fh.peek();
  4348e1:	48 8b 85 30 fe ff ff 	mov    -0x1d0(%rbp),%rax
  4348e8:	48 89 c7             	mov    %rax,%rdi
  4348eb:	e8 e0 dd ff ff       	callq  4326d0 <std::istream::peek()@plt>
  4348f0:	89 45 ec             	mov    %eax,-0x14(%rbp)
      if (isdigit(c)) {
  4348f3:	8b 45 ec             	mov    -0x14(%rbp),%eax
  4348f6:	89 c7                	mov    %eax,%edi
  4348f8:	e8 b3 de ff ff       	callq  4327b0 <isdigit@plt>
  4348fd:	85 c0                	test   %eax,%eax
  4348ff:	0f 95 c0             	setne  %al
  434902:	84 c0                	test   %al,%al
  434904:	74 1f                	je     434925 <x666::getNextToken(std::istream&, x666::LineInfo&)+0x20a>
        getChar(fh, li);
  434906:	48 8b 95 28 fe ff ff 	mov    -0x1d8(%rbp),%rdx
  43490d:	48 8b 85 30 fe ff ff 	mov    -0x1d0(%rbp),%rax
  434914:	48 89 d6             	mov    %rdx,%rsi
  434917:	48 89 c7             	mov    %rax,%rdi
  43491a:	e8 a5 fa ff ff       	callq  4343c4 <x666::getChar(std::istream&, x666::LineInfo&)>
        negative = true;
  43491f:	c6 45 eb 01          	movb   $0x1,-0x15(%rbp)
  434923:	eb 28                	jmp    43494d <x666::getNextToken(std::istream&, x666::LineInfo&)+0x232>
      } else {
        return Operator::minus;
  434925:	c7 85 8c fe ff ff 05 	movl   $0x5,-0x174(%rbp)
  43492c:	00 00 00 
  43492f:	48 8d 85 8c fe ff ff 	lea    -0x174(%rbp),%rax
  434936:	48 8b 95 38 fe ff ff 	mov    -0x1c8(%rbp),%rdx
  43493d:	48 89 c6             	mov    %rax,%rsi
  434940:	48 89 d7             	mov    %rdx,%rdi
  434943:	e8 9c 1a 00 00       	callq  4363e4 <std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>::variant<x666::Operator, void, void, void>(x666::Operator&&)>
  434948:	e9 46 0a 00 00       	jmpq   435393 <x666::getNextToken(std::istream&, x666::LineInfo&)+0xc78>
      }
    }
    if (isdigit(c)) {
  43494d:	8b 45 ec             	mov    -0x14(%rbp),%eax
  434950:	89 c7                	mov    %eax,%edi
  434952:	e8 59 de ff ff       	callq  4327b0 <isdigit@plt>
  434957:	85 c0                	test   %eax,%eax
  434959:	0f 95 c0             	setne  %al
  43495c:	84 c0                	test   %al,%al
  43495e:	0f 84 b5 01 00 00    	je     434b19 <x666::getNextToken(std::istream&, x666::LineInfo&)+0x3fe>
      // This starts a numeric literal.
      int64_t n = (c - '0');
  434964:	8b 45 ec             	mov    -0x14(%rbp),%eax
  434967:	83 e8 30             	sub    $0x30,%eax
  43496a:	48 98                	cltq   
  43496c:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
      size_t m = (n == 0) ? 0 : 1;
  434970:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  434975:	0f 95 c0             	setne  %al
  434978:	0f b6 c0             	movzbl %al,%eax
  43497b:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
      if (negative) n = -n;
  43497f:	80 7d eb 00          	cmpb   $0x0,-0x15(%rbp)
  434983:	74 04                	je     434989 <x666::getNextToken(std::istream&, x666::LineInfo&)+0x26e>
  434985:	48 f7 5d e0          	negq   -0x20(%rbp)
      size_t base = 10;
  434989:	48 c7 45 d0 0a 00 00 	movq   $0xa,-0x30(%rbp)
  434990:	00 
      while (true) {
        c = fh.peek();
  434991:	48 8b 85 30 fe ff ff 	mov    -0x1d0(%rbp),%rax
  434998:	48 89 c7             	mov    %rax,%rdi
  43499b:	e8 30 dd ff ff       	callq  4326d0 <std::istream::peek()@plt>
  4349a0:	89 45 ec             	mov    %eax,-0x14(%rbp)
        if (c == std::char_traits<char>::eof()) break;
  4349a3:	e8 de 11 00 00       	callq  435b86 <std::char_traits<char>::eof()>
  4349a8:	39 45 ec             	cmp    %eax,-0x14(%rbp)
  4349ab:	0f 94 c0             	sete   %al
  4349ae:	84 c0                	test   %al,%al
  4349b0:	0f 85 2e 01 00 00    	jne    434ae4 <x666::getNextToken(std::istream&, x666::LineInfo&)+0x3c9>
        // Treat 0(h|d|o|b) specially
        // (We check for m instead of using n directly)
        // because we don't want "00h", for instance, matching...
        if (m == 0) {
  4349b6:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  4349bb:	75 6b                	jne    434a28 <x666::getNextToken(std::istream&, x666::LineInfo&)+0x30d>
          if (c == 'h') base = 16;
  4349bd:	83 7d ec 68          	cmpl   $0x68,-0x14(%rbp)
  4349c1:	75 0a                	jne    4349cd <x666::getNextToken(std::istream&, x666::LineInfo&)+0x2b2>
  4349c3:	48 c7 45 d0 10 00 00 	movq   $0x10,-0x30(%rbp)
  4349ca:	00 
  4349cb:	eb 2e                	jmp    4349fb <x666::getNextToken(std::istream&, x666::LineInfo&)+0x2e0>
          else if (c == 'd') base = 12;
  4349cd:	83 7d ec 64          	cmpl   $0x64,-0x14(%rbp)
  4349d1:	75 0a                	jne    4349dd <x666::getNextToken(std::istream&, x666::LineInfo&)+0x2c2>
  4349d3:	48 c7 45 d0 0c 00 00 	movq   $0xc,-0x30(%rbp)
  4349da:	00 
  4349db:	eb 1e                	jmp    4349fb <x666::getNextToken(std::istream&, x666::LineInfo&)+0x2e0>
          else if (c == 'o') base = 8;
  4349dd:	83 7d ec 6f          	cmpl   $0x6f,-0x14(%rbp)
  4349e1:	75 0a                	jne    4349ed <x666::getNextToken(std::istream&, x666::LineInfo&)+0x2d2>
  4349e3:	48 c7 45 d0 08 00 00 	movq   $0x8,-0x30(%rbp)
  4349ea:	00 
  4349eb:	eb 0e                	jmp    4349fb <x666::getNextToken(std::istream&, x666::LineInfo&)+0x2e0>
          else if (c == 'b') base = 2;
  4349ed:	83 7d ec 62          	cmpl   $0x62,-0x14(%rbp)
  4349f1:	75 08                	jne    4349fb <x666::getNextToken(std::istream&, x666::LineInfo&)+0x2e0>
  4349f3:	48 c7 45 d0 02 00 00 	movq   $0x2,-0x30(%rbp)
  4349fa:	00 
          m = 1;
  4349fb:	48 c7 45 d8 01 00 00 	movq   $0x1,-0x28(%rbp)
  434a02:	00 
          if (base != 10) {
  434a03:	48 83 7d d0 0a       	cmpq   $0xa,-0x30(%rbp)
  434a08:	74 1e                	je     434a28 <x666::getNextToken(std::istream&, x666::LineInfo&)+0x30d>
            getChar(fh, li);
  434a0a:	48 8b 95 28 fe ff ff 	mov    -0x1d8(%rbp),%rdx
  434a11:	48 8b 85 30 fe ff ff 	mov    -0x1d0(%rbp),%rax
  434a18:	48 89 d6             	mov    %rdx,%rsi
  434a1b:	48 89 c7             	mov    %rax,%rdi
  434a1e:	e8 a1 f9 ff ff       	callq  4343c4 <x666::getChar(std::istream&, x666::LineInfo&)>
            continue;
  434a23:	e9 b7 00 00 00       	jmpq   434adf <x666::getNextToken(std::istream&, x666::LineInfo&)+0x3c4>
          }
        }
        // If not a decimal digit or a letter within base bounds,
        // stop scanning
        int digit = getDigit(c);
  434a28:	8b 45 ec             	mov    -0x14(%rbp),%eax
  434a2b:	0f be c0             	movsbl %al,%eax
  434a2e:	89 c7                	mov    %eax,%edi
  434a30:	e8 01 fa ff ff       	callq  434436 <x666::getDigit(char)>
  434a35:	89 45 cc             	mov    %eax,-0x34(%rbp)
        if (digit < 0 || (size_t) digit >= base) {
  434a38:	83 7d cc 00          	cmpl   $0x0,-0x34(%rbp)
  434a3c:	0f 88 a3 00 00 00    	js     434ae5 <x666::getNextToken(std::istream&, x666::LineInfo&)+0x3ca>
  434a42:	8b 45 cc             	mov    -0x34(%rbp),%eax
  434a45:	48 98                	cltq   
  434a47:	48 39 45 d0          	cmp    %rax,-0x30(%rbp)
  434a4b:	0f 86 94 00 00 00    	jbe    434ae5 <x666::getNextToken(std::istream&, x666::LineInfo&)+0x3ca>
          break;
        }
        if (negative) digit = -digit;
  434a51:	80 7d eb 00          	cmpb   $0x0,-0x15(%rbp)
  434a55:	74 03                	je     434a5a <x666::getNextToken(std::istream&, x666::LineInfo&)+0x33f>
  434a57:	f7 5d cc             	negl   -0x34(%rbp)
        if (wouldMAddOverflow(base, n, digit)) {
  434a5a:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  434a5e:	89 c1                	mov    %eax,%ecx
  434a60:	8b 55 cc             	mov    -0x34(%rbp),%edx
  434a63:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  434a67:	48 89 c6             	mov    %rax,%rsi
  434a6a:	89 cf                	mov    %ecx,%edi
  434a6c:	e8 17 fa ff ff       	callq  434488 <x666::wouldMAddOverflow(int, long, int)>
  434a71:	84 c0                	test   %al,%al
  434a73:	74 39                	je     434aae <x666::getNextToken(std::istream&, x666::LineInfo&)+0x393>
          return LexError(LexErrorCode::integerOverflow, li);
  434a75:	48 8b 95 28 fe ff ff 	mov    -0x1d8(%rbp),%rdx
  434a7c:	48 8d 85 90 fe ff ff 	lea    -0x170(%rbp),%rax
  434a83:	be 00 00 00 00       	mov    $0x0,%esi
  434a88:	48 89 c7             	mov    %rax,%rdi
  434a8b:	e8 e6 11 00 00       	callq  435c76 <x666::LexError::LexError(x666::LexErrorCode, x666::LineInfo const&)>
  434a90:	48 8d 85 90 fe ff ff 	lea    -0x170(%rbp),%rax
  434a97:	48 8b 95 38 fe ff ff 	mov    -0x1c8(%rbp),%rdx
  434a9e:	48 89 c6             	mov    %rax,%rsi
  434aa1:	48 89 d7             	mov    %rdx,%rdi
  434aa4:	e8 e5 19 00 00       	callq  43648e <std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>::variant<x666::LexError, void, void, void>(x666::LexError&&)>
  434aa9:	e9 e5 08 00 00       	jmpq   435393 <x666::getNextToken(std::istream&, x666::LineInfo&)+0xc78>
        }
        n = base * n + digit;
  434aae:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  434ab2:	48 0f af 45 d0       	imul   -0x30(%rbp),%rax
  434ab7:	48 89 c2             	mov    %rax,%rdx
  434aba:	8b 45 cc             	mov    -0x34(%rbp),%eax
  434abd:	48 98                	cltq   
  434abf:	48 01 d0             	add    %rdx,%rax
  434ac2:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
        getChar(fh, li);
  434ac6:	48 8b 95 28 fe ff ff 	mov    -0x1d8(%rbp),%rdx
  434acd:	48 8b 85 30 fe ff ff 	mov    -0x1d0(%rbp),%rax
  434ad4:	48 89 d6             	mov    %rdx,%rsi
  434ad7:	48 89 c7             	mov    %rax,%rdi
  434ada:	e8 e5 f8 ff ff       	callq  4343c4 <x666::getChar(std::istream&, x666::LineInfo&)>
      }
  434adf:	e9 ad fe ff ff       	jmpq   434991 <x666::getNextToken(std::istream&, x666::LineInfo&)+0x276>
        if (c == std::char_traits<char>::eof()) break;
  434ae4:	90                   	nop
      return IntLiteral(n);
  434ae5:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  434ae9:	48 8d 85 b8 fe ff ff 	lea    -0x148(%rbp),%rax
  434af0:	48 89 d6             	mov    %rdx,%rsi
  434af3:	48 89 c7             	mov    %rax,%rdi
  434af6:	e8 61 11 00 00       	callq  435c5c <x666::IntLiteral::IntLiteral(long)>
  434afb:	48 8d 85 b8 fe ff ff 	lea    -0x148(%rbp),%rax
  434b02:	48 8b 95 38 fe ff ff 	mov    -0x1c8(%rbp),%rdx
  434b09:	48 89 c6             	mov    %rax,%rsi
  434b0c:	48 89 d7             	mov    %rdx,%rdi
  434b0f:	e8 24 1a 00 00       	callq  436538 <std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>::variant<x666::IntLiteral, void, void, void>(x666::IntLiteral&&)>
  434b14:	e9 7a 08 00 00       	jmpq   435393 <x666::getNextToken(std::istream&, x666::LineInfo&)+0xc78>
    } else if (isalpha(c)) {
  434b19:	8b 45 ec             	mov    -0x14(%rbp),%eax
  434b1c:	89 c7                	mov    %eax,%edi
  434b1e:	e8 7d dd ff ff       	callq  4328a0 <isalpha@plt>
  434b23:	85 c0                	test   %eax,%eax
  434b25:	0f 95 c0             	setne  %al
  434b28:	84 c0                	test   %al,%al
  434b2a:	0f 84 ae 00 00 00    	je     434bde <x666::getNextToken(std::istream&, x666::LineInfo&)+0x4c3>
      // This starts an identifier.
      Identifier id((char) c);
  434b30:	8b 45 ec             	mov    -0x14(%rbp),%eax
  434b33:	0f be d0             	movsbl %al,%edx
  434b36:	48 8d 85 40 fe ff ff 	lea    -0x1c0(%rbp),%rax
  434b3d:	89 d6                	mov    %edx,%esi
  434b3f:	48 89 c7             	mov    %rax,%rdi
  434b42:	e8 63 10 00 00       	callq  435baa <x666::Identifier::Identifier(char)>
      while (true) {
        c = fh.peek();
  434b47:	48 8b 85 30 fe ff ff 	mov    -0x1d0(%rbp),%rax
  434b4e:	48 89 c7             	mov    %rax,%rdi
  434b51:	e8 7a db ff ff       	callq  4326d0 <std::istream::peek()@plt>
  434b56:	89 45 ec             	mov    %eax,-0x14(%rbp)
        if (c == std::char_traits<char>::eof()) break;
  434b59:	e8 28 10 00 00       	callq  435b86 <std::char_traits<char>::eof()>
  434b5e:	39 45 ec             	cmp    %eax,-0x14(%rbp)
  434b61:	0f 94 c0             	sete   %al
  434b64:	84 c0                	test   %al,%al
  434b66:	75 45                	jne    434bad <x666::getNextToken(std::istream&, x666::LineInfo&)+0x492>
        if (!isalpha(c)) break;
  434b68:	8b 45 ec             	mov    -0x14(%rbp),%eax
  434b6b:	89 c7                	mov    %eax,%edi
  434b6d:	e8 2e dd ff ff       	callq  4328a0 <isalpha@plt>
  434b72:	85 c0                	test   %eax,%eax
  434b74:	0f 94 c0             	sete   %al
  434b77:	84 c0                	test   %al,%al
  434b79:	75 35                	jne    434bb0 <x666::getNextToken(std::istream&, x666::LineInfo&)+0x495>
        id.name += (char) c;
  434b7b:	8b 45 ec             	mov    -0x14(%rbp),%eax
  434b7e:	0f be d0             	movsbl %al,%edx
  434b81:	48 8d 85 40 fe ff ff 	lea    -0x1c0(%rbp),%rax
  434b88:	89 d6                	mov    %edx,%esi
  434b8a:	48 89 c7             	mov    %rax,%rdi
  434b8d:	e8 3a 14 00 00       	callq  435fcc <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator+=(char)>
        getChar(fh, li);
  434b92:	48 8b 95 28 fe ff ff 	mov    -0x1d8(%rbp),%rdx
  434b99:	48 8b 85 30 fe ff ff 	mov    -0x1d0(%rbp),%rax
  434ba0:	48 89 d6             	mov    %rdx,%rsi
  434ba3:	48 89 c7             	mov    %rax,%rdi
  434ba6:	e8 19 f8 ff ff       	callq  4343c4 <x666::getChar(std::istream&, x666::LineInfo&)>
        c = fh.peek();
  434bab:	eb 9a                	jmp    434b47 <x666::getNextToken(std::istream&, x666::LineInfo&)+0x42c>
        if (c == std::char_traits<char>::eof()) break;
  434bad:	90                   	nop
  434bae:	eb 01                	jmp    434bb1 <x666::getNextToken(std::istream&, x666::LineInfo&)+0x496>
        if (!isalpha(c)) break;
  434bb0:	90                   	nop
      }
      return id;
  434bb1:	48 8d 85 40 fe ff ff 	lea    -0x1c0(%rbp),%rax
  434bb8:	48 8b 95 38 fe ff ff 	mov    -0x1c8(%rbp),%rdx
  434bbf:	48 89 c6             	mov    %rax,%rsi
  434bc2:	48 89 d7             	mov    %rdx,%rdi
  434bc5:	e8 18 1a 00 00       	callq  4365e2 <std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>::variant<x666::Identifier, void, void, void>(x666::Identifier&&)>
      Identifier id((char) c);
  434bca:	48 8d 85 40 fe ff ff 	lea    -0x1c0(%rbp),%rax
  434bd1:	48 89 c7             	mov    %rax,%rdi
  434bd4:	e8 df 10 00 00       	callq  435cb8 <x666::Identifier::~Identifier()>
  434bd9:	e9 b5 07 00 00       	jmpq   435393 <x666::getNextToken(std::istream&, x666::LineInfo&)+0xc78>
    } else {
      switch (c) {
  434bde:	8b 45 ec             	mov    -0x14(%rbp),%eax
  434be1:	83 e8 21             	sub    $0x21,%eax
  434be4:	83 f8 5d             	cmp    $0x5d,%eax
  434be7:	0f 87 3c 07 00 00    	ja     435329 <x666::getNextToken(std::istream&, x666::LineInfo&)+0xc0e>
  434bed:	89 c0                	mov    %eax,%eax
  434bef:	48 8b 04 c5 68 43 44 	mov    0x444368(,%rax,8),%rax
  434bf6:	00 
  434bf7:	ff e0                	jmpq   *%rax
        case '+': return Operator::plus;
  434bf9:	c7 85 c4 fe ff ff 04 	movl   $0x4,-0x13c(%rbp)
  434c00:	00 00 00 
  434c03:	48 8d 85 c4 fe ff ff 	lea    -0x13c(%rbp),%rax
  434c0a:	48 8b 95 38 fe ff ff 	mov    -0x1c8(%rbp),%rdx
  434c11:	48 89 c6             	mov    %rax,%rsi
  434c14:	48 89 d7             	mov    %rdx,%rdi
  434c17:	e8 c8 17 00 00       	callq  4363e4 <std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>::variant<x666::Operator, void, void, void>(x666::Operator&&)>
  434c1c:	e9 72 07 00 00       	jmpq   435393 <x666::getNextToken(std::istream&, x666::LineInfo&)+0xc78>
        case '*': return Operator::times;
  434c21:	c7 85 c8 fe ff ff 06 	movl   $0x6,-0x138(%rbp)
  434c28:	00 00 00 
  434c2b:	48 8d 85 c8 fe ff ff 	lea    -0x138(%rbp),%rax
  434c32:	48 8b 95 38 fe ff ff 	mov    -0x1c8(%rbp),%rdx
  434c39:	48 89 c6             	mov    %rax,%rsi
  434c3c:	48 89 d7             	mov    %rdx,%rdi
  434c3f:	e8 a0 17 00 00       	callq  4363e4 <std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>::variant<x666::Operator, void, void, void>(x666::Operator&&)>
  434c44:	e9 4a 07 00 00       	jmpq   435393 <x666::getNextToken(std::istream&, x666::LineInfo&)+0xc78>
        case '%': return Operator::modulo;
  434c49:	c7 85 cc fe ff ff 08 	movl   $0x8,-0x134(%rbp)
  434c50:	00 00 00 
  434c53:	48 8d 85 cc fe ff ff 	lea    -0x134(%rbp),%rax
  434c5a:	48 8b 95 38 fe ff ff 	mov    -0x1c8(%rbp),%rdx
  434c61:	48 89 c6             	mov    %rax,%rsi
  434c64:	48 89 d7             	mov    %rdx,%rdi
  434c67:	e8 78 17 00 00       	callq  4363e4 <std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>::variant<x666::Operator, void, void, void>(x666::Operator&&)>
  434c6c:	e9 22 07 00 00       	jmpq   435393 <x666::getNextToken(std::istream&, x666::LineInfo&)+0xc78>
        case '~': return Operator::concat;
  434c71:	c7 85 d0 fe ff ff 09 	movl   $0x9,-0x130(%rbp)
  434c78:	00 00 00 
  434c7b:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
  434c82:	48 8b 95 38 fe ff ff 	mov    -0x1c8(%rbp),%rdx
  434c89:	48 89 c6             	mov    %rax,%rsi
  434c8c:	48 89 d7             	mov    %rdx,%rdi
  434c8f:	e8 50 17 00 00       	callq  4363e4 <std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>::variant<x666::Operator, void, void, void>(x666::Operator&&)>
  434c94:	e9 fa 06 00 00       	jmpq   435393 <x666::getNextToken(std::istream&, x666::LineInfo&)+0xc78>
        case '(': return Operator::leftBracket;
  434c99:	c7 85 d4 fe ff ff 00 	movl   $0x0,-0x12c(%rbp)
  434ca0:	00 00 00 
  434ca3:	48 8d 85 d4 fe ff ff 	lea    -0x12c(%rbp),%rax
  434caa:	48 8b 95 38 fe ff ff 	mov    -0x1c8(%rbp),%rdx
  434cb1:	48 89 c6             	mov    %rax,%rsi
  434cb4:	48 89 d7             	mov    %rdx,%rdi
  434cb7:	e8 28 17 00 00       	callq  4363e4 <std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>::variant<x666::Operator, void, void, void>(x666::Operator&&)>
  434cbc:	e9 d2 06 00 00       	jmpq   435393 <x666::getNextToken(std::istream&, x666::LineInfo&)+0xc78>
        case ')': return Operator::rightBracket;
  434cc1:	c7 85 d8 fe ff ff 01 	movl   $0x1,-0x128(%rbp)
  434cc8:	00 00 00 
  434ccb:	48 8d 85 d8 fe ff ff 	lea    -0x128(%rbp),%rax
  434cd2:	48 8b 95 38 fe ff ff 	mov    -0x1c8(%rbp),%rdx
  434cd9:	48 89 c6             	mov    %rax,%rsi
  434cdc:	48 89 d7             	mov    %rdx,%rdi
  434cdf:	e8 00 17 00 00       	callq  4363e4 <std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>::variant<x666::Operator, void, void, void>(x666::Operator&&)>
  434ce4:	e9 aa 06 00 00       	jmpq   435393 <x666::getNextToken(std::istream&, x666::LineInfo&)+0xc78>
        case '[': return Operator::leftSBracket;
  434ce9:	c7 85 dc fe ff ff 02 	movl   $0x2,-0x124(%rbp)
  434cf0:	00 00 00 
  434cf3:	48 8d 85 dc fe ff ff 	lea    -0x124(%rbp),%rax
  434cfa:	48 8b 95 38 fe ff ff 	mov    -0x1c8(%rbp),%rdx
  434d01:	48 89 c6             	mov    %rax,%rsi
  434d04:	48 89 d7             	mov    %rdx,%rdi
  434d07:	e8 d8 16 00 00       	callq  4363e4 <std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>::variant<x666::Operator, void, void, void>(x666::Operator&&)>
  434d0c:	e9 82 06 00 00       	jmpq   435393 <x666::getNextToken(std::istream&, x666::LineInfo&)+0xc78>
        case ']': return Operator::rightSBracket;
  434d11:	c7 85 e0 fe ff ff 03 	movl   $0x3,-0x120(%rbp)
  434d18:	00 00 00 
  434d1b:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
  434d22:	48 8b 95 38 fe ff ff 	mov    -0x1c8(%rbp),%rdx
  434d29:	48 89 c6             	mov    %rax,%rsi
  434d2c:	48 89 d7             	mov    %rdx,%rdi
  434d2f:	e8 b0 16 00 00       	callq  4363e4 <std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>::variant<x666::Operator, void, void, void>(x666::Operator&&)>
  434d34:	e9 5a 06 00 00       	jmpq   435393 <x666::getNextToken(std::istream&, x666::LineInfo&)+0xc78>
        case '=': return Operator::equal;
  434d39:	c7 85 e4 fe ff ff 0b 	movl   $0xb,-0x11c(%rbp)
  434d40:	00 00 00 
  434d43:	48 8d 85 e4 fe ff ff 	lea    -0x11c(%rbp),%rax
  434d4a:	48 8b 95 38 fe ff ff 	mov    -0x1c8(%rbp),%rdx
  434d51:	48 89 c6             	mov    %rax,%rsi
  434d54:	48 89 d7             	mov    %rdx,%rdi
  434d57:	e8 88 16 00 00       	callq  4363e4 <std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>::variant<x666::Operator, void, void, void>(x666::Operator&&)>
  434d5c:	e9 32 06 00 00       	jmpq   435393 <x666::getNextToken(std::istream&, x666::LineInfo&)+0xc78>
        case ':': return Operator::colon;
  434d61:	c7 85 e8 fe ff ff 16 	movl   $0x16,-0x118(%rbp)
  434d68:	00 00 00 
  434d6b:	48 8d 85 e8 fe ff ff 	lea    -0x118(%rbp),%rax
  434d72:	48 8b 95 38 fe ff ff 	mov    -0x1c8(%rbp),%rdx
  434d79:	48 89 c6             	mov    %rax,%rsi
  434d7c:	48 89 d7             	mov    %rdx,%rdi
  434d7f:	e8 60 16 00 00       	callq  4363e4 <std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>::variant<x666::Operator, void, void, void>(x666::Operator&&)>
  434d84:	e9 0a 06 00 00       	jmpq   435393 <x666::getNextToken(std::istream&, x666::LineInfo&)+0xc78>
        case ',': return Operator::comma;
  434d89:	c7 85 ec fe ff ff 1f 	movl   $0x1f,-0x114(%rbp)
  434d90:	00 00 00 
  434d93:	48 8d 85 ec fe ff ff 	lea    -0x114(%rbp),%rax
  434d9a:	48 8b 95 38 fe ff ff 	mov    -0x1c8(%rbp),%rdx
  434da1:	48 89 c6             	mov    %rax,%rsi
  434da4:	48 89 d7             	mov    %rdx,%rdi
  434da7:	e8 38 16 00 00       	callq  4363e4 <std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>::variant<x666::Operator, void, void, void>(x666::Operator&&)>
  434dac:	e9 e2 05 00 00       	jmpq   435393 <x666::getNextToken(std::istream&, x666::LineInfo&)+0xc78>
        case '#': return Operator::length;
  434db1:	c7 85 f0 fe ff ff 1e 	movl   $0x1e,-0x110(%rbp)
  434db8:	00 00 00 
  434dbb:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
  434dc2:	48 8b 95 38 fe ff ff 	mov    -0x1c8(%rbp),%rdx
  434dc9:	48 89 c6             	mov    %rax,%rsi
  434dcc:	48 89 d7             	mov    %rdx,%rdi
  434dcf:	e8 10 16 00 00       	callq  4363e4 <std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>::variant<x666::Operator, void, void, void>(x666::Operator&&)>
  434dd4:	e9 ba 05 00 00       	jmpq   435393 <x666::getNextToken(std::istream&, x666::LineInfo&)+0xc78>
        case '/': {
          if (fh.peek() == '=') {
  434dd9:	48 8b 85 30 fe ff ff 	mov    -0x1d0(%rbp),%rax
  434de0:	48 89 c7             	mov    %rax,%rdi
  434de3:	e8 e8 d8 ff ff       	callq  4326d0 <std::istream::peek()@plt>
  434de8:	83 f8 3d             	cmp    $0x3d,%eax
  434deb:	0f 94 c0             	sete   %al
  434dee:	84 c0                	test   %al,%al
  434df0:	74 41                	je     434e33 <x666::getNextToken(std::istream&, x666::LineInfo&)+0x718>
            getChar(fh, li);
  434df2:	48 8b 95 28 fe ff ff 	mov    -0x1d8(%rbp),%rdx
  434df9:	48 8b 85 30 fe ff ff 	mov    -0x1d0(%rbp),%rax
  434e00:	48 89 d6             	mov    %rdx,%rsi
  434e03:	48 89 c7             	mov    %rax,%rdi
  434e06:	e8 b9 f5 ff ff       	callq  4343c4 <x666::getChar(std::istream&, x666::LineInfo&)>
            return Operator::notEqual;
  434e0b:	c7 85 f4 fe ff ff 0e 	movl   $0xe,-0x10c(%rbp)
  434e12:	00 00 00 
  434e15:	48 8d 85 f4 fe ff ff 	lea    -0x10c(%rbp),%rax
  434e1c:	48 8b 95 38 fe ff ff 	mov    -0x1c8(%rbp),%rdx
  434e23:	48 89 c6             	mov    %rax,%rsi
  434e26:	48 89 d7             	mov    %rdx,%rdi
  434e29:	e8 b6 15 00 00       	callq  4363e4 <std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>::variant<x666::Operator, void, void, void>(x666::Operator&&)>
  434e2e:	e9 60 05 00 00       	jmpq   435393 <x666::getNextToken(std::istream&, x666::LineInfo&)+0xc78>
          }
          return Operator::divide;
  434e33:	c7 85 f8 fe ff ff 07 	movl   $0x7,-0x108(%rbp)
  434e3a:	00 00 00 
  434e3d:	48 8d 85 f8 fe ff ff 	lea    -0x108(%rbp),%rax
  434e44:	48 8b 95 38 fe ff ff 	mov    -0x1c8(%rbp),%rdx
  434e4b:	48 89 c6             	mov    %rax,%rsi
  434e4e:	48 89 d7             	mov    %rdx,%rdi
  434e51:	e8 8e 15 00 00       	callq  4363e4 <std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>::variant<x666::Operator, void, void, void>(x666::Operator&&)>
  434e56:	e9 38 05 00 00       	jmpq   435393 <x666::getNextToken(std::istream&, x666::LineInfo&)+0xc78>
        }
        case '<': {
          int c = fh.peek();
  434e5b:	48 8b 85 30 fe ff ff 	mov    -0x1d0(%rbp),%rax
  434e62:	48 89 c7             	mov    %rax,%rdi
  434e65:	e8 66 d8 ff ff       	callq  4326d0 <std::istream::peek()@plt>
  434e6a:	89 45 b8             	mov    %eax,-0x48(%rbp)
          if (c == '=') {
  434e6d:	83 7d b8 3d          	cmpl   $0x3d,-0x48(%rbp)
  434e71:	75 41                	jne    434eb4 <x666::getNextToken(std::istream&, x666::LineInfo&)+0x799>
            getChar(fh, li);
  434e73:	48 8b 95 28 fe ff ff 	mov    -0x1d8(%rbp),%rdx
  434e7a:	48 8b 85 30 fe ff ff 	mov    -0x1d0(%rbp),%rax
  434e81:	48 89 d6             	mov    %rdx,%rsi
  434e84:	48 89 c7             	mov    %rax,%rdi
  434e87:	e8 38 f5 ff ff       	callq  4343c4 <x666::getChar(std::istream&, x666::LineInfo&)>
            return Operator::lessEqual;
  434e8c:	c7 85 fc fe ff ff 0f 	movl   $0xf,-0x104(%rbp)
  434e93:	00 00 00 
  434e96:	48 8d 85 fc fe ff ff 	lea    -0x104(%rbp),%rax
  434e9d:	48 8b 95 38 fe ff ff 	mov    -0x1c8(%rbp),%rdx
  434ea4:	48 89 c6             	mov    %rax,%rsi
  434ea7:	48 89 d7             	mov    %rdx,%rdi
  434eaa:	e8 35 15 00 00       	callq  4363e4 <std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>::variant<x666::Operator, void, void, void>(x666::Operator&&)>
  434eaf:	e9 df 04 00 00       	jmpq   435393 <x666::getNextToken(std::istream&, x666::LineInfo&)+0xc78>
          } else if (c == '-') {
  434eb4:	83 7d b8 2d          	cmpl   $0x2d,-0x48(%rbp)
  434eb8:	75 41                	jne    434efb <x666::getNextToken(std::istream&, x666::LineInfo&)+0x7e0>
            getChar(fh, li);
  434eba:	48 8b 95 28 fe ff ff 	mov    -0x1d8(%rbp),%rdx
  434ec1:	48 8b 85 30 fe ff ff 	mov    -0x1d0(%rbp),%rax
  434ec8:	48 89 d6             	mov    %rdx,%rsi
  434ecb:	48 89 c7             	mov    %rax,%rdi
  434ece:	e8 f1 f4 ff ff       	callq  4343c4 <x666::getChar(std::istream&, x666::LineInfo&)>
            return Operator::assign;
  434ed3:	c7 85 00 ff ff ff 0a 	movl   $0xa,-0x100(%rbp)
  434eda:	00 00 00 
  434edd:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
  434ee4:	48 8b 95 38 fe ff ff 	mov    -0x1c8(%rbp),%rdx
  434eeb:	48 89 c6             	mov    %rax,%rsi
  434eee:	48 89 d7             	mov    %rdx,%rdi
  434ef1:	e8 ee 14 00 00       	callq  4363e4 <std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>::variant<x666::Operator, void, void, void>(x666::Operator&&)>
  434ef6:	e9 98 04 00 00       	jmpq   435393 <x666::getNextToken(std::istream&, x666::LineInfo&)+0xc78>
          }
          return Operator::less;
  434efb:	c7 85 04 ff ff ff 0c 	movl   $0xc,-0xfc(%rbp)
  434f02:	00 00 00 
  434f05:	48 8d 85 04 ff ff ff 	lea    -0xfc(%rbp),%rax
  434f0c:	48 8b 95 38 fe ff ff 	mov    -0x1c8(%rbp),%rdx
  434f13:	48 89 c6             	mov    %rax,%rsi
  434f16:	48 89 d7             	mov    %rdx,%rdi
  434f19:	e8 c6 14 00 00       	callq  4363e4 <std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>::variant<x666::Operator, void, void, void>(x666::Operator&&)>
  434f1e:	e9 70 04 00 00       	jmpq   435393 <x666::getNextToken(std::istream&, x666::LineInfo&)+0xc78>
        }
        case '>': {
          int c = fh.peek();
  434f23:	48 8b 85 30 fe ff ff 	mov    -0x1d0(%rbp),%rax
  434f2a:	48 89 c7             	mov    %rax,%rdi
  434f2d:	e8 9e d7 ff ff       	callq  4326d0 <std::istream::peek()@plt>
  434f32:	89 45 bc             	mov    %eax,-0x44(%rbp)
          if (c == '=') {
  434f35:	83 7d bc 3d          	cmpl   $0x3d,-0x44(%rbp)
  434f39:	75 41                	jne    434f7c <x666::getNextToken(std::istream&, x666::LineInfo&)+0x861>
            getChar(fh, li);
  434f3b:	48 8b 95 28 fe ff ff 	mov    -0x1d8(%rbp),%rdx
  434f42:	48 8b 85 30 fe ff ff 	mov    -0x1d0(%rbp),%rax
  434f49:	48 89 d6             	mov    %rdx,%rsi
  434f4c:	48 89 c7             	mov    %rax,%rdi
  434f4f:	e8 70 f4 ff ff       	callq  4343c4 <x666::getChar(std::istream&, x666::LineInfo&)>
            return Operator::greaterEqual;
  434f54:	c7 85 08 ff ff ff 10 	movl   $0x10,-0xf8(%rbp)
  434f5b:	00 00 00 
  434f5e:	48 8d 85 08 ff ff ff 	lea    -0xf8(%rbp),%rax
  434f65:	48 8b 95 38 fe ff ff 	mov    -0x1c8(%rbp),%rdx
  434f6c:	48 89 c6             	mov    %rax,%rsi
  434f6f:	48 89 d7             	mov    %rdx,%rdi
  434f72:	e8 6d 14 00 00       	callq  4363e4 <std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>::variant<x666::Operator, void, void, void>(x666::Operator&&)>
  434f77:	e9 17 04 00 00       	jmpq   435393 <x666::getNextToken(std::istream&, x666::LineInfo&)+0xc78>
          }
          return Operator::greater;
  434f7c:	c7 85 0c ff ff ff 0d 	movl   $0xd,-0xf4(%rbp)
  434f83:	00 00 00 
  434f86:	48 8d 85 0c ff ff ff 	lea    -0xf4(%rbp),%rax
  434f8d:	48 8b 95 38 fe ff ff 	mov    -0x1c8(%rbp),%rdx
  434f94:	48 89 c6             	mov    %rax,%rsi
  434f97:	48 89 d7             	mov    %rdx,%rdi
  434f9a:	e8 45 14 00 00       	callq  4363e4 <std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>::variant<x666::Operator, void, void, void>(x666::Operator&&)>
  434f9f:	e9 ef 03 00 00       	jmpq   435393 <x666::getNextToken(std::istream&, x666::LineInfo&)+0xc78>
        }
        case '?': {
          int c = fh.peek();
  434fa4:	48 8b 85 30 fe ff ff 	mov    -0x1d0(%rbp),%rax
  434fab:	48 89 c7             	mov    %rax,%rdi
  434fae:	e8 1d d7 ff ff       	callq  4326d0 <std::istream::peek()@plt>
  434fb3:	89 45 c0             	mov    %eax,-0x40(%rbp)
          if (c == '?') {
  434fb6:	83 7d c0 3f          	cmpl   $0x3f,-0x40(%rbp)
  434fba:	75 41                	jne    434ffd <x666::getNextToken(std::istream&, x666::LineInfo&)+0x8e2>
            getChar(fh, li);
  434fbc:	48 8b 95 28 fe ff ff 	mov    -0x1d8(%rbp),%rdx
  434fc3:	48 8b 85 30 fe ff ff 	mov    -0x1d0(%rbp),%rax
  434fca:	48 89 d6             	mov    %rdx,%rsi
  434fcd:	48 89 c7             	mov    %rax,%rdi
  434fd0:	e8 ef f3 ff ff       	callq  4343c4 <x666::getChar(std::istream&, x666::LineInfo&)>
            return Operator::ifStmt;
  434fd5:	c7 85 10 ff ff ff 11 	movl   $0x11,-0xf0(%rbp)
  434fdc:	00 00 00 
  434fdf:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
  434fe6:	48 8b 95 38 fe ff ff 	mov    -0x1c8(%rbp),%rdx
  434fed:	48 89 c6             	mov    %rax,%rsi
  434ff0:	48 89 d7             	mov    %rdx,%rdi
  434ff3:	e8 ec 13 00 00       	callq  4363e4 <std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>::variant<x666::Operator, void, void, void>(x666::Operator&&)>
  434ff8:	e9 96 03 00 00       	jmpq   435393 <x666::getNextToken(std::istream&, x666::LineInfo&)+0xc78>
          } else if (c == '&') {
  434ffd:	83 7d c0 26          	cmpl   $0x26,-0x40(%rbp)
  435001:	75 41                	jne    435044 <x666::getNextToken(std::istream&, x666::LineInfo&)+0x929>
            getChar(fh, li);
  435003:	48 8b 95 28 fe ff ff 	mov    -0x1d8(%rbp),%rdx
  43500a:	48 8b 85 30 fe ff ff 	mov    -0x1d0(%rbp),%rax
  435011:	48 89 d6             	mov    %rdx,%rsi
  435014:	48 89 c7             	mov    %rax,%rdi
  435017:	e8 a8 f3 ff ff       	callq  4343c4 <x666::getChar(std::istream&, x666::LineInfo&)>
            return Operator::ifThenStmt;
  43501c:	c7 85 14 ff ff ff 12 	movl   $0x12,-0xec(%rbp)
  435023:	00 00 00 
  435026:	48 8d 85 14 ff ff ff 	lea    -0xec(%rbp),%rax
  43502d:	48 8b 95 38 fe ff ff 	mov    -0x1c8(%rbp),%rdx
  435034:	48 89 c6             	mov    %rax,%rsi
  435037:	48 89 d7             	mov    %rdx,%rdi
  43503a:	e8 a5 13 00 00       	callq  4363e4 <std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>::variant<x666::Operator, void, void, void>(x666::Operator&&)>
  43503f:	e9 4f 03 00 00       	jmpq   435393 <x666::getNextToken(std::istream&, x666::LineInfo&)+0xc78>
          }
          return Operator::questionMark;
  435044:	c7 85 18 ff ff ff 15 	movl   $0x15,-0xe8(%rbp)
  43504b:	00 00 00 
  43504e:	48 8d 85 18 ff ff ff 	lea    -0xe8(%rbp),%rax
  435055:	48 8b 95 38 fe ff ff 	mov    -0x1c8(%rbp),%rdx
  43505c:	48 89 c6             	mov    %rax,%rsi
  43505f:	48 89 d7             	mov    %rdx,%rdi
  435062:	e8 7d 13 00 00       	callq  4363e4 <std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>::variant<x666::Operator, void, void, void>(x666::Operator&&)>
  435067:	e9 27 03 00 00       	jmpq   435393 <x666::getNextToken(std::istream&, x666::LineInfo&)+0xc78>
        }
        case '@': {
          int c = fh.peek();
  43506c:	48 8b 85 30 fe ff ff 	mov    -0x1d0(%rbp),%rax
  435073:	48 89 c7             	mov    %rax,%rdi
  435076:	e8 55 d6 ff ff       	callq  4326d0 <std::istream::peek()@plt>
  43507b:	89 45 c4             	mov    %eax,-0x3c(%rbp)
          if (c == '#') {
  43507e:	83 7d c4 23          	cmpl   $0x23,-0x3c(%rbp)
  435082:	75 41                	jne    4350c5 <x666::getNextToken(std::istream&, x666::LineInfo&)+0x9aa>
            getChar(fh, li);
  435084:	48 8b 95 28 fe ff ff 	mov    -0x1d8(%rbp),%rdx
  43508b:	48 8b 85 30 fe ff ff 	mov    -0x1d0(%rbp),%rax
  435092:	48 89 d6             	mov    %rdx,%rsi
  435095:	48 89 c7             	mov    %rax,%rdi
  435098:	e8 27 f3 ff ff       	callq  4343c4 <x666::getChar(std::istream&, x666::LineInfo&)>
            return Operator::forStmt;
  43509d:	c7 85 1c ff ff ff 19 	movl   $0x19,-0xe4(%rbp)
  4350a4:	00 00 00 
  4350a7:	48 8d 85 1c ff ff ff 	lea    -0xe4(%rbp),%rax
  4350ae:	48 8b 95 38 fe ff ff 	mov    -0x1c8(%rbp),%rdx
  4350b5:	48 89 c6             	mov    %rax,%rsi
  4350b8:	48 89 d7             	mov    %rdx,%rdi
  4350bb:	e8 24 13 00 00       	callq  4363e4 <std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>::variant<x666::Operator, void, void, void>(x666::Operator&&)>
  4350c0:	e9 ce 02 00 00       	jmpq   435393 <x666::getNextToken(std::istream&, x666::LineInfo&)+0xc78>
          } else if (c == '@') {
  4350c5:	83 7d c4 40          	cmpl   $0x40,-0x3c(%rbp)
  4350c9:	75 41                	jne    43510c <x666::getNextToken(std::istream&, x666::LineInfo&)+0x9f1>
            getChar(fh, li);
  4350cb:	48 8b 95 28 fe ff ff 	mov    -0x1d8(%rbp),%rdx
  4350d2:	48 8b 85 30 fe ff ff 	mov    -0x1d0(%rbp),%rax
  4350d9:	48 89 d6             	mov    %rdx,%rsi
  4350dc:	48 89 c7             	mov    %rax,%rdi
  4350df:	e8 e0 f2 ff ff       	callq  4343c4 <x666::getChar(std::istream&, x666::LineInfo&)>
            return Operator::repeatStmt;
  4350e4:	c7 85 20 ff ff ff 18 	movl   $0x18,-0xe0(%rbp)
  4350eb:	00 00 00 
  4350ee:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
  4350f5:	48 8b 95 38 fe ff ff 	mov    -0x1c8(%rbp),%rdx
  4350fc:	48 89 c6             	mov    %rax,%rsi
  4350ff:	48 89 d7             	mov    %rdx,%rdi
  435102:	e8 dd 12 00 00       	callq  4363e4 <std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>::variant<x666::Operator, void, void, void>(x666::Operator&&)>
  435107:	e9 87 02 00 00       	jmpq   435393 <x666::getNextToken(std::istream&, x666::LineInfo&)+0xc78>
          }
          return Operator::whileStmt;
  43510c:	c7 85 24 ff ff ff 17 	movl   $0x17,-0xdc(%rbp)
  435113:	00 00 00 
  435116:	48 8d 85 24 ff ff ff 	lea    -0xdc(%rbp),%rax
  43511d:	48 8b 95 38 fe ff ff 	mov    -0x1c8(%rbp),%rdx
  435124:	48 89 c6             	mov    %rax,%rsi
  435127:	48 89 d7             	mov    %rdx,%rdi
  43512a:	e8 b5 12 00 00       	callq  4363e4 <std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>::variant<x666::Operator, void, void, void>(x666::Operator&&)>
  43512f:	e9 5f 02 00 00       	jmpq   435393 <x666::getNextToken(std::istream&, x666::LineInfo&)+0xc78>
        }
        case '&': {
          int c = fh.peek();
  435134:	48 8b 85 30 fe ff ff 	mov    -0x1d0(%rbp),%rax
  43513b:	48 89 c7             	mov    %rax,%rdi
  43513e:	e8 8d d5 ff ff       	callq  4326d0 <std::istream::peek()@plt>
  435143:	89 45 b4             	mov    %eax,-0x4c(%rbp)
          if (c == '>') {
  435146:	83 7d b4 3e          	cmpl   $0x3e,-0x4c(%rbp)
  43514a:	75 41                	jne    43518d <x666::getNextToken(std::istream&, x666::LineInfo&)+0xa72>
            getChar(fh, li);
  43514c:	48 8b 95 28 fe ff ff 	mov    -0x1d8(%rbp),%rdx
  435153:	48 8b 85 30 fe ff ff 	mov    -0x1d0(%rbp),%rax
  43515a:	48 89 d6             	mov    %rdx,%rsi
  43515d:	48 89 c7             	mov    %rax,%rdi
  435160:	e8 5f f2 ff ff       	callq  4343c4 <x666::getChar(std::istream&, x666::LineInfo&)>
            return Operator::endStmt;
  435165:	c7 85 28 ff ff ff 14 	movl   $0x14,-0xd8(%rbp)
  43516c:	00 00 00 
  43516f:	48 8d 85 28 ff ff ff 	lea    -0xd8(%rbp),%rax
  435176:	48 8b 95 38 fe ff ff 	mov    -0x1c8(%rbp),%rdx
  43517d:	48 89 c6             	mov    %rax,%rsi
  435180:	48 89 d7             	mov    %rdx,%rdi
  435183:	e8 5c 12 00 00       	callq  4363e4 <std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>::variant<x666::Operator, void, void, void>(x666::Operator&&)>
  435188:	e9 06 02 00 00       	jmpq   435393 <x666::getNextToken(std::istream&, x666::LineInfo&)+0xc78>
          }
          return Operator::andStmt;
  43518d:	c7 85 2c ff ff ff 1b 	movl   $0x1b,-0xd4(%rbp)
  435194:	00 00 00 
  435197:	48 8d 85 2c ff ff ff 	lea    -0xd4(%rbp),%rax
  43519e:	48 8b 95 38 fe ff ff 	mov    -0x1c8(%rbp),%rdx
  4351a5:	48 89 c6             	mov    %rax,%rsi
  4351a8:	48 89 d7             	mov    %rdx,%rdi
  4351ab:	e8 34 12 00 00       	callq  4363e4 <std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>::variant<x666::Operator, void, void, void>(x666::Operator&&)>
  4351b0:	e9 de 01 00 00       	jmpq   435393 <x666::getNextToken(std::istream&, x666::LineInfo&)+0xc78>
        }
        case '|': {
          int c = fh.peek();
  4351b5:	48 8b 85 30 fe ff ff 	mov    -0x1d0(%rbp),%rax
  4351bc:	48 89 c7             	mov    %rax,%rdi
  4351bf:	e8 0c d5 ff ff       	callq  4326d0 <std::istream::peek()@plt>
  4351c4:	89 45 c8             	mov    %eax,-0x38(%rbp)
          if (c == '*') {
  4351c7:	83 7d c8 2a          	cmpl   $0x2a,-0x38(%rbp)
  4351cb:	75 41                	jne    43520e <x666::getNextToken(std::istream&, x666::LineInfo&)+0xaf3>
            getChar(fh, li);
  4351cd:	48 8b 95 28 fe ff ff 	mov    -0x1d8(%rbp),%rdx
  4351d4:	48 8b 85 30 fe ff ff 	mov    -0x1d0(%rbp),%rax
  4351db:	48 89 d6             	mov    %rdx,%rsi
  4351de:	48 89 c7             	mov    %rax,%rdi
  4351e1:	e8 de f1 ff ff       	callq  4343c4 <x666::getChar(std::istream&, x666::LineInfo&)>
            return Operator::xorStmt;
  4351e6:	c7 85 30 ff ff ff 1d 	movl   $0x1d,-0xd0(%rbp)
  4351ed:	00 00 00 
  4351f0:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
  4351f7:	48 8b 95 38 fe ff ff 	mov    -0x1c8(%rbp),%rdx
  4351fe:	48 89 c6             	mov    %rax,%rsi
  435201:	48 89 d7             	mov    %rdx,%rdi
  435204:	e8 db 11 00 00       	callq  4363e4 <std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>::variant<x666::Operator, void, void, void>(x666::Operator&&)>
  435209:	e9 85 01 00 00       	jmpq   435393 <x666::getNextToken(std::istream&, x666::LineInfo&)+0xc78>
          }
          return Operator::orStmt;
  43520e:	c7 85 34 ff ff ff 1c 	movl   $0x1c,-0xcc(%rbp)
  435215:	00 00 00 
  435218:	48 8d 85 34 ff ff ff 	lea    -0xcc(%rbp),%rax
  43521f:	48 8b 95 38 fe ff ff 	mov    -0x1c8(%rbp),%rdx
  435226:	48 89 c6             	mov    %rax,%rsi
  435229:	48 89 d7             	mov    %rdx,%rdi
  43522c:	e8 b3 11 00 00       	callq  4363e4 <std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>::variant<x666::Operator, void, void, void>(x666::Operator&&)>
  435231:	e9 5d 01 00 00       	jmpq   435393 <x666::getNextToken(std::istream&, x666::LineInfo&)+0xc78>
        }
        case '!': {
          int c = fh.peek();
  435236:	48 8b 85 30 fe ff ff 	mov    -0x1d0(%rbp),%rax
  43523d:	48 89 c7             	mov    %rax,%rdi
  435240:	e8 8b d4 ff ff       	callq  4326d0 <std::istream::peek()@plt>
  435245:	89 45 b0             	mov    %eax,-0x50(%rbp)
          if (c == '!') {
  435248:	83 7d b0 21          	cmpl   $0x21,-0x50(%rbp)
  43524c:	75 41                	jne    43528f <x666::getNextToken(std::istream&, x666::LineInfo&)+0xb74>
            getChar(fh, li);
  43524e:	48 8b 95 28 fe ff ff 	mov    -0x1d8(%rbp),%rdx
  435255:	48 8b 85 30 fe ff ff 	mov    -0x1d0(%rbp),%rax
  43525c:	48 89 d6             	mov    %rdx,%rsi
  43525f:	48 89 c7             	mov    %rax,%rdi
  435262:	e8 5d f1 ff ff       	callq  4343c4 <x666::getChar(std::istream&, x666::LineInfo&)>
            return Operator::elseStmt;
  435267:	c7 85 38 ff ff ff 13 	movl   $0x13,-0xc8(%rbp)
  43526e:	00 00 00 
  435271:	48 8d 85 38 ff ff ff 	lea    -0xc8(%rbp),%rax
  435278:	48 8b 95 38 fe ff ff 	mov    -0x1c8(%rbp),%rdx
  43527f:	48 89 c6             	mov    %rax,%rsi
  435282:	48 89 d7             	mov    %rdx,%rdi
  435285:	e8 5a 11 00 00       	callq  4363e4 <std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>::variant<x666::Operator, void, void, void>(x666::Operator&&)>
  43528a:	e9 04 01 00 00       	jmpq   435393 <x666::getNextToken(std::istream&, x666::LineInfo&)+0xc78>
          }
          return Operator::notStmt;
  43528f:	c7 85 3c ff ff ff 1a 	movl   $0x1a,-0xc4(%rbp)
  435296:	00 00 00 
  435299:	48 8d 85 3c ff ff ff 	lea    -0xc4(%rbp),%rax
  4352a0:	48 8b 95 38 fe ff ff 	mov    -0x1c8(%rbp),%rdx
  4352a7:	48 89 c6             	mov    %rax,%rsi
  4352aa:	48 89 d7             	mov    %rdx,%rdi
  4352ad:	e8 32 11 00 00       	callq  4363e4 <std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>::variant<x666::Operator, void, void, void>(x666::Operator&&)>
  4352b2:	e9 dc 00 00 00       	jmpq   435393 <x666::getNextToken(std::istream&, x666::LineInfo&)+0xc78>
        }
        case '\x22': return StringLiteral(parseStringLiteral(fh, li));
  4352b7:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
  4352be:	48 8b 95 28 fe ff ff 	mov    -0x1d8(%rbp),%rdx
  4352c5:	48 8b 8d 30 fe ff ff 	mov    -0x1d0(%rbp),%rcx
  4352cc:	48 89 ce             	mov    %rcx,%rsi
  4352cf:	48 89 c7             	mov    %rax,%rdi
  4352d2:	e8 1a f2 ff ff       	callq  4344f1 <x666::parseStringLiteral[abi:cxx11](std::istream&, x666::LineInfo&)>
  4352d7:	48 8d 95 60 ff ff ff 	lea    -0xa0(%rbp),%rdx
  4352de:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
  4352e5:	48 89 d6             	mov    %rdx,%rsi
  4352e8:	48 89 c7             	mov    %rax,%rdi
  4352eb:	e8 46 09 00 00       	callq  435c36 <x666::StringLiteral::StringLiteral(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)>
  4352f0:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
  4352f7:	48 8b 95 38 fe ff ff 	mov    -0x1c8(%rbp),%rdx
  4352fe:	48 89 c6             	mov    %rax,%rsi
  435301:	48 89 d7             	mov    %rdx,%rdi
  435304:	e8 83 13 00 00       	callq  43668c <std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>::variant<x666::StringLiteral, void, void, void>(x666::StringLiteral&&)>
  435309:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
  435310:	48 89 c7             	mov    %rax,%rdi
  435313:	e8 bc 09 00 00       	callq  435cd4 <x666::StringLiteral::~StringLiteral()>
  435318:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
  43531f:	48 89 c7             	mov    %rax,%rdi
  435322:	e8 4d 0a 00 00       	callq  435d74 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()>
  435327:	eb 6a                	jmp    435393 <x666::getNextToken(std::istream&, x666::LineInfo&)+0xc78>
      }
    }
    return LexError(LexErrorCode::unknownOperator, li);
  435329:	48 8b 95 28 fe ff ff 	mov    -0x1d8(%rbp),%rdx
  435330:	48 8d 45 80          	lea    -0x80(%rbp),%rax
  435334:	be 01 00 00 00       	mov    $0x1,%esi
  435339:	48 89 c7             	mov    %rax,%rdi
  43533c:	e8 35 09 00 00       	callq  435c76 <x666::LexError::LexError(x666::LexErrorCode, x666::LineInfo const&)>
  435341:	48 8d 45 80          	lea    -0x80(%rbp),%rax
  435345:	48 8b 95 38 fe ff ff 	mov    -0x1c8(%rbp),%rdx
  43534c:	48 89 c6             	mov    %rax,%rsi
  43534f:	48 89 d7             	mov    %rdx,%rdi
  435352:	e8 37 11 00 00       	callq  43648e <std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>::variant<x666::LexError, void, void, void>(x666::LexError&&)>
  435357:	eb 3a                	jmp    435393 <x666::getNextToken(std::istream&, x666::LineInfo&)+0xc78>
  435359:	48 89 c3             	mov    %rax,%rbx
      Identifier id((char) c);
  43535c:	48 8d 85 40 fe ff ff 	lea    -0x1c0(%rbp),%rax
  435363:	48 89 c7             	mov    %rax,%rdi
  435366:	e8 4d 09 00 00       	callq  435cb8 <x666::Identifier::~Identifier()>
  43536b:	48 89 d8             	mov    %rbx,%rax
  43536e:	48 89 c7             	mov    %rax,%rdi
  435371:	e8 9a d5 ff ff       	callq  432910 <_Unwind_Resume@plt>
  435376:	48 89 c3             	mov    %rax,%rbx
        case '\x22': return StringLiteral(parseStringLiteral(fh, li));
  435379:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
  435380:	48 89 c7             	mov    %rax,%rdi
  435383:	e8 ec 09 00 00       	callq  435d74 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()>
  435388:	48 89 d8             	mov    %rbx,%rax
  43538b:	48 89 c7             	mov    %rax,%rdi
  43538e:	e8 7d d5 ff ff       	callq  432910 <_Unwind_Resume@plt>
  }
  435393:	48 8b 85 38 fe ff ff 	mov    -0x1c8(%rbp),%rax
  43539a:	48 81 c4 d8 01 00 00 	add    $0x1d8,%rsp
  4353a1:	5b                   	pop    %rbx
  4353a2:	5d                   	pop    %rbp
  4353a3:	c3                   	retq   

00000000004353a4 <x666::LexError::print(std::istream&) const>:
  void LexError::print(std::istream& fh) const {
  4353a4:	55                   	push   %rbp
  4353a5:	48 89 e5             	mov    %rsp,%rbp
  4353a8:	53                   	push   %rbx
  4353a9:	48 81 ec 98 01 00 00 	sub    $0x198,%rsp
  4353b0:	48 89 bd 68 fe ff ff 	mov    %rdi,-0x198(%rbp)
  4353b7:	48 89 b5 60 fe ff ff 	mov    %rsi,-0x1a0(%rbp)
    std::cout << "Error at line " << (li.line + 1);
  4353be:	be 58 46 44 00       	mov    $0x444658,%esi
  4353c3:	bf 40 13 65 00       	mov    $0x651340,%edi
  4353c8:	e8 13 d4 ff ff       	callq  4327e0 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*)@plt>
  4353cd:	48 89 c2             	mov    %rax,%rdx
  4353d0:	48 8b 85 68 fe ff ff 	mov    -0x198(%rbp),%rax
  4353d7:	48 8b 40 08          	mov    0x8(%rax),%rax
  4353db:	48 83 c0 01          	add    $0x1,%rax
  4353df:	48 89 c6             	mov    %rax,%rsi
  4353e2:	48 89 d7             	mov    %rdx,%rdi
  4353e5:	e8 c6 d2 ff ff       	callq  4326b0 <std::ostream::operator<<(unsigned long)@plt>
    std::cout << " column " << (li.col + 1) << ": ";
  4353ea:	be 67 46 44 00       	mov    $0x444667,%esi
  4353ef:	bf 40 13 65 00       	mov    $0x651340,%edi
  4353f4:	e8 e7 d3 ff ff       	callq  4327e0 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*)@plt>
  4353f9:	48 89 c2             	mov    %rax,%rdx
  4353fc:	48 8b 85 68 fe ff ff 	mov    -0x198(%rbp),%rax
  435403:	48 8b 40 10          	mov    0x10(%rax),%rax
  435407:	48 83 c0 01          	add    $0x1,%rax
  43540b:	48 89 c6             	mov    %rax,%rsi
  43540e:	48 89 d7             	mov    %rdx,%rdi
  435411:	e8 9a d2 ff ff       	callq  4326b0 <std::ostream::operator<<(unsigned long)@plt>
  435416:	be 70 46 44 00       	mov    $0x444670,%esi
  43541b:	48 89 c7             	mov    %rax,%rdi
  43541e:	e8 bd d3 ff ff       	callq  4327e0 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*)@plt>
    std::cout << lexErrorMessages[(int) c] << "\n";
  435423:	48 8b 85 68 fe ff ff 	mov    -0x198(%rbp),%rax
  43542a:	8b 00                	mov    (%rax),%eax
  43542c:	48 98                	cltq   
  43542e:	48 8b 04 c5 c0 11 65 	mov    0x6511c0(,%rax,8),%rax
  435435:	00 
  435436:	48 89 c6             	mov    %rax,%rsi
  435439:	bf 40 13 65 00       	mov    $0x651340,%edi
  43543e:	e8 9d d3 ff ff       	callq  4327e0 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*)@plt>
  435443:	be 73 46 44 00       	mov    $0x444673,%esi
  435448:	48 89 c7             	mov    %rax,%rdi
  43544b:	e8 90 d3 ff ff       	callq  4327e0 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*)@plt>
    fh.clear();
  435450:	48 8b 85 60 fe ff ff 	mov    -0x1a0(%rbp),%rax
  435457:	48 8b 00             	mov    (%rax),%rax
  43545a:	48 83 e8 18          	sub    $0x18,%rax
  43545e:	48 8b 00             	mov    (%rax),%rax
  435461:	48 89 c2             	mov    %rax,%rdx
  435464:	48 8b 85 60 fe ff ff 	mov    -0x1a0(%rbp),%rax
  43546b:	48 01 d0             	add    %rdx,%rax
  43546e:	be 00 00 00 00       	mov    $0x0,%esi
  435473:	48 89 c7             	mov    %rax,%rdi
  435476:	e8 65 d4 ff ff       	callq  4328e0 <std::basic_ios<char, std::char_traits<char> >::clear(std::_Ios_Iostate)@plt>
    size_t off = fh.tellg();
  43547b:	48 8b 85 60 fe ff ff 	mov    -0x1a0(%rbp),%rax
  435482:	48 89 c7             	mov    %rax,%rdi
  435485:	e8 76 d4 ff ff       	callq  432900 <std::istream::tellg()@plt>
  43548a:	48 89 85 90 fe ff ff 	mov    %rax,-0x170(%rbp)
  435491:	48 89 95 98 fe ff ff 	mov    %rdx,-0x168(%rbp)
  435498:	48 8d 85 90 fe ff ff 	lea    -0x170(%rbp),%rax
  43549f:	48 89 c7             	mov    %rax,%rdi
  4354a2:	e8 17 0e 00 00       	callq  4362be <std::fpos<__mbstate_t>::operator long() const>
  4354a7:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    size_t lineend = li.byte;
  4354ab:	48 8b 85 68 fe ff ff 	mov    -0x198(%rbp),%rax
  4354b2:	48 8b 40 18          	mov    0x18(%rax),%rax
  4354b6:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    fh.seekg(lineend);
  4354ba:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  4354be:	48 8d 85 a0 fe ff ff 	lea    -0x160(%rbp),%rax
  4354c5:	48 89 d6             	mov    %rdx,%rsi
  4354c8:	48 89 c7             	mov    %rax,%rdi
  4354cb:	e8 fc 11 00 00       	callq  4366cc <std::fpos<__mbstate_t>::fpos(long)>
  4354d0:	48 8b 8d a0 fe ff ff 	mov    -0x160(%rbp),%rcx
  4354d7:	48 8b 95 a8 fe ff ff 	mov    -0x158(%rbp),%rdx
  4354de:	48 8b 85 60 fe ff ff 	mov    -0x1a0(%rbp),%rax
  4354e5:	48 89 ce             	mov    %rcx,%rsi
  4354e8:	48 89 c7             	mov    %rax,%rdi
  4354eb:	e8 60 d3 ff ff       	callq  432850 <std::istream::seekg(std::fpos<__mbstate_t>)@plt>
    while (true) {
      int c = fh.get();
  4354f0:	48 8b 85 60 fe ff ff 	mov    -0x1a0(%rbp),%rax
  4354f7:	48 89 c7             	mov    %rax,%rdi
  4354fa:	e8 41 d3 ff ff       	callq  432840 <std::istream::get()@plt>
  4354ff:	89 45 cc             	mov    %eax,-0x34(%rbp)
      ++lineend;
  435502:	48 83 45 e8 01       	addq   $0x1,-0x18(%rbp)
      if (c == std::char_traits<char>::eof() || c == '\n')
  435507:	e8 7a 06 00 00       	callq  435b86 <std::char_traits<char>::eof()>
  43550c:	39 45 cc             	cmp    %eax,-0x34(%rbp)
  43550f:	74 06                	je     435517 <x666::LexError::print(std::istream&) const+0x173>
  435511:	83 7d cc 0a          	cmpl   $0xa,-0x34(%rbp)
  435515:	75 07                	jne    43551e <x666::LexError::print(std::istream&) const+0x17a>
  435517:	b8 01 00 00 00       	mov    $0x1,%eax
  43551c:	eb 05                	jmp    435523 <x666::LexError::print(std::istream&) const+0x17f>
  43551e:	b8 00 00 00 00       	mov    $0x0,%eax
  435523:	84 c0                	test   %al,%al
  435525:	75 02                	jne    435529 <x666::LexError::print(std::istream&) const+0x185>
        break;
    }
  435527:	eb c7                	jmp    4354f0 <x666::LexError::print(std::istream&) const+0x14c>
        break;
  435529:	90                   	nop
    fh.clear();
  43552a:	48 8b 85 60 fe ff ff 	mov    -0x1a0(%rbp),%rax
  435531:	48 8b 00             	mov    (%rax),%rax
  435534:	48 83 e8 18          	sub    $0x18,%rax
  435538:	48 8b 00             	mov    (%rax),%rax
  43553b:	48 89 c2             	mov    %rax,%rdx
  43553e:	48 8b 85 60 fe ff ff 	mov    -0x1a0(%rbp),%rax
  435545:	48 01 d0             	add    %rdx,%rax
  435548:	be 00 00 00 00       	mov    $0x0,%esi
  43554d:	48 89 c7             	mov    %rax,%rdi
  435550:	e8 8b d3 ff ff       	callq  4328e0 <std::basic_ios<char, std::char_traits<char> >::clear(std::_Ios_Iostate)@plt>
    size_t linestart = li.sot;
  435555:	48 8b 85 68 fe ff ff 	mov    -0x198(%rbp),%rax
  43555c:	48 8b 40 20          	mov    0x20(%rax),%rax
  435560:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    fh.seekg(linestart);
  435564:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  435568:	48 8d 85 b0 fe ff ff 	lea    -0x150(%rbp),%rax
  43556f:	48 89 d6             	mov    %rdx,%rsi
  435572:	48 89 c7             	mov    %rax,%rdi
  435575:	e8 52 11 00 00       	callq  4366cc <std::fpos<__mbstate_t>::fpos(long)>
  43557a:	48 8b 8d b0 fe ff ff 	mov    -0x150(%rbp),%rcx
  435581:	48 8b 95 b8 fe ff ff 	mov    -0x148(%rbp),%rdx
  435588:	48 8b 85 60 fe ff ff 	mov    -0x1a0(%rbp),%rax
  43558f:	48 89 ce             	mov    %rcx,%rsi
  435592:	48 89 c7             	mov    %rax,%rdi
  435595:	e8 b6 d2 ff ff       	callq  432850 <std::istream::seekg(std::fpos<__mbstate_t>)@plt>
    while (linestart > 0) {
  43559a:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  43559f:	74 68                	je     435609 <x666::LexError::print(std::istream&) const+0x265>
      --linestart;
  4355a1:	48 83 6d e0 01       	subq   $0x1,-0x20(%rbp)
      fh.seekg(linestart);
  4355a6:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  4355aa:	48 8d 85 c0 fe ff ff 	lea    -0x140(%rbp),%rax
  4355b1:	48 89 d6             	mov    %rdx,%rsi
  4355b4:	48 89 c7             	mov    %rax,%rdi
  4355b7:	e8 10 11 00 00       	callq  4366cc <std::fpos<__mbstate_t>::fpos(long)>
  4355bc:	48 8b 8d c0 fe ff ff 	mov    -0x140(%rbp),%rcx
  4355c3:	48 8b 95 c8 fe ff ff 	mov    -0x138(%rbp),%rdx
  4355ca:	48 8b 85 60 fe ff ff 	mov    -0x1a0(%rbp),%rax
  4355d1:	48 89 ce             	mov    %rcx,%rsi
  4355d4:	48 89 c7             	mov    %rax,%rdi
  4355d7:	e8 74 d2 ff ff       	callq  432850 <std::istream::seekg(std::fpos<__mbstate_t>)@plt>
      if (fh.peek() == '\n') {
  4355dc:	48 8b 85 60 fe ff ff 	mov    -0x1a0(%rbp),%rax
  4355e3:	48 89 c7             	mov    %rax,%rdi
  4355e6:	e8 e5 d0 ff ff       	callq  4326d0 <std::istream::peek()@plt>
  4355eb:	83 f8 0a             	cmp    $0xa,%eax
  4355ee:	0f 94 c0             	sete   %al
  4355f1:	84 c0                	test   %al,%al
  4355f3:	74 a5                	je     43559a <x666::LexError::print(std::istream&) const+0x1f6>
        ++linestart;
  4355f5:	48 83 45 e0 01       	addq   $0x1,-0x20(%rbp)
        fh.get();
  4355fa:	48 8b 85 60 fe ff ff 	mov    -0x1a0(%rbp),%rax
  435601:	48 89 c7             	mov    %rax,%rdi
  435604:	e8 37 d2 ff ff       	callq  432840 <std::istream::get()@plt>
        break;
      }
    }
    // We should now be at the start of the first line.
    ssize_t lengthOfSnakeSigned = li.byte - li.sot + 1;
  435609:	48 8b 85 68 fe ff ff 	mov    -0x198(%rbp),%rax
  435610:	48 8b 50 18          	mov    0x18(%rax),%rdx
  435614:	48 8b 85 68 fe ff ff 	mov    -0x198(%rbp),%rax
  43561b:	48 8b 40 20          	mov    0x20(%rax),%rax
  43561f:	48 29 c2             	sub    %rax,%rdx
  435622:	48 89 d0             	mov    %rdx,%rax
  435625:	48 83 c0 01          	add    $0x1,%rax
  435629:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
    fh.seekg(linestart);
  43562d:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  435631:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
  435638:	48 89 d6             	mov    %rdx,%rsi
  43563b:	48 89 c7             	mov    %rax,%rdi
  43563e:	e8 89 10 00 00       	callq  4366cc <std::fpos<__mbstate_t>::fpos(long)>
  435643:	48 8b 8d d0 fe ff ff 	mov    -0x130(%rbp),%rcx
  43564a:	48 8b 95 d8 fe ff ff 	mov    -0x128(%rbp),%rdx
  435651:	48 8b 85 60 fe ff ff 	mov    -0x1a0(%rbp),%rax
  435658:	48 89 ce             	mov    %rcx,%rsi
  43565b:	48 89 c7             	mov    %rax,%rdi
  43565e:	e8 ed d1 ff ff       	callq  432850 <std::istream::seekg(std::fpos<__mbstate_t>)@plt>
    while (true) {
      std::string s;
  435663:	48 8d 85 70 fe ff ff 	lea    -0x190(%rbp),%rax
  43566a:	48 89 c7             	mov    %rax,%rdi
  43566d:	e8 f6 08 00 00       	callq  435f68 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string()>
      std::getline(fh, s);
  435672:	48 8d 85 70 fe ff ff 	lea    -0x190(%rbp),%rax
  435679:	48 8b 95 60 fe ff ff 	mov    -0x1a0(%rbp),%rdx
  435680:	48 89 c6             	mov    %rax,%rsi
  435683:	48 89 d7             	mov    %rdx,%rdi
  435686:	e8 71 10 00 00       	callq  4366fc <std::basic_istream<char, std::char_traits<char> >& std::getline<char, std::char_traits<char>, std::allocator<char> >(std::basic_istream<char, std::char_traits<char> >&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&)>
      std::cout << s << "\n";
  43568b:	48 8d 85 70 fe ff ff 	lea    -0x190(%rbp),%rax
  435692:	48 89 c6             	mov    %rax,%rsi
  435695:	bf 40 13 65 00       	mov    $0x651340,%edi
  43569a:	e8 a9 10 00 00       	callq  436748 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <char, std::char_traits<char>, std::allocator<char> >(std::basic_ostream<char, std::char_traits<char> >&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
  43569f:	be 73 46 44 00       	mov    $0x444673,%esi
  4356a4:	48 89 c7             	mov    %rax,%rdi
  4356a7:	e8 34 d1 ff ff       	callq  4327e0 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*)@plt>
      if ((size_t) fh.tellg() >= lineend) break;
  4356ac:	48 8b 85 60 fe ff ff 	mov    -0x1a0(%rbp),%rax
  4356b3:	48 89 c7             	mov    %rax,%rdi
  4356b6:	e8 45 d2 ff ff       	callq  432900 <std::istream::tellg()@plt>
  4356bb:	48 89 85 e0 fe ff ff 	mov    %rax,-0x120(%rbp)
  4356c2:	48 89 95 e8 fe ff ff 	mov    %rdx,-0x118(%rbp)
  4356c9:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
  4356d0:	48 89 c7             	mov    %rax,%rdi
  4356d3:	e8 e6 0b 00 00       	callq  4362be <std::fpos<__mbstate_t>::operator long() const>
  4356d8:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
  4356dc:	0f 96 c0             	setbe  %al
  4356df:	84 c0                	test   %al,%al
  4356e1:	74 07                	je     4356ea <x666::LexError::print(std::istream&) const+0x346>
  4356e3:	bb 00 00 00 00       	mov    $0x0,%ebx
  4356e8:	eb 05                	jmp    4356ef <x666::LexError::print(std::istream&) const+0x34b>
  4356ea:	bb 01 00 00 00       	mov    $0x1,%ebx
  4356ef:	48 8d 85 70 fe ff ff 	lea    -0x190(%rbp),%rax
  4356f6:	48 89 c7             	mov    %rax,%rdi
  4356f9:	e8 76 06 00 00       	callq  435d74 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()>
  4356fe:	83 fb 01             	cmp    $0x1,%ebx
  435701:	75 05                	jne    435708 <x666::LexError::print(std::istream&) const+0x364>
    }
  435703:	e9 5b ff ff ff       	jmpq   435663 <x666::LexError::print(std::istream&) const+0x2bf>
    size_t lengthOfSnake = abs(lengthOfSnakeSigned);
  435708:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  43570c:	89 c7                	mov    %eax,%edi
  43570e:	e8 dd cf ff ff       	callq  4326f0 <abs@plt>
  435713:	48 98                	cltq   
  435715:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    if (lengthOfSnakeSigned <= 0) {
  435719:	48 83 7d c0 00       	cmpq   $0x0,-0x40(%rbp)
  43571e:	0f 8f 08 01 00 00    	jg     43582c <x666::LexError::print(std::istream&) const+0x488>
      if (lengthOfSnake > li.col) lengthOfSnake = li.col;
  435724:	48 8b 85 68 fe ff ff 	mov    -0x198(%rbp),%rax
  43572b:	48 8b 40 10          	mov    0x10(%rax),%rax
  43572f:	48 39 45 d8          	cmp    %rax,-0x28(%rbp)
  435733:	76 0f                	jbe    435744 <x666::LexError::print(std::istream&) const+0x3a0>
  435735:	48 8b 85 68 fe ff ff 	mov    -0x198(%rbp),%rax
  43573c:	48 8b 40 10          	mov    0x10(%rax),%rax
  435740:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
      std::cout << std::string(li.col - lengthOfSnake, ' ');
  435744:	48 8d 85 1f ff ff ff 	lea    -0xe1(%rbp),%rax
  43574b:	48 89 c7             	mov    %rax,%rdi
  43574e:	e8 cd d1 ff ff       	callq  432920 <std::allocator<char>::allocator()@plt>
  435753:	48 8b 85 68 fe ff ff 	mov    -0x198(%rbp),%rax
  43575a:	48 8b 40 10          	mov    0x10(%rax),%rax
  43575e:	48 2b 45 d8          	sub    -0x28(%rbp),%rax
  435762:	48 89 c6             	mov    %rax,%rsi
  435765:	48 8d 95 1f ff ff ff 	lea    -0xe1(%rbp),%rdx
  43576c:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
  435773:	48 89 d1             	mov    %rdx,%rcx
  435776:	ba 20 00 00 00       	mov    $0x20,%edx
  43577b:	48 89 c7             	mov    %rax,%rdi
  43577e:	e8 0d 10 00 00       	callq  436790 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(unsigned long, char, std::allocator<char> const&)>
  435783:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
  43578a:	48 89 c6             	mov    %rax,%rsi
  43578d:	bf 40 13 65 00       	mov    $0x651340,%edi
  435792:	e8 b1 0f 00 00       	callq  436748 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <char, std::char_traits<char>, std::allocator<char> >(std::basic_ostream<char, std::char_traits<char> >&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
  435797:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
  43579e:	48 89 c7             	mov    %rax,%rdi
  4357a1:	e8 ce 05 00 00       	callq  435d74 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()>
  4357a6:	48 8d 85 1f ff ff ff 	lea    -0xe1(%rbp),%rax
  4357ad:	48 89 c7             	mov    %rax,%rdi
  4357b0:	e8 5b d0 ff ff       	callq  432810 <std::allocator<char>::~allocator()@plt>
      std::cout << std::string(lengthOfSnake, '~');
  4357b5:	48 8d 85 4f ff ff ff 	lea    -0xb1(%rbp),%rax
  4357bc:	48 89 c7             	mov    %rax,%rdi
  4357bf:	e8 5c d1 ff ff       	callq  432920 <std::allocator<char>::allocator()@plt>
  4357c4:	48 8d 95 4f ff ff ff 	lea    -0xb1(%rbp),%rdx
  4357cb:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
  4357cf:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
  4357d6:	48 89 d1             	mov    %rdx,%rcx
  4357d9:	ba 7e 00 00 00       	mov    $0x7e,%edx
  4357de:	48 89 c7             	mov    %rax,%rdi
  4357e1:	e8 aa 0f 00 00       	callq  436790 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(unsigned long, char, std::allocator<char> const&)>
  4357e6:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
  4357ed:	48 89 c6             	mov    %rax,%rsi
  4357f0:	bf 40 13 65 00       	mov    $0x651340,%edi
  4357f5:	e8 4e 0f 00 00       	callq  436748 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <char, std::char_traits<char>, std::allocator<char> >(std::basic_ostream<char, std::char_traits<char> >&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
  4357fa:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
  435801:	48 89 c7             	mov    %rax,%rdi
  435804:	e8 6b 05 00 00       	callq  435d74 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()>
  435809:	48 8d 85 4f ff ff ff 	lea    -0xb1(%rbp),%rax
  435810:	48 89 c7             	mov    %rax,%rdi
  435813:	e8 f8 cf ff ff       	callq  432810 <std::allocator<char>::~allocator()@plt>
      std::cout << "^\n";
  435818:	be 75 46 44 00       	mov    $0x444675,%esi
  43581d:	bf 40 13 65 00       	mov    $0x651340,%edi
  435822:	e8 b9 cf ff ff       	callq  4327e0 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*)@plt>
  435827:	e9 0b 01 00 00       	jmpq   435937 <x666::LexError::print(std::istream&) const+0x593>
    } else {
      if (lengthOfSnake > li.col) lengthOfSnake = li.col;
  43582c:	48 8b 85 68 fe ff ff 	mov    -0x198(%rbp),%rax
  435833:	48 8b 40 10          	mov    0x10(%rax),%rax
  435837:	48 39 45 d8          	cmp    %rax,-0x28(%rbp)
  43583b:	76 0f                	jbe    43584c <x666::LexError::print(std::istream&) const+0x4a8>
  43583d:	48 8b 85 68 fe ff ff 	mov    -0x198(%rbp),%rax
  435844:	48 8b 40 10          	mov    0x10(%rax),%rax
  435848:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
      std::cout << std::string(li.col - lengthOfSnake, ' ');
  43584c:	48 8d 85 7f ff ff ff 	lea    -0x81(%rbp),%rax
  435853:	48 89 c7             	mov    %rax,%rdi
  435856:	e8 c5 d0 ff ff       	callq  432920 <std::allocator<char>::allocator()@plt>
  43585b:	48 8b 85 68 fe ff ff 	mov    -0x198(%rbp),%rax
  435862:	48 8b 40 10          	mov    0x10(%rax),%rax
  435866:	48 2b 45 d8          	sub    -0x28(%rbp),%rax
  43586a:	48 89 c6             	mov    %rax,%rsi
  43586d:	48 8d 95 7f ff ff ff 	lea    -0x81(%rbp),%rdx
  435874:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
  43587b:	48 89 d1             	mov    %rdx,%rcx
  43587e:	ba 20 00 00 00       	mov    $0x20,%edx
  435883:	48 89 c7             	mov    %rax,%rdi
  435886:	e8 05 0f 00 00       	callq  436790 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(unsigned long, char, std::allocator<char> const&)>
  43588b:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
  435892:	48 89 c6             	mov    %rax,%rsi
  435895:	bf 40 13 65 00       	mov    $0x651340,%edi
  43589a:	e8 a9 0e 00 00       	callq  436748 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <char, std::char_traits<char>, std::allocator<char> >(std::basic_ostream<char, std::char_traits<char> >&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
  43589f:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
  4358a6:	48 89 c7             	mov    %rax,%rdi
  4358a9:	e8 c6 04 00 00       	callq  435d74 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()>
  4358ae:	48 8d 85 7f ff ff ff 	lea    -0x81(%rbp),%rax
  4358b5:	48 89 c7             	mov    %rax,%rdi
  4358b8:	e8 53 cf ff ff       	callq  432810 <std::allocator<char>::~allocator()@plt>
      std::cout << "^";
  4358bd:	be 78 46 44 00       	mov    $0x444678,%esi
  4358c2:	bf 40 13 65 00       	mov    $0x651340,%edi
  4358c7:	e8 14 cf ff ff       	callq  4327e0 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*)@plt>
      if (lengthOfSnake > 0)
  4358cc:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  4358d1:	74 55                	je     435928 <x666::LexError::print(std::istream&) const+0x584>
        std::cout << std::string(lengthOfSnake - 1, '~');
  4358d3:	48 8d 45 af          	lea    -0x51(%rbp),%rax
  4358d7:	48 89 c7             	mov    %rax,%rdi
  4358da:	e8 41 d0 ff ff       	callq  432920 <std::allocator<char>::allocator()@plt>
  4358df:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4358e3:	48 8d 70 ff          	lea    -0x1(%rax),%rsi
  4358e7:	48 8d 55 af          	lea    -0x51(%rbp),%rdx
  4358eb:	48 8d 45 80          	lea    -0x80(%rbp),%rax
  4358ef:	48 89 d1             	mov    %rdx,%rcx
  4358f2:	ba 7e 00 00 00       	mov    $0x7e,%edx
  4358f7:	48 89 c7             	mov    %rax,%rdi
  4358fa:	e8 91 0e 00 00       	callq  436790 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(unsigned long, char, std::allocator<char> const&)>
  4358ff:	48 8d 45 80          	lea    -0x80(%rbp),%rax
  435903:	48 89 c6             	mov    %rax,%rsi
  435906:	bf 40 13 65 00       	mov    $0x651340,%edi
  43590b:	e8 38 0e 00 00       	callq  436748 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <char, std::char_traits<char>, std::allocator<char> >(std::basic_ostream<char, std::char_traits<char> >&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
  435910:	48 8d 45 80          	lea    -0x80(%rbp),%rax
  435914:	48 89 c7             	mov    %rax,%rdi
  435917:	e8 58 04 00 00       	callq  435d74 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()>
  43591c:	48 8d 45 af          	lea    -0x51(%rbp),%rax
  435920:	48 89 c7             	mov    %rax,%rdi
  435923:	e8 e8 ce ff ff       	callq  432810 <std::allocator<char>::~allocator()@plt>
      std::cout << "\n";
  435928:	be 73 46 44 00       	mov    $0x444673,%esi
  43592d:	bf 40 13 65 00       	mov    $0x651340,%edi
  435932:	e8 a9 ce ff ff       	callq  4327e0 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*)@plt>
    }
    fh.seekg(off);
  435937:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  43593b:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
  43593f:	48 89 d6             	mov    %rdx,%rsi
  435942:	48 89 c7             	mov    %rax,%rdi
  435945:	e8 82 0d 00 00       	callq  4366cc <std::fpos<__mbstate_t>::fpos(long)>
  43594a:	48 8b 4d b0          	mov    -0x50(%rbp),%rcx
  43594e:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  435952:	48 8b 85 60 fe ff ff 	mov    -0x1a0(%rbp),%rax
  435959:	48 89 ce             	mov    %rcx,%rsi
  43595c:	48 89 c7             	mov    %rax,%rdi
  43595f:	e8 ec ce ff ff       	callq  432850 <std::istream::seekg(std::fpos<__mbstate_t>)@plt>
  }
  435964:	e9 db 00 00 00       	jmpq   435a44 <x666::LexError::print(std::istream&) const+0x6a0>
  435969:	48 89 c3             	mov    %rax,%rbx
      std::string s;
  43596c:	48 8d 85 70 fe ff ff 	lea    -0x190(%rbp),%rax
  435973:	48 89 c7             	mov    %rax,%rdi
  435976:	e8 f9 03 00 00       	callq  435d74 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()>
  43597b:	48 89 d8             	mov    %rbx,%rax
  43597e:	48 89 c7             	mov    %rax,%rdi
  435981:	e8 8a cf ff ff       	callq  432910 <_Unwind_Resume@plt>
  435986:	48 89 c3             	mov    %rax,%rbx
      std::cout << std::string(li.col - lengthOfSnake, ' ');
  435989:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
  435990:	48 89 c7             	mov    %rax,%rdi
  435993:	e8 dc 03 00 00       	callq  435d74 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()>
  435998:	eb 03                	jmp    43599d <x666::LexError::print(std::istream&) const+0x5f9>
  43599a:	48 89 c3             	mov    %rax,%rbx
  43599d:	48 8d 85 1f ff ff ff 	lea    -0xe1(%rbp),%rax
  4359a4:	48 89 c7             	mov    %rax,%rdi
  4359a7:	e8 64 ce ff ff       	callq  432810 <std::allocator<char>::~allocator()@plt>
  4359ac:	48 89 d8             	mov    %rbx,%rax
  4359af:	48 89 c7             	mov    %rax,%rdi
  4359b2:	e8 59 cf ff ff       	callq  432910 <_Unwind_Resume@plt>
  4359b7:	48 89 c3             	mov    %rax,%rbx
      std::cout << std::string(lengthOfSnake, '~');
  4359ba:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
  4359c1:	48 89 c7             	mov    %rax,%rdi
  4359c4:	e8 ab 03 00 00       	callq  435d74 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()>
  4359c9:	eb 03                	jmp    4359ce <x666::LexError::print(std::istream&) const+0x62a>
  4359cb:	48 89 c3             	mov    %rax,%rbx
  4359ce:	48 8d 85 4f ff ff ff 	lea    -0xb1(%rbp),%rax
  4359d5:	48 89 c7             	mov    %rax,%rdi
  4359d8:	e8 33 ce ff ff       	callq  432810 <std::allocator<char>::~allocator()@plt>
  4359dd:	48 89 d8             	mov    %rbx,%rax
  4359e0:	48 89 c7             	mov    %rax,%rdi
  4359e3:	e8 28 cf ff ff       	callq  432910 <_Unwind_Resume@plt>
  4359e8:	48 89 c3             	mov    %rax,%rbx
      std::cout << std::string(li.col - lengthOfSnake, ' ');
  4359eb:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
  4359f2:	48 89 c7             	mov    %rax,%rdi
  4359f5:	e8 7a 03 00 00       	callq  435d74 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()>
  4359fa:	eb 03                	jmp    4359ff <x666::LexError::print(std::istream&) const+0x65b>
  4359fc:	48 89 c3             	mov    %rax,%rbx
  4359ff:	48 8d 85 7f ff ff ff 	lea    -0x81(%rbp),%rax
  435a06:	48 89 c7             	mov    %rax,%rdi
  435a09:	e8 02 ce ff ff       	callq  432810 <std::allocator<char>::~allocator()@plt>
  435a0e:	48 89 d8             	mov    %rbx,%rax
  435a11:	48 89 c7             	mov    %rax,%rdi
  435a14:	e8 f7 ce ff ff       	callq  432910 <_Unwind_Resume@plt>
  435a19:	48 89 c3             	mov    %rax,%rbx
        std::cout << std::string(lengthOfSnake - 1, '~');
  435a1c:	48 8d 45 80          	lea    -0x80(%rbp),%rax
  435a20:	48 89 c7             	mov    %rax,%rdi
  435a23:	e8 4c 03 00 00       	callq  435d74 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()>
  435a28:	eb 03                	jmp    435a2d <x666::LexError::print(std::istream&) const+0x689>
  435a2a:	48 89 c3             	mov    %rax,%rbx
  435a2d:	48 8d 45 af          	lea    -0x51(%rbp),%rax
  435a31:	48 89 c7             	mov    %rax,%rdi
  435a34:	e8 d7 cd ff ff       	callq  432810 <std::allocator<char>::~allocator()@plt>
  435a39:	48 89 d8             	mov    %rbx,%rax
  435a3c:	48 89 c7             	mov    %rax,%rdi
  435a3f:	e8 cc ce ff ff       	callq  432910 <_Unwind_Resume@plt>
  }
  435a44:	48 81 c4 98 01 00 00 	add    $0x198,%rsp
  435a4b:	5b                   	pop    %rbx
  435a4c:	5d                   	pop    %rbp
  435a4d:	c3                   	retq   

0000000000435a4e <__static_initialization_and_destruction_0(int, int)>:
  435a4e:	55                   	push   %rbp
  435a4f:	48 89 e5             	mov    %rsp,%rbp
  435a52:	48 83 ec 10          	sub    $0x10,%rsp
  435a56:	89 7d fc             	mov    %edi,-0x4(%rbp)
  435a59:	89 75 f8             	mov    %esi,-0x8(%rbp)
  435a5c:	83 7d fc 01          	cmpl   $0x1,-0x4(%rbp)
  435a60:	75 27                	jne    435a89 <__static_initialization_and_destruction_0(int, int)+0x3b>
  435a62:	81 7d f8 ff ff 00 00 	cmpl   $0xffff,-0x8(%rbp)
  435a69:	75 1e                	jne    435a89 <__static_initialization_and_destruction_0(int, int)+0x3b>
  435a6b:	bf 72 15 65 00       	mov    $0x651572,%edi
  435a70:	e8 1b ce ff ff       	callq  432890 <std::ios_base::Init::Init()@plt>
  435a75:	ba a8 11 65 00       	mov    $0x6511a8,%edx
  435a7a:	be 72 15 65 00       	mov    $0x651572,%esi
  435a7f:	bf 80 29 43 00       	mov    $0x432980,%edi
  435a84:	e8 17 cd ff ff       	callq  4327a0 <__cxa_atexit@plt>
  435a89:	90                   	nop
  435a8a:	c9                   	leaveq 
  435a8b:	c3                   	retq   

0000000000435a8c <_GLOBAL__sub_I__ZN4x66616lexErrorMessagesE>:
  435a8c:	55                   	push   %rbp
  435a8d:	48 89 e5             	mov    %rsp,%rbp
  435a90:	be ff ff 00 00       	mov    $0xffff,%esi
  435a95:	bf 01 00 00 00       	mov    $0x1,%edi
  435a9a:	e8 af ff ff ff       	callq  435a4e <__static_initialization_and_destruction_0(int, int)>
  435a9f:	5d                   	pop    %rbp
  435aa0:	c3                   	retq   

0000000000435aa1 <std::char_traits<char>::assign(char&, char const&)>:
      typedef streampos         pos_type;
      typedef streamoff         off_type;
      typedef mbstate_t         state_type;

      static _GLIBCXX17_CONSTEXPR void
      assign(char_type& __c1, const char_type& __c2) _GLIBCXX_NOEXCEPT
  435aa1:	55                   	push   %rbp
  435aa2:	48 89 e5             	mov    %rsp,%rbp
  435aa5:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  435aa9:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      { __c1 = __c2; }
  435aad:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  435ab1:	0f b6 10             	movzbl (%rax),%edx
  435ab4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  435ab8:	88 10                	mov    %dl,(%rax)
  435aba:	90                   	nop
  435abb:	5d                   	pop    %rbp
  435abc:	c3                   	retq   

0000000000435abd <std::char_traits<char>::length(char const*)>:
	  return 0;
	return __builtin_memcmp(__s1, __s2, __n);
      }

      static _GLIBCXX17_CONSTEXPR size_t
      length(const char_type* __s)
  435abd:	55                   	push   %rbp
  435abe:	48 89 e5             	mov    %rsp,%rbp
  435ac1:	48 83 ec 20          	sub    $0x20,%rsp
  435ac5:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  435ac9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  435acd:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
      return __builtin_constant_p(*__s);
  435ad1:	b8 00 00 00 00       	mov    $0x0,%eax
      {
#if __cplusplus > 201402
	if (__constant_string_p(__s))
  435ad6:	84 c0                	test   %al,%al
  435ad8:	74 0e                	je     435ae8 <std::char_traits<char>::length(char const*)+0x2b>
	  return __gnu_cxx::char_traits<char_type>::length(__s);
  435ada:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  435ade:	48 89 c7             	mov    %rax,%rdi
  435ae1:	e8 0a 02 00 00       	callq  435cf0 <__gnu_cxx::char_traits<char>::length(char const*)>
  435ae6:	eb 22                	jmp    435b0a <std::char_traits<char>::length(char const*)+0x4d>
#endif
	return __builtin_strlen(__s);
  435ae8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  435aec:	48 c7 c1 ff ff ff ff 	mov    $0xffffffffffffffff,%rcx
  435af3:	48 89 c2             	mov    %rax,%rdx
  435af6:	b8 00 00 00 00       	mov    $0x0,%eax
  435afb:	48 89 d7             	mov    %rdx,%rdi
  435afe:	f2 ae                	repnz scas %es:(%rdi),%al
  435b00:	48 89 c8             	mov    %rcx,%rax
  435b03:	48 f7 d0             	not    %rax
  435b06:	48 83 e8 01          	sub    $0x1,%rax
      }
  435b0a:	c9                   	leaveq 
  435b0b:	c3                   	retq   

0000000000435b0c <std::char_traits<char>::copy(char*, char const*, unsigned long)>:
	  return __s1;
	return static_cast<char_type*>(__builtin_memmove(__s1, __s2, __n));
      }

      static char_type*
      copy(char_type* __s1, const char_type* __s2, size_t __n)
  435b0c:	55                   	push   %rbp
  435b0d:	48 89 e5             	mov    %rsp,%rbp
  435b10:	48 83 ec 20          	sub    $0x20,%rsp
  435b14:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  435b18:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  435b1c:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      {
	if (__n == 0)
  435b20:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  435b25:	75 06                	jne    435b2d <std::char_traits<char>::copy(char*, char const*, unsigned long)+0x21>
	  return __s1;
  435b27:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  435b2b:	eb 1d                	jmp    435b4a <std::char_traits<char>::copy(char*, char const*, unsigned long)+0x3e>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
  435b2d:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  435b31:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  435b35:	48 89 d1             	mov    %rdx,%rcx
  435b38:	48 89 c6             	mov    %rax,%rsi
  435b3b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  435b3f:	48 89 c2             	mov    %rax,%rdx
  435b42:	48 89 cf             	mov    %rcx,%rdi
  435b45:	e8 46 cc ff ff       	callq  432790 <memcpy@plt>
      }
  435b4a:	c9                   	leaveq 
  435b4b:	c3                   	retq   

0000000000435b4c <std::char_traits<char>::assign(char*, unsigned long, char)>:

      static char_type*
      assign(char_type* __s, size_t __n, char_type __a)
  435b4c:	55                   	push   %rbp
  435b4d:	48 89 e5             	mov    %rsp,%rbp
  435b50:	48 83 ec 20          	sub    $0x20,%rsp
  435b54:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  435b58:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  435b5c:	89 d0                	mov    %edx,%eax
  435b5e:	88 45 ec             	mov    %al,-0x14(%rbp)
      {
	if (__n == 0)
  435b61:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
  435b66:	75 06                	jne    435b6e <std::char_traits<char>::assign(char*, unsigned long, char)+0x22>
	  return __s;
  435b68:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  435b6c:	eb 16                	jmp    435b84 <std::char_traits<char>::assign(char*, unsigned long, char)+0x38>
	return static_cast<char_type*>(__builtin_memset(__s, __a, __n));
  435b6e:	0f be 45 ec          	movsbl -0x14(%rbp),%eax
  435b72:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  435b76:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
  435b7a:	89 c6                	mov    %eax,%esi
  435b7c:	48 89 cf             	mov    %rcx,%rdi
  435b7f:	e8 9c cb ff ff       	callq  432720 <memset@plt>
      }
  435b84:	c9                   	leaveq 
  435b85:	c3                   	retq   

0000000000435b86 <std::char_traits<char>::eof()>:
      eq_int_type(const int_type& __c1, const int_type& __c2) _GLIBCXX_NOEXCEPT
      { return __c1 == __c2; }

      static _GLIBCXX_CONSTEXPR int_type
      eof() _GLIBCXX_NOEXCEPT
      { return static_cast<int_type>(_GLIBCXX_STDIO_EOF); }
  435b86:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  435b8b:	c3                   	retq   

0000000000435b8c <operator new(unsigned long, void*)>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
  435b8c:	55                   	push   %rbp
  435b8d:	48 89 e5             	mov    %rsp,%rbp
  435b90:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  435b94:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  435b98:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  435b9c:	5d                   	pop    %rbp
  435b9d:	c3                   	retq   

0000000000435b9e <std::numeric_limits<long>::max()>:

      static _GLIBCXX_CONSTEXPR long
      min() _GLIBCXX_USE_NOEXCEPT { return -__LONG_MAX__ - 1; }

      static _GLIBCXX_CONSTEXPR long
      max() _GLIBCXX_USE_NOEXCEPT { return __LONG_MAX__; }
  435b9e:	48 b8 ff ff ff ff ff 	movabs $0x7fffffffffffffff,%rax
  435ba5:	ff ff 7f 
  435ba8:	c3                   	retq   
  435ba9:	90                   	nop

0000000000435baa <x666::Identifier::Identifier(char)>:
    size_t line, col;
    size_t byte, sot;
  };
  /** An identifier token. */
  struct Identifier {
    Identifier(char c) : name{c} {}
  435baa:	55                   	push   %rbp
  435bab:	48 89 e5             	mov    %rsp,%rbp
  435bae:	41 55                	push   %r13
  435bb0:	41 54                	push   %r12
  435bb2:	53                   	push   %rbx
  435bb3:	48 83 ec 28          	sub    $0x28,%rsp
  435bb7:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  435bbb:	89 f0                	mov    %esi,%eax
  435bbd:	88 45 c4             	mov    %al,-0x3c(%rbp)
  435bc0:	48 8b 5d c8          	mov    -0x38(%rbp),%rbx
  435bc4:	0f b6 45 c4          	movzbl -0x3c(%rbp),%eax
  435bc8:	88 45 de             	mov    %al,-0x22(%rbp)
  435bcb:	48 8d 45 de          	lea    -0x22(%rbp),%rax
  435bcf:	49 89 c4             	mov    %rax,%r12
  435bd2:	41 bd 01 00 00 00    	mov    $0x1,%r13d
  435bd8:	48 8d 45 df          	lea    -0x21(%rbp),%rax
  435bdc:	48 89 c7             	mov    %rax,%rdi
  435bdf:	e8 3c cd ff ff       	callq  432920 <std::allocator<char>::allocator()@plt>
  435be4:	48 8d 45 df          	lea    -0x21(%rbp),%rax
  435be8:	4c 89 e6             	mov    %r12,%rsi
  435beb:	4c 89 ef             	mov    %r13,%rdi
  435bee:	4c 89 e2             	mov    %r12,%rdx
  435bf1:	4c 89 e9             	mov    %r13,%rcx
  435bf4:	48 89 ca             	mov    %rcx,%rdx
  435bf7:	48 89 c1             	mov    %rax,%rcx
  435bfa:	48 89 df             	mov    %rbx,%rdi
  435bfd:	e8 0a 02 00 00       	callq  435e0c <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::initializer_list<char>, std::allocator<char> const&)>
  435c02:	48 8d 45 df          	lea    -0x21(%rbp),%rax
  435c06:	48 89 c7             	mov    %rax,%rdi
  435c09:	e8 02 cc ff ff       	callq  432810 <std::allocator<char>::~allocator()@plt>
  435c0e:	eb 1a                	jmp    435c2a <x666::Identifier::Identifier(char)+0x80>
  435c10:	48 89 c3             	mov    %rax,%rbx
  435c13:	48 8d 45 df          	lea    -0x21(%rbp),%rax
  435c17:	48 89 c7             	mov    %rax,%rdi
  435c1a:	e8 f1 cb ff ff       	callq  432810 <std::allocator<char>::~allocator()@plt>
  435c1f:	48 89 d8             	mov    %rbx,%rax
  435c22:	48 89 c7             	mov    %rax,%rdi
  435c25:	e8 e6 cc ff ff       	callq  432910 <_Unwind_Resume@plt>
  435c2a:	48 83 c4 28          	add    $0x28,%rsp
  435c2e:	5b                   	pop    %rbx
  435c2f:	41 5c                	pop    %r12
  435c31:	41 5d                	pop    %r13
  435c33:	5d                   	pop    %rbp
  435c34:	c3                   	retq   
  435c35:	90                   	nop

0000000000435c36 <x666::StringLiteral::StringLiteral(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)>:
    std::string name;
  };
  /** A string literal. */
  struct StringLiteral {
    StringLiteral(std::string&& s) : str(s) {}
  435c36:	55                   	push   %rbp
  435c37:	48 89 e5             	mov    %rsp,%rbp
  435c3a:	48 83 ec 10          	sub    $0x10,%rsp
  435c3e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  435c42:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  435c46:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  435c4a:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  435c4e:	48 89 d6             	mov    %rdx,%rsi
  435c51:	48 89 c7             	mov    %rax,%rdi
  435c54:	e8 4d 02 00 00       	callq  435ea6 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
  435c59:	90                   	nop
  435c5a:	c9                   	leaveq 
  435c5b:	c3                   	retq   

0000000000435c5c <x666::IntLiteral::IntLiteral(long)>:
    std::string str;
  };
  std::string unescape(const std::string& s);
  /** An integer literal (64-bit). */
  struct IntLiteral {
    IntLiteral(int64_t n) : n(n) {}
  435c5c:	55                   	push   %rbp
  435c5d:	48 89 e5             	mov    %rsp,%rbp
  435c60:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  435c64:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  435c68:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  435c6c:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  435c70:	48 89 10             	mov    %rdx,(%rax)
  435c73:	90                   	nop
  435c74:	5d                   	pop    %rbp
  435c75:	c3                   	retq   

0000000000435c76 <x666::LexError::LexError(x666::LexErrorCode, x666::LineInfo const&)>:
  /** The array of lex error messages. */
  extern const char* lexErrorMessages[];
  extern const char* opsAsStrings[];
  /** A token to denote that a lexing error has occurred. */
  struct LexError {
    LexError(LexErrorCode c, const LineInfo& li) :
  435c76:	55                   	push   %rbp
  435c77:	48 89 e5             	mov    %rsp,%rbp
  435c7a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  435c7e:	89 75 f4             	mov    %esi,-0xc(%rbp)
  435c81:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      c(c), li(li) {}
  435c85:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  435c89:	8b 55 f4             	mov    -0xc(%rbp),%edx
  435c8c:	89 10                	mov    %edx,(%rax)
  435c8e:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
  435c92:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
  435c96:	48 8b 06             	mov    (%rsi),%rax
  435c99:	48 8b 56 08          	mov    0x8(%rsi),%rdx
  435c9d:	48 89 41 08          	mov    %rax,0x8(%rcx)
  435ca1:	48 89 51 10          	mov    %rdx,0x10(%rcx)
  435ca5:	48 8b 46 10          	mov    0x10(%rsi),%rax
  435ca9:	48 8b 56 18          	mov    0x18(%rsi),%rdx
  435cad:	48 89 41 18          	mov    %rax,0x18(%rcx)
  435cb1:	48 89 51 20          	mov    %rdx,0x20(%rcx)
  435cb5:	90                   	nop
  435cb6:	5d                   	pop    %rbp
  435cb7:	c3                   	retq   

0000000000435cb8 <x666::Identifier::~Identifier()>:
  struct Identifier {
  435cb8:	55                   	push   %rbp
  435cb9:	48 89 e5             	mov    %rsp,%rbp
  435cbc:	48 83 ec 10          	sub    $0x10,%rsp
  435cc0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  435cc4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  435cc8:	48 89 c7             	mov    %rax,%rdi
  435ccb:	e8 a4 00 00 00       	callq  435d74 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()>
  435cd0:	90                   	nop
  435cd1:	c9                   	leaveq 
  435cd2:	c3                   	retq   
  435cd3:	90                   	nop

0000000000435cd4 <x666::StringLiteral::~StringLiteral()>:
  struct StringLiteral {
  435cd4:	55                   	push   %rbp
  435cd5:	48 89 e5             	mov    %rsp,%rbp
  435cd8:	48 83 ec 10          	sub    $0x10,%rsp
  435cdc:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  435ce0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  435ce4:	48 89 c7             	mov    %rax,%rdi
  435ce7:	e8 88 00 00 00       	callq  435d74 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()>
  435cec:	90                   	nop
  435ced:	c9                   	leaveq 
  435cee:	c3                   	retq   
  435cef:	90                   	nop

0000000000435cf0 <__gnu_cxx::char_traits<char>::length(char const*)>:
    char_traits<_CharT>::
  435cf0:	55                   	push   %rbp
  435cf1:	48 89 e5             	mov    %rsp,%rbp
  435cf4:	48 83 ec 20          	sub    $0x20,%rsp
  435cf8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
      std::size_t __i = 0;
  435cfc:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  435d03:	00 
      while (!eq(__p[__i], char_type()))
  435d04:	c6 45 f7 00          	movb   $0x0,-0x9(%rbp)
  435d08:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  435d0c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  435d10:	48 01 c2             	add    %rax,%rdx
  435d13:	48 8d 45 f7          	lea    -0x9(%rbp),%rax
  435d17:	48 89 c6             	mov    %rax,%rsi
  435d1a:	48 89 d7             	mov    %rdx,%rdi
  435d1d:	e8 14 00 00 00       	callq  435d36 <__gnu_cxx::char_traits<char>::eq(char const&, char const&)>
  435d22:	83 f0 01             	xor    $0x1,%eax
  435d25:	84 c0                	test   %al,%al
  435d27:	74 07                	je     435d30 <__gnu_cxx::char_traits<char>::length(char const*)+0x40>
        ++__i;
  435d29:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
      while (!eq(__p[__i], char_type()))
  435d2e:	eb d4                	jmp    435d04 <__gnu_cxx::char_traits<char>::length(char const*)+0x14>
      return __i;
  435d30:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    }
  435d34:	c9                   	leaveq 
  435d35:	c3                   	retq   

0000000000435d36 <__gnu_cxx::char_traits<char>::eq(char const&, char const&)>:
      eq(const char_type& __c1, const char_type& __c2)
  435d36:	55                   	push   %rbp
  435d37:	48 89 e5             	mov    %rsp,%rbp
  435d3a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  435d3e:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      { return __c1 == __c2; }
  435d42:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  435d46:	0f b6 10             	movzbl (%rax),%edx
  435d49:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  435d4d:	0f b6 00             	movzbl (%rax),%eax
  435d50:	38 c2                	cmp    %al,%dl
  435d52:	0f 94 c0             	sete   %al
  435d55:	5d                   	pop    %rbp
  435d56:	c3                   	retq   
  435d57:	90                   	nop

0000000000435d58 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_Alloc_hider::~_Alloc_hider()>:
	__sv_type _M_sv;
      };
#endif

      // Use empty-base optimization: http://www.cantrip.org/emptyopt.html
      struct _Alloc_hider : allocator_type // TODO check __is_final
  435d58:	55                   	push   %rbp
  435d59:	48 89 e5             	mov    %rsp,%rbp
  435d5c:	48 83 ec 10          	sub    $0x10,%rsp
  435d60:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  435d64:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  435d68:	48 89 c7             	mov    %rax,%rdi
  435d6b:	e8 20 c9 ff ff       	callq  432690 <std::allocator<char>::~allocator()@plt>
  435d70:	90                   	nop
  435d71:	c9                   	leaveq 
  435d72:	c3                   	retq   
  435d73:	90                   	nop

0000000000435d74 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()>:
#endif // C++17

      /**
       *  @brief  Destroy the string instance.
       */
      ~basic_string()
  435d74:	55                   	push   %rbp
  435d75:	48 89 e5             	mov    %rsp,%rbp
  435d78:	48 83 ec 10          	sub    $0x10,%rsp
  435d7c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { _M_dispose(); }
  435d80:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  435d84:	48 89 c7             	mov    %rax,%rdi
  435d87:	e8 8e 0a 00 00       	callq  43681a <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_dispose()>
  435d8c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  435d90:	48 89 c7             	mov    %rax,%rdi
  435d93:	e8 c0 ff ff ff       	callq  435d58 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_Alloc_hider::~_Alloc_hider()>
  435d98:	90                   	nop
  435d99:	c9                   	leaveq 
  435d9a:	c3                   	retq   
  435d9b:	90                   	nop

0000000000435d9c <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::data() const>:
       *  the contents through the returned pointer. To get a pointer that
       *  allows modifying the contents use @c &str[0] instead,
       *  (or in C++17 the non-const @c str.data() overload).
      */
      const _CharT*
      data() const _GLIBCXX_NOEXCEPT
  435d9c:	55                   	push   %rbp
  435d9d:	48 89 e5             	mov    %rsp,%rbp
  435da0:	48 83 ec 10          	sub    $0x10,%rsp
  435da4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_data(); }
  435da8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  435dac:	48 89 c7             	mov    %rax,%rdi
  435daf:	e8 54 0a 00 00       	callq  436808 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_data() const>
  435db4:	c9                   	leaveq 
  435db5:	c3                   	retq   

0000000000435db6 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::length() const>:
      length() const _GLIBCXX_NOEXCEPT
  435db6:	55                   	push   %rbp
  435db7:	48 89 e5             	mov    %rsp,%rbp
  435dba:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_string_length; }
  435dbe:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  435dc2:	48 8b 40 08          	mov    0x8(%rax),%rax
  435dc6:	5d                   	pop    %rbp
  435dc7:	c3                   	retq   

0000000000435dc8 <std::initializer_list<char>::begin() const>:
      constexpr size_type
      size() const noexcept { return _M_len; }

      // First element.
      constexpr const_iterator
      begin() const noexcept { return _M_array; }
  435dc8:	55                   	push   %rbp
  435dc9:	48 89 e5             	mov    %rsp,%rbp
  435dcc:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  435dd0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  435dd4:	48 8b 00             	mov    (%rax),%rax
  435dd7:	5d                   	pop    %rbp
  435dd8:	c3                   	retq   
  435dd9:	90                   	nop

0000000000435dda <std::initializer_list<char>::end() const>:

      // One past the last element.
      constexpr const_iterator
      end() const noexcept { return begin() + size(); }
  435dda:	55                   	push   %rbp
  435ddb:	48 89 e5             	mov    %rsp,%rbp
  435dde:	53                   	push   %rbx
  435ddf:	48 83 ec 18          	sub    $0x18,%rsp
  435de3:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  435de7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  435deb:	48 89 c7             	mov    %rax,%rdi
  435dee:	e8 d5 ff ff ff       	callq  435dc8 <std::initializer_list<char>::begin() const>
  435df3:	48 89 c3             	mov    %rax,%rbx
  435df6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  435dfa:	48 89 c7             	mov    %rax,%rdi
  435dfd:	e8 de 0a 00 00       	callq  4368e0 <std::initializer_list<char>::size() const>
  435e02:	48 01 d8             	add    %rbx,%rax
  435e05:	48 83 c4 18          	add    $0x18,%rsp
  435e09:	5b                   	pop    %rbx
  435e0a:	5d                   	pop    %rbp
  435e0b:	c3                   	retq   

0000000000435e0c <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::initializer_list<char>, std::allocator<char> const&)>:
      basic_string(initializer_list<_CharT> __l, const _Alloc& __a = _Alloc())
  435e0c:	55                   	push   %rbp
  435e0d:	48 89 e5             	mov    %rsp,%rbp
  435e10:	53                   	push   %rbx
  435e11:	48 83 ec 28          	sub    $0x28,%rsp
  435e15:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  435e19:	48 89 f0             	mov    %rsi,%rax
  435e1c:	48 89 d6             	mov    %rdx,%rsi
  435e1f:	48 89 f2             	mov    %rsi,%rdx
  435e22:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  435e26:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  435e2a:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
      : _M_dataplus(_M_local_data(), __a)
  435e2e:	48 8b 5d e8          	mov    -0x18(%rbp),%rbx
  435e32:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  435e36:	48 89 c7             	mov    %rax,%rdi
  435e39:	e8 16 0a 00 00       	callq  436854 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_local_data()>
  435e3e:	48 89 c1             	mov    %rax,%rcx
  435e41:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  435e45:	48 89 c2             	mov    %rax,%rdx
  435e48:	48 89 ce             	mov    %rcx,%rsi
  435e4b:	48 89 df             	mov    %rbx,%rdi
  435e4e:	e8 1f 0a 00 00       	callq  436872 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_Alloc_hider::_Alloc_hider(char*, std::allocator<char> const&)>
      { _M_construct(__l.begin(), __l.end()); }
  435e53:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  435e57:	48 89 c7             	mov    %rax,%rdi
  435e5a:	e8 7b ff ff ff       	callq  435dda <std::initializer_list<char>::end() const>
  435e5f:	48 89 c3             	mov    %rax,%rbx
  435e62:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  435e66:	48 89 c7             	mov    %rax,%rdi
  435e69:	e8 5a ff ff ff       	callq  435dc8 <std::initializer_list<char>::begin() const>
  435e6e:	48 89 c1             	mov    %rax,%rcx
  435e71:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  435e75:	48 89 da             	mov    %rbx,%rdx
  435e78:	48 89 ce             	mov    %rcx,%rsi
  435e7b:	48 89 c7             	mov    %rax,%rdi
  435e7e:	e8 25 0a 00 00       	callq  4368a8 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*)>
  435e83:	eb 1a                	jmp    435e9f <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::initializer_list<char>, std::allocator<char> const&)+0x93>
  435e85:	48 89 c3             	mov    %rax,%rbx
      : _M_dataplus(_M_local_data(), __a)
  435e88:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  435e8c:	48 89 c7             	mov    %rax,%rdi
  435e8f:	e8 c4 fe ff ff       	callq  435d58 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_Alloc_hider::~_Alloc_hider()>
  435e94:	48 89 d8             	mov    %rbx,%rax
  435e97:	48 89 c7             	mov    %rax,%rdi
  435e9a:	e8 71 ca ff ff       	callq  432910 <_Unwind_Resume@plt>
      { _M_construct(__l.begin(), __l.end()); }
  435e9f:	48 83 c4 28          	add    $0x28,%rsp
  435ea3:	5b                   	pop    %rbx
  435ea4:	5d                   	pop    %rbp
  435ea5:	c3                   	retq   

0000000000435ea6 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>:
      basic_string(const basic_string& __str)
  435ea6:	55                   	push   %rbp
  435ea7:	48 89 e5             	mov    %rsp,%rbp
  435eaa:	53                   	push   %rbx
  435eab:	48 83 ec 28          	sub    $0x28,%rsp
  435eaf:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  435eb3:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
		    _Alloc_traits::_S_select_on_copy(__str._M_get_allocator()))
  435eb7:	48 8b 5d d8          	mov    -0x28(%rbp),%rbx
  435ebb:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  435ebf:	48 89 c7             	mov    %rax,%rdi
  435ec2:	e8 55 0a 00 00       	callq  43691c <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_get_allocator() const>
  435ec7:	48 89 c2             	mov    %rax,%rdx
  435eca:	48 8d 45 ef          	lea    -0x11(%rbp),%rax
  435ece:	48 89 d6             	mov    %rdx,%rsi
  435ed1:	48 89 c7             	mov    %rax,%rdi
  435ed4:	e8 19 0a 00 00       	callq  4368f2 <__gnu_cxx::__alloc_traits<std::allocator<char>, char>::_S_select_on_copy(std::allocator<char> const&)>
  435ed9:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  435edd:	48 89 c7             	mov    %rax,%rdi
  435ee0:	e8 6f 09 00 00       	callq  436854 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_local_data()>
  435ee5:	48 89 c1             	mov    %rax,%rcx
  435ee8:	48 8d 45 ef          	lea    -0x11(%rbp),%rax
  435eec:	48 89 c2             	mov    %rax,%rdx
  435eef:	48 89 ce             	mov    %rcx,%rsi
  435ef2:	48 89 df             	mov    %rbx,%rdi
  435ef5:	e8 3e 0a 00 00       	callq  436938 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_Alloc_hider::_Alloc_hider(char*, std::allocator<char>&&)>
  435efa:	48 8d 45 ef          	lea    -0x11(%rbp),%rax
  435efe:	48 89 c7             	mov    %rax,%rdi
  435f01:	e8 0a c9 ff ff       	callq  432810 <std::allocator<char>::~allocator()@plt>
      { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
  435f06:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  435f0a:	48 89 c7             	mov    %rax,%rdi
  435f0d:	e8 f6 08 00 00       	callq  436808 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_data() const>
  435f12:	48 89 c3             	mov    %rax,%rbx
  435f15:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  435f19:	48 89 c7             	mov    %rax,%rdi
  435f1c:	e8 95 fe ff ff       	callq  435db6 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::length() const>
  435f21:	48 01 c3             	add    %rax,%rbx
  435f24:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  435f28:	48 89 c7             	mov    %rax,%rdi
  435f2b:	e8 d8 08 00 00       	callq  436808 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_data() const>
  435f30:	48 89 c1             	mov    %rax,%rcx
  435f33:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  435f37:	48 89 da             	mov    %rbx,%rdx
  435f3a:	48 89 ce             	mov    %rcx,%rsi
  435f3d:	48 89 c7             	mov    %rax,%rdi
  435f40:	e8 33 0a 00 00       	callq  436978 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*)>
  435f45:	eb 1a                	jmp    435f61 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xbb>
  435f47:	48 89 c3             	mov    %rax,%rbx
		    _Alloc_traits::_S_select_on_copy(__str._M_get_allocator()))
  435f4a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  435f4e:	48 89 c7             	mov    %rax,%rdi
  435f51:	e8 02 fe ff ff       	callq  435d58 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_Alloc_hider::~_Alloc_hider()>
  435f56:	48 89 d8             	mov    %rbx,%rax
  435f59:	48 89 c7             	mov    %rax,%rdi
  435f5c:	e8 af c9 ff ff       	callq  432910 <_Unwind_Resume@plt>
      { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
  435f61:	48 83 c4 28          	add    $0x28,%rsp
  435f65:	5b                   	pop    %rbx
  435f66:	5d                   	pop    %rbp
  435f67:	c3                   	retq   

0000000000435f68 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string()>:
      basic_string()
  435f68:	55                   	push   %rbp
  435f69:	48 89 e5             	mov    %rsp,%rbp
  435f6c:	53                   	push   %rbx
  435f6d:	48 83 ec 28          	sub    $0x28,%rsp
  435f71:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
      : _M_dataplus(_M_local_data())
  435f75:	48 8b 5d d8          	mov    -0x28(%rbp),%rbx
  435f79:	48 8d 45 ef          	lea    -0x11(%rbp),%rax
  435f7d:	48 89 c7             	mov    %rax,%rdi
  435f80:	e8 9b c9 ff ff       	callq  432920 <std::allocator<char>::allocator()@plt>
  435f85:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  435f89:	48 89 c7             	mov    %rax,%rdi
  435f8c:	e8 c3 08 00 00       	callq  436854 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_local_data()>
  435f91:	48 89 c1             	mov    %rax,%rcx
  435f94:	48 8d 45 ef          	lea    -0x11(%rbp),%rax
  435f98:	48 89 c2             	mov    %rax,%rdx
  435f9b:	48 89 ce             	mov    %rcx,%rsi
  435f9e:	48 89 df             	mov    %rbx,%rdi
  435fa1:	e8 92 09 00 00       	callq  436938 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_Alloc_hider::_Alloc_hider(char*, std::allocator<char>&&)>
  435fa6:	48 8d 45 ef          	lea    -0x11(%rbp),%rax
  435faa:	48 89 c7             	mov    %rax,%rdi
  435fad:	e8 5e c8 ff ff       	callq  432810 <std::allocator<char>::~allocator()@plt>
      { _M_set_length(0); }
  435fb2:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  435fb6:	be 00 00 00 00       	mov    $0x0,%esi
  435fbb:	48 89 c7             	mov    %rax,%rdi
  435fbe:	e8 81 0a 00 00       	callq  436a44 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_set_length(unsigned long)>
  435fc3:	90                   	nop
  435fc4:	48 83 c4 28          	add    $0x28,%rsp
  435fc8:	5b                   	pop    %rbx
  435fc9:	5d                   	pop    %rbp
  435fca:	c3                   	retq   
  435fcb:	90                   	nop

0000000000435fcc <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator+=(char)>:
      operator+=(_CharT __c)
  435fcc:	55                   	push   %rbp
  435fcd:	48 89 e5             	mov    %rsp,%rbp
  435fd0:	48 83 ec 10          	sub    $0x10,%rsp
  435fd4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  435fd8:	89 f0                	mov    %esi,%eax
  435fda:	88 45 f4             	mov    %al,-0xc(%rbp)
	this->push_back(__c);
  435fdd:	0f be 45 f4          	movsbl -0xc(%rbp),%eax
  435fe1:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  435fe5:	89 c6                	mov    %eax,%esi
  435fe7:	48 89 d7             	mov    %rdx,%rdi
  435fea:	e8 a5 0a 00 00       	callq  436a94 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::push_back(char)>
	return *this;
  435fef:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
      }
  435ff3:	c9                   	leaveq 
  435ff4:	c3                   	retq   
  435ff5:	90                   	nop

0000000000435ff6 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)>:
      basic_string(basic_string&& __str) noexcept
  435ff6:	55                   	push   %rbp
  435ff7:	48 89 e5             	mov    %rsp,%rbp
  435ffa:	41 54                	push   %r12
  435ffc:	53                   	push   %rbx
  435ffd:	48 83 ec 10          	sub    $0x10,%rsp
  436001:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  436005:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
      : _M_dataplus(_M_local_data(), std::move(__str._M_get_allocator()))
  436009:	48 8b 5d e8          	mov    -0x18(%rbp),%rbx
  43600d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  436011:	48 89 c7             	mov    %rax,%rdi
  436014:	e8 1f 0b 00 00       	callq  436b38 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_get_allocator()>
  436019:	48 89 c7             	mov    %rax,%rdi
  43601c:	e8 09 09 00 00       	callq  43692a <std::remove_reference<std::allocator<char>&>::type&& std::move<std::allocator<char>&>(std::allocator<char>&)>
  436021:	49 89 c4             	mov    %rax,%r12
  436024:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  436028:	48 89 c7             	mov    %rax,%rdi
  43602b:	e8 24 08 00 00       	callq  436854 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_local_data()>
  436030:	4c 89 e2             	mov    %r12,%rdx
  436033:	48 89 c6             	mov    %rax,%rsi
  436036:	48 89 df             	mov    %rbx,%rdi
  436039:	e8 fa 08 00 00       	callq  436938 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_Alloc_hider::_Alloc_hider(char*, std::allocator<char>&&)>
	if (__str._M_is_local())
  43603e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  436042:	48 89 c7             	mov    %rax,%rdi
  436045:	e8 fc 0a 00 00       	callq  436b46 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_is_local() const>
  43604a:	84 c0                	test   %al,%al
  43604c:	74 22                	je     436070 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x7a>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
  43604e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  436052:	48 8d 48 10          	lea    0x10(%rax),%rcx
  436056:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  43605a:	48 83 c0 10          	add    $0x10,%rax
  43605e:	ba 10 00 00 00       	mov    $0x10,%edx
  436063:	48 89 ce             	mov    %rcx,%rsi
  436066:	48 89 c7             	mov    %rax,%rdi
  436069:	e8 9e fa ff ff       	callq  435b0c <std::char_traits<char>::copy(char*, char const*, unsigned long)>
  43606e:	eb 35                	jmp    4360a5 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0xaf>
	    _M_data(__str._M_data());
  436070:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  436074:	48 89 c7             	mov    %rax,%rdi
  436077:	e8 8c 07 00 00       	callq  436808 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_data() const>
  43607c:	48 89 c2             	mov    %rax,%rdx
  43607f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  436083:	48 89 d6             	mov    %rdx,%rsi
  436086:	48 89 c7             	mov    %rax,%rdi
  436089:	e8 ee 0a 00 00       	callq  436b7c <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_data(char*)>
	    _M_capacity(__str._M_allocated_capacity);
  43608e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  436092:	48 8b 50 10          	mov    0x10(%rax),%rdx
  436096:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  43609a:	48 89 d6             	mov    %rdx,%rsi
  43609d:	48 89 c7             	mov    %rax,%rdi
  4360a0:	e8 f1 0a 00 00       	callq  436b96 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_capacity(unsigned long)>
	_M_length(__str.length());
  4360a5:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4360a9:	48 89 c7             	mov    %rax,%rdi
  4360ac:	e8 05 fd ff ff       	callq  435db6 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::length() const>
  4360b1:	48 89 c2             	mov    %rax,%rdx
  4360b4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4360b8:	48 89 d6             	mov    %rdx,%rsi
  4360bb:	48 89 c7             	mov    %rax,%rdi
  4360be:	e8 ef 0a 00 00       	callq  436bb2 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_length(unsigned long)>
	__str._M_data(__str._M_local_data());
  4360c3:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4360c7:	48 89 c7             	mov    %rax,%rdi
  4360ca:	e8 85 07 00 00       	callq  436854 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_local_data()>
  4360cf:	48 89 c2             	mov    %rax,%rdx
  4360d2:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4360d6:	48 89 d6             	mov    %rdx,%rsi
  4360d9:	48 89 c7             	mov    %rax,%rdi
  4360dc:	e8 9b 0a 00 00       	callq  436b7c <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_data(char*)>
	__str._M_set_length(0);
  4360e1:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4360e5:	be 00 00 00 00       	mov    $0x0,%esi
  4360ea:	48 89 c7             	mov    %rax,%rdi
  4360ed:	e8 52 09 00 00       	callq  436a44 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_set_length(unsigned long)>
      }
  4360f2:	90                   	nop
  4360f3:	48 83 c4 10          	add    $0x10,%rsp
  4360f7:	5b                   	pop    %rbx
  4360f8:	41 5c                	pop    %r12
  4360fa:	5d                   	pop    %rbp
  4360fb:	c3                   	retq   

00000000004360fc <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::begin() const>:
      begin() const _GLIBCXX_NOEXCEPT
  4360fc:	55                   	push   %rbp
  4360fd:	48 89 e5             	mov    %rsp,%rbp
  436100:	48 83 ec 20          	sub    $0x20,%rsp
  436104:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
      { return const_iterator(_M_data()); }
  436108:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  43610c:	48 89 c7             	mov    %rax,%rdi
  43610f:	e8 f4 06 00 00       	callq  436808 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_data() const>
  436114:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  436118:	48 8d 55 f8          	lea    -0x8(%rbp),%rdx
  43611c:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
  436120:	48 89 d6             	mov    %rdx,%rsi
  436123:	48 89 c7             	mov    %rax,%rdi
  436126:	e8 a3 0a 00 00       	callq  436bce <__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::__normal_iterator(char const* const&)>
  43612b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  43612f:	c9                   	leaveq 
  436130:	c3                   	retq   
  436131:	90                   	nop

0000000000436132 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::end() const>:
      end() const _GLIBCXX_NOEXCEPT
  436132:	55                   	push   %rbp
  436133:	48 89 e5             	mov    %rsp,%rbp
  436136:	53                   	push   %rbx
  436137:	48 83 ec 28          	sub    $0x28,%rsp
  43613b:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
      { return const_iterator(_M_data() + this->size()); }
  43613f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  436143:	48 89 c7             	mov    %rax,%rdi
  436146:	e8 bd 06 00 00       	callq  436808 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_data() const>
  43614b:	48 89 c3             	mov    %rax,%rbx
  43614e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  436152:	48 89 c7             	mov    %rax,%rdi
  436155:	e8 aa 08 00 00       	callq  436a04 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::size() const>
  43615a:	48 01 d8             	add    %rbx,%rax
  43615d:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  436161:	48 8d 55 e8          	lea    -0x18(%rbp),%rdx
  436165:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  436169:	48 89 d6             	mov    %rdx,%rsi
  43616c:	48 89 c7             	mov    %rax,%rdi
  43616f:	e8 5a 0a 00 00       	callq  436bce <__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::__normal_iterator(char const* const&)>
  436174:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  436178:	48 83 c4 28          	add    $0x28,%rsp
  43617c:	5b                   	pop    %rbx
  43617d:	5d                   	pop    %rbp
  43617e:	c3                   	retq   

000000000043617f <bool __gnu_cxx::operator!=<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > const&, __gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > const&)>:
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
  43617f:	55                   	push   %rbp
  436180:	48 89 e5             	mov    %rsp,%rbp
  436183:	53                   	push   %rbx
  436184:	48 83 ec 18          	sub    $0x18,%rsp
  436188:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  43618c:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    { return __lhs.base() != __rhs.base(); }
  436190:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  436194:	48 89 c7             	mov    %rax,%rdi
  436197:	e8 50 0a 00 00       	callq  436bec <__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::base() const>
  43619c:	48 8b 18             	mov    (%rax),%rbx
  43619f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4361a3:	48 89 c7             	mov    %rax,%rdi
  4361a6:	e8 41 0a 00 00       	callq  436bec <__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::base() const>
  4361ab:	48 8b 00             	mov    (%rax),%rax
  4361ae:	48 39 c3             	cmp    %rax,%rbx
  4361b1:	0f 95 c0             	setne  %al
  4361b4:	48 83 c4 18          	add    $0x18,%rsp
  4361b8:	5b                   	pop    %rbx
  4361b9:	5d                   	pop    %rbp
  4361ba:	c3                   	retq   
  4361bb:	90                   	nop

00000000004361bc <__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::operator++()>:
      operator++() _GLIBCXX_NOEXCEPT
  4361bc:	55                   	push   %rbp
  4361bd:	48 89 e5             	mov    %rsp,%rbp
  4361c0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	++_M_current;
  4361c4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4361c8:	48 8b 00             	mov    (%rax),%rax
  4361cb:	48 8d 50 01          	lea    0x1(%rax),%rdx
  4361cf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4361d3:	48 89 10             	mov    %rdx,(%rax)
	return *this;
  4361d6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
      }
  4361da:	5d                   	pop    %rbp
  4361db:	c3                   	retq   

00000000004361dc <__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::operator*() const>:
      operator*() const _GLIBCXX_NOEXCEPT
  4361dc:	55                   	push   %rbp
  4361dd:	48 89 e5             	mov    %rsp,%rbp
  4361e0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return *_M_current; }
  4361e4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4361e8:	48 8b 00             	mov    (%rax),%rax
  4361eb:	5d                   	pop    %rbp
  4361ec:	c3                   	retq   
  4361ed:	90                   	nop

00000000004361ee <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator+=(char const*)>:
      operator+=(const _CharT* __s)
  4361ee:	55                   	push   %rbp
  4361ef:	48 89 e5             	mov    %rsp,%rbp
  4361f2:	48 83 ec 10          	sub    $0x10,%rsp
  4361f6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4361fa:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      { return this->append(__s); }
  4361fe:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  436202:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  436206:	48 89 d6             	mov    %rdx,%rsi
  436209:	48 89 c7             	mov    %rax,%rdi
  43620c:	e8 9f 07 00 00       	callq  4369b0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(char const*)>
  436211:	c9                   	leaveq 
  436212:	c3                   	retq   

0000000000436213 <x666::Newline&& std::forward<x666::Newline>(std::remove_reference<x666::Newline>::type&)>:
   *
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
  436213:	55                   	push   %rbp
  436214:	48 89 e5             	mov    %rsp,%rbp
  436217:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<_Tp&&>(__t); }
  43621b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43621f:	5d                   	pop    %rbp
  436220:	c3                   	retq   
  436221:	90                   	nop

0000000000436222 <std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>::variant<4ul, x666::Newline, void>(std::in_place_index_t<4ul>, x666::Newline&&)>:

      template<size_t _Np, typename... _Args,
	       typename = enable_if_t<
		 is_constructible_v<__to_type<_Np>, _Args&&...>>>
	constexpr explicit
	variant(in_place_index_t<_Np>, _Args&&... __args)
  436222:	55                   	push   %rbp
  436223:	48 89 e5             	mov    %rsp,%rbp
  436226:	41 55                	push   %r13
  436228:	41 54                	push   %r12
  43622a:	53                   	push   %rbx
  43622b:	48 83 ec 18          	sub    $0x18,%rsp
  43622f:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  436233:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
	: _Base(in_place_index<_Np>, std::forward<_Args>(__args)...),
	_Default_ctor_enabler(_Enable_default_constructor_tag{})
  436237:	48 8b 5d d8          	mov    -0x28(%rbp),%rbx
  43623b:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  43623f:	48 89 c7             	mov    %rax,%rdi
  436242:	e8 cc ff ff ff       	callq  436213 <x666::Newline&& std::forward<x666::Newline>(std::remove_reference<x666::Newline>::type&)>
  436247:	48 83 ec 08          	sub    $0x8,%rsp
  43624b:	41 55                	push   %r13
  43624d:	48 89 c6             	mov    %rax,%rsi
  436250:	48 89 df             	mov    %rbx,%rdi
  436253:	e8 72 0a 00 00       	callq  436cca <std::__detail::__variant::_Variant_base<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>::_Variant_base<4ul, x666::Newline>(std::in_place_index_t<4ul>, x666::Newline&&)>
  436258:	48 83 c4 10          	add    $0x10,%rsp
  43625c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  436260:	48 83 ec 08          	sub    $0x8,%rsp
  436264:	41 54                	push   %r12
  436266:	48 89 c7             	mov    %rax,%rdi
  436269:	e8 9e 0a 00 00       	callq  436d0c <std::_Enable_default_constructor<false, std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> >::_Enable_default_constructor(std::_Enable_default_constructor_tag)>
  43626e:	48 83 c4 10          	add    $0x10,%rsp
	{ __glibcxx_assert(index() == _Np); }
  436272:	90                   	nop
  436273:	48 8d 65 e8          	lea    -0x18(%rbp),%rsp
  436277:	5b                   	pop    %rbx
  436278:	41 5c                	pop    %r12
  43627a:	41 5d                	pop    %r13
  43627c:	5d                   	pop    %rbp
  43627d:	c3                   	retq   

000000000043627e <std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>::variant<x666::Newline, void, void, void>(x666::Newline&&)>:
	variant(_Tp&& __t)
  43627e:	55                   	push   %rbp
  43627f:	48 89 e5             	mov    %rsp,%rbp
  436282:	53                   	push   %rbx
  436283:	48 83 ec 18          	sub    $0x18,%rsp
  436287:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  43628b:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
		  std::forward<_Tp>(__t))
  43628f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  436293:	48 89 c7             	mov    %rax,%rdi
  436296:	e8 78 ff ff ff       	callq  436213 <x666::Newline&& std::forward<x666::Newline>(std::remove_reference<x666::Newline>::type&)>
  43629b:	48 89 c2             	mov    %rax,%rdx
  43629e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4362a2:	48 83 ec 08          	sub    $0x8,%rsp
  4362a6:	53                   	push   %rbx
  4362a7:	48 89 d6             	mov    %rdx,%rsi
  4362aa:	48 89 c7             	mov    %rax,%rdi
  4362ad:	e8 70 ff ff ff       	callq  436222 <std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>::variant<4ul, x666::Newline, void>(std::in_place_index_t<4ul>, x666::Newline&&)>
  4362b2:	48 83 c4 10          	add    $0x10,%rsp
	{ __glibcxx_assert(holds_alternative<__accepted_type<_Tp&&>>(*this)); }
  4362b6:	90                   	nop
  4362b7:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  4362bb:	c9                   	leaveq 
  4362bc:	c3                   	retq   
  4362bd:	90                   	nop

00000000004362be <std::fpos<__mbstate_t>::operator long() const>:
      /// Construct position from offset.
      fpos(streamoff __off)
      : _M_off(__off), _M_state() { }

      /// Convert to streamoff.
      operator streamoff() const { return _M_off; }
  4362be:	55                   	push   %rbp
  4362bf:	48 89 e5             	mov    %rsp,%rbp
  4362c2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4362c6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4362ca:	48 8b 00             	mov    (%rax),%rax
  4362cd:	5d                   	pop    %rbp
  4362ce:	c3                   	retq   

00000000004362cf <x666::EndOfFile&& std::forward<x666::EndOfFile>(std::remove_reference<x666::EndOfFile>::type&)>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
  4362cf:	55                   	push   %rbp
  4362d0:	48 89 e5             	mov    %rsp,%rbp
  4362d3:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<_Tp&&>(__t); }
  4362d7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4362db:	5d                   	pop    %rbp
  4362dc:	c3                   	retq   
  4362dd:	90                   	nop

00000000004362de <std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>::variant<5ul, x666::EndOfFile, void>(std::in_place_index_t<5ul>, x666::EndOfFile&&)>:
	variant(in_place_index_t<_Np>, _Args&&... __args)
  4362de:	55                   	push   %rbp
  4362df:	48 89 e5             	mov    %rsp,%rbp
  4362e2:	41 55                	push   %r13
  4362e4:	41 54                	push   %r12
  4362e6:	53                   	push   %rbx
  4362e7:	48 83 ec 18          	sub    $0x18,%rsp
  4362eb:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  4362ef:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
	_Default_ctor_enabler(_Enable_default_constructor_tag{})
  4362f3:	48 8b 5d d8          	mov    -0x28(%rbp),%rbx
  4362f7:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  4362fb:	48 89 c7             	mov    %rax,%rdi
  4362fe:	e8 cc ff ff ff       	callq  4362cf <x666::EndOfFile&& std::forward<x666::EndOfFile>(std::remove_reference<x666::EndOfFile>::type&)>
  436303:	48 83 ec 08          	sub    $0x8,%rsp
  436307:	41 55                	push   %r13
  436309:	48 89 c6             	mov    %rax,%rsi
  43630c:	48 89 df             	mov    %rbx,%rdi
  43630f:	e8 d4 0a 00 00       	callq  436de8 <std::__detail::__variant::_Variant_base<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>::_Variant_base<5ul, x666::EndOfFile>(std::in_place_index_t<5ul>, x666::EndOfFile&&)>
  436314:	48 83 c4 10          	add    $0x10,%rsp
  436318:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  43631c:	48 83 ec 08          	sub    $0x8,%rsp
  436320:	41 54                	push   %r12
  436322:	48 89 c7             	mov    %rax,%rdi
  436325:	e8 e2 09 00 00       	callq  436d0c <std::_Enable_default_constructor<false, std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> >::_Enable_default_constructor(std::_Enable_default_constructor_tag)>
  43632a:	48 83 c4 10          	add    $0x10,%rsp
	{ __glibcxx_assert(index() == _Np); }
  43632e:	90                   	nop
  43632f:	48 8d 65 e8          	lea    -0x18(%rbp),%rsp
  436333:	5b                   	pop    %rbx
  436334:	41 5c                	pop    %r12
  436336:	41 5d                	pop    %r13
  436338:	5d                   	pop    %rbp
  436339:	c3                   	retq   

000000000043633a <std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>::variant<x666::EndOfFile, void, void, void>(x666::EndOfFile&&)>:
	variant(_Tp&& __t)
  43633a:	55                   	push   %rbp
  43633b:	48 89 e5             	mov    %rsp,%rbp
  43633e:	53                   	push   %rbx
  43633f:	48 83 ec 18          	sub    $0x18,%rsp
  436343:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  436347:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
		  std::forward<_Tp>(__t))
  43634b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  43634f:	48 89 c7             	mov    %rax,%rdi
  436352:	e8 78 ff ff ff       	callq  4362cf <x666::EndOfFile&& std::forward<x666::EndOfFile>(std::remove_reference<x666::EndOfFile>::type&)>
  436357:	48 89 c2             	mov    %rax,%rdx
  43635a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  43635e:	48 83 ec 08          	sub    $0x8,%rsp
  436362:	53                   	push   %rbx
  436363:	48 89 d6             	mov    %rdx,%rsi
  436366:	48 89 c7             	mov    %rax,%rdi
  436369:	e8 70 ff ff ff       	callq  4362de <std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>::variant<5ul, x666::EndOfFile, void>(std::in_place_index_t<5ul>, x666::EndOfFile&&)>
  43636e:	48 83 c4 10          	add    $0x10,%rsp
	{ __glibcxx_assert(holds_alternative<__accepted_type<_Tp&&>>(*this)); }
  436372:	90                   	nop
  436373:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  436377:	c9                   	leaveq 
  436378:	c3                   	retq   

0000000000436379 <x666::Operator&& std::forward<x666::Operator>(std::remove_reference<x666::Operator>::type&)>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
  436379:	55                   	push   %rbp
  43637a:	48 89 e5             	mov    %rsp,%rbp
  43637d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<_Tp&&>(__t); }
  436381:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  436385:	5d                   	pop    %rbp
  436386:	c3                   	retq   
  436387:	90                   	nop

0000000000436388 <std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>::variant<3ul, x666::Operator, void>(std::in_place_index_t<3ul>, x666::Operator&&)>:
	variant(in_place_index_t<_Np>, _Args&&... __args)
  436388:	55                   	push   %rbp
  436389:	48 89 e5             	mov    %rsp,%rbp
  43638c:	41 55                	push   %r13
  43638e:	41 54                	push   %r12
  436390:	53                   	push   %rbx
  436391:	48 83 ec 18          	sub    $0x18,%rsp
  436395:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  436399:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
	_Default_ctor_enabler(_Enable_default_constructor_tag{})
  43639d:	48 8b 5d d8          	mov    -0x28(%rbp),%rbx
  4363a1:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  4363a5:	48 89 c7             	mov    %rax,%rdi
  4363a8:	e8 cc ff ff ff       	callq  436379 <x666::Operator&& std::forward<x666::Operator>(std::remove_reference<x666::Operator>::type&)>
  4363ad:	48 83 ec 08          	sub    $0x8,%rsp
  4363b1:	41 55                	push   %r13
  4363b3:	48 89 c6             	mov    %rax,%rsi
  4363b6:	48 89 df             	mov    %rbx,%rdi
  4363b9:	e8 3c 0b 00 00       	callq  436efa <std::__detail::__variant::_Variant_base<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>::_Variant_base<3ul, x666::Operator>(std::in_place_index_t<3ul>, x666::Operator&&)>
  4363be:	48 83 c4 10          	add    $0x10,%rsp
  4363c2:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4363c6:	48 83 ec 08          	sub    $0x8,%rsp
  4363ca:	41 54                	push   %r12
  4363cc:	48 89 c7             	mov    %rax,%rdi
  4363cf:	e8 38 09 00 00       	callq  436d0c <std::_Enable_default_constructor<false, std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> >::_Enable_default_constructor(std::_Enable_default_constructor_tag)>
  4363d4:	48 83 c4 10          	add    $0x10,%rsp
	{ __glibcxx_assert(index() == _Np); }
  4363d8:	90                   	nop
  4363d9:	48 8d 65 e8          	lea    -0x18(%rbp),%rsp
  4363dd:	5b                   	pop    %rbx
  4363de:	41 5c                	pop    %r12
  4363e0:	41 5d                	pop    %r13
  4363e2:	5d                   	pop    %rbp
  4363e3:	c3                   	retq   

00000000004363e4 <std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>::variant<x666::Operator, void, void, void>(x666::Operator&&)>:
	variant(_Tp&& __t)
  4363e4:	55                   	push   %rbp
  4363e5:	48 89 e5             	mov    %rsp,%rbp
  4363e8:	53                   	push   %rbx
  4363e9:	48 83 ec 18          	sub    $0x18,%rsp
  4363ed:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  4363f1:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
		  std::forward<_Tp>(__t))
  4363f5:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4363f9:	48 89 c7             	mov    %rax,%rdi
  4363fc:	e8 78 ff ff ff       	callq  436379 <x666::Operator&& std::forward<x666::Operator>(std::remove_reference<x666::Operator>::type&)>
  436401:	48 89 c2             	mov    %rax,%rdx
  436404:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  436408:	48 83 ec 08          	sub    $0x8,%rsp
  43640c:	53                   	push   %rbx
  43640d:	48 89 d6             	mov    %rdx,%rsi
  436410:	48 89 c7             	mov    %rax,%rdi
  436413:	e8 70 ff ff ff       	callq  436388 <std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>::variant<3ul, x666::Operator, void>(std::in_place_index_t<3ul>, x666::Operator&&)>
  436418:	48 83 c4 10          	add    $0x10,%rsp
	{ __glibcxx_assert(holds_alternative<__accepted_type<_Tp&&>>(*this)); }
  43641c:	90                   	nop
  43641d:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  436421:	c9                   	leaveq 
  436422:	c3                   	retq   

0000000000436423 <x666::LexError&& std::forward<x666::LexError>(std::remove_reference<x666::LexError>::type&)>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
  436423:	55                   	push   %rbp
  436424:	48 89 e5             	mov    %rsp,%rbp
  436427:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<_Tp&&>(__t); }
  43642b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43642f:	5d                   	pop    %rbp
  436430:	c3                   	retq   
  436431:	90                   	nop

0000000000436432 <std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>::variant<6ul, x666::LexError, void>(std::in_place_index_t<6ul>, x666::LexError&&)>:
	variant(in_place_index_t<_Np>, _Args&&... __args)
  436432:	55                   	push   %rbp
  436433:	48 89 e5             	mov    %rsp,%rbp
  436436:	41 55                	push   %r13
  436438:	41 54                	push   %r12
  43643a:	53                   	push   %rbx
  43643b:	48 83 ec 18          	sub    $0x18,%rsp
  43643f:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  436443:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
	_Default_ctor_enabler(_Enable_default_constructor_tag{})
  436447:	48 8b 5d d8          	mov    -0x28(%rbp),%rbx
  43644b:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  43644f:	48 89 c7             	mov    %rax,%rdi
  436452:	e8 cc ff ff ff       	callq  436423 <x666::LexError&& std::forward<x666::LexError>(std::remove_reference<x666::LexError>::type&)>
  436457:	48 83 ec 08          	sub    $0x8,%rsp
  43645b:	41 55                	push   %r13
  43645d:	48 89 c6             	mov    %rax,%rsi
  436460:	48 89 df             	mov    %rbx,%rdi
  436463:	e8 a4 0b 00 00       	callq  43700c <std::__detail::__variant::_Variant_base<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>::_Variant_base<6ul, x666::LexError>(std::in_place_index_t<6ul>, x666::LexError&&)>
  436468:	48 83 c4 10          	add    $0x10,%rsp
  43646c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  436470:	48 83 ec 08          	sub    $0x8,%rsp
  436474:	41 54                	push   %r12
  436476:	48 89 c7             	mov    %rax,%rdi
  436479:	e8 8e 08 00 00       	callq  436d0c <std::_Enable_default_constructor<false, std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> >::_Enable_default_constructor(std::_Enable_default_constructor_tag)>
  43647e:	48 83 c4 10          	add    $0x10,%rsp
	{ __glibcxx_assert(index() == _Np); }
  436482:	90                   	nop
  436483:	48 8d 65 e8          	lea    -0x18(%rbp),%rsp
  436487:	5b                   	pop    %rbx
  436488:	41 5c                	pop    %r12
  43648a:	41 5d                	pop    %r13
  43648c:	5d                   	pop    %rbp
  43648d:	c3                   	retq   

000000000043648e <std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>::variant<x666::LexError, void, void, void>(x666::LexError&&)>:
	variant(_Tp&& __t)
  43648e:	55                   	push   %rbp
  43648f:	48 89 e5             	mov    %rsp,%rbp
  436492:	53                   	push   %rbx
  436493:	48 83 ec 18          	sub    $0x18,%rsp
  436497:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  43649b:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
		  std::forward<_Tp>(__t))
  43649f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4364a3:	48 89 c7             	mov    %rax,%rdi
  4364a6:	e8 78 ff ff ff       	callq  436423 <x666::LexError&& std::forward<x666::LexError>(std::remove_reference<x666::LexError>::type&)>
  4364ab:	48 89 c2             	mov    %rax,%rdx
  4364ae:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4364b2:	48 83 ec 08          	sub    $0x8,%rsp
  4364b6:	53                   	push   %rbx
  4364b7:	48 89 d6             	mov    %rdx,%rsi
  4364ba:	48 89 c7             	mov    %rax,%rdi
  4364bd:	e8 70 ff ff ff       	callq  436432 <std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>::variant<6ul, x666::LexError, void>(std::in_place_index_t<6ul>, x666::LexError&&)>
  4364c2:	48 83 c4 10          	add    $0x10,%rsp
	{ __glibcxx_assert(holds_alternative<__accepted_type<_Tp&&>>(*this)); }
  4364c6:	90                   	nop
  4364c7:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  4364cb:	c9                   	leaveq 
  4364cc:	c3                   	retq   

00000000004364cd <x666::IntLiteral&& std::forward<x666::IntLiteral>(std::remove_reference<x666::IntLiteral>::type&)>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
  4364cd:	55                   	push   %rbp
  4364ce:	48 89 e5             	mov    %rsp,%rbp
  4364d1:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<_Tp&&>(__t); }
  4364d5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4364d9:	5d                   	pop    %rbp
  4364da:	c3                   	retq   
  4364db:	90                   	nop

00000000004364dc <std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>::variant<2ul, x666::IntLiteral, void>(std::in_place_index_t<2ul>, x666::IntLiteral&&)>:
	variant(in_place_index_t<_Np>, _Args&&... __args)
  4364dc:	55                   	push   %rbp
  4364dd:	48 89 e5             	mov    %rsp,%rbp
  4364e0:	41 55                	push   %r13
  4364e2:	41 54                	push   %r12
  4364e4:	53                   	push   %rbx
  4364e5:	48 83 ec 18          	sub    $0x18,%rsp
  4364e9:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  4364ed:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
	_Default_ctor_enabler(_Enable_default_constructor_tag{})
  4364f1:	48 8b 5d d8          	mov    -0x28(%rbp),%rbx
  4364f5:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  4364f9:	48 89 c7             	mov    %rax,%rdi
  4364fc:	e8 cc ff ff ff       	callq  4364cd <x666::IntLiteral&& std::forward<x666::IntLiteral>(std::remove_reference<x666::IntLiteral>::type&)>
  436501:	48 83 ec 08          	sub    $0x8,%rsp
  436505:	41 55                	push   %r13
  436507:	48 89 c6             	mov    %rax,%rsi
  43650a:	48 89 df             	mov    %rbx,%rdi
  43650d:	e8 0c 0c 00 00       	callq  43711e <std::__detail::__variant::_Variant_base<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>::_Variant_base<2ul, x666::IntLiteral>(std::in_place_index_t<2ul>, x666::IntLiteral&&)>
  436512:	48 83 c4 10          	add    $0x10,%rsp
  436516:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  43651a:	48 83 ec 08          	sub    $0x8,%rsp
  43651e:	41 54                	push   %r12
  436520:	48 89 c7             	mov    %rax,%rdi
  436523:	e8 e4 07 00 00       	callq  436d0c <std::_Enable_default_constructor<false, std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> >::_Enable_default_constructor(std::_Enable_default_constructor_tag)>
  436528:	48 83 c4 10          	add    $0x10,%rsp
	{ __glibcxx_assert(index() == _Np); }
  43652c:	90                   	nop
  43652d:	48 8d 65 e8          	lea    -0x18(%rbp),%rsp
  436531:	5b                   	pop    %rbx
  436532:	41 5c                	pop    %r12
  436534:	41 5d                	pop    %r13
  436536:	5d                   	pop    %rbp
  436537:	c3                   	retq   

0000000000436538 <std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>::variant<x666::IntLiteral, void, void, void>(x666::IntLiteral&&)>:
	variant(_Tp&& __t)
  436538:	55                   	push   %rbp
  436539:	48 89 e5             	mov    %rsp,%rbp
  43653c:	53                   	push   %rbx
  43653d:	48 83 ec 18          	sub    $0x18,%rsp
  436541:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  436545:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
		  std::forward<_Tp>(__t))
  436549:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  43654d:	48 89 c7             	mov    %rax,%rdi
  436550:	e8 78 ff ff ff       	callq  4364cd <x666::IntLiteral&& std::forward<x666::IntLiteral>(std::remove_reference<x666::IntLiteral>::type&)>
  436555:	48 89 c2             	mov    %rax,%rdx
  436558:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  43655c:	48 83 ec 08          	sub    $0x8,%rsp
  436560:	53                   	push   %rbx
  436561:	48 89 d6             	mov    %rdx,%rsi
  436564:	48 89 c7             	mov    %rax,%rdi
  436567:	e8 70 ff ff ff       	callq  4364dc <std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>::variant<2ul, x666::IntLiteral, void>(std::in_place_index_t<2ul>, x666::IntLiteral&&)>
  43656c:	48 83 c4 10          	add    $0x10,%rsp
	{ __glibcxx_assert(holds_alternative<__accepted_type<_Tp&&>>(*this)); }
  436570:	90                   	nop
  436571:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  436575:	c9                   	leaveq 
  436576:	c3                   	retq   

0000000000436577 <x666::Identifier&& std::forward<x666::Identifier>(std::remove_reference<x666::Identifier>::type&)>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
  436577:	55                   	push   %rbp
  436578:	48 89 e5             	mov    %rsp,%rbp
  43657b:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<_Tp&&>(__t); }
  43657f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  436583:	5d                   	pop    %rbp
  436584:	c3                   	retq   
  436585:	90                   	nop

0000000000436586 <std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>::variant<0ul, x666::Identifier, void>(std::in_place_index_t<0ul>, x666::Identifier&&)>:
	variant(in_place_index_t<_Np>, _Args&&... __args)
  436586:	55                   	push   %rbp
  436587:	48 89 e5             	mov    %rsp,%rbp
  43658a:	41 55                	push   %r13
  43658c:	41 54                	push   %r12
  43658e:	53                   	push   %rbx
  43658f:	48 83 ec 18          	sub    $0x18,%rsp
  436593:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  436597:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
	_Default_ctor_enabler(_Enable_default_constructor_tag{})
  43659b:	48 8b 5d d8          	mov    -0x28(%rbp),%rbx
  43659f:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  4365a3:	48 89 c7             	mov    %rax,%rdi
  4365a6:	e8 cc ff ff ff       	callq  436577 <x666::Identifier&& std::forward<x666::Identifier>(std::remove_reference<x666::Identifier>::type&)>
  4365ab:	48 83 ec 08          	sub    $0x8,%rsp
  4365af:	41 55                	push   %r13
  4365b1:	48 89 c6             	mov    %rax,%rsi
  4365b4:	48 89 df             	mov    %rbx,%rdi
  4365b7:	e8 74 0c 00 00       	callq  437230 <std::__detail::__variant::_Variant_base<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>::_Variant_base<0ul, x666::Identifier>(std::in_place_index_t<0ul>, x666::Identifier&&)>
  4365bc:	48 83 c4 10          	add    $0x10,%rsp
  4365c0:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4365c4:	48 83 ec 08          	sub    $0x8,%rsp
  4365c8:	41 54                	push   %r12
  4365ca:	48 89 c7             	mov    %rax,%rdi
  4365cd:	e8 3a 07 00 00       	callq  436d0c <std::_Enable_default_constructor<false, std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> >::_Enable_default_constructor(std::_Enable_default_constructor_tag)>
  4365d2:	48 83 c4 10          	add    $0x10,%rsp
	{ __glibcxx_assert(index() == _Np); }
  4365d6:	90                   	nop
  4365d7:	48 8d 65 e8          	lea    -0x18(%rbp),%rsp
  4365db:	5b                   	pop    %rbx
  4365dc:	41 5c                	pop    %r12
  4365de:	41 5d                	pop    %r13
  4365e0:	5d                   	pop    %rbp
  4365e1:	c3                   	retq   

00000000004365e2 <std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>::variant<x666::Identifier, void, void, void>(x666::Identifier&&)>:
	variant(_Tp&& __t)
  4365e2:	55                   	push   %rbp
  4365e3:	48 89 e5             	mov    %rsp,%rbp
  4365e6:	53                   	push   %rbx
  4365e7:	48 83 ec 18          	sub    $0x18,%rsp
  4365eb:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  4365ef:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
		  std::forward<_Tp>(__t))
  4365f3:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4365f7:	48 89 c7             	mov    %rax,%rdi
  4365fa:	e8 78 ff ff ff       	callq  436577 <x666::Identifier&& std::forward<x666::Identifier>(std::remove_reference<x666::Identifier>::type&)>
  4365ff:	48 89 c2             	mov    %rax,%rdx
  436602:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  436606:	48 83 ec 08          	sub    $0x8,%rsp
  43660a:	53                   	push   %rbx
  43660b:	48 89 d6             	mov    %rdx,%rsi
  43660e:	48 89 c7             	mov    %rax,%rdi
  436611:	e8 70 ff ff ff       	callq  436586 <std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>::variant<0ul, x666::Identifier, void>(std::in_place_index_t<0ul>, x666::Identifier&&)>
  436616:	48 83 c4 10          	add    $0x10,%rsp
	{ __glibcxx_assert(holds_alternative<__accepted_type<_Tp&&>>(*this)); }
  43661a:	90                   	nop
  43661b:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  43661f:	c9                   	leaveq 
  436620:	c3                   	retq   

0000000000436621 <x666::StringLiteral&& std::forward<x666::StringLiteral>(std::remove_reference<x666::StringLiteral>::type&)>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
  436621:	55                   	push   %rbp
  436622:	48 89 e5             	mov    %rsp,%rbp
  436625:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<_Tp&&>(__t); }
  436629:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43662d:	5d                   	pop    %rbp
  43662e:	c3                   	retq   
  43662f:	90                   	nop

0000000000436630 <std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>::variant<1ul, x666::StringLiteral, void>(std::in_place_index_t<1ul>, x666::StringLiteral&&)>:
	variant(in_place_index_t<_Np>, _Args&&... __args)
  436630:	55                   	push   %rbp
  436631:	48 89 e5             	mov    %rsp,%rbp
  436634:	41 55                	push   %r13
  436636:	41 54                	push   %r12
  436638:	53                   	push   %rbx
  436639:	48 83 ec 18          	sub    $0x18,%rsp
  43663d:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  436641:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
	_Default_ctor_enabler(_Enable_default_constructor_tag{})
  436645:	48 8b 5d d8          	mov    -0x28(%rbp),%rbx
  436649:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  43664d:	48 89 c7             	mov    %rax,%rdi
  436650:	e8 cc ff ff ff       	callq  436621 <x666::StringLiteral&& std::forward<x666::StringLiteral>(std::remove_reference<x666::StringLiteral>::type&)>
  436655:	48 83 ec 08          	sub    $0x8,%rsp
  436659:	41 55                	push   %r13
  43665b:	48 89 c6             	mov    %rax,%rsi
  43665e:	48 89 df             	mov    %rbx,%rdi
  436661:	e8 dc 0c 00 00       	callq  437342 <std::__detail::__variant::_Variant_base<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>::_Variant_base<1ul, x666::StringLiteral>(std::in_place_index_t<1ul>, x666::StringLiteral&&)>
  436666:	48 83 c4 10          	add    $0x10,%rsp
  43666a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  43666e:	48 83 ec 08          	sub    $0x8,%rsp
  436672:	41 54                	push   %r12
  436674:	48 89 c7             	mov    %rax,%rdi
  436677:	e8 90 06 00 00       	callq  436d0c <std::_Enable_default_constructor<false, std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> >::_Enable_default_constructor(std::_Enable_default_constructor_tag)>
  43667c:	48 83 c4 10          	add    $0x10,%rsp
	{ __glibcxx_assert(index() == _Np); }
  436680:	90                   	nop
  436681:	48 8d 65 e8          	lea    -0x18(%rbp),%rsp
  436685:	5b                   	pop    %rbx
  436686:	41 5c                	pop    %r12
  436688:	41 5d                	pop    %r13
  43668a:	5d                   	pop    %rbp
  43668b:	c3                   	retq   

000000000043668c <std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>::variant<x666::StringLiteral, void, void, void>(x666::StringLiteral&&)>:
	variant(_Tp&& __t)
  43668c:	55                   	push   %rbp
  43668d:	48 89 e5             	mov    %rsp,%rbp
  436690:	53                   	push   %rbx
  436691:	48 83 ec 18          	sub    $0x18,%rsp
  436695:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  436699:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
		  std::forward<_Tp>(__t))
  43669d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4366a1:	48 89 c7             	mov    %rax,%rdi
  4366a4:	e8 78 ff ff ff       	callq  436621 <x666::StringLiteral&& std::forward<x666::StringLiteral>(std::remove_reference<x666::StringLiteral>::type&)>
  4366a9:	48 89 c2             	mov    %rax,%rdx
  4366ac:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4366b0:	48 83 ec 08          	sub    $0x8,%rsp
  4366b4:	53                   	push   %rbx
  4366b5:	48 89 d6             	mov    %rdx,%rsi
  4366b8:	48 89 c7             	mov    %rax,%rdi
  4366bb:	e8 70 ff ff ff       	callq  436630 <std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>::variant<1ul, x666::StringLiteral, void>(std::in_place_index_t<1ul>, x666::StringLiteral&&)>
  4366c0:	48 83 c4 10          	add    $0x10,%rsp
	{ __glibcxx_assert(holds_alternative<__accepted_type<_Tp&&>>(*this)); }
  4366c4:	90                   	nop
  4366c5:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  4366c9:	c9                   	leaveq 
  4366ca:	c3                   	retq   
  4366cb:	90                   	nop

00000000004366cc <std::fpos<__mbstate_t>::fpos(long)>:
      fpos(streamoff __off)
  4366cc:	55                   	push   %rbp
  4366cd:	48 89 e5             	mov    %rsp,%rbp
  4366d0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4366d4:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      : _M_off(__off), _M_state() { }
  4366d8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4366dc:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  4366e0:	48 89 10             	mov    %rdx,(%rax)
  4366e3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4366e7:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%rax)
  4366ee:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4366f2:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
  4366f9:	90                   	nop
  4366fa:	5d                   	pop    %rbp
  4366fb:	c3                   	retq   

00000000004366fc <std::basic_istream<char, std::char_traits<char> >& std::getline<char, std::char_traits<char>, std::allocator<char> >(std::basic_istream<char, std::char_traits<char> >&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&)>:
   *  end of line is encountered, it is extracted but not stored into
   *  @a __str.
   */
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_istream<_CharT, _Traits>&
    getline(basic_istream<_CharT, _Traits>& __is,
  4366fc:	55                   	push   %rbp
  4366fd:	48 89 e5             	mov    %rsp,%rbp
  436700:	48 83 ec 10          	sub    $0x10,%rsp
  436704:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  436708:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	    basic_string<_CharT, _Traits, _Alloc>& __str)
    { return std::getline(__is, __str, __is.widen('\n')); }
  43670c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  436710:	48 8b 00             	mov    (%rax),%rax
  436713:	48 83 e8 18          	sub    $0x18,%rax
  436717:	48 8b 00             	mov    (%rax),%rax
  43671a:	48 89 c2             	mov    %rax,%rdx
  43671d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  436721:	48 01 d0             	add    %rdx,%rax
  436724:	be 0a 00 00 00       	mov    $0xa,%esi
  436729:	48 89 c7             	mov    %rax,%rdi
  43672c:	e8 9f c0 ff ff       	callq  4327d0 <std::basic_ios<char, std::char_traits<char> >::widen(char) const@plt>
  436731:	0f be c0             	movsbl %al,%eax
  436734:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
  436738:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
  43673c:	89 c2                	mov    %eax,%edx
  43673e:	48 89 cf             	mov    %rcx,%rdi
  436741:	e8 0a c2 ff ff       	callq  432950 <std::basic_istream<char, std::char_traits<char> >& std::getline<char, std::char_traits<char>, std::allocator<char> >(std::basic_istream<char, std::char_traits<char> >&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, char)@plt>
  436746:	c9                   	leaveq 
  436747:	c3                   	retq   

0000000000436748 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <char, std::char_traits<char>, std::allocator<char> >(std::basic_ostream<char, std::char_traits<char> >&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>:
    operator<<(basic_ostream<_CharT, _Traits>& __os,
  436748:	55                   	push   %rbp
  436749:	48 89 e5             	mov    %rsp,%rbp
  43674c:	53                   	push   %rbx
  43674d:	48 83 ec 18          	sub    $0x18,%rsp
  436751:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  436755:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
      return __ostream_insert(__os, __str.data(), __str.size());
  436759:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  43675d:	48 89 c7             	mov    %rax,%rdi
  436760:	e8 9f 02 00 00       	callq  436a04 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::size() const>
  436765:	48 89 c3             	mov    %rax,%rbx
  436768:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  43676c:	48 89 c7             	mov    %rax,%rdi
  43676f:	e8 28 f6 ff ff       	callq  435d9c <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::data() const>
  436774:	48 89 c1             	mov    %rax,%rcx
  436777:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  43677b:	48 89 da             	mov    %rbx,%rdx
  43677e:	48 89 ce             	mov    %rcx,%rsi
  436781:	48 89 c7             	mov    %rax,%rdi
  436784:	e8 a7 c0 ff ff       	callq  432830 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
    }
  436789:	48 83 c4 18          	add    $0x18,%rsp
  43678d:	5b                   	pop    %rbx
  43678e:	5d                   	pop    %rbp
  43678f:	c3                   	retq   

0000000000436790 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(unsigned long, char, std::allocator<char> const&)>:
      basic_string(size_type __n, _CharT __c, const _Alloc& __a = _Alloc())
  436790:	55                   	push   %rbp
  436791:	48 89 e5             	mov    %rsp,%rbp
  436794:	53                   	push   %rbx
  436795:	48 83 ec 28          	sub    $0x28,%rsp
  436799:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  43679d:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  4367a1:	89 d0                	mov    %edx,%eax
  4367a3:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
  4367a7:	88 45 dc             	mov    %al,-0x24(%rbp)
      : _M_dataplus(_M_local_data(), __a)
  4367aa:	48 8b 5d e8          	mov    -0x18(%rbp),%rbx
  4367ae:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4367b2:	48 89 c7             	mov    %rax,%rdi
  4367b5:	e8 9a 00 00 00       	callq  436854 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_local_data()>
  4367ba:	48 89 c1             	mov    %rax,%rcx
  4367bd:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  4367c1:	48 89 c2             	mov    %rax,%rdx
  4367c4:	48 89 ce             	mov    %rcx,%rsi
  4367c7:	48 89 df             	mov    %rbx,%rdi
  4367ca:	e8 a3 00 00 00       	callq  436872 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_Alloc_hider::_Alloc_hider(char*, std::allocator<char> const&)>
      { _M_construct(__n, __c); }
  4367cf:	0f be 45 dc          	movsbl -0x24(%rbp),%eax
  4367d3:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
  4367d7:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  4367db:	89 c2                	mov    %eax,%edx
  4367dd:	48 89 cf             	mov    %rcx,%rdi
  4367e0:	e8 9f 0b 00 00       	callq  437384 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct(unsigned long, char)>
  4367e5:	eb 1a                	jmp    436801 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(unsigned long, char, std::allocator<char> const&)+0x71>
  4367e7:	48 89 c3             	mov    %rax,%rbx
      : _M_dataplus(_M_local_data(), __a)
  4367ea:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4367ee:	48 89 c7             	mov    %rax,%rdi
  4367f1:	e8 62 f5 ff ff       	callq  435d58 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_Alloc_hider::~_Alloc_hider()>
  4367f6:	48 89 d8             	mov    %rbx,%rax
  4367f9:	48 89 c7             	mov    %rax,%rdi
  4367fc:	e8 0f c1 ff ff       	callq  432910 <_Unwind_Resume@plt>
      { _M_construct(__n, __c); }
  436801:	48 83 c4 28          	add    $0x28,%rsp
  436805:	5b                   	pop    %rbx
  436806:	5d                   	pop    %rbp
  436807:	c3                   	retq   

0000000000436808 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_data() const>:
      _M_data() const
  436808:	55                   	push   %rbp
  436809:	48 89 e5             	mov    %rsp,%rbp
  43680c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_dataplus._M_p; }
  436810:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  436814:	48 8b 00             	mov    (%rax),%rax
  436817:	5d                   	pop    %rbp
  436818:	c3                   	retq   
  436819:	90                   	nop

000000000043681a <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_dispose()>:
      _M_dispose()
  43681a:	55                   	push   %rbp
  43681b:	48 89 e5             	mov    %rsp,%rbp
  43681e:	48 83 ec 10          	sub    $0x10,%rsp
  436822:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	if (!_M_is_local())
  436826:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43682a:	48 89 c7             	mov    %rax,%rdi
  43682d:	e8 14 03 00 00       	callq  436b46 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_is_local() const>
  436832:	83 f0 01             	xor    $0x1,%eax
  436835:	84 c0                	test   %al,%al
  436837:	74 17                	je     436850 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_dispose()+0x36>
	  _M_destroy(_M_allocated_capacity);
  436839:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43683d:	48 8b 50 10          	mov    0x10(%rax),%rdx
  436841:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  436845:	48 89 d6             	mov    %rdx,%rsi
  436848:	48 89 c7             	mov    %rax,%rdi
  43684b:	e8 da 0b 00 00       	callq  43742a <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_destroy(unsigned long)>
      }
  436850:	90                   	nop
  436851:	c9                   	leaveq 
  436852:	c3                   	retq   
  436853:	90                   	nop

0000000000436854 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_local_data()>:
      _M_local_data()
  436854:	55                   	push   %rbp
  436855:	48 89 e5             	mov    %rsp,%rbp
  436858:	48 83 ec 10          	sub    $0x10,%rsp
  43685c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
  436860:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  436864:	48 83 c0 10          	add    $0x10,%rax
  436868:	48 89 c7             	mov    %rax,%rdi
  43686b:	e8 08 0c 00 00       	callq  437478 <std::pointer_traits<char*>::pointer_to(char&)>
      }
  436870:	c9                   	leaveq 
  436871:	c3                   	retq   

0000000000436872 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_Alloc_hider::_Alloc_hider(char*, std::allocator<char> const&)>:
	_Alloc_hider(pointer __dat, const _Alloc& __a)
  436872:	55                   	push   %rbp
  436873:	48 89 e5             	mov    %rsp,%rbp
  436876:	48 83 ec 20          	sub    $0x20,%rsp
  43687a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  43687e:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  436882:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	: allocator_type(__a), _M_p(__dat) { }
  436886:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  43688a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43688e:	48 89 d6             	mov    %rdx,%rsi
  436891:	48 89 c7             	mov    %rax,%rdi
  436894:	e8 d7 bf ff ff       	callq  432870 <std::allocator<char>::allocator(std::allocator<char> const&)@plt>
  436899:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43689d:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  4368a1:	48 89 10             	mov    %rdx,(%rax)
  4368a4:	90                   	nop
  4368a5:	c9                   	leaveq 
  4368a6:	c3                   	retq   
  4368a7:	90                   	nop

00000000004368a8 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*)>:
        _M_construct(_InIterator __beg, _InIterator __end)
  4368a8:	55                   	push   %rbp
  4368a9:	48 89 e5             	mov    %rsp,%rbp
  4368ac:	48 83 ec 20          	sub    $0x20,%rsp
  4368b0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4368b4:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  4368b8:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	  _M_construct_aux(__beg, __end, _Integral());
  4368bc:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  4368c0:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  4368c4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4368c8:	48 83 ec 08          	sub    $0x8,%rsp
  4368cc:	41 50                	push   %r8
  4368ce:	48 89 ce             	mov    %rcx,%rsi
  4368d1:	48 89 c7             	mov    %rax,%rdi
  4368d4:	e8 b9 0b 00 00       	callq  437492 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct_aux<char const*>(char const*, char const*, std::__false_type)>
  4368d9:	48 83 c4 10          	add    $0x10,%rsp
        }
  4368dd:	90                   	nop
  4368de:	c9                   	leaveq 
  4368df:	c3                   	retq   

00000000004368e0 <std::initializer_list<char>::size() const>:
      size() const noexcept { return _M_len; }
  4368e0:	55                   	push   %rbp
  4368e1:	48 89 e5             	mov    %rsp,%rbp
  4368e4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4368e8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4368ec:	48 8b 40 08          	mov    0x8(%rax),%rax
  4368f0:	5d                   	pop    %rbp
  4368f1:	c3                   	retq   

00000000004368f2 <__gnu_cxx::__alloc_traits<std::allocator<char>, char>::_S_select_on_copy(std::allocator<char> const&)>:
    template<typename _Ptr>
      static typename std::enable_if<__is_custom_pointer<_Ptr>::value>::type
      destroy(_Alloc& __a, _Ptr __p)
      { _Base_type::destroy(__a, std::__to_address(__p)); }

    static _Alloc _S_select_on_copy(const _Alloc& __a)
  4368f2:	55                   	push   %rbp
  4368f3:	48 89 e5             	mov    %rsp,%rbp
  4368f6:	48 83 ec 10          	sub    $0x10,%rsp
  4368fa:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4368fe:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    { return _Base_type::select_on_container_copy_construction(__a); }
  436902:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  436906:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  43690a:	48 89 d6             	mov    %rdx,%rsi
  43690d:	48 89 c7             	mov    %rax,%rdi
  436910:	e8 b5 0b 00 00       	callq  4374ca <std::allocator_traits<std::allocator<char> >::select_on_container_copy_construction(std::allocator<char> const&)>
  436915:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  436919:	c9                   	leaveq 
  43691a:	c3                   	retq   
  43691b:	90                   	nop

000000000043691c <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_get_allocator() const>:
      _M_get_allocator() const
  43691c:	55                   	push   %rbp
  43691d:	48 89 e5             	mov    %rsp,%rbp
  436920:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_dataplus; }
  436924:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  436928:	5d                   	pop    %rbp
  436929:	c3                   	retq   

000000000043692a <std::remove_reference<std::allocator<char>&>::type&& std::move<std::allocator<char>&>(std::allocator<char>&)>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
  43692a:	55                   	push   %rbp
  43692b:	48 89 e5             	mov    %rsp,%rbp
  43692e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
  436932:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  436936:	5d                   	pop    %rbp
  436937:	c3                   	retq   

0000000000436938 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_Alloc_hider::_Alloc_hider(char*, std::allocator<char>&&)>:
	_Alloc_hider(pointer __dat, _Alloc&& __a = _Alloc())
  436938:	55                   	push   %rbp
  436939:	48 89 e5             	mov    %rsp,%rbp
  43693c:	48 83 ec 20          	sub    $0x20,%rsp
  436940:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  436944:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  436948:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	: allocator_type(std::move(__a)), _M_p(__dat) { }
  43694c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  436950:	48 89 c7             	mov    %rax,%rdi
  436953:	e8 d2 ff ff ff       	callq  43692a <std::remove_reference<std::allocator<char>&>::type&& std::move<std::allocator<char>&>(std::allocator<char>&)>
  436958:	48 89 c2             	mov    %rax,%rdx
  43695b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43695f:	48 89 d6             	mov    %rdx,%rsi
  436962:	48 89 c7             	mov    %rax,%rdi
  436965:	e8 06 bf ff ff       	callq  432870 <std::allocator<char>::allocator(std::allocator<char> const&)@plt>
  43696a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43696e:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  436972:	48 89 10             	mov    %rdx,(%rax)
  436975:	90                   	nop
  436976:	c9                   	leaveq 
  436977:	c3                   	retq   

0000000000436978 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*)>:
        _M_construct(_InIterator __beg, _InIterator __end)
  436978:	55                   	push   %rbp
  436979:	48 89 e5             	mov    %rsp,%rbp
  43697c:	48 83 ec 20          	sub    $0x20,%rsp
  436980:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  436984:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  436988:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	  _M_construct_aux(__beg, __end, _Integral());
  43698c:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  436990:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  436994:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  436998:	48 83 ec 08          	sub    $0x8,%rsp
  43699c:	41 50                	push   %r8
  43699e:	48 89 ce             	mov    %rcx,%rsi
  4369a1:	48 89 c7             	mov    %rax,%rdi
  4369a4:	e8 4b 0b 00 00       	callq  4374f4 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct_aux<char*>(char*, char*, std::__false_type)>
  4369a9:	48 83 c4 10          	add    $0x10,%rsp
        }
  4369ad:	90                   	nop
  4369ae:	c9                   	leaveq 
  4369af:	c3                   	retq   

00000000004369b0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(char const*)>:
      append(const _CharT* __s)
  4369b0:	55                   	push   %rbp
  4369b1:	48 89 e5             	mov    %rsp,%rbp
  4369b4:	48 83 ec 20          	sub    $0x20,%rsp
  4369b8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  4369bc:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	const size_type __n = traits_type::length(__s);
  4369c0:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4369c4:	48 89 c7             	mov    %rax,%rdi
  4369c7:	e8 f1 f0 ff ff       	callq  435abd <std::char_traits<char>::length(char const*)>
  4369cc:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	_M_check_length(size_type(0), __n, "basic_string::append");
  4369d0:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  4369d4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4369d8:	b9 7a 46 44 00       	mov    $0x44467a,%ecx
  4369dd:	be 00 00 00 00       	mov    $0x0,%esi
  4369e2:	48 89 c7             	mov    %rax,%rdi
  4369e5:	e8 42 0b 00 00       	callq  43752c <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_check_length(unsigned long, unsigned long, char const*) const>
	return _M_append(__s, __n);
  4369ea:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  4369ee:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  4369f2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4369f6:	48 89 ce             	mov    %rcx,%rsi
  4369f9:	48 89 c7             	mov    %rax,%rdi
  4369fc:	e8 8b 0b 00 00       	callq  43758c <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_append(char const*, unsigned long)>
      }
  436a01:	c9                   	leaveq 
  436a02:	c3                   	retq   
  436a03:	90                   	nop

0000000000436a04 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::size() const>:
      size() const _GLIBCXX_NOEXCEPT
  436a04:	55                   	push   %rbp
  436a05:	48 89 e5             	mov    %rsp,%rbp
  436a08:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_string_length; }
  436a0c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  436a10:	48 8b 40 08          	mov    0x8(%rax),%rax
  436a14:	5d                   	pop    %rbp
  436a15:	c3                   	retq   

0000000000436a16 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::capacity() const>:
      capacity() const _GLIBCXX_NOEXCEPT
  436a16:	55                   	push   %rbp
  436a17:	48 89 e5             	mov    %rsp,%rbp
  436a1a:	48 83 ec 10          	sub    $0x10,%rsp
  436a1e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	return _M_is_local() ? size_type(_S_local_capacity)
  436a22:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  436a26:	48 89 c7             	mov    %rax,%rdi
  436a29:	e8 18 01 00 00       	callq  436b46 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_is_local() const>
  436a2e:	84 c0                	test   %al,%al
  436a30:	74 07                	je     436a39 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::capacity() const+0x23>
  436a32:	b8 0f 00 00 00       	mov    $0xf,%eax
	                     : _M_allocated_capacity;
  436a37:	eb 08                	jmp    436a41 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::capacity() const+0x2b>
	return _M_is_local() ? size_type(_S_local_capacity)
  436a39:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  436a3d:	48 8b 40 10          	mov    0x10(%rax),%rax
      }
  436a41:	c9                   	leaveq 
  436a42:	c3                   	retq   
  436a43:	90                   	nop

0000000000436a44 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_set_length(unsigned long)>:
      _M_set_length(size_type __n)
  436a44:	55                   	push   %rbp
  436a45:	48 89 e5             	mov    %rsp,%rbp
  436a48:	48 83 ec 20          	sub    $0x20,%rsp
  436a4c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  436a50:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	_M_length(__n);
  436a54:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  436a58:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  436a5c:	48 89 d6             	mov    %rdx,%rsi
  436a5f:	48 89 c7             	mov    %rax,%rdi
  436a62:	e8 4b 01 00 00       	callq  436bb2 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_length(unsigned long)>
	traits_type::assign(_M_data()[__n], _CharT());
  436a67:	c6 45 ff 00          	movb   $0x0,-0x1(%rbp)
  436a6b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  436a6f:	48 89 c7             	mov    %rax,%rdi
  436a72:	e8 91 fd ff ff       	callq  436808 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_data() const>
  436a77:	48 89 c2             	mov    %rax,%rdx
  436a7a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  436a7e:	48 01 c2             	add    %rax,%rdx
  436a81:	48 8d 45 ff          	lea    -0x1(%rbp),%rax
  436a85:	48 89 c6             	mov    %rax,%rsi
  436a88:	48 89 d7             	mov    %rdx,%rdi
  436a8b:	e8 11 f0 ff ff       	callq  435aa1 <std::char_traits<char>::assign(char&, char const&)>
      }
  436a90:	90                   	nop
  436a91:	c9                   	leaveq 
  436a92:	c3                   	retq   
  436a93:	90                   	nop

0000000000436a94 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::push_back(char)>:
      push_back(_CharT __c)
  436a94:	55                   	push   %rbp
  436a95:	48 89 e5             	mov    %rsp,%rbp
  436a98:	53                   	push   %rbx
  436a99:	48 83 ec 28          	sub    $0x28,%rsp
  436a9d:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  436aa1:	89 f0                	mov    %esi,%eax
  436aa3:	88 45 d4             	mov    %al,-0x2c(%rbp)
	const size_type __size = this->size();
  436aa6:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  436aaa:	48 89 c7             	mov    %rax,%rdi
  436aad:	e8 52 ff ff ff       	callq  436a04 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::size() const>
  436ab2:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	if (__size + 1 > this->capacity())
  436ab6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  436aba:	48 8d 58 01          	lea    0x1(%rax),%rbx
  436abe:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  436ac2:	48 89 c7             	mov    %rax,%rdi
  436ac5:	e8 4c ff ff ff       	callq  436a16 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::capacity() const>
  436aca:	48 39 c3             	cmp    %rax,%rbx
  436acd:	0f 97 c0             	seta   %al
  436ad0:	84 c0                	test   %al,%al
  436ad2:	74 20                	je     436af4 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::push_back(char)+0x60>
	  this->_M_mutate(__size, size_type(0), 0, size_type(1));
  436ad4:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
  436ad8:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  436adc:	41 b8 01 00 00 00    	mov    $0x1,%r8d
  436ae2:	b9 00 00 00 00       	mov    $0x0,%ecx
  436ae7:	ba 00 00 00 00       	mov    $0x0,%edx
  436aec:	48 89 c7             	mov    %rax,%rdi
  436aef:	e8 64 0b 00 00       	callq  437658 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)>
	traits_type::assign(this->_M_data()[__size], __c);
  436af4:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  436af8:	48 89 c7             	mov    %rax,%rdi
  436afb:	e8 08 fd ff ff       	callq  436808 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_data() const>
  436b00:	48 89 c2             	mov    %rax,%rdx
  436b03:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  436b07:	48 01 c2             	add    %rax,%rdx
  436b0a:	48 8d 45 d4          	lea    -0x2c(%rbp),%rax
  436b0e:	48 89 c6             	mov    %rax,%rsi
  436b11:	48 89 d7             	mov    %rdx,%rdi
  436b14:	e8 88 ef ff ff       	callq  435aa1 <std::char_traits<char>::assign(char&, char const&)>
	this->_M_set_length(__size + 1);
  436b19:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  436b1d:	48 8d 50 01          	lea    0x1(%rax),%rdx
  436b21:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  436b25:	48 89 d6             	mov    %rdx,%rsi
  436b28:	48 89 c7             	mov    %rax,%rdi
  436b2b:	e8 14 ff ff ff       	callq  436a44 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_set_length(unsigned long)>
      }
  436b30:	90                   	nop
  436b31:	48 83 c4 28          	add    $0x28,%rsp
  436b35:	5b                   	pop    %rbx
  436b36:	5d                   	pop    %rbp
  436b37:	c3                   	retq   

0000000000436b38 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_get_allocator()>:
      _M_get_allocator()
  436b38:	55                   	push   %rbp
  436b39:	48 89 e5             	mov    %rsp,%rbp
  436b3c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_dataplus; }
  436b40:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  436b44:	5d                   	pop    %rbp
  436b45:	c3                   	retq   

0000000000436b46 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_is_local() const>:
      _M_is_local() const
  436b46:	55                   	push   %rbp
  436b47:	48 89 e5             	mov    %rsp,%rbp
  436b4a:	53                   	push   %rbx
  436b4b:	48 83 ec 18          	sub    $0x18,%rsp
  436b4f:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
      { return _M_data() == _M_local_data(); }
  436b53:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  436b57:	48 89 c7             	mov    %rax,%rdi
  436b5a:	e8 a9 fc ff ff       	callq  436808 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_data() const>
  436b5f:	48 89 c3             	mov    %rax,%rbx
  436b62:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  436b66:	48 89 c7             	mov    %rax,%rdi
  436b69:	e8 32 0c 00 00       	callq  4377a0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_local_data() const>
  436b6e:	48 39 c3             	cmp    %rax,%rbx
  436b71:	0f 94 c0             	sete   %al
  436b74:	48 83 c4 18          	add    $0x18,%rsp
  436b78:	5b                   	pop    %rbx
  436b79:	5d                   	pop    %rbp
  436b7a:	c3                   	retq   
  436b7b:	90                   	nop

0000000000436b7c <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_data(char*)>:
      _M_data(pointer __p)
  436b7c:	55                   	push   %rbp
  436b7d:	48 89 e5             	mov    %rsp,%rbp
  436b80:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  436b84:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      { _M_dataplus._M_p = __p; }
  436b88:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  436b8c:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  436b90:	48 89 10             	mov    %rdx,(%rax)
  436b93:	90                   	nop
  436b94:	5d                   	pop    %rbp
  436b95:	c3                   	retq   

0000000000436b96 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_capacity(unsigned long)>:
      _M_capacity(size_type __capacity)
  436b96:	55                   	push   %rbp
  436b97:	48 89 e5             	mov    %rsp,%rbp
  436b9a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  436b9e:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      { _M_allocated_capacity = __capacity; }
  436ba2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  436ba6:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  436baa:	48 89 50 10          	mov    %rdx,0x10(%rax)
  436bae:	90                   	nop
  436baf:	5d                   	pop    %rbp
  436bb0:	c3                   	retq   
  436bb1:	90                   	nop

0000000000436bb2 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_length(unsigned long)>:
      _M_length(size_type __length)
  436bb2:	55                   	push   %rbp
  436bb3:	48 89 e5             	mov    %rsp,%rbp
  436bb6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  436bba:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      { _M_string_length = __length; }
  436bbe:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  436bc2:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  436bc6:	48 89 50 08          	mov    %rdx,0x8(%rax)
  436bca:	90                   	nop
  436bcb:	5d                   	pop    %rbp
  436bcc:	c3                   	retq   
  436bcd:	90                   	nop

0000000000436bce <__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::__normal_iterator(char const* const&)>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
  436bce:	55                   	push   %rbp
  436bcf:	48 89 e5             	mov    %rsp,%rbp
  436bd2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  436bd6:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      : _M_current(__i) { }
  436bda:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  436bde:	48 8b 10             	mov    (%rax),%rdx
  436be1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  436be5:	48 89 10             	mov    %rdx,(%rax)
  436be8:	90                   	nop
  436be9:	5d                   	pop    %rbp
  436bea:	c3                   	retq   
  436beb:	90                   	nop

0000000000436bec <__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::base() const>:
      base() const _GLIBCXX_NOEXCEPT
  436bec:	55                   	push   %rbp
  436bed:	48 89 e5             	mov    %rsp,%rbp
  436bf0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_current; }
  436bf4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  436bf8:	5d                   	pop    %rbp
  436bf9:	c3                   	retq   

0000000000436bfa <std::__detail::__variant::_Copy_ctor_base<false, x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>::_Variant_storage<4ul, x666::Newline>(std::in_place_index_t<4ul>, x666::Newline&&)>:
      using _Base::_Base;
  436bfa:	55                   	push   %rbp
  436bfb:	48 89 e5             	mov    %rsp,%rbp
  436bfe:	48 83 ec 10          	sub    $0x10,%rsp
  436c02:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  436c06:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  436c0a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  436c0e:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  436c12:	48 83 ec 08          	sub    $0x8,%rsp
  436c16:	0f b6 4d 10          	movzbl 0x10(%rbp),%ecx
  436c1a:	51                   	push   %rcx
  436c1b:	48 89 d6             	mov    %rdx,%rsi
  436c1e:	48 89 c7             	mov    %rax,%rdi
  436c21:	e8 02 0d 00 00       	callq  437928 <std::__detail::__variant::_Variant_storage<false, x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>::_Variant_storage<4ul, x666::Newline>(std::in_place_index_t<4ul>, x666::Newline&&)>
  436c26:	48 83 c4 10          	add    $0x10,%rsp
  436c2a:	90                   	nop
  436c2b:	c9                   	leaveq 
  436c2c:	c3                   	retq   
  436c2d:	90                   	nop

0000000000436c2e <std::__detail::__variant::_Move_ctor_base<false, x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>::_Variant_storage<4ul, x666::Newline>(std::in_place_index_t<4ul>, x666::Newline&&)>:
      using _Base::_Base;
  436c2e:	55                   	push   %rbp
  436c2f:	48 89 e5             	mov    %rsp,%rbp
  436c32:	48 83 ec 10          	sub    $0x10,%rsp
  436c36:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  436c3a:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  436c3e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  436c42:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  436c46:	48 83 ec 08          	sub    $0x8,%rsp
  436c4a:	0f b6 4d 10          	movzbl 0x10(%rbp),%ecx
  436c4e:	51                   	push   %rcx
  436c4f:	48 89 d6             	mov    %rdx,%rsi
  436c52:	48 89 c7             	mov    %rax,%rdi
  436c55:	e8 a0 ff ff ff       	callq  436bfa <std::__detail::__variant::_Copy_ctor_base<false, x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>::_Variant_storage<4ul, x666::Newline>(std::in_place_index_t<4ul>, x666::Newline&&)>
  436c5a:	48 83 c4 10          	add    $0x10,%rsp
  436c5e:	90                   	nop
  436c5f:	c9                   	leaveq 
  436c60:	c3                   	retq   
  436c61:	90                   	nop

0000000000436c62 <std::__detail::__variant::_Copy_assign_base<false, x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>::_Variant_storage<4ul, x666::Newline>(std::in_place_index_t<4ul>, x666::Newline&&)>:
      using _Base::_Base;
  436c62:	55                   	push   %rbp
  436c63:	48 89 e5             	mov    %rsp,%rbp
  436c66:	48 83 ec 10          	sub    $0x10,%rsp
  436c6a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  436c6e:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  436c72:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  436c76:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  436c7a:	48 83 ec 08          	sub    $0x8,%rsp
  436c7e:	0f b6 4d 10          	movzbl 0x10(%rbp),%ecx
  436c82:	51                   	push   %rcx
  436c83:	48 89 d6             	mov    %rdx,%rsi
  436c86:	48 89 c7             	mov    %rax,%rdi
  436c89:	e8 a0 ff ff ff       	callq  436c2e <std::__detail::__variant::_Move_ctor_base<false, x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>::_Variant_storage<4ul, x666::Newline>(std::in_place_index_t<4ul>, x666::Newline&&)>
  436c8e:	48 83 c4 10          	add    $0x10,%rsp
  436c92:	90                   	nop
  436c93:	c9                   	leaveq 
  436c94:	c3                   	retq   
  436c95:	90                   	nop

0000000000436c96 <std::__detail::__variant::_Move_assign_base<false, x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>::_Variant_storage<4ul, x666::Newline>(std::in_place_index_t<4ul>, x666::Newline&&)>:
      using _Base::_Base;
  436c96:	55                   	push   %rbp
  436c97:	48 89 e5             	mov    %rsp,%rbp
  436c9a:	48 83 ec 10          	sub    $0x10,%rsp
  436c9e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  436ca2:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  436ca6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  436caa:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  436cae:	48 83 ec 08          	sub    $0x8,%rsp
  436cb2:	0f b6 4d 10          	movzbl 0x10(%rbp),%ecx
  436cb6:	51                   	push   %rcx
  436cb7:	48 89 d6             	mov    %rdx,%rsi
  436cba:	48 89 c7             	mov    %rax,%rdi
  436cbd:	e8 a0 ff ff ff       	callq  436c62 <std::__detail::__variant::_Copy_assign_base<false, x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>::_Variant_storage<4ul, x666::Newline>(std::in_place_index_t<4ul>, x666::Newline&&)>
  436cc2:	48 83 c4 10          	add    $0x10,%rsp
  436cc6:	90                   	nop
  436cc7:	c9                   	leaveq 
  436cc8:	c3                   	retq   
  436cc9:	90                   	nop

0000000000436cca <std::__detail::__variant::_Variant_base<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>::_Variant_base<4ul, x666::Newline>(std::in_place_index_t<4ul>, x666::Newline&&)>:
	_Variant_base(in_place_index_t<_Np> __i, _Args&&... __args)
  436cca:	55                   	push   %rbp
  436ccb:	48 89 e5             	mov    %rsp,%rbp
  436cce:	41 54                	push   %r12
  436cd0:	53                   	push   %rbx
  436cd1:	48 83 ec 10          	sub    $0x10,%rsp
  436cd5:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  436cd9:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	: _Base(__i, std::forward<_Args>(__args)...)
  436cdd:	48 8b 5d e8          	mov    -0x18(%rbp),%rbx
  436ce1:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  436ce5:	48 89 c7             	mov    %rax,%rdi
  436ce8:	e8 26 f5 ff ff       	callq  436213 <x666::Newline&& std::forward<x666::Newline>(std::remove_reference<x666::Newline>::type&)>
  436ced:	48 83 ec 08          	sub    $0x8,%rsp
  436cf1:	41 54                	push   %r12
  436cf3:	48 89 c6             	mov    %rax,%rsi
  436cf6:	48 89 df             	mov    %rbx,%rdi
  436cf9:	e8 98 ff ff ff       	callq  436c96 <std::__detail::__variant::_Move_assign_base<false, x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>::_Variant_storage<4ul, x666::Newline>(std::in_place_index_t<4ul>, x666::Newline&&)>
  436cfe:	48 83 c4 10          	add    $0x10,%rsp
	{ }
  436d02:	90                   	nop
  436d03:	48 8d 65 f0          	lea    -0x10(%rbp),%rsp
  436d07:	5b                   	pop    %rbx
  436d08:	41 5c                	pop    %r12
  436d0a:	5d                   	pop    %rbp
  436d0b:	c3                   	retq   

0000000000436d0c <std::_Enable_default_constructor<false, std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> >::_Enable_default_constructor(std::_Enable_default_constructor_tag)>:
    _Enable_default_constructor&
    operator=(_Enable_default_constructor&&) noexcept = default;

    // Can be used in other ctors.
    constexpr explicit
    _Enable_default_constructor(_Enable_default_constructor_tag) { }
  436d0c:	55                   	push   %rbp
  436d0d:	48 89 e5             	mov    %rsp,%rbp
  436d10:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  436d14:	90                   	nop
  436d15:	5d                   	pop    %rbp
  436d16:	c3                   	retq   
  436d17:	90                   	nop

0000000000436d18 <std::__detail::__variant::_Copy_ctor_base<false, x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>::_Variant_storage<5ul, x666::EndOfFile>(std::in_place_index_t<5ul>, x666::EndOfFile&&)>:
      using _Base::_Base;
  436d18:	55                   	push   %rbp
  436d19:	48 89 e5             	mov    %rsp,%rbp
  436d1c:	48 83 ec 10          	sub    $0x10,%rsp
  436d20:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  436d24:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  436d28:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  436d2c:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  436d30:	48 83 ec 08          	sub    $0x8,%rsp
  436d34:	0f b6 4d 10          	movzbl 0x10(%rbp),%ecx
  436d38:	51                   	push   %rcx
  436d39:	48 89 d6             	mov    %rdx,%rsi
  436d3c:	48 89 c7             	mov    %rax,%rdi
  436d3f:	e8 da 0d 00 00       	callq  437b1e <std::__detail::__variant::_Variant_storage<false, x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>::_Variant_storage<5ul, x666::EndOfFile>(std::in_place_index_t<5ul>, x666::EndOfFile&&)>
  436d44:	48 83 c4 10          	add    $0x10,%rsp
  436d48:	90                   	nop
  436d49:	c9                   	leaveq 
  436d4a:	c3                   	retq   
  436d4b:	90                   	nop

0000000000436d4c <std::__detail::__variant::_Move_ctor_base<false, x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>::_Variant_storage<5ul, x666::EndOfFile>(std::in_place_index_t<5ul>, x666::EndOfFile&&)>:
      using _Base::_Base;
  436d4c:	55                   	push   %rbp
  436d4d:	48 89 e5             	mov    %rsp,%rbp
  436d50:	48 83 ec 10          	sub    $0x10,%rsp
  436d54:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  436d58:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  436d5c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  436d60:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  436d64:	48 83 ec 08          	sub    $0x8,%rsp
  436d68:	0f b6 4d 10          	movzbl 0x10(%rbp),%ecx
  436d6c:	51                   	push   %rcx
  436d6d:	48 89 d6             	mov    %rdx,%rsi
  436d70:	48 89 c7             	mov    %rax,%rdi
  436d73:	e8 a0 ff ff ff       	callq  436d18 <std::__detail::__variant::_Copy_ctor_base<false, x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>::_Variant_storage<5ul, x666::EndOfFile>(std::in_place_index_t<5ul>, x666::EndOfFile&&)>
  436d78:	48 83 c4 10          	add    $0x10,%rsp
  436d7c:	90                   	nop
  436d7d:	c9                   	leaveq 
  436d7e:	c3                   	retq   
  436d7f:	90                   	nop

0000000000436d80 <std::__detail::__variant::_Copy_assign_base<false, x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>::_Variant_storage<5ul, x666::EndOfFile>(std::in_place_index_t<5ul>, x666::EndOfFile&&)>:
      using _Base::_Base;
  436d80:	55                   	push   %rbp
  436d81:	48 89 e5             	mov    %rsp,%rbp
  436d84:	48 83 ec 10          	sub    $0x10,%rsp
  436d88:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  436d8c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  436d90:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  436d94:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  436d98:	48 83 ec 08          	sub    $0x8,%rsp
  436d9c:	0f b6 4d 10          	movzbl 0x10(%rbp),%ecx
  436da0:	51                   	push   %rcx
  436da1:	48 89 d6             	mov    %rdx,%rsi
  436da4:	48 89 c7             	mov    %rax,%rdi
  436da7:	e8 a0 ff ff ff       	callq  436d4c <std::__detail::__variant::_Move_ctor_base<false, x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>::_Variant_storage<5ul, x666::EndOfFile>(std::in_place_index_t<5ul>, x666::EndOfFile&&)>
  436dac:	48 83 c4 10          	add    $0x10,%rsp
  436db0:	90                   	nop
  436db1:	c9                   	leaveq 
  436db2:	c3                   	retq   
  436db3:	90                   	nop

0000000000436db4 <std::__detail::__variant::_Move_assign_base<false, x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>::_Variant_storage<5ul, x666::EndOfFile>(std::in_place_index_t<5ul>, x666::EndOfFile&&)>:
      using _Base::_Base;
  436db4:	55                   	push   %rbp
  436db5:	48 89 e5             	mov    %rsp,%rbp
  436db8:	48 83 ec 10          	sub    $0x10,%rsp
  436dbc:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  436dc0:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  436dc4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  436dc8:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  436dcc:	48 83 ec 08          	sub    $0x8,%rsp
  436dd0:	0f b6 4d 10          	movzbl 0x10(%rbp),%ecx
  436dd4:	51                   	push   %rcx
  436dd5:	48 89 d6             	mov    %rdx,%rsi
  436dd8:	48 89 c7             	mov    %rax,%rdi
  436ddb:	e8 a0 ff ff ff       	callq  436d80 <std::__detail::__variant::_Copy_assign_base<false, x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>::_Variant_storage<5ul, x666::EndOfFile>(std::in_place_index_t<5ul>, x666::EndOfFile&&)>
  436de0:	48 83 c4 10          	add    $0x10,%rsp
  436de4:	90                   	nop
  436de5:	c9                   	leaveq 
  436de6:	c3                   	retq   
  436de7:	90                   	nop

0000000000436de8 <std::__detail::__variant::_Variant_base<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>::_Variant_base<5ul, x666::EndOfFile>(std::in_place_index_t<5ul>, x666::EndOfFile&&)>:
	_Variant_base(in_place_index_t<_Np> __i, _Args&&... __args)
  436de8:	55                   	push   %rbp
  436de9:	48 89 e5             	mov    %rsp,%rbp
  436dec:	41 54                	push   %r12
  436dee:	53                   	push   %rbx
  436def:	48 83 ec 10          	sub    $0x10,%rsp
  436df3:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  436df7:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	: _Base(__i, std::forward<_Args>(__args)...)
  436dfb:	48 8b 5d e8          	mov    -0x18(%rbp),%rbx
  436dff:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  436e03:	48 89 c7             	mov    %rax,%rdi
  436e06:	e8 c4 f4 ff ff       	callq  4362cf <x666::EndOfFile&& std::forward<x666::EndOfFile>(std::remove_reference<x666::EndOfFile>::type&)>
  436e0b:	48 83 ec 08          	sub    $0x8,%rsp
  436e0f:	41 54                	push   %r12
  436e11:	48 89 c6             	mov    %rax,%rsi
  436e14:	48 89 df             	mov    %rbx,%rdi
  436e17:	e8 98 ff ff ff       	callq  436db4 <std::__detail::__variant::_Move_assign_base<false, x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>::_Variant_storage<5ul, x666::EndOfFile>(std::in_place_index_t<5ul>, x666::EndOfFile&&)>
  436e1c:	48 83 c4 10          	add    $0x10,%rsp
	{ }
  436e20:	90                   	nop
  436e21:	48 8d 65 f0          	lea    -0x10(%rbp),%rsp
  436e25:	5b                   	pop    %rbx
  436e26:	41 5c                	pop    %r12
  436e28:	5d                   	pop    %rbp
  436e29:	c3                   	retq   

0000000000436e2a <std::__detail::__variant::_Copy_ctor_base<false, x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>::_Variant_storage<3ul, x666::Operator>(std::in_place_index_t<3ul>, x666::Operator&&)>:
      using _Base::_Base;
  436e2a:	55                   	push   %rbp
  436e2b:	48 89 e5             	mov    %rsp,%rbp
  436e2e:	48 83 ec 10          	sub    $0x10,%rsp
  436e32:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  436e36:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  436e3a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  436e3e:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  436e42:	48 83 ec 08          	sub    $0x8,%rsp
  436e46:	0f b6 4d 10          	movzbl 0x10(%rbp),%ecx
  436e4a:	51                   	push   %rcx
  436e4b:	48 89 d6             	mov    %rdx,%rsi
  436e4e:	48 89 c7             	mov    %rax,%rdi
  436e51:	e8 42 0e 00 00       	callq  437c98 <std::__detail::__variant::_Variant_storage<false, x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>::_Variant_storage<3ul, x666::Operator>(std::in_place_index_t<3ul>, x666::Operator&&)>
  436e56:	48 83 c4 10          	add    $0x10,%rsp
  436e5a:	90                   	nop
  436e5b:	c9                   	leaveq 
  436e5c:	c3                   	retq   
  436e5d:	90                   	nop

0000000000436e5e <std::__detail::__variant::_Move_ctor_base<false, x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>::_Variant_storage<3ul, x666::Operator>(std::in_place_index_t<3ul>, x666::Operator&&)>:
      using _Base::_Base;
  436e5e:	55                   	push   %rbp
  436e5f:	48 89 e5             	mov    %rsp,%rbp
  436e62:	48 83 ec 10          	sub    $0x10,%rsp
  436e66:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  436e6a:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  436e6e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  436e72:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  436e76:	48 83 ec 08          	sub    $0x8,%rsp
  436e7a:	0f b6 4d 10          	movzbl 0x10(%rbp),%ecx
  436e7e:	51                   	push   %rcx
  436e7f:	48 89 d6             	mov    %rdx,%rsi
  436e82:	48 89 c7             	mov    %rax,%rdi
  436e85:	e8 a0 ff ff ff       	callq  436e2a <std::__detail::__variant::_Copy_ctor_base<false, x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>::_Variant_storage<3ul, x666::Operator>(std::in_place_index_t<3ul>, x666::Operator&&)>
  436e8a:	48 83 c4 10          	add    $0x10,%rsp
  436e8e:	90                   	nop
  436e8f:	c9                   	leaveq 
  436e90:	c3                   	retq   
  436e91:	90                   	nop

0000000000436e92 <std::__detail::__variant::_Copy_assign_base<false, x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>::_Variant_storage<3ul, x666::Operator>(std::in_place_index_t<3ul>, x666::Operator&&)>:
      using _Base::_Base;
  436e92:	55                   	push   %rbp
  436e93:	48 89 e5             	mov    %rsp,%rbp
  436e96:	48 83 ec 10          	sub    $0x10,%rsp
  436e9a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  436e9e:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  436ea2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  436ea6:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  436eaa:	48 83 ec 08          	sub    $0x8,%rsp
  436eae:	0f b6 4d 10          	movzbl 0x10(%rbp),%ecx
  436eb2:	51                   	push   %rcx
  436eb3:	48 89 d6             	mov    %rdx,%rsi
  436eb6:	48 89 c7             	mov    %rax,%rdi
  436eb9:	e8 a0 ff ff ff       	callq  436e5e <std::__detail::__variant::_Move_ctor_base<false, x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>::_Variant_storage<3ul, x666::Operator>(std::in_place_index_t<3ul>, x666::Operator&&)>
  436ebe:	48 83 c4 10          	add    $0x10,%rsp
  436ec2:	90                   	nop
  436ec3:	c9                   	leaveq 
  436ec4:	c3                   	retq   
  436ec5:	90                   	nop

0000000000436ec6 <std::__detail::__variant::_Move_assign_base<false, x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>::_Variant_storage<3ul, x666::Operator>(std::in_place_index_t<3ul>, x666::Operator&&)>:
      using _Base::_Base;
  436ec6:	55                   	push   %rbp
  436ec7:	48 89 e5             	mov    %rsp,%rbp
  436eca:	48 83 ec 10          	sub    $0x10,%rsp
  436ece:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  436ed2:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  436ed6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  436eda:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  436ede:	48 83 ec 08          	sub    $0x8,%rsp
  436ee2:	0f b6 4d 10          	movzbl 0x10(%rbp),%ecx
  436ee6:	51                   	push   %rcx
  436ee7:	48 89 d6             	mov    %rdx,%rsi
  436eea:	48 89 c7             	mov    %rax,%rdi
  436eed:	e8 a0 ff ff ff       	callq  436e92 <std::__detail::__variant::_Copy_assign_base<false, x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>::_Variant_storage<3ul, x666::Operator>(std::in_place_index_t<3ul>, x666::Operator&&)>
  436ef2:	48 83 c4 10          	add    $0x10,%rsp
  436ef6:	90                   	nop
  436ef7:	c9                   	leaveq 
  436ef8:	c3                   	retq   
  436ef9:	90                   	nop

0000000000436efa <std::__detail::__variant::_Variant_base<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>::_Variant_base<3ul, x666::Operator>(std::in_place_index_t<3ul>, x666::Operator&&)>:
	_Variant_base(in_place_index_t<_Np> __i, _Args&&... __args)
  436efa:	55                   	push   %rbp
  436efb:	48 89 e5             	mov    %rsp,%rbp
  436efe:	41 54                	push   %r12
  436f00:	53                   	push   %rbx
  436f01:	48 83 ec 10          	sub    $0x10,%rsp
  436f05:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  436f09:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	: _Base(__i, std::forward<_Args>(__args)...)
  436f0d:	48 8b 5d e8          	mov    -0x18(%rbp),%rbx
  436f11:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  436f15:	48 89 c7             	mov    %rax,%rdi
  436f18:	e8 5c f4 ff ff       	callq  436379 <x666::Operator&& std::forward<x666::Operator>(std::remove_reference<x666::Operator>::type&)>
  436f1d:	48 83 ec 08          	sub    $0x8,%rsp
  436f21:	41 54                	push   %r12
  436f23:	48 89 c6             	mov    %rax,%rsi
  436f26:	48 89 df             	mov    %rbx,%rdi
  436f29:	e8 98 ff ff ff       	callq  436ec6 <std::__detail::__variant::_Move_assign_base<false, x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>::_Variant_storage<3ul, x666::Operator>(std::in_place_index_t<3ul>, x666::Operator&&)>
  436f2e:	48 83 c4 10          	add    $0x10,%rsp
	{ }
  436f32:	90                   	nop
  436f33:	48 8d 65 f0          	lea    -0x10(%rbp),%rsp
  436f37:	5b                   	pop    %rbx
  436f38:	41 5c                	pop    %r12
  436f3a:	5d                   	pop    %rbp
  436f3b:	c3                   	retq   

0000000000436f3c <std::__detail::__variant::_Copy_ctor_base<false, x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>::_Variant_storage<6ul, x666::LexError>(std::in_place_index_t<6ul>, x666::LexError&&)>:
      using _Base::_Base;
  436f3c:	55                   	push   %rbp
  436f3d:	48 89 e5             	mov    %rsp,%rbp
  436f40:	48 83 ec 10          	sub    $0x10,%rsp
  436f44:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  436f48:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  436f4c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  436f50:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  436f54:	48 83 ec 08          	sub    $0x8,%rsp
  436f58:	0f b6 4d 10          	movzbl 0x10(%rbp),%ecx
  436f5c:	51                   	push   %rcx
  436f5d:	48 89 d6             	mov    %rdx,%rsi
  436f60:	48 89 c7             	mov    %rax,%rdi
  436f63:	e8 aa 0f 00 00       	callq  437f12 <std::__detail::__variant::_Variant_storage<false, x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>::_Variant_storage<6ul, x666::LexError>(std::in_place_index_t<6ul>, x666::LexError&&)>
  436f68:	48 83 c4 10          	add    $0x10,%rsp
  436f6c:	90                   	nop
  436f6d:	c9                   	leaveq 
  436f6e:	c3                   	retq   
  436f6f:	90                   	nop

0000000000436f70 <std::__detail::__variant::_Move_ctor_base<false, x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>::_Variant_storage<6ul, x666::LexError>(std::in_place_index_t<6ul>, x666::LexError&&)>:
      using _Base::_Base;
  436f70:	55                   	push   %rbp
  436f71:	48 89 e5             	mov    %rsp,%rbp
  436f74:	48 83 ec 10          	sub    $0x10,%rsp
  436f78:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  436f7c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  436f80:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  436f84:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  436f88:	48 83 ec 08          	sub    $0x8,%rsp
  436f8c:	0f b6 4d 10          	movzbl 0x10(%rbp),%ecx
  436f90:	51                   	push   %rcx
  436f91:	48 89 d6             	mov    %rdx,%rsi
  436f94:	48 89 c7             	mov    %rax,%rdi
  436f97:	e8 a0 ff ff ff       	callq  436f3c <std::__detail::__variant::_Copy_ctor_base<false, x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>::_Variant_storage<6ul, x666::LexError>(std::in_place_index_t<6ul>, x666::LexError&&)>
  436f9c:	48 83 c4 10          	add    $0x10,%rsp
  436fa0:	90                   	nop
  436fa1:	c9                   	leaveq 
  436fa2:	c3                   	retq   
  436fa3:	90                   	nop

0000000000436fa4 <std::__detail::__variant::_Copy_assign_base<false, x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>::_Variant_storage<6ul, x666::LexError>(std::in_place_index_t<6ul>, x666::LexError&&)>:
      using _Base::_Base;
  436fa4:	55                   	push   %rbp
  436fa5:	48 89 e5             	mov    %rsp,%rbp
  436fa8:	48 83 ec 10          	sub    $0x10,%rsp
  436fac:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  436fb0:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  436fb4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  436fb8:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  436fbc:	48 83 ec 08          	sub    $0x8,%rsp
  436fc0:	0f b6 4d 10          	movzbl 0x10(%rbp),%ecx
  436fc4:	51                   	push   %rcx
  436fc5:	48 89 d6             	mov    %rdx,%rsi
  436fc8:	48 89 c7             	mov    %rax,%rdi
  436fcb:	e8 a0 ff ff ff       	callq  436f70 <std::__detail::__variant::_Move_ctor_base<false, x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>::_Variant_storage<6ul, x666::LexError>(std::in_place_index_t<6ul>, x666::LexError&&)>
  436fd0:	48 83 c4 10          	add    $0x10,%rsp
  436fd4:	90                   	nop
  436fd5:	c9                   	leaveq 
  436fd6:	c3                   	retq   
  436fd7:	90                   	nop

0000000000436fd8 <std::__detail::__variant::_Move_assign_base<false, x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>::_Variant_storage<6ul, x666::LexError>(std::in_place_index_t<6ul>, x666::LexError&&)>:
      using _Base::_Base;
  436fd8:	55                   	push   %rbp
  436fd9:	48 89 e5             	mov    %rsp,%rbp
  436fdc:	48 83 ec 10          	sub    $0x10,%rsp
  436fe0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  436fe4:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  436fe8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  436fec:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  436ff0:	48 83 ec 08          	sub    $0x8,%rsp
  436ff4:	0f b6 4d 10          	movzbl 0x10(%rbp),%ecx
  436ff8:	51                   	push   %rcx
  436ff9:	48 89 d6             	mov    %rdx,%rsi
  436ffc:	48 89 c7             	mov    %rax,%rdi
  436fff:	e8 a0 ff ff ff       	callq  436fa4 <std::__detail::__variant::_Copy_assign_base<false, x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>::_Variant_storage<6ul, x666::LexError>(std::in_place_index_t<6ul>, x666::LexError&&)>
  437004:	48 83 c4 10          	add    $0x10,%rsp
  437008:	90                   	nop
  437009:	c9                   	leaveq 
  43700a:	c3                   	retq   
  43700b:	90                   	nop

000000000043700c <std::__detail::__variant::_Variant_base<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>::_Variant_base<6ul, x666::LexError>(std::in_place_index_t<6ul>, x666::LexError&&)>:
	_Variant_base(in_place_index_t<_Np> __i, _Args&&... __args)
  43700c:	55                   	push   %rbp
  43700d:	48 89 e5             	mov    %rsp,%rbp
  437010:	41 54                	push   %r12
  437012:	53                   	push   %rbx
  437013:	48 83 ec 10          	sub    $0x10,%rsp
  437017:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  43701b:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	: _Base(__i, std::forward<_Args>(__args)...)
  43701f:	48 8b 5d e8          	mov    -0x18(%rbp),%rbx
  437023:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  437027:	48 89 c7             	mov    %rax,%rdi
  43702a:	e8 f4 f3 ff ff       	callq  436423 <x666::LexError&& std::forward<x666::LexError>(std::remove_reference<x666::LexError>::type&)>
  43702f:	48 83 ec 08          	sub    $0x8,%rsp
  437033:	41 54                	push   %r12
  437035:	48 89 c6             	mov    %rax,%rsi
  437038:	48 89 df             	mov    %rbx,%rdi
  43703b:	e8 98 ff ff ff       	callq  436fd8 <std::__detail::__variant::_Move_assign_base<false, x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>::_Variant_storage<6ul, x666::LexError>(std::in_place_index_t<6ul>, x666::LexError&&)>
  437040:	48 83 c4 10          	add    $0x10,%rsp
	{ }
  437044:	90                   	nop
  437045:	48 8d 65 f0          	lea    -0x10(%rbp),%rsp
  437049:	5b                   	pop    %rbx
  43704a:	41 5c                	pop    %r12
  43704c:	5d                   	pop    %rbp
  43704d:	c3                   	retq   

000000000043704e <std::__detail::__variant::_Copy_ctor_base<false, x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>::_Variant_storage<2ul, x666::IntLiteral>(std::in_place_index_t<2ul>, x666::IntLiteral&&)>:
      using _Base::_Base;
  43704e:	55                   	push   %rbp
  43704f:	48 89 e5             	mov    %rsp,%rbp
  437052:	48 83 ec 10          	sub    $0x10,%rsp
  437056:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  43705a:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  43705e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  437062:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  437066:	48 83 ec 08          	sub    $0x8,%rsp
  43706a:	0f b6 4d 10          	movzbl 0x10(%rbp),%ecx
  43706e:	51                   	push   %rcx
  43706f:	48 89 d6             	mov    %rdx,%rsi
  437072:	48 89 c7             	mov    %rax,%rdi
  437075:	e8 ea 0f 00 00       	callq  438064 <std::__detail::__variant::_Variant_storage<false, x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>::_Variant_storage<2ul, x666::IntLiteral>(std::in_place_index_t<2ul>, x666::IntLiteral&&)>
  43707a:	48 83 c4 10          	add    $0x10,%rsp
  43707e:	90                   	nop
  43707f:	c9                   	leaveq 
  437080:	c3                   	retq   
  437081:	90                   	nop

0000000000437082 <std::__detail::__variant::_Move_ctor_base<false, x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>::_Variant_storage<2ul, x666::IntLiteral>(std::in_place_index_t<2ul>, x666::IntLiteral&&)>:
      using _Base::_Base;
  437082:	55                   	push   %rbp
  437083:	48 89 e5             	mov    %rsp,%rbp
  437086:	48 83 ec 10          	sub    $0x10,%rsp
  43708a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  43708e:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  437092:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  437096:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  43709a:	48 83 ec 08          	sub    $0x8,%rsp
  43709e:	0f b6 4d 10          	movzbl 0x10(%rbp),%ecx
  4370a2:	51                   	push   %rcx
  4370a3:	48 89 d6             	mov    %rdx,%rsi
  4370a6:	48 89 c7             	mov    %rax,%rdi
  4370a9:	e8 a0 ff ff ff       	callq  43704e <std::__detail::__variant::_Copy_ctor_base<false, x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>::_Variant_storage<2ul, x666::IntLiteral>(std::in_place_index_t<2ul>, x666::IntLiteral&&)>
  4370ae:	48 83 c4 10          	add    $0x10,%rsp
  4370b2:	90                   	nop
  4370b3:	c9                   	leaveq 
  4370b4:	c3                   	retq   
  4370b5:	90                   	nop

00000000004370b6 <std::__detail::__variant::_Copy_assign_base<false, x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>::_Variant_storage<2ul, x666::IntLiteral>(std::in_place_index_t<2ul>, x666::IntLiteral&&)>:
      using _Base::_Base;
  4370b6:	55                   	push   %rbp
  4370b7:	48 89 e5             	mov    %rsp,%rbp
  4370ba:	48 83 ec 10          	sub    $0x10,%rsp
  4370be:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4370c2:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  4370c6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4370ca:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  4370ce:	48 83 ec 08          	sub    $0x8,%rsp
  4370d2:	0f b6 4d 10          	movzbl 0x10(%rbp),%ecx
  4370d6:	51                   	push   %rcx
  4370d7:	48 89 d6             	mov    %rdx,%rsi
  4370da:	48 89 c7             	mov    %rax,%rdi
  4370dd:	e8 a0 ff ff ff       	callq  437082 <std::__detail::__variant::_Move_ctor_base<false, x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>::_Variant_storage<2ul, x666::IntLiteral>(std::in_place_index_t<2ul>, x666::IntLiteral&&)>
  4370e2:	48 83 c4 10          	add    $0x10,%rsp
  4370e6:	90                   	nop
  4370e7:	c9                   	leaveq 
  4370e8:	c3                   	retq   
  4370e9:	90                   	nop

00000000004370ea <std::__detail::__variant::_Move_assign_base<false, x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>::_Variant_storage<2ul, x666::IntLiteral>(std::in_place_index_t<2ul>, x666::IntLiteral&&)>:
      using _Base::_Base;
  4370ea:	55                   	push   %rbp
  4370eb:	48 89 e5             	mov    %rsp,%rbp
  4370ee:	48 83 ec 10          	sub    $0x10,%rsp
  4370f2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4370f6:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  4370fa:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4370fe:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  437102:	48 83 ec 08          	sub    $0x8,%rsp
  437106:	0f b6 4d 10          	movzbl 0x10(%rbp),%ecx
  43710a:	51                   	push   %rcx
  43710b:	48 89 d6             	mov    %rdx,%rsi
  43710e:	48 89 c7             	mov    %rax,%rdi
  437111:	e8 a0 ff ff ff       	callq  4370b6 <std::__detail::__variant::_Copy_assign_base<false, x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>::_Variant_storage<2ul, x666::IntLiteral>(std::in_place_index_t<2ul>, x666::IntLiteral&&)>
  437116:	48 83 c4 10          	add    $0x10,%rsp
  43711a:	90                   	nop
  43711b:	c9                   	leaveq 
  43711c:	c3                   	retq   
  43711d:	90                   	nop

000000000043711e <std::__detail::__variant::_Variant_base<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>::_Variant_base<2ul, x666::IntLiteral>(std::in_place_index_t<2ul>, x666::IntLiteral&&)>:
	_Variant_base(in_place_index_t<_Np> __i, _Args&&... __args)
  43711e:	55                   	push   %rbp
  43711f:	48 89 e5             	mov    %rsp,%rbp
  437122:	41 54                	push   %r12
  437124:	53                   	push   %rbx
  437125:	48 83 ec 10          	sub    $0x10,%rsp
  437129:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  43712d:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	: _Base(__i, std::forward<_Args>(__args)...)
  437131:	48 8b 5d e8          	mov    -0x18(%rbp),%rbx
  437135:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  437139:	48 89 c7             	mov    %rax,%rdi
  43713c:	e8 8c f3 ff ff       	callq  4364cd <x666::IntLiteral&& std::forward<x666::IntLiteral>(std::remove_reference<x666::IntLiteral>::type&)>
  437141:	48 83 ec 08          	sub    $0x8,%rsp
  437145:	41 54                	push   %r12
  437147:	48 89 c6             	mov    %rax,%rsi
  43714a:	48 89 df             	mov    %rbx,%rdi
  43714d:	e8 98 ff ff ff       	callq  4370ea <std::__detail::__variant::_Move_assign_base<false, x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>::_Variant_storage<2ul, x666::IntLiteral>(std::in_place_index_t<2ul>, x666::IntLiteral&&)>
  437152:	48 83 c4 10          	add    $0x10,%rsp
	{ }
  437156:	90                   	nop
  437157:	48 8d 65 f0          	lea    -0x10(%rbp),%rsp
  43715b:	5b                   	pop    %rbx
  43715c:	41 5c                	pop    %r12
  43715e:	5d                   	pop    %rbp
  43715f:	c3                   	retq   

0000000000437160 <std::__detail::__variant::_Copy_ctor_base<false, x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>::_Variant_storage<0ul, x666::Identifier>(std::in_place_index_t<0ul>, x666::Identifier&&)>:
      using _Base::_Base;
  437160:	55                   	push   %rbp
  437161:	48 89 e5             	mov    %rsp,%rbp
  437164:	48 83 ec 10          	sub    $0x10,%rsp
  437168:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  43716c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  437170:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  437174:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  437178:	48 83 ec 08          	sub    $0x8,%rsp
  43717c:	0f b6 4d 10          	movzbl 0x10(%rbp),%ecx
  437180:	51                   	push   %rcx
  437181:	48 89 d6             	mov    %rdx,%rsi
  437184:	48 89 c7             	mov    %rax,%rdi
  437187:	e8 ce 0f 00 00       	callq  43815a <std::__detail::__variant::_Variant_storage<false, x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>::_Variant_storage<0ul, x666::Identifier>(std::in_place_index_t<0ul>, x666::Identifier&&)>
  43718c:	48 83 c4 10          	add    $0x10,%rsp
  437190:	90                   	nop
  437191:	c9                   	leaveq 
  437192:	c3                   	retq   
  437193:	90                   	nop

0000000000437194 <std::__detail::__variant::_Move_ctor_base<false, x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>::_Variant_storage<0ul, x666::Identifier>(std::in_place_index_t<0ul>, x666::Identifier&&)>:
      using _Base::_Base;
  437194:	55                   	push   %rbp
  437195:	48 89 e5             	mov    %rsp,%rbp
  437198:	48 83 ec 10          	sub    $0x10,%rsp
  43719c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4371a0:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  4371a4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4371a8:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  4371ac:	48 83 ec 08          	sub    $0x8,%rsp
  4371b0:	0f b6 4d 10          	movzbl 0x10(%rbp),%ecx
  4371b4:	51                   	push   %rcx
  4371b5:	48 89 d6             	mov    %rdx,%rsi
  4371b8:	48 89 c7             	mov    %rax,%rdi
  4371bb:	e8 a0 ff ff ff       	callq  437160 <std::__detail::__variant::_Copy_ctor_base<false, x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>::_Variant_storage<0ul, x666::Identifier>(std::in_place_index_t<0ul>, x666::Identifier&&)>
  4371c0:	48 83 c4 10          	add    $0x10,%rsp
  4371c4:	90                   	nop
  4371c5:	c9                   	leaveq 
  4371c6:	c3                   	retq   
  4371c7:	90                   	nop

00000000004371c8 <std::__detail::__variant::_Copy_assign_base<false, x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>::_Variant_storage<0ul, x666::Identifier>(std::in_place_index_t<0ul>, x666::Identifier&&)>:
      using _Base::_Base;
  4371c8:	55                   	push   %rbp
  4371c9:	48 89 e5             	mov    %rsp,%rbp
  4371cc:	48 83 ec 10          	sub    $0x10,%rsp
  4371d0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4371d4:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  4371d8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4371dc:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  4371e0:	48 83 ec 08          	sub    $0x8,%rsp
  4371e4:	0f b6 4d 10          	movzbl 0x10(%rbp),%ecx
  4371e8:	51                   	push   %rcx
  4371e9:	48 89 d6             	mov    %rdx,%rsi
  4371ec:	48 89 c7             	mov    %rax,%rdi
  4371ef:	e8 a0 ff ff ff       	callq  437194 <std::__detail::__variant::_Move_ctor_base<false, x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>::_Variant_storage<0ul, x666::Identifier>(std::in_place_index_t<0ul>, x666::Identifier&&)>
  4371f4:	48 83 c4 10          	add    $0x10,%rsp
  4371f8:	90                   	nop
  4371f9:	c9                   	leaveq 
  4371fa:	c3                   	retq   
  4371fb:	90                   	nop

00000000004371fc <std::__detail::__variant::_Move_assign_base<false, x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>::_Variant_storage<0ul, x666::Identifier>(std::in_place_index_t<0ul>, x666::Identifier&&)>:
      using _Base::_Base;
  4371fc:	55                   	push   %rbp
  4371fd:	48 89 e5             	mov    %rsp,%rbp
  437200:	48 83 ec 10          	sub    $0x10,%rsp
  437204:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  437208:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  43720c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  437210:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  437214:	48 83 ec 08          	sub    $0x8,%rsp
  437218:	0f b6 4d 10          	movzbl 0x10(%rbp),%ecx
  43721c:	51                   	push   %rcx
  43721d:	48 89 d6             	mov    %rdx,%rsi
  437220:	48 89 c7             	mov    %rax,%rdi
  437223:	e8 a0 ff ff ff       	callq  4371c8 <std::__detail::__variant::_Copy_assign_base<false, x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>::_Variant_storage<0ul, x666::Identifier>(std::in_place_index_t<0ul>, x666::Identifier&&)>
  437228:	48 83 c4 10          	add    $0x10,%rsp
  43722c:	90                   	nop
  43722d:	c9                   	leaveq 
  43722e:	c3                   	retq   
  43722f:	90                   	nop

0000000000437230 <std::__detail::__variant::_Variant_base<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>::_Variant_base<0ul, x666::Identifier>(std::in_place_index_t<0ul>, x666::Identifier&&)>:
	_Variant_base(in_place_index_t<_Np> __i, _Args&&... __args)
  437230:	55                   	push   %rbp
  437231:	48 89 e5             	mov    %rsp,%rbp
  437234:	41 54                	push   %r12
  437236:	53                   	push   %rbx
  437237:	48 83 ec 10          	sub    $0x10,%rsp
  43723b:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  43723f:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	: _Base(__i, std::forward<_Args>(__args)...)
  437243:	48 8b 5d e8          	mov    -0x18(%rbp),%rbx
  437247:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  43724b:	48 89 c7             	mov    %rax,%rdi
  43724e:	e8 24 f3 ff ff       	callq  436577 <x666::Identifier&& std::forward<x666::Identifier>(std::remove_reference<x666::Identifier>::type&)>
  437253:	48 83 ec 08          	sub    $0x8,%rsp
  437257:	41 54                	push   %r12
  437259:	48 89 c6             	mov    %rax,%rsi
  43725c:	48 89 df             	mov    %rbx,%rdi
  43725f:	e8 98 ff ff ff       	callq  4371fc <std::__detail::__variant::_Move_assign_base<false, x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>::_Variant_storage<0ul, x666::Identifier>(std::in_place_index_t<0ul>, x666::Identifier&&)>
  437264:	48 83 c4 10          	add    $0x10,%rsp
	{ }
  437268:	90                   	nop
  437269:	48 8d 65 f0          	lea    -0x10(%rbp),%rsp
  43726d:	5b                   	pop    %rbx
  43726e:	41 5c                	pop    %r12
  437270:	5d                   	pop    %rbp
  437271:	c3                   	retq   

0000000000437272 <std::__detail::__variant::_Copy_ctor_base<false, x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>::_Variant_storage<1ul, x666::StringLiteral>(std::in_place_index_t<1ul>, x666::StringLiteral&&)>:
      using _Base::_Base;
  437272:	55                   	push   %rbp
  437273:	48 89 e5             	mov    %rsp,%rbp
  437276:	48 83 ec 10          	sub    $0x10,%rsp
  43727a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  43727e:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  437282:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  437286:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  43728a:	48 83 ec 08          	sub    $0x8,%rsp
  43728e:	0f b6 4d 10          	movzbl 0x10(%rbp),%ecx
  437292:	51                   	push   %rcx
  437293:	48 89 d6             	mov    %rdx,%rsi
  437296:	48 89 c7             	mov    %rax,%rdi
  437299:	e8 f4 0f 00 00       	callq  438292 <std::__detail::__variant::_Variant_storage<false, x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>::_Variant_storage<1ul, x666::StringLiteral>(std::in_place_index_t<1ul>, x666::StringLiteral&&)>
  43729e:	48 83 c4 10          	add    $0x10,%rsp
  4372a2:	90                   	nop
  4372a3:	c9                   	leaveq 
  4372a4:	c3                   	retq   
  4372a5:	90                   	nop

00000000004372a6 <std::__detail::__variant::_Move_ctor_base<false, x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>::_Variant_storage<1ul, x666::StringLiteral>(std::in_place_index_t<1ul>, x666::StringLiteral&&)>:
      using _Base::_Base;
  4372a6:	55                   	push   %rbp
  4372a7:	48 89 e5             	mov    %rsp,%rbp
  4372aa:	48 83 ec 10          	sub    $0x10,%rsp
  4372ae:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4372b2:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  4372b6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4372ba:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  4372be:	48 83 ec 08          	sub    $0x8,%rsp
  4372c2:	0f b6 4d 10          	movzbl 0x10(%rbp),%ecx
  4372c6:	51                   	push   %rcx
  4372c7:	48 89 d6             	mov    %rdx,%rsi
  4372ca:	48 89 c7             	mov    %rax,%rdi
  4372cd:	e8 a0 ff ff ff       	callq  437272 <std::__detail::__variant::_Copy_ctor_base<false, x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>::_Variant_storage<1ul, x666::StringLiteral>(std::in_place_index_t<1ul>, x666::StringLiteral&&)>
  4372d2:	48 83 c4 10          	add    $0x10,%rsp
  4372d6:	90                   	nop
  4372d7:	c9                   	leaveq 
  4372d8:	c3                   	retq   
  4372d9:	90                   	nop

00000000004372da <std::__detail::__variant::_Copy_assign_base<false, x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>::_Variant_storage<1ul, x666::StringLiteral>(std::in_place_index_t<1ul>, x666::StringLiteral&&)>:
      using _Base::_Base;
  4372da:	55                   	push   %rbp
  4372db:	48 89 e5             	mov    %rsp,%rbp
  4372de:	48 83 ec 10          	sub    $0x10,%rsp
  4372e2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4372e6:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  4372ea:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4372ee:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  4372f2:	48 83 ec 08          	sub    $0x8,%rsp
  4372f6:	0f b6 4d 10          	movzbl 0x10(%rbp),%ecx
  4372fa:	51                   	push   %rcx
  4372fb:	48 89 d6             	mov    %rdx,%rsi
  4372fe:	48 89 c7             	mov    %rax,%rdi
  437301:	e8 a0 ff ff ff       	callq  4372a6 <std::__detail::__variant::_Move_ctor_base<false, x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>::_Variant_storage<1ul, x666::StringLiteral>(std::in_place_index_t<1ul>, x666::StringLiteral&&)>
  437306:	48 83 c4 10          	add    $0x10,%rsp
  43730a:	90                   	nop
  43730b:	c9                   	leaveq 
  43730c:	c3                   	retq   
  43730d:	90                   	nop

000000000043730e <std::__detail::__variant::_Move_assign_base<false, x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>::_Variant_storage<1ul, x666::StringLiteral>(std::in_place_index_t<1ul>, x666::StringLiteral&&)>:
      using _Base::_Base;
  43730e:	55                   	push   %rbp
  43730f:	48 89 e5             	mov    %rsp,%rbp
  437312:	48 83 ec 10          	sub    $0x10,%rsp
  437316:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  43731a:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  43731e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  437322:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  437326:	48 83 ec 08          	sub    $0x8,%rsp
  43732a:	0f b6 4d 10          	movzbl 0x10(%rbp),%ecx
  43732e:	51                   	push   %rcx
  43732f:	48 89 d6             	mov    %rdx,%rsi
  437332:	48 89 c7             	mov    %rax,%rdi
  437335:	e8 a0 ff ff ff       	callq  4372da <std::__detail::__variant::_Copy_assign_base<false, x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>::_Variant_storage<1ul, x666::StringLiteral>(std::in_place_index_t<1ul>, x666::StringLiteral&&)>
  43733a:	48 83 c4 10          	add    $0x10,%rsp
  43733e:	90                   	nop
  43733f:	c9                   	leaveq 
  437340:	c3                   	retq   
  437341:	90                   	nop

0000000000437342 <std::__detail::__variant::_Variant_base<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>::_Variant_base<1ul, x666::StringLiteral>(std::in_place_index_t<1ul>, x666::StringLiteral&&)>:
	_Variant_base(in_place_index_t<_Np> __i, _Args&&... __args)
  437342:	55                   	push   %rbp
  437343:	48 89 e5             	mov    %rsp,%rbp
  437346:	41 54                	push   %r12
  437348:	53                   	push   %rbx
  437349:	48 83 ec 10          	sub    $0x10,%rsp
  43734d:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  437351:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	: _Base(__i, std::forward<_Args>(__args)...)
  437355:	48 8b 5d e8          	mov    -0x18(%rbp),%rbx
  437359:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  43735d:	48 89 c7             	mov    %rax,%rdi
  437360:	e8 bc f2 ff ff       	callq  436621 <x666::StringLiteral&& std::forward<x666::StringLiteral>(std::remove_reference<x666::StringLiteral>::type&)>
  437365:	48 83 ec 08          	sub    $0x8,%rsp
  437369:	41 54                	push   %r12
  43736b:	48 89 c6             	mov    %rax,%rsi
  43736e:	48 89 df             	mov    %rbx,%rdi
  437371:	e8 98 ff ff ff       	callq  43730e <std::__detail::__variant::_Move_assign_base<false, x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>::_Variant_storage<1ul, x666::StringLiteral>(std::in_place_index_t<1ul>, x666::StringLiteral&&)>
  437376:	48 83 c4 10          	add    $0x10,%rsp
	{ }
  43737a:	90                   	nop
  43737b:	48 8d 65 f0          	lea    -0x10(%rbp),%rsp
  43737f:	5b                   	pop    %rbx
  437380:	41 5c                	pop    %r12
  437382:	5d                   	pop    %rbp
  437383:	c3                   	retq   

0000000000437384 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct(unsigned long, char)>:
	_M_set_length(__dnew);
      }

  template<typename _CharT, typename _Traits, typename _Alloc>
    void
    basic_string<_CharT, _Traits, _Alloc>::
  437384:	55                   	push   %rbp
  437385:	48 89 e5             	mov    %rsp,%rbp
  437388:	41 54                	push   %r12
  43738a:	53                   	push   %rbx
  43738b:	48 83 ec 20          	sub    $0x20,%rsp
  43738f:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  437393:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  437397:	89 d0                	mov    %edx,%eax
  437399:	88 45 dc             	mov    %al,-0x24(%rbp)
    _M_construct(size_type __n, _CharT __c)
    {
      if (__n > size_type(_S_local_capacity))
  43739c:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4373a0:	48 83 f8 0f          	cmp    $0xf,%rax
  4373a4:	76 3d                	jbe    4373e3 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct(unsigned long, char)+0x5f>
	{
	  _M_data(_M_create(__n, size_type(0)));
  4373a6:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  4373aa:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  4373ae:	ba 00 00 00 00       	mov    $0x0,%edx
  4373b3:	48 89 c6             	mov    %rax,%rsi
  4373b6:	48 89 cf             	mov    %rcx,%rdi
  4373b9:	e8 1e 0f 00 00       	callq  4382dc <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_create(unsigned long&, unsigned long)>
  4373be:	48 89 c2             	mov    %rax,%rdx
  4373c1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4373c5:	48 89 d6             	mov    %rdx,%rsi
  4373c8:	48 89 c7             	mov    %rax,%rdi
  4373cb:	e8 ac f7 ff ff       	callq  436b7c <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_data(char*)>
	  _M_capacity(__n);
  4373d0:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  4373d4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4373d8:	48 89 d6             	mov    %rdx,%rsi
  4373db:	48 89 c7             	mov    %rax,%rdi
  4373de:	e8 b3 f7 ff ff       	callq  436b96 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_capacity(unsigned long)>
	}

      if (__n)
  4373e3:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4373e7:	48 85 c0             	test   %rax,%rax
  4373ea:	74 21                	je     43740d <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct(unsigned long, char)+0x89>
	this->_S_assign(_M_data(), __n, __c);
  4373ec:	0f be 5d dc          	movsbl -0x24(%rbp),%ebx
  4373f0:	4c 8b 65 e0          	mov    -0x20(%rbp),%r12
  4373f4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4373f8:	48 89 c7             	mov    %rax,%rdi
  4373fb:	e8 08 f4 ff ff       	callq  436808 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_data() const>
  437400:	89 da                	mov    %ebx,%edx
  437402:	4c 89 e6             	mov    %r12,%rsi
  437405:	48 89 c7             	mov    %rax,%rdi
  437408:	e8 96 0f 00 00       	callq  4383a3 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_assign(char*, unsigned long, char)>

      _M_set_length(__n);
  43740d:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  437411:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  437415:	48 89 d6             	mov    %rdx,%rsi
  437418:	48 89 c7             	mov    %rax,%rdi
  43741b:	e8 24 f6 ff ff       	callq  436a44 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_set_length(unsigned long)>
    }
  437420:	90                   	nop
  437421:	48 83 c4 20          	add    $0x20,%rsp
  437425:	5b                   	pop    %rbx
  437426:	41 5c                	pop    %r12
  437428:	5d                   	pop    %rbp
  437429:	c3                   	retq   

000000000043742a <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_destroy(unsigned long)>:
      _M_destroy(size_type __size) throw()
  43742a:	55                   	push   %rbp
  43742b:	48 89 e5             	mov    %rsp,%rbp
  43742e:	41 54                	push   %r12
  437430:	53                   	push   %rbx
  437431:	48 83 ec 10          	sub    $0x10,%rsp
  437435:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  437439:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
  43743d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  437441:	48 8d 58 01          	lea    0x1(%rax),%rbx
  437445:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  437449:	48 89 c7             	mov    %rax,%rdi
  43744c:	e8 b7 f3 ff ff       	callq  436808 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_data() const>
  437451:	49 89 c4             	mov    %rax,%r12
  437454:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  437458:	48 89 c7             	mov    %rax,%rdi
  43745b:	e8 d8 f6 ff ff       	callq  436b38 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_get_allocator()>
  437460:	48 89 da             	mov    %rbx,%rdx
  437463:	4c 89 e6             	mov    %r12,%rsi
  437466:	48 89 c7             	mov    %rax,%rdi
  437469:	e8 82 0f 00 00       	callq  4383f0 <std::allocator_traits<std::allocator<char> >::deallocate(std::allocator<char>&, char*, unsigned long)>
  43746e:	90                   	nop
  43746f:	48 83 c4 10          	add    $0x10,%rsp
  437473:	5b                   	pop    %rbx
  437474:	41 5c                	pop    %r12
  437476:	5d                   	pop    %rbp
  437477:	c3                   	retq   

0000000000437478 <std::pointer_traits<char*>::pointer_to(char&)>:
       *  @brief  Obtain a pointer to an object
       *  @param  __r  A reference to an object of type @c element_type
       *  @return @c addressof(__r)
      */
      static pointer
      pointer_to(__make_not_void<element_type>& __r) noexcept
  437478:	55                   	push   %rbp
  437479:	48 89 e5             	mov    %rsp,%rbp
  43747c:	48 83 ec 10          	sub    $0x10,%rsp
  437480:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return std::addressof(__r); }
  437484:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  437488:	48 89 c7             	mov    %rax,%rdi
  43748b:	e8 8e 0f 00 00       	callq  43841e <char* std::addressof<char>(char&)>
  437490:	c9                   	leaveq 
  437491:	c3                   	retq   

0000000000437492 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct_aux<char const*>(char const*, char const*, std::__false_type)>:
        _M_construct_aux(_InIterator __beg, _InIterator __end,
  437492:	55                   	push   %rbp
  437493:	48 89 e5             	mov    %rsp,%rbp
  437496:	48 83 ec 30          	sub    $0x30,%rsp
  43749a:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  43749e:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  4374a2:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
          _M_construct(__beg, __end, _Tag());
  4374a6:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  4374aa:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  4374ae:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4374b2:	48 83 ec 08          	sub    $0x8,%rsp
  4374b6:	41 50                	push   %r8
  4374b8:	48 89 ce             	mov    %rcx,%rsi
  4374bb:	48 89 c7             	mov    %rax,%rdi
  4374be:	e8 bf 0f 00 00       	callq  438482 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)>
  4374c3:	48 83 c4 10          	add    $0x10,%rsp
	}
  4374c7:	90                   	nop
  4374c8:	c9                   	leaveq 
  4374c9:	c3                   	retq   

00000000004374ca <std::allocator_traits<std::allocator<char> >::select_on_container_copy_construction(std::allocator<char> const&)>:
       *  @brief  Obtain an allocator to use when copying a container.
       *  @param  __rhs  An allocator.
       *  @return @c __rhs
      */
      static allocator_type
      select_on_container_copy_construction(const allocator_type& __rhs)
  4374ca:	55                   	push   %rbp
  4374cb:	48 89 e5             	mov    %rsp,%rbp
  4374ce:	48 83 ec 10          	sub    $0x10,%rsp
  4374d2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4374d6:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      { return __rhs; }
  4374da:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  4374de:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4374e2:	48 89 d6             	mov    %rdx,%rsi
  4374e5:	48 89 c7             	mov    %rax,%rdi
  4374e8:	e8 43 b2 ff ff       	callq  432730 <std::allocator<char>::allocator(std::allocator<char> const&)@plt>
  4374ed:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4374f1:	c9                   	leaveq 
  4374f2:	c3                   	retq   
  4374f3:	90                   	nop

00000000004374f4 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct_aux<char*>(char*, char*, std::__false_type)>:
        _M_construct_aux(_InIterator __beg, _InIterator __end,
  4374f4:	55                   	push   %rbp
  4374f5:	48 89 e5             	mov    %rsp,%rbp
  4374f8:	48 83 ec 30          	sub    $0x30,%rsp
  4374fc:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  437500:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  437504:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
          _M_construct(__beg, __end, _Tag());
  437508:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  43750c:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  437510:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  437514:	48 83 ec 08          	sub    $0x8,%rsp
  437518:	41 50                	push   %r8
  43751a:	48 89 ce             	mov    %rcx,%rsi
  43751d:	48 89 c7             	mov    %rax,%rdi
  437520:	e8 85 10 00 00       	callq  4385aa <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)>
  437525:	48 83 c4 10          	add    $0x10,%rsp
	}
  437529:	90                   	nop
  43752a:	c9                   	leaveq 
  43752b:	c3                   	retq   

000000000043752c <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_check_length(unsigned long, unsigned long, char const*) const>:
      _M_check_length(size_type __n1, size_type __n2, const char* __s) const
  43752c:	55                   	push   %rbp
  43752d:	48 89 e5             	mov    %rsp,%rbp
  437530:	53                   	push   %rbx
  437531:	48 83 ec 28          	sub    $0x28,%rsp
  437535:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  437539:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  43753d:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  437541:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
	if (this->max_size() - (this->size() - __n1) < __n2)
  437545:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  437549:	48 89 c7             	mov    %rax,%rdi
  43754c:	e8 37 11 00 00       	callq  438688 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::max_size() const>
  437551:	48 89 c3             	mov    %rax,%rbx
  437554:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  437558:	48 89 c7             	mov    %rax,%rdi
  43755b:	e8 a4 f4 ff ff       	callq  436a04 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::size() const>
  437560:	48 89 c2             	mov    %rax,%rdx
  437563:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  437567:	48 29 d0             	sub    %rdx,%rax
  43756a:	48 01 d8             	add    %rbx,%rax
  43756d:	48 39 45 d8          	cmp    %rax,-0x28(%rbp)
  437571:	0f 97 c0             	seta   %al
  437574:	84 c0                	test   %al,%al
  437576:	74 0c                	je     437584 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_check_length(unsigned long, unsigned long, char const*) const+0x58>
	  __throw_length_error(__N(__s));
  437578:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  43757c:	48 89 c7             	mov    %rax,%rdi
  43757f:	e8 8c b1 ff ff       	callq  432710 <std::__throw_length_error(char const*)@plt>
      }
  437584:	90                   	nop
  437585:	48 83 c4 28          	add    $0x28,%rsp
  437589:	5b                   	pop    %rbx
  43758a:	5d                   	pop    %rbp
  43758b:	c3                   	retq   

000000000043758c <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_append(char const*, unsigned long)>:
	this->_M_set_length(__n);
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>&
    basic_string<_CharT, _Traits, _Alloc>::
  43758c:	55                   	push   %rbp
  43758d:	48 89 e5             	mov    %rsp,%rbp
  437590:	53                   	push   %rbx
  437591:	48 83 ec 38          	sub    $0x38,%rsp
  437595:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  437599:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  43759d:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
    _M_append(const _CharT* __s, size_type __n)
    {
      const size_type __len = __n + this->size();
  4375a1:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4375a5:	48 89 c7             	mov    %rax,%rdi
  4375a8:	e8 57 f4 ff ff       	callq  436a04 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::size() const>
  4375ad:	48 89 c2             	mov    %rax,%rdx
  4375b0:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  4375b4:	48 01 d0             	add    %rdx,%rax
  4375b7:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

      if (__len <= this->capacity())
  4375bb:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4375bf:	48 89 c7             	mov    %rax,%rdi
  4375c2:	e8 4f f4 ff ff       	callq  436a16 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::capacity() const>
  4375c7:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
  4375cb:	0f 96 c0             	setbe  %al
  4375ce:	84 c0                	test   %al,%al
  4375d0:	74 3a                	je     43760c <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_append(char const*, unsigned long)+0x80>
	{
	  if (__n)
  4375d2:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
  4375d7:	74 61                	je     43763a <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_append(char const*, unsigned long)+0xae>
	    this->_S_copy(this->_M_data() + this->size(), __s, __n);
  4375d9:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4375dd:	48 89 c7             	mov    %rax,%rdi
  4375e0:	e8 23 f2 ff ff       	callq  436808 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_data() const>
  4375e5:	48 89 c3             	mov    %rax,%rbx
  4375e8:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4375ec:	48 89 c7             	mov    %rax,%rdi
  4375ef:	e8 10 f4 ff ff       	callq  436a04 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::size() const>
  4375f4:	48 01 d8             	add    %rbx,%rax
  4375f7:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  4375fb:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
  4375ff:	48 89 ce             	mov    %rcx,%rsi
  437602:	48 89 c7             	mov    %rax,%rdi
  437605:	e8 a7 10 00 00       	callq  4386b1 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_copy(char*, char const*, unsigned long)>
  43760a:	eb 2e                	jmp    43763a <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_append(char const*, unsigned long)+0xae>
	}
      else
	this->_M_mutate(this->size(), size_type(0), __s, __n);
  43760c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  437610:	48 89 c7             	mov    %rax,%rdi
  437613:	e8 ec f3 ff ff       	callq  436a04 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::size() const>
  437618:	48 89 c6             	mov    %rax,%rsi
  43761b:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
  43761f:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  437623:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  437627:	49 89 c8             	mov    %rcx,%r8
  43762a:	48 89 d1             	mov    %rdx,%rcx
  43762d:	ba 00 00 00 00       	mov    $0x0,%edx
  437632:	48 89 c7             	mov    %rax,%rdi
  437635:	e8 1e 00 00 00       	callq  437658 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)>

      this->_M_set_length(__len);
  43763a:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  43763e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  437642:	48 89 d6             	mov    %rdx,%rsi
  437645:	48 89 c7             	mov    %rax,%rdi
  437648:	e8 f7 f3 ff ff       	callq  436a44 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_set_length(unsigned long)>
      return *this;
  43764d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    }
  437651:	48 83 c4 38          	add    $0x38,%rsp
  437655:	5b                   	pop    %rbx
  437656:	5d                   	pop    %rbp
  437657:	c3                   	retq   

0000000000437658 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)>:
    basic_string<_CharT, _Traits, _Alloc>::
  437658:	55                   	push   %rbp
  437659:	48 89 e5             	mov    %rsp,%rbp
  43765c:	48 83 ec 50          	sub    $0x50,%rsp
  437660:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  437664:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  437668:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  43766c:	48 89 4d c0          	mov    %rcx,-0x40(%rbp)
  437670:	4c 89 45 b8          	mov    %r8,-0x48(%rbp)
      const size_type __how_much = length() - __pos - __len1;
  437674:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  437678:	48 89 c7             	mov    %rax,%rdi
  43767b:	e8 36 e7 ff ff       	callq  435db6 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::length() const>
  437680:	48 2b 45 d0          	sub    -0x30(%rbp),%rax
  437684:	48 2b 45 c8          	sub    -0x38(%rbp),%rax
  437688:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
      size_type __new_capacity = length() + __len2 - __len1;
  43768c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  437690:	48 89 c7             	mov    %rax,%rdi
  437693:	e8 1e e7 ff ff       	callq  435db6 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::length() const>
  437698:	48 89 c2             	mov    %rax,%rdx
  43769b:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  43769f:	48 01 d0             	add    %rdx,%rax
  4376a2:	48 2b 45 c8          	sub    -0x38(%rbp),%rax
  4376a6:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
      pointer __r = _M_create(__new_capacity, capacity());
  4376aa:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4376ae:	48 89 c7             	mov    %rax,%rdi
  4376b1:	e8 60 f3 ff ff       	callq  436a16 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::capacity() const>
  4376b6:	48 89 c2             	mov    %rax,%rdx
  4376b9:	48 8d 45 e8          	lea    -0x18(%rbp),%rax
  4376bd:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  4376c1:	48 89 c6             	mov    %rax,%rsi
  4376c4:	48 89 cf             	mov    %rcx,%rdi
  4376c7:	e8 10 0c 00 00       	callq  4382dc <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_create(unsigned long&, unsigned long)>
  4376cc:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
      if (__pos)
  4376d0:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
  4376d5:	74 22                	je     4376f9 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)+0xa1>
	this->_S_copy(__r, _M_data(), __pos);
  4376d7:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4376db:	48 89 c7             	mov    %rax,%rdi
  4376de:	e8 25 f1 ff ff       	callq  436808 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_data() const>
  4376e3:	48 89 c1             	mov    %rax,%rcx
  4376e6:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  4376ea:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4376ee:	48 89 ce             	mov    %rcx,%rsi
  4376f1:	48 89 c7             	mov    %rax,%rdi
  4376f4:	e8 b8 0f 00 00       	callq  4386b1 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_copy(char*, char const*, unsigned long)>
      if (__s && __len2)
  4376f9:	48 83 7d c0 00       	cmpq   $0x0,-0x40(%rbp)
  4376fe:	74 25                	je     437725 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)+0xcd>
  437700:	48 83 7d b8 00       	cmpq   $0x0,-0x48(%rbp)
  437705:	74 1e                	je     437725 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)+0xcd>
	this->_S_copy(__r + __pos, __s, __len2);
  437707:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  43770b:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  43770f:	48 01 d0             	add    %rdx,%rax
  437712:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  437716:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
  43771a:	48 89 ce             	mov    %rcx,%rsi
  43771d:	48 89 c7             	mov    %rax,%rdi
  437720:	e8 8c 0f 00 00       	callq  4386b1 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_copy(char*, char const*, unsigned long)>
      if (__how_much)
  437725:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  43772a:	74 3e                	je     43776a <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)+0x112>
		      _M_data() + __pos + __len1, __how_much);
  43772c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  437730:	48 89 c7             	mov    %rax,%rdi
  437733:	e8 d0 f0 ff ff       	callq  436808 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_data() const>
  437738:	48 89 c1             	mov    %rax,%rcx
  43773b:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  43773f:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  437743:	48 01 d0             	add    %rdx,%rax
  437746:	48 01 c1             	add    %rax,%rcx
	this->_S_copy(__r + __pos + __len2,
  437749:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  43774d:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  437751:	48 01 c2             	add    %rax,%rdx
  437754:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  437758:	48 01 d0             	add    %rdx,%rax
  43775b:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  43775f:	48 89 ce             	mov    %rcx,%rsi
  437762:	48 89 c7             	mov    %rax,%rdi
  437765:	e8 47 0f 00 00       	callq  4386b1 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_copy(char*, char const*, unsigned long)>
      _M_dispose();
  43776a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  43776e:	48 89 c7             	mov    %rax,%rdi
  437771:	e8 a4 f0 ff ff       	callq  43681a <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_dispose()>
      _M_data(__r);
  437776:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  43777a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  43777e:	48 89 d6             	mov    %rdx,%rsi
  437781:	48 89 c7             	mov    %rax,%rdi
  437784:	e8 f3 f3 ff ff       	callq  436b7c <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_data(char*)>
      _M_capacity(__new_capacity);
  437789:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  43778d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  437791:	48 89 d6             	mov    %rdx,%rsi
  437794:	48 89 c7             	mov    %rax,%rdi
  437797:	e8 fa f3 ff ff       	callq  436b96 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_capacity(unsigned long)>
    }
  43779c:	90                   	nop
  43779d:	c9                   	leaveq 
  43779e:	c3                   	retq   
  43779f:	90                   	nop

00000000004377a0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_local_data() const>:
      _M_local_data() const
  4377a0:	55                   	push   %rbp
  4377a1:	48 89 e5             	mov    %rsp,%rbp
  4377a4:	48 83 ec 10          	sub    $0x10,%rsp
  4377a8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
  4377ac:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4377b0:	48 83 c0 10          	add    $0x10,%rax
  4377b4:	48 89 c7             	mov    %rax,%rdi
  4377b7:	e8 3f 0f 00 00       	callq  4386fb <std::pointer_traits<char const*>::pointer_to(char const&)>
      }
  4377bc:	c9                   	leaveq 
  4377bd:	c3                   	retq   

00000000004377be <std::__detail::__variant::_Uninitialized<x666::Newline, true>::_Uninitialized<x666::Newline>(std::in_place_index_t<0ul>, x666::Newline&&)>:
      constexpr _Uninitialized(in_place_index_t<0>, _Args&&... __args)
  4377be:	55                   	push   %rbp
  4377bf:	48 89 e5             	mov    %rsp,%rbp
  4377c2:	48 83 ec 10          	sub    $0x10,%rsp
  4377c6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4377ca:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      : _M_storage(std::forward<_Args>(__args)...)
  4377ce:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4377d2:	48 89 c7             	mov    %rax,%rdi
  4377d5:	e8 39 ea ff ff       	callq  436213 <x666::Newline&& std::forward<x666::Newline>(std::remove_reference<x666::Newline>::type&)>
      { }
  4377da:	90                   	nop
  4377db:	c9                   	leaveq 
  4377dc:	c3                   	retq   
  4377dd:	90                   	nop

00000000004377de <std::__detail::__variant::_Variadic_union<x666::Newline, x666::EndOfFile, x666::LexError>::_Variadic_union<x666::Newline>(std::in_place_index_t<0ul>, x666::Newline&&)>:
	constexpr _Variadic_union(in_place_index_t<0>, _Args&&... __args)
  4377de:	55                   	push   %rbp
  4377df:	48 89 e5             	mov    %rsp,%rbp
  4377e2:	41 54                	push   %r12
  4377e4:	53                   	push   %rbx
  4377e5:	48 83 ec 10          	sub    $0x10,%rsp
  4377e9:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  4377ed:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	: _M_first(in_place_index<0>, std::forward<_Args>(__args)...)
  4377f1:	48 8b 5d e8          	mov    -0x18(%rbp),%rbx
  4377f5:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4377f9:	48 89 c7             	mov    %rax,%rdi
  4377fc:	e8 12 ea ff ff       	callq  436213 <x666::Newline&& std::forward<x666::Newline>(std::remove_reference<x666::Newline>::type&)>
  437801:	48 83 ec 08          	sub    $0x8,%rsp
  437805:	41 54                	push   %r12
  437807:	48 89 c6             	mov    %rax,%rsi
  43780a:	48 89 df             	mov    %rbx,%rdi
  43780d:	e8 ac ff ff ff       	callq  4377be <std::__detail::__variant::_Uninitialized<x666::Newline, true>::_Uninitialized<x666::Newline>(std::in_place_index_t<0ul>, x666::Newline&&)>
  437812:	48 83 c4 10          	add    $0x10,%rsp
	{ }
  437816:	90                   	nop
  437817:	48 8d 65 f0          	lea    -0x10(%rbp),%rsp
  43781b:	5b                   	pop    %rbx
  43781c:	41 5c                	pop    %r12
  43781e:	5d                   	pop    %rbp
  43781f:	c3                   	retq   

0000000000437820 <std::__detail::__variant::_Variadic_union<x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>::_Variadic_union<1ul, x666::Newline>(std::in_place_index_t<1ul>, x666::Newline&&)>:
	constexpr _Variadic_union(in_place_index_t<_Np>, _Args&&... __args)
  437820:	55                   	push   %rbp
  437821:	48 89 e5             	mov    %rsp,%rbp
  437824:	41 54                	push   %r12
  437826:	53                   	push   %rbx
  437827:	48 83 ec 10          	sub    $0x10,%rsp
  43782b:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  43782f:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	: _M_rest(in_place_index<_Np-1>, std::forward<_Args>(__args)...)
  437833:	48 8b 5d e8          	mov    -0x18(%rbp),%rbx
  437837:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  43783b:	48 89 c7             	mov    %rax,%rdi
  43783e:	e8 d0 e9 ff ff       	callq  436213 <x666::Newline&& std::forward<x666::Newline>(std::remove_reference<x666::Newline>::type&)>
  437843:	48 83 ec 08          	sub    $0x8,%rsp
  437847:	41 54                	push   %r12
  437849:	48 89 c6             	mov    %rax,%rsi
  43784c:	48 89 df             	mov    %rbx,%rdi
  43784f:	e8 8a ff ff ff       	callq  4377de <std::__detail::__variant::_Variadic_union<x666::Newline, x666::EndOfFile, x666::LexError>::_Variadic_union<x666::Newline>(std::in_place_index_t<0ul>, x666::Newline&&)>
  437854:	48 83 c4 10          	add    $0x10,%rsp
	{ }
  437858:	90                   	nop
  437859:	48 8d 65 f0          	lea    -0x10(%rbp),%rsp
  43785d:	5b                   	pop    %rbx
  43785e:	41 5c                	pop    %r12
  437860:	5d                   	pop    %rbp
  437861:	c3                   	retq   

0000000000437862 <std::__detail::__variant::_Variadic_union<x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>::_Variadic_union<2ul, x666::Newline>(std::in_place_index_t<2ul>, x666::Newline&&)>:
	constexpr _Variadic_union(in_place_index_t<_Np>, _Args&&... __args)
  437862:	55                   	push   %rbp
  437863:	48 89 e5             	mov    %rsp,%rbp
  437866:	41 54                	push   %r12
  437868:	53                   	push   %rbx
  437869:	48 83 ec 10          	sub    $0x10,%rsp
  43786d:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  437871:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	: _M_rest(in_place_index<_Np-1>, std::forward<_Args>(__args)...)
  437875:	48 8b 5d e8          	mov    -0x18(%rbp),%rbx
  437879:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  43787d:	48 89 c7             	mov    %rax,%rdi
  437880:	e8 8e e9 ff ff       	callq  436213 <x666::Newline&& std::forward<x666::Newline>(std::remove_reference<x666::Newline>::type&)>
  437885:	48 83 ec 08          	sub    $0x8,%rsp
  437889:	41 54                	push   %r12
  43788b:	48 89 c6             	mov    %rax,%rsi
  43788e:	48 89 df             	mov    %rbx,%rdi
  437891:	e8 8a ff ff ff       	callq  437820 <std::__detail::__variant::_Variadic_union<x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>::_Variadic_union<1ul, x666::Newline>(std::in_place_index_t<1ul>, x666::Newline&&)>
  437896:	48 83 c4 10          	add    $0x10,%rsp
	{ }
  43789a:	90                   	nop
  43789b:	48 8d 65 f0          	lea    -0x10(%rbp),%rsp
  43789f:	5b                   	pop    %rbx
  4378a0:	41 5c                	pop    %r12
  4378a2:	5d                   	pop    %rbp
  4378a3:	c3                   	retq   

00000000004378a4 <std::__detail::__variant::_Variadic_union<x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>::_Variadic_union<3ul, x666::Newline>(std::in_place_index_t<3ul>, x666::Newline&&)>:
	constexpr _Variadic_union(in_place_index_t<_Np>, _Args&&... __args)
  4378a4:	55                   	push   %rbp
  4378a5:	48 89 e5             	mov    %rsp,%rbp
  4378a8:	41 54                	push   %r12
  4378aa:	53                   	push   %rbx
  4378ab:	48 83 ec 10          	sub    $0x10,%rsp
  4378af:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  4378b3:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	: _M_rest(in_place_index<_Np-1>, std::forward<_Args>(__args)...)
  4378b7:	48 8b 5d e8          	mov    -0x18(%rbp),%rbx
  4378bb:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4378bf:	48 89 c7             	mov    %rax,%rdi
  4378c2:	e8 4c e9 ff ff       	callq  436213 <x666::Newline&& std::forward<x666::Newline>(std::remove_reference<x666::Newline>::type&)>
  4378c7:	48 83 ec 08          	sub    $0x8,%rsp
  4378cb:	41 54                	push   %r12
  4378cd:	48 89 c6             	mov    %rax,%rsi
  4378d0:	48 89 df             	mov    %rbx,%rdi
  4378d3:	e8 8a ff ff ff       	callq  437862 <std::__detail::__variant::_Variadic_union<x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>::_Variadic_union<2ul, x666::Newline>(std::in_place_index_t<2ul>, x666::Newline&&)>
  4378d8:	48 83 c4 10          	add    $0x10,%rsp
	{ }
  4378dc:	90                   	nop
  4378dd:	48 8d 65 f0          	lea    -0x10(%rbp),%rsp
  4378e1:	5b                   	pop    %rbx
  4378e2:	41 5c                	pop    %r12
  4378e4:	5d                   	pop    %rbp
  4378e5:	c3                   	retq   

00000000004378e6 <std::__detail::__variant::_Variadic_union<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>::_Variadic_union<4ul, x666::Newline>(std::in_place_index_t<4ul>, x666::Newline&&)>:
	constexpr _Variadic_union(in_place_index_t<_Np>, _Args&&... __args)
  4378e6:	55                   	push   %rbp
  4378e7:	48 89 e5             	mov    %rsp,%rbp
  4378ea:	41 54                	push   %r12
  4378ec:	53                   	push   %rbx
  4378ed:	48 83 ec 10          	sub    $0x10,%rsp
  4378f1:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  4378f5:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	: _M_rest(in_place_index<_Np-1>, std::forward<_Args>(__args)...)
  4378f9:	48 8b 5d e8          	mov    -0x18(%rbp),%rbx
  4378fd:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  437901:	48 89 c7             	mov    %rax,%rdi
  437904:	e8 0a e9 ff ff       	callq  436213 <x666::Newline&& std::forward<x666::Newline>(std::remove_reference<x666::Newline>::type&)>
  437909:	48 83 ec 08          	sub    $0x8,%rsp
  43790d:	41 54                	push   %r12
  43790f:	48 89 c6             	mov    %rax,%rsi
  437912:	48 89 df             	mov    %rbx,%rdi
  437915:	e8 8a ff ff ff       	callq  4378a4 <std::__detail::__variant::_Variadic_union<x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>::_Variadic_union<3ul, x666::Newline>(std::in_place_index_t<3ul>, x666::Newline&&)>
  43791a:	48 83 c4 10          	add    $0x10,%rsp
	{ }
  43791e:	90                   	nop
  43791f:	48 8d 65 f0          	lea    -0x10(%rbp),%rsp
  437923:	5b                   	pop    %rbx
  437924:	41 5c                	pop    %r12
  437926:	5d                   	pop    %rbp
  437927:	c3                   	retq   

0000000000437928 <std::__detail::__variant::_Variant_storage<false, x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>::_Variant_storage<4ul, x666::Newline>(std::in_place_index_t<4ul>, x666::Newline&&)>:
	constexpr _Variant_storage(in_place_index_t<_Np>, _Args&&... __args)
  437928:	55                   	push   %rbp
  437929:	48 89 e5             	mov    %rsp,%rbp
  43792c:	41 54                	push   %r12
  43792e:	53                   	push   %rbx
  43792f:	48 83 ec 10          	sub    $0x10,%rsp
  437933:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  437937:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	_M_index(_Np)
  43793b:	48 8b 5d e8          	mov    -0x18(%rbp),%rbx
  43793f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  437943:	48 89 c7             	mov    %rax,%rdi
  437946:	e8 c8 e8 ff ff       	callq  436213 <x666::Newline&& std::forward<x666::Newline>(std::remove_reference<x666::Newline>::type&)>
  43794b:	48 83 ec 08          	sub    $0x8,%rsp
  43794f:	41 54                	push   %r12
  437951:	48 89 c6             	mov    %rax,%rsi
  437954:	48 89 df             	mov    %rbx,%rdi
  437957:	e8 8a ff ff ff       	callq  4378e6 <std::__detail::__variant::_Variadic_union<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>::_Variadic_union<4ul, x666::Newline>(std::in_place_index_t<4ul>, x666::Newline&&)>
  43795c:	48 83 c4 10          	add    $0x10,%rsp
  437960:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  437964:	c6 40 28 04          	movb   $0x4,0x28(%rax)
	{ }
  437968:	90                   	nop
  437969:	48 8d 65 f0          	lea    -0x10(%rbp),%rsp
  43796d:	5b                   	pop    %rbx
  43796e:	41 5c                	pop    %r12
  437970:	5d                   	pop    %rbp
  437971:	c3                   	retq   

0000000000437972 <std::__detail::__variant::_Uninitialized<x666::EndOfFile, true>::_Uninitialized<x666::EndOfFile>(std::in_place_index_t<0ul>, x666::EndOfFile&&)>:
      constexpr _Uninitialized(in_place_index_t<0>, _Args&&... __args)
  437972:	55                   	push   %rbp
  437973:	48 89 e5             	mov    %rsp,%rbp
  437976:	48 83 ec 10          	sub    $0x10,%rsp
  43797a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  43797e:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      : _M_storage(std::forward<_Args>(__args)...)
  437982:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  437986:	48 89 c7             	mov    %rax,%rdi
  437989:	e8 41 e9 ff ff       	callq  4362cf <x666::EndOfFile&& std::forward<x666::EndOfFile>(std::remove_reference<x666::EndOfFile>::type&)>
      { }
  43798e:	90                   	nop
  43798f:	c9                   	leaveq 
  437990:	c3                   	retq   
  437991:	90                   	nop

0000000000437992 <std::__detail::__variant::_Variadic_union<x666::EndOfFile, x666::LexError>::_Variadic_union<x666::EndOfFile>(std::in_place_index_t<0ul>, x666::EndOfFile&&)>:
	constexpr _Variadic_union(in_place_index_t<0>, _Args&&... __args)
  437992:	55                   	push   %rbp
  437993:	48 89 e5             	mov    %rsp,%rbp
  437996:	41 54                	push   %r12
  437998:	53                   	push   %rbx
  437999:	48 83 ec 10          	sub    $0x10,%rsp
  43799d:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  4379a1:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	: _M_first(in_place_index<0>, std::forward<_Args>(__args)...)
  4379a5:	48 8b 5d e8          	mov    -0x18(%rbp),%rbx
  4379a9:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4379ad:	48 89 c7             	mov    %rax,%rdi
  4379b0:	e8 1a e9 ff ff       	callq  4362cf <x666::EndOfFile&& std::forward<x666::EndOfFile>(std::remove_reference<x666::EndOfFile>::type&)>
  4379b5:	48 83 ec 08          	sub    $0x8,%rsp
  4379b9:	41 54                	push   %r12
  4379bb:	48 89 c6             	mov    %rax,%rsi
  4379be:	48 89 df             	mov    %rbx,%rdi
  4379c1:	e8 ac ff ff ff       	callq  437972 <std::__detail::__variant::_Uninitialized<x666::EndOfFile, true>::_Uninitialized<x666::EndOfFile>(std::in_place_index_t<0ul>, x666::EndOfFile&&)>
  4379c6:	48 83 c4 10          	add    $0x10,%rsp
	{ }
  4379ca:	90                   	nop
  4379cb:	48 8d 65 f0          	lea    -0x10(%rbp),%rsp
  4379cf:	5b                   	pop    %rbx
  4379d0:	41 5c                	pop    %r12
  4379d2:	5d                   	pop    %rbp
  4379d3:	c3                   	retq   

00000000004379d4 <std::__detail::__variant::_Variadic_union<x666::Newline, x666::EndOfFile, x666::LexError>::_Variadic_union<1ul, x666::EndOfFile>(std::in_place_index_t<1ul>, x666::EndOfFile&&)>:
	constexpr _Variadic_union(in_place_index_t<_Np>, _Args&&... __args)
  4379d4:	55                   	push   %rbp
  4379d5:	48 89 e5             	mov    %rsp,%rbp
  4379d8:	41 54                	push   %r12
  4379da:	53                   	push   %rbx
  4379db:	48 83 ec 10          	sub    $0x10,%rsp
  4379df:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  4379e3:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	: _M_rest(in_place_index<_Np-1>, std::forward<_Args>(__args)...)
  4379e7:	48 8b 5d e8          	mov    -0x18(%rbp),%rbx
  4379eb:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4379ef:	48 89 c7             	mov    %rax,%rdi
  4379f2:	e8 d8 e8 ff ff       	callq  4362cf <x666::EndOfFile&& std::forward<x666::EndOfFile>(std::remove_reference<x666::EndOfFile>::type&)>
  4379f7:	48 83 ec 08          	sub    $0x8,%rsp
  4379fb:	41 54                	push   %r12
  4379fd:	48 89 c6             	mov    %rax,%rsi
  437a00:	48 89 df             	mov    %rbx,%rdi
  437a03:	e8 8a ff ff ff       	callq  437992 <std::__detail::__variant::_Variadic_union<x666::EndOfFile, x666::LexError>::_Variadic_union<x666::EndOfFile>(std::in_place_index_t<0ul>, x666::EndOfFile&&)>
  437a08:	48 83 c4 10          	add    $0x10,%rsp
	{ }
  437a0c:	90                   	nop
  437a0d:	48 8d 65 f0          	lea    -0x10(%rbp),%rsp
  437a11:	5b                   	pop    %rbx
  437a12:	41 5c                	pop    %r12
  437a14:	5d                   	pop    %rbp
  437a15:	c3                   	retq   

0000000000437a16 <std::__detail::__variant::_Variadic_union<x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>::_Variadic_union<2ul, x666::EndOfFile>(std::in_place_index_t<2ul>, x666::EndOfFile&&)>:
	constexpr _Variadic_union(in_place_index_t<_Np>, _Args&&... __args)
  437a16:	55                   	push   %rbp
  437a17:	48 89 e5             	mov    %rsp,%rbp
  437a1a:	41 54                	push   %r12
  437a1c:	53                   	push   %rbx
  437a1d:	48 83 ec 10          	sub    $0x10,%rsp
  437a21:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  437a25:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	: _M_rest(in_place_index<_Np-1>, std::forward<_Args>(__args)...)
  437a29:	48 8b 5d e8          	mov    -0x18(%rbp),%rbx
  437a2d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  437a31:	48 89 c7             	mov    %rax,%rdi
  437a34:	e8 96 e8 ff ff       	callq  4362cf <x666::EndOfFile&& std::forward<x666::EndOfFile>(std::remove_reference<x666::EndOfFile>::type&)>
  437a39:	48 83 ec 08          	sub    $0x8,%rsp
  437a3d:	41 54                	push   %r12
  437a3f:	48 89 c6             	mov    %rax,%rsi
  437a42:	48 89 df             	mov    %rbx,%rdi
  437a45:	e8 8a ff ff ff       	callq  4379d4 <std::__detail::__variant::_Variadic_union<x666::Newline, x666::EndOfFile, x666::LexError>::_Variadic_union<1ul, x666::EndOfFile>(std::in_place_index_t<1ul>, x666::EndOfFile&&)>
  437a4a:	48 83 c4 10          	add    $0x10,%rsp
	{ }
  437a4e:	90                   	nop
  437a4f:	48 8d 65 f0          	lea    -0x10(%rbp),%rsp
  437a53:	5b                   	pop    %rbx
  437a54:	41 5c                	pop    %r12
  437a56:	5d                   	pop    %rbp
  437a57:	c3                   	retq   

0000000000437a58 <std::__detail::__variant::_Variadic_union<x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>::_Variadic_union<3ul, x666::EndOfFile>(std::in_place_index_t<3ul>, x666::EndOfFile&&)>:
	constexpr _Variadic_union(in_place_index_t<_Np>, _Args&&... __args)
  437a58:	55                   	push   %rbp
  437a59:	48 89 e5             	mov    %rsp,%rbp
  437a5c:	41 54                	push   %r12
  437a5e:	53                   	push   %rbx
  437a5f:	48 83 ec 10          	sub    $0x10,%rsp
  437a63:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  437a67:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	: _M_rest(in_place_index<_Np-1>, std::forward<_Args>(__args)...)
  437a6b:	48 8b 5d e8          	mov    -0x18(%rbp),%rbx
  437a6f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  437a73:	48 89 c7             	mov    %rax,%rdi
  437a76:	e8 54 e8 ff ff       	callq  4362cf <x666::EndOfFile&& std::forward<x666::EndOfFile>(std::remove_reference<x666::EndOfFile>::type&)>
  437a7b:	48 83 ec 08          	sub    $0x8,%rsp
  437a7f:	41 54                	push   %r12
  437a81:	48 89 c6             	mov    %rax,%rsi
  437a84:	48 89 df             	mov    %rbx,%rdi
  437a87:	e8 8a ff ff ff       	callq  437a16 <std::__detail::__variant::_Variadic_union<x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>::_Variadic_union<2ul, x666::EndOfFile>(std::in_place_index_t<2ul>, x666::EndOfFile&&)>
  437a8c:	48 83 c4 10          	add    $0x10,%rsp
	{ }
  437a90:	90                   	nop
  437a91:	48 8d 65 f0          	lea    -0x10(%rbp),%rsp
  437a95:	5b                   	pop    %rbx
  437a96:	41 5c                	pop    %r12
  437a98:	5d                   	pop    %rbp
  437a99:	c3                   	retq   

0000000000437a9a <std::__detail::__variant::_Variadic_union<x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>::_Variadic_union<4ul, x666::EndOfFile>(std::in_place_index_t<4ul>, x666::EndOfFile&&)>:
	constexpr _Variadic_union(in_place_index_t<_Np>, _Args&&... __args)
  437a9a:	55                   	push   %rbp
  437a9b:	48 89 e5             	mov    %rsp,%rbp
  437a9e:	41 54                	push   %r12
  437aa0:	53                   	push   %rbx
  437aa1:	48 83 ec 10          	sub    $0x10,%rsp
  437aa5:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  437aa9:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	: _M_rest(in_place_index<_Np-1>, std::forward<_Args>(__args)...)
  437aad:	48 8b 5d e8          	mov    -0x18(%rbp),%rbx
  437ab1:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  437ab5:	48 89 c7             	mov    %rax,%rdi
  437ab8:	e8 12 e8 ff ff       	callq  4362cf <x666::EndOfFile&& std::forward<x666::EndOfFile>(std::remove_reference<x666::EndOfFile>::type&)>
  437abd:	48 83 ec 08          	sub    $0x8,%rsp
  437ac1:	41 54                	push   %r12
  437ac3:	48 89 c6             	mov    %rax,%rsi
  437ac6:	48 89 df             	mov    %rbx,%rdi
  437ac9:	e8 8a ff ff ff       	callq  437a58 <std::__detail::__variant::_Variadic_union<x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>::_Variadic_union<3ul, x666::EndOfFile>(std::in_place_index_t<3ul>, x666::EndOfFile&&)>
  437ace:	48 83 c4 10          	add    $0x10,%rsp
	{ }
  437ad2:	90                   	nop
  437ad3:	48 8d 65 f0          	lea    -0x10(%rbp),%rsp
  437ad7:	5b                   	pop    %rbx
  437ad8:	41 5c                	pop    %r12
  437ada:	5d                   	pop    %rbp
  437adb:	c3                   	retq   

0000000000437adc <std::__detail::__variant::_Variadic_union<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>::_Variadic_union<5ul, x666::EndOfFile>(std::in_place_index_t<5ul>, x666::EndOfFile&&)>:
	constexpr _Variadic_union(in_place_index_t<_Np>, _Args&&... __args)
  437adc:	55                   	push   %rbp
  437add:	48 89 e5             	mov    %rsp,%rbp
  437ae0:	41 54                	push   %r12
  437ae2:	53                   	push   %rbx
  437ae3:	48 83 ec 10          	sub    $0x10,%rsp
  437ae7:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  437aeb:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	: _M_rest(in_place_index<_Np-1>, std::forward<_Args>(__args)...)
  437aef:	48 8b 5d e8          	mov    -0x18(%rbp),%rbx
  437af3:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  437af7:	48 89 c7             	mov    %rax,%rdi
  437afa:	e8 d0 e7 ff ff       	callq  4362cf <x666::EndOfFile&& std::forward<x666::EndOfFile>(std::remove_reference<x666::EndOfFile>::type&)>
  437aff:	48 83 ec 08          	sub    $0x8,%rsp
  437b03:	41 54                	push   %r12
  437b05:	48 89 c6             	mov    %rax,%rsi
  437b08:	48 89 df             	mov    %rbx,%rdi
  437b0b:	e8 8a ff ff ff       	callq  437a9a <std::__detail::__variant::_Variadic_union<x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>::_Variadic_union<4ul, x666::EndOfFile>(std::in_place_index_t<4ul>, x666::EndOfFile&&)>
  437b10:	48 83 c4 10          	add    $0x10,%rsp
	{ }
  437b14:	90                   	nop
  437b15:	48 8d 65 f0          	lea    -0x10(%rbp),%rsp
  437b19:	5b                   	pop    %rbx
  437b1a:	41 5c                	pop    %r12
  437b1c:	5d                   	pop    %rbp
  437b1d:	c3                   	retq   

0000000000437b1e <std::__detail::__variant::_Variant_storage<false, x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>::_Variant_storage<5ul, x666::EndOfFile>(std::in_place_index_t<5ul>, x666::EndOfFile&&)>:
	constexpr _Variant_storage(in_place_index_t<_Np>, _Args&&... __args)
  437b1e:	55                   	push   %rbp
  437b1f:	48 89 e5             	mov    %rsp,%rbp
  437b22:	41 54                	push   %r12
  437b24:	53                   	push   %rbx
  437b25:	48 83 ec 10          	sub    $0x10,%rsp
  437b29:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  437b2d:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	_M_index(_Np)
  437b31:	48 8b 5d e8          	mov    -0x18(%rbp),%rbx
  437b35:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  437b39:	48 89 c7             	mov    %rax,%rdi
  437b3c:	e8 8e e7 ff ff       	callq  4362cf <x666::EndOfFile&& std::forward<x666::EndOfFile>(std::remove_reference<x666::EndOfFile>::type&)>
  437b41:	48 83 ec 08          	sub    $0x8,%rsp
  437b45:	41 54                	push   %r12
  437b47:	48 89 c6             	mov    %rax,%rsi
  437b4a:	48 89 df             	mov    %rbx,%rdi
  437b4d:	e8 8a ff ff ff       	callq  437adc <std::__detail::__variant::_Variadic_union<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>::_Variadic_union<5ul, x666::EndOfFile>(std::in_place_index_t<5ul>, x666::EndOfFile&&)>
  437b52:	48 83 c4 10          	add    $0x10,%rsp
  437b56:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  437b5a:	c6 40 28 05          	movb   $0x5,0x28(%rax)
	{ }
  437b5e:	90                   	nop
  437b5f:	48 8d 65 f0          	lea    -0x10(%rbp),%rsp
  437b63:	5b                   	pop    %rbx
  437b64:	41 5c                	pop    %r12
  437b66:	5d                   	pop    %rbp
  437b67:	c3                   	retq   

0000000000437b68 <std::__detail::__variant::_Uninitialized<x666::Operator, true>::_Uninitialized<x666::Operator>(std::in_place_index_t<0ul>, x666::Operator&&)>:
      constexpr _Uninitialized(in_place_index_t<0>, _Args&&... __args)
  437b68:	55                   	push   %rbp
  437b69:	48 89 e5             	mov    %rsp,%rbp
  437b6c:	48 83 ec 10          	sub    $0x10,%rsp
  437b70:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  437b74:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      : _M_storage(std::forward<_Args>(__args)...)
  437b78:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  437b7c:	48 89 c7             	mov    %rax,%rdi
  437b7f:	e8 f5 e7 ff ff       	callq  436379 <x666::Operator&& std::forward<x666::Operator>(std::remove_reference<x666::Operator>::type&)>
  437b84:	8b 10                	mov    (%rax),%edx
  437b86:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  437b8a:	89 10                	mov    %edx,(%rax)
      { }
  437b8c:	90                   	nop
  437b8d:	c9                   	leaveq 
  437b8e:	c3                   	retq   
  437b8f:	90                   	nop

0000000000437b90 <std::__detail::__variant::_Variadic_union<x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>::_Variadic_union<x666::Operator>(std::in_place_index_t<0ul>, x666::Operator&&)>:
	constexpr _Variadic_union(in_place_index_t<0>, _Args&&... __args)
  437b90:	55                   	push   %rbp
  437b91:	48 89 e5             	mov    %rsp,%rbp
  437b94:	41 54                	push   %r12
  437b96:	53                   	push   %rbx
  437b97:	48 83 ec 10          	sub    $0x10,%rsp
  437b9b:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  437b9f:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	: _M_first(in_place_index<0>, std::forward<_Args>(__args)...)
  437ba3:	48 8b 5d e8          	mov    -0x18(%rbp),%rbx
  437ba7:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  437bab:	48 89 c7             	mov    %rax,%rdi
  437bae:	e8 c6 e7 ff ff       	callq  436379 <x666::Operator&& std::forward<x666::Operator>(std::remove_reference<x666::Operator>::type&)>
  437bb3:	48 83 ec 08          	sub    $0x8,%rsp
  437bb7:	41 54                	push   %r12
  437bb9:	48 89 c6             	mov    %rax,%rsi
  437bbc:	48 89 df             	mov    %rbx,%rdi
  437bbf:	e8 a4 ff ff ff       	callq  437b68 <std::__detail::__variant::_Uninitialized<x666::Operator, true>::_Uninitialized<x666::Operator>(std::in_place_index_t<0ul>, x666::Operator&&)>
  437bc4:	48 83 c4 10          	add    $0x10,%rsp
	{ }
  437bc8:	90                   	nop
  437bc9:	48 8d 65 f0          	lea    -0x10(%rbp),%rsp
  437bcd:	5b                   	pop    %rbx
  437bce:	41 5c                	pop    %r12
  437bd0:	5d                   	pop    %rbp
  437bd1:	c3                   	retq   

0000000000437bd2 <std::__detail::__variant::_Variadic_union<x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>::_Variadic_union<1ul, x666::Operator>(std::in_place_index_t<1ul>, x666::Operator&&)>:
	constexpr _Variadic_union(in_place_index_t<_Np>, _Args&&... __args)
  437bd2:	55                   	push   %rbp
  437bd3:	48 89 e5             	mov    %rsp,%rbp
  437bd6:	41 54                	push   %r12
  437bd8:	53                   	push   %rbx
  437bd9:	48 83 ec 10          	sub    $0x10,%rsp
  437bdd:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  437be1:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	: _M_rest(in_place_index<_Np-1>, std::forward<_Args>(__args)...)
  437be5:	48 8b 5d e8          	mov    -0x18(%rbp),%rbx
  437be9:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  437bed:	48 89 c7             	mov    %rax,%rdi
  437bf0:	e8 84 e7 ff ff       	callq  436379 <x666::Operator&& std::forward<x666::Operator>(std::remove_reference<x666::Operator>::type&)>
  437bf5:	48 83 ec 08          	sub    $0x8,%rsp
  437bf9:	41 54                	push   %r12
  437bfb:	48 89 c6             	mov    %rax,%rsi
  437bfe:	48 89 df             	mov    %rbx,%rdi
  437c01:	e8 8a ff ff ff       	callq  437b90 <std::__detail::__variant::_Variadic_union<x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>::_Variadic_union<x666::Operator>(std::in_place_index_t<0ul>, x666::Operator&&)>
  437c06:	48 83 c4 10          	add    $0x10,%rsp
	{ }
  437c0a:	90                   	nop
  437c0b:	48 8d 65 f0          	lea    -0x10(%rbp),%rsp
  437c0f:	5b                   	pop    %rbx
  437c10:	41 5c                	pop    %r12
  437c12:	5d                   	pop    %rbp
  437c13:	c3                   	retq   

0000000000437c14 <std::__detail::__variant::_Variadic_union<x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>::_Variadic_union<2ul, x666::Operator>(std::in_place_index_t<2ul>, x666::Operator&&)>:
	constexpr _Variadic_union(in_place_index_t<_Np>, _Args&&... __args)
  437c14:	55                   	push   %rbp
  437c15:	48 89 e5             	mov    %rsp,%rbp
  437c18:	41 54                	push   %r12
  437c1a:	53                   	push   %rbx
  437c1b:	48 83 ec 10          	sub    $0x10,%rsp
  437c1f:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  437c23:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	: _M_rest(in_place_index<_Np-1>, std::forward<_Args>(__args)...)
  437c27:	48 8b 5d e8          	mov    -0x18(%rbp),%rbx
  437c2b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  437c2f:	48 89 c7             	mov    %rax,%rdi
  437c32:	e8 42 e7 ff ff       	callq  436379 <x666::Operator&& std::forward<x666::Operator>(std::remove_reference<x666::Operator>::type&)>
  437c37:	48 83 ec 08          	sub    $0x8,%rsp
  437c3b:	41 54                	push   %r12
  437c3d:	48 89 c6             	mov    %rax,%rsi
  437c40:	48 89 df             	mov    %rbx,%rdi
  437c43:	e8 8a ff ff ff       	callq  437bd2 <std::__detail::__variant::_Variadic_union<x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>::_Variadic_union<1ul, x666::Operator>(std::in_place_index_t<1ul>, x666::Operator&&)>
  437c48:	48 83 c4 10          	add    $0x10,%rsp
	{ }
  437c4c:	90                   	nop
  437c4d:	48 8d 65 f0          	lea    -0x10(%rbp),%rsp
  437c51:	5b                   	pop    %rbx
  437c52:	41 5c                	pop    %r12
  437c54:	5d                   	pop    %rbp
  437c55:	c3                   	retq   

0000000000437c56 <std::__detail::__variant::_Variadic_union<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>::_Variadic_union<3ul, x666::Operator>(std::in_place_index_t<3ul>, x666::Operator&&)>:
	constexpr _Variadic_union(in_place_index_t<_Np>, _Args&&... __args)
  437c56:	55                   	push   %rbp
  437c57:	48 89 e5             	mov    %rsp,%rbp
  437c5a:	41 54                	push   %r12
  437c5c:	53                   	push   %rbx
  437c5d:	48 83 ec 10          	sub    $0x10,%rsp
  437c61:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  437c65:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	: _M_rest(in_place_index<_Np-1>, std::forward<_Args>(__args)...)
  437c69:	48 8b 5d e8          	mov    -0x18(%rbp),%rbx
  437c6d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  437c71:	48 89 c7             	mov    %rax,%rdi
  437c74:	e8 00 e7 ff ff       	callq  436379 <x666::Operator&& std::forward<x666::Operator>(std::remove_reference<x666::Operator>::type&)>
  437c79:	48 83 ec 08          	sub    $0x8,%rsp
  437c7d:	41 54                	push   %r12
  437c7f:	48 89 c6             	mov    %rax,%rsi
  437c82:	48 89 df             	mov    %rbx,%rdi
  437c85:	e8 8a ff ff ff       	callq  437c14 <std::__detail::__variant::_Variadic_union<x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>::_Variadic_union<2ul, x666::Operator>(std::in_place_index_t<2ul>, x666::Operator&&)>
  437c8a:	48 83 c4 10          	add    $0x10,%rsp
	{ }
  437c8e:	90                   	nop
  437c8f:	48 8d 65 f0          	lea    -0x10(%rbp),%rsp
  437c93:	5b                   	pop    %rbx
  437c94:	41 5c                	pop    %r12
  437c96:	5d                   	pop    %rbp
  437c97:	c3                   	retq   

0000000000437c98 <std::__detail::__variant::_Variant_storage<false, x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>::_Variant_storage<3ul, x666::Operator>(std::in_place_index_t<3ul>, x666::Operator&&)>:
	constexpr _Variant_storage(in_place_index_t<_Np>, _Args&&... __args)
  437c98:	55                   	push   %rbp
  437c99:	48 89 e5             	mov    %rsp,%rbp
  437c9c:	41 54                	push   %r12
  437c9e:	53                   	push   %rbx
  437c9f:	48 83 ec 10          	sub    $0x10,%rsp
  437ca3:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  437ca7:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	_M_index(_Np)
  437cab:	48 8b 5d e8          	mov    -0x18(%rbp),%rbx
  437caf:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  437cb3:	48 89 c7             	mov    %rax,%rdi
  437cb6:	e8 be e6 ff ff       	callq  436379 <x666::Operator&& std::forward<x666::Operator>(std::remove_reference<x666::Operator>::type&)>
  437cbb:	48 83 ec 08          	sub    $0x8,%rsp
  437cbf:	41 54                	push   %r12
  437cc1:	48 89 c6             	mov    %rax,%rsi
  437cc4:	48 89 df             	mov    %rbx,%rdi
  437cc7:	e8 8a ff ff ff       	callq  437c56 <std::__detail::__variant::_Variadic_union<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>::_Variadic_union<3ul, x666::Operator>(std::in_place_index_t<3ul>, x666::Operator&&)>
  437ccc:	48 83 c4 10          	add    $0x10,%rsp
  437cd0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  437cd4:	c6 40 28 03          	movb   $0x3,0x28(%rax)
	{ }
  437cd8:	90                   	nop
  437cd9:	48 8d 65 f0          	lea    -0x10(%rbp),%rsp
  437cdd:	5b                   	pop    %rbx
  437cde:	41 5c                	pop    %r12
  437ce0:	5d                   	pop    %rbp
  437ce1:	c3                   	retq   

0000000000437ce2 <std::__detail::__variant::_Uninitialized<x666::LexError, false>::_Uninitialized<x666::LexError>(std::in_place_index_t<0ul>, x666::LexError&&)>:
      constexpr _Uninitialized(in_place_index_t<0>, _Args&&... __args)
  437ce2:	55                   	push   %rbp
  437ce3:	48 89 e5             	mov    %rsp,%rbp
  437ce6:	53                   	push   %rbx
  437ce7:	48 83 ec 18          	sub    $0x18,%rsp
  437ceb:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  437cef:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
      { ::new (&_M_storage) _Type(std::forward<_Args>(__args)...); }
  437cf3:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  437cf7:	48 89 c7             	mov    %rax,%rdi
  437cfa:	e8 24 e7 ff ff       	callq  436423 <x666::LexError&& std::forward<x666::LexError>(std::remove_reference<x666::LexError>::type&)>
  437cff:	48 89 c3             	mov    %rax,%rbx
  437d02:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  437d06:	48 89 c6             	mov    %rax,%rsi
  437d09:	bf 28 00 00 00       	mov    $0x28,%edi
  437d0e:	e8 79 de ff ff       	callq  435b8c <operator new(unsigned long, void*)>
  437d13:	48 89 c1             	mov    %rax,%rcx
  437d16:	48 8b 03             	mov    (%rbx),%rax
  437d19:	48 8b 53 08          	mov    0x8(%rbx),%rdx
  437d1d:	48 89 01             	mov    %rax,(%rcx)
  437d20:	48 89 51 08          	mov    %rdx,0x8(%rcx)
  437d24:	48 8b 43 10          	mov    0x10(%rbx),%rax
  437d28:	48 8b 53 18          	mov    0x18(%rbx),%rdx
  437d2c:	48 89 41 10          	mov    %rax,0x10(%rcx)
  437d30:	48 89 51 18          	mov    %rdx,0x18(%rcx)
  437d34:	48 8b 43 20          	mov    0x20(%rbx),%rax
  437d38:	48 89 41 20          	mov    %rax,0x20(%rcx)
  437d3c:	90                   	nop
  437d3d:	48 83 c4 18          	add    $0x18,%rsp
  437d41:	5b                   	pop    %rbx
  437d42:	5d                   	pop    %rbp
  437d43:	c3                   	retq   

0000000000437d44 <std::__detail::__variant::_Variadic_union<x666::LexError>::_Variadic_union<x666::LexError>(std::in_place_index_t<0ul>, x666::LexError&&)>:
	constexpr _Variadic_union(in_place_index_t<0>, _Args&&... __args)
  437d44:	55                   	push   %rbp
  437d45:	48 89 e5             	mov    %rsp,%rbp
  437d48:	41 54                	push   %r12
  437d4a:	53                   	push   %rbx
  437d4b:	48 83 ec 10          	sub    $0x10,%rsp
  437d4f:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  437d53:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	: _M_first(in_place_index<0>, std::forward<_Args>(__args)...)
  437d57:	48 8b 5d e8          	mov    -0x18(%rbp),%rbx
  437d5b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  437d5f:	48 89 c7             	mov    %rax,%rdi
  437d62:	e8 bc e6 ff ff       	callq  436423 <x666::LexError&& std::forward<x666::LexError>(std::remove_reference<x666::LexError>::type&)>
  437d67:	48 83 ec 08          	sub    $0x8,%rsp
  437d6b:	41 54                	push   %r12
  437d6d:	48 89 c6             	mov    %rax,%rsi
  437d70:	48 89 df             	mov    %rbx,%rdi
  437d73:	e8 6a ff ff ff       	callq  437ce2 <std::__detail::__variant::_Uninitialized<x666::LexError, false>::_Uninitialized<x666::LexError>(std::in_place_index_t<0ul>, x666::LexError&&)>
  437d78:	48 83 c4 10          	add    $0x10,%rsp
	{ }
  437d7c:	90                   	nop
  437d7d:	48 8d 65 f0          	lea    -0x10(%rbp),%rsp
  437d81:	5b                   	pop    %rbx
  437d82:	41 5c                	pop    %r12
  437d84:	5d                   	pop    %rbp
  437d85:	c3                   	retq   

0000000000437d86 <std::__detail::__variant::_Variadic_union<x666::EndOfFile, x666::LexError>::_Variadic_union<1ul, x666::LexError>(std::in_place_index_t<1ul>, x666::LexError&&)>:
	constexpr _Variadic_union(in_place_index_t<_Np>, _Args&&... __args)
  437d86:	55                   	push   %rbp
  437d87:	48 89 e5             	mov    %rsp,%rbp
  437d8a:	41 54                	push   %r12
  437d8c:	53                   	push   %rbx
  437d8d:	48 83 ec 10          	sub    $0x10,%rsp
  437d91:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  437d95:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	: _M_rest(in_place_index<_Np-1>, std::forward<_Args>(__args)...)
  437d99:	48 8b 5d e8          	mov    -0x18(%rbp),%rbx
  437d9d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  437da1:	48 89 c7             	mov    %rax,%rdi
  437da4:	e8 7a e6 ff ff       	callq  436423 <x666::LexError&& std::forward<x666::LexError>(std::remove_reference<x666::LexError>::type&)>
  437da9:	48 83 ec 08          	sub    $0x8,%rsp
  437dad:	41 54                	push   %r12
  437daf:	48 89 c6             	mov    %rax,%rsi
  437db2:	48 89 df             	mov    %rbx,%rdi
  437db5:	e8 8a ff ff ff       	callq  437d44 <std::__detail::__variant::_Variadic_union<x666::LexError>::_Variadic_union<x666::LexError>(std::in_place_index_t<0ul>, x666::LexError&&)>
  437dba:	48 83 c4 10          	add    $0x10,%rsp
	{ }
  437dbe:	90                   	nop
  437dbf:	48 8d 65 f0          	lea    -0x10(%rbp),%rsp
  437dc3:	5b                   	pop    %rbx
  437dc4:	41 5c                	pop    %r12
  437dc6:	5d                   	pop    %rbp
  437dc7:	c3                   	retq   

0000000000437dc8 <std::__detail::__variant::_Variadic_union<x666::Newline, x666::EndOfFile, x666::LexError>::_Variadic_union<2ul, x666::LexError>(std::in_place_index_t<2ul>, x666::LexError&&)>:
	constexpr _Variadic_union(in_place_index_t<_Np>, _Args&&... __args)
  437dc8:	55                   	push   %rbp
  437dc9:	48 89 e5             	mov    %rsp,%rbp
  437dcc:	41 54                	push   %r12
  437dce:	53                   	push   %rbx
  437dcf:	48 83 ec 10          	sub    $0x10,%rsp
  437dd3:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  437dd7:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	: _M_rest(in_place_index<_Np-1>, std::forward<_Args>(__args)...)
  437ddb:	48 8b 5d e8          	mov    -0x18(%rbp),%rbx
  437ddf:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  437de3:	48 89 c7             	mov    %rax,%rdi
  437de6:	e8 38 e6 ff ff       	callq  436423 <x666::LexError&& std::forward<x666::LexError>(std::remove_reference<x666::LexError>::type&)>
  437deb:	48 83 ec 08          	sub    $0x8,%rsp
  437def:	41 54                	push   %r12
  437df1:	48 89 c6             	mov    %rax,%rsi
  437df4:	48 89 df             	mov    %rbx,%rdi
  437df7:	e8 8a ff ff ff       	callq  437d86 <std::__detail::__variant::_Variadic_union<x666::EndOfFile, x666::LexError>::_Variadic_union<1ul, x666::LexError>(std::in_place_index_t<1ul>, x666::LexError&&)>
  437dfc:	48 83 c4 10          	add    $0x10,%rsp
	{ }
  437e00:	90                   	nop
  437e01:	48 8d 65 f0          	lea    -0x10(%rbp),%rsp
  437e05:	5b                   	pop    %rbx
  437e06:	41 5c                	pop    %r12
  437e08:	5d                   	pop    %rbp
  437e09:	c3                   	retq   

0000000000437e0a <std::__detail::__variant::_Variadic_union<x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>::_Variadic_union<3ul, x666::LexError>(std::in_place_index_t<3ul>, x666::LexError&&)>:
	constexpr _Variadic_union(in_place_index_t<_Np>, _Args&&... __args)
  437e0a:	55                   	push   %rbp
  437e0b:	48 89 e5             	mov    %rsp,%rbp
  437e0e:	41 54                	push   %r12
  437e10:	53                   	push   %rbx
  437e11:	48 83 ec 10          	sub    $0x10,%rsp
  437e15:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  437e19:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	: _M_rest(in_place_index<_Np-1>, std::forward<_Args>(__args)...)
  437e1d:	48 8b 5d e8          	mov    -0x18(%rbp),%rbx
  437e21:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  437e25:	48 89 c7             	mov    %rax,%rdi
  437e28:	e8 f6 e5 ff ff       	callq  436423 <x666::LexError&& std::forward<x666::LexError>(std::remove_reference<x666::LexError>::type&)>
  437e2d:	48 83 ec 08          	sub    $0x8,%rsp
  437e31:	41 54                	push   %r12
  437e33:	48 89 c6             	mov    %rax,%rsi
  437e36:	48 89 df             	mov    %rbx,%rdi
  437e39:	e8 8a ff ff ff       	callq  437dc8 <std::__detail::__variant::_Variadic_union<x666::Newline, x666::EndOfFile, x666::LexError>::_Variadic_union<2ul, x666::LexError>(std::in_place_index_t<2ul>, x666::LexError&&)>
  437e3e:	48 83 c4 10          	add    $0x10,%rsp
	{ }
  437e42:	90                   	nop
  437e43:	48 8d 65 f0          	lea    -0x10(%rbp),%rsp
  437e47:	5b                   	pop    %rbx
  437e48:	41 5c                	pop    %r12
  437e4a:	5d                   	pop    %rbp
  437e4b:	c3                   	retq   

0000000000437e4c <std::__detail::__variant::_Variadic_union<x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>::_Variadic_union<4ul, x666::LexError>(std::in_place_index_t<4ul>, x666::LexError&&)>:
	constexpr _Variadic_union(in_place_index_t<_Np>, _Args&&... __args)
  437e4c:	55                   	push   %rbp
  437e4d:	48 89 e5             	mov    %rsp,%rbp
  437e50:	41 54                	push   %r12
  437e52:	53                   	push   %rbx
  437e53:	48 83 ec 10          	sub    $0x10,%rsp
  437e57:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  437e5b:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	: _M_rest(in_place_index<_Np-1>, std::forward<_Args>(__args)...)
  437e5f:	48 8b 5d e8          	mov    -0x18(%rbp),%rbx
  437e63:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  437e67:	48 89 c7             	mov    %rax,%rdi
  437e6a:	e8 b4 e5 ff ff       	callq  436423 <x666::LexError&& std::forward<x666::LexError>(std::remove_reference<x666::LexError>::type&)>
  437e6f:	48 83 ec 08          	sub    $0x8,%rsp
  437e73:	41 54                	push   %r12
  437e75:	48 89 c6             	mov    %rax,%rsi
  437e78:	48 89 df             	mov    %rbx,%rdi
  437e7b:	e8 8a ff ff ff       	callq  437e0a <std::__detail::__variant::_Variadic_union<x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>::_Variadic_union<3ul, x666::LexError>(std::in_place_index_t<3ul>, x666::LexError&&)>
  437e80:	48 83 c4 10          	add    $0x10,%rsp
	{ }
  437e84:	90                   	nop
  437e85:	48 8d 65 f0          	lea    -0x10(%rbp),%rsp
  437e89:	5b                   	pop    %rbx
  437e8a:	41 5c                	pop    %r12
  437e8c:	5d                   	pop    %rbp
  437e8d:	c3                   	retq   

0000000000437e8e <std::__detail::__variant::_Variadic_union<x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>::_Variadic_union<5ul, x666::LexError>(std::in_place_index_t<5ul>, x666::LexError&&)>:
	constexpr _Variadic_union(in_place_index_t<_Np>, _Args&&... __args)
  437e8e:	55                   	push   %rbp
  437e8f:	48 89 e5             	mov    %rsp,%rbp
  437e92:	41 54                	push   %r12
  437e94:	53                   	push   %rbx
  437e95:	48 83 ec 10          	sub    $0x10,%rsp
  437e99:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  437e9d:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	: _M_rest(in_place_index<_Np-1>, std::forward<_Args>(__args)...)
  437ea1:	48 8b 5d e8          	mov    -0x18(%rbp),%rbx
  437ea5:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  437ea9:	48 89 c7             	mov    %rax,%rdi
  437eac:	e8 72 e5 ff ff       	callq  436423 <x666::LexError&& std::forward<x666::LexError>(std::remove_reference<x666::LexError>::type&)>
  437eb1:	48 83 ec 08          	sub    $0x8,%rsp
  437eb5:	41 54                	push   %r12
  437eb7:	48 89 c6             	mov    %rax,%rsi
  437eba:	48 89 df             	mov    %rbx,%rdi
  437ebd:	e8 8a ff ff ff       	callq  437e4c <std::__detail::__variant::_Variadic_union<x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>::_Variadic_union<4ul, x666::LexError>(std::in_place_index_t<4ul>, x666::LexError&&)>
  437ec2:	48 83 c4 10          	add    $0x10,%rsp
	{ }
  437ec6:	90                   	nop
  437ec7:	48 8d 65 f0          	lea    -0x10(%rbp),%rsp
  437ecb:	5b                   	pop    %rbx
  437ecc:	41 5c                	pop    %r12
  437ece:	5d                   	pop    %rbp
  437ecf:	c3                   	retq   

0000000000437ed0 <std::__detail::__variant::_Variadic_union<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>::_Variadic_union<6ul, x666::LexError>(std::in_place_index_t<6ul>, x666::LexError&&)>:
	constexpr _Variadic_union(in_place_index_t<_Np>, _Args&&... __args)
  437ed0:	55                   	push   %rbp
  437ed1:	48 89 e5             	mov    %rsp,%rbp
  437ed4:	41 54                	push   %r12
  437ed6:	53                   	push   %rbx
  437ed7:	48 83 ec 10          	sub    $0x10,%rsp
  437edb:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  437edf:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	: _M_rest(in_place_index<_Np-1>, std::forward<_Args>(__args)...)
  437ee3:	48 8b 5d e8          	mov    -0x18(%rbp),%rbx
  437ee7:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  437eeb:	48 89 c7             	mov    %rax,%rdi
  437eee:	e8 30 e5 ff ff       	callq  436423 <x666::LexError&& std::forward<x666::LexError>(std::remove_reference<x666::LexError>::type&)>
  437ef3:	48 83 ec 08          	sub    $0x8,%rsp
  437ef7:	41 54                	push   %r12
  437ef9:	48 89 c6             	mov    %rax,%rsi
  437efc:	48 89 df             	mov    %rbx,%rdi
  437eff:	e8 8a ff ff ff       	callq  437e8e <std::__detail::__variant::_Variadic_union<x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>::_Variadic_union<5ul, x666::LexError>(std::in_place_index_t<5ul>, x666::LexError&&)>
  437f04:	48 83 c4 10          	add    $0x10,%rsp
	{ }
  437f08:	90                   	nop
  437f09:	48 8d 65 f0          	lea    -0x10(%rbp),%rsp
  437f0d:	5b                   	pop    %rbx
  437f0e:	41 5c                	pop    %r12
  437f10:	5d                   	pop    %rbp
  437f11:	c3                   	retq   

0000000000437f12 <std::__detail::__variant::_Variant_storage<false, x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>::_Variant_storage<6ul, x666::LexError>(std::in_place_index_t<6ul>, x666::LexError&&)>:
	constexpr _Variant_storage(in_place_index_t<_Np>, _Args&&... __args)
  437f12:	55                   	push   %rbp
  437f13:	48 89 e5             	mov    %rsp,%rbp
  437f16:	41 54                	push   %r12
  437f18:	53                   	push   %rbx
  437f19:	48 83 ec 10          	sub    $0x10,%rsp
  437f1d:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  437f21:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	_M_index(_Np)
  437f25:	48 8b 5d e8          	mov    -0x18(%rbp),%rbx
  437f29:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  437f2d:	48 89 c7             	mov    %rax,%rdi
  437f30:	e8 ee e4 ff ff       	callq  436423 <x666::LexError&& std::forward<x666::LexError>(std::remove_reference<x666::LexError>::type&)>
  437f35:	48 83 ec 08          	sub    $0x8,%rsp
  437f39:	41 54                	push   %r12
  437f3b:	48 89 c6             	mov    %rax,%rsi
  437f3e:	48 89 df             	mov    %rbx,%rdi
  437f41:	e8 8a ff ff ff       	callq  437ed0 <std::__detail::__variant::_Variadic_union<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>::_Variadic_union<6ul, x666::LexError>(std::in_place_index_t<6ul>, x666::LexError&&)>
  437f46:	48 83 c4 10          	add    $0x10,%rsp
  437f4a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  437f4e:	c6 40 28 06          	movb   $0x6,0x28(%rax)
	{ }
  437f52:	90                   	nop
  437f53:	48 8d 65 f0          	lea    -0x10(%rbp),%rsp
  437f57:	5b                   	pop    %rbx
  437f58:	41 5c                	pop    %r12
  437f5a:	5d                   	pop    %rbp
  437f5b:	c3                   	retq   

0000000000437f5c <std::__detail::__variant::_Uninitialized<x666::IntLiteral, false>::_Uninitialized<x666::IntLiteral>(std::in_place_index_t<0ul>, x666::IntLiteral&&)>:
      constexpr _Uninitialized(in_place_index_t<0>, _Args&&... __args)
  437f5c:	55                   	push   %rbp
  437f5d:	48 89 e5             	mov    %rsp,%rbp
  437f60:	53                   	push   %rbx
  437f61:	48 83 ec 18          	sub    $0x18,%rsp
  437f65:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  437f69:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
      { ::new (&_M_storage) _Type(std::forward<_Args>(__args)...); }
  437f6d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  437f71:	48 89 c7             	mov    %rax,%rdi
  437f74:	e8 54 e5 ff ff       	callq  4364cd <x666::IntLiteral&& std::forward<x666::IntLiteral>(std::remove_reference<x666::IntLiteral>::type&)>
  437f79:	48 89 c3             	mov    %rax,%rbx
  437f7c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  437f80:	48 89 c6             	mov    %rax,%rsi
  437f83:	bf 08 00 00 00       	mov    $0x8,%edi
  437f88:	e8 ff db ff ff       	callq  435b8c <operator new(unsigned long, void*)>
  437f8d:	48 89 c2             	mov    %rax,%rdx
  437f90:	48 8b 03             	mov    (%rbx),%rax
  437f93:	48 89 02             	mov    %rax,(%rdx)
  437f96:	90                   	nop
  437f97:	48 83 c4 18          	add    $0x18,%rsp
  437f9b:	5b                   	pop    %rbx
  437f9c:	5d                   	pop    %rbp
  437f9d:	c3                   	retq   

0000000000437f9e <std::__detail::__variant::_Variadic_union<x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>::_Variadic_union<x666::IntLiteral>(std::in_place_index_t<0ul>, x666::IntLiteral&&)>:
	constexpr _Variadic_union(in_place_index_t<0>, _Args&&... __args)
  437f9e:	55                   	push   %rbp
  437f9f:	48 89 e5             	mov    %rsp,%rbp
  437fa2:	41 54                	push   %r12
  437fa4:	53                   	push   %rbx
  437fa5:	48 83 ec 10          	sub    $0x10,%rsp
  437fa9:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  437fad:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	: _M_first(in_place_index<0>, std::forward<_Args>(__args)...)
  437fb1:	48 8b 5d e8          	mov    -0x18(%rbp),%rbx
  437fb5:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  437fb9:	48 89 c7             	mov    %rax,%rdi
  437fbc:	e8 0c e5 ff ff       	callq  4364cd <x666::IntLiteral&& std::forward<x666::IntLiteral>(std::remove_reference<x666::IntLiteral>::type&)>
  437fc1:	48 83 ec 08          	sub    $0x8,%rsp
  437fc5:	41 54                	push   %r12
  437fc7:	48 89 c6             	mov    %rax,%rsi
  437fca:	48 89 df             	mov    %rbx,%rdi
  437fcd:	e8 8a ff ff ff       	callq  437f5c <std::__detail::__variant::_Uninitialized<x666::IntLiteral, false>::_Uninitialized<x666::IntLiteral>(std::in_place_index_t<0ul>, x666::IntLiteral&&)>
  437fd2:	48 83 c4 10          	add    $0x10,%rsp
	{ }
  437fd6:	90                   	nop
  437fd7:	48 8d 65 f0          	lea    -0x10(%rbp),%rsp
  437fdb:	5b                   	pop    %rbx
  437fdc:	41 5c                	pop    %r12
  437fde:	5d                   	pop    %rbp
  437fdf:	c3                   	retq   

0000000000437fe0 <std::__detail::__variant::_Variadic_union<x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>::_Variadic_union<1ul, x666::IntLiteral>(std::in_place_index_t<1ul>, x666::IntLiteral&&)>:
	constexpr _Variadic_union(in_place_index_t<_Np>, _Args&&... __args)
  437fe0:	55                   	push   %rbp
  437fe1:	48 89 e5             	mov    %rsp,%rbp
  437fe4:	41 54                	push   %r12
  437fe6:	53                   	push   %rbx
  437fe7:	48 83 ec 10          	sub    $0x10,%rsp
  437feb:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  437fef:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	: _M_rest(in_place_index<_Np-1>, std::forward<_Args>(__args)...)
  437ff3:	48 8b 5d e8          	mov    -0x18(%rbp),%rbx
  437ff7:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  437ffb:	48 89 c7             	mov    %rax,%rdi
  437ffe:	e8 ca e4 ff ff       	callq  4364cd <x666::IntLiteral&& std::forward<x666::IntLiteral>(std::remove_reference<x666::IntLiteral>::type&)>
  438003:	48 83 ec 08          	sub    $0x8,%rsp
  438007:	41 54                	push   %r12
  438009:	48 89 c6             	mov    %rax,%rsi
  43800c:	48 89 df             	mov    %rbx,%rdi
  43800f:	e8 8a ff ff ff       	callq  437f9e <std::__detail::__variant::_Variadic_union<x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>::_Variadic_union<x666::IntLiteral>(std::in_place_index_t<0ul>, x666::IntLiteral&&)>
  438014:	48 83 c4 10          	add    $0x10,%rsp
	{ }
  438018:	90                   	nop
  438019:	48 8d 65 f0          	lea    -0x10(%rbp),%rsp
  43801d:	5b                   	pop    %rbx
  43801e:	41 5c                	pop    %r12
  438020:	5d                   	pop    %rbp
  438021:	c3                   	retq   

0000000000438022 <std::__detail::__variant::_Variadic_union<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>::_Variadic_union<2ul, x666::IntLiteral>(std::in_place_index_t<2ul>, x666::IntLiteral&&)>:
	constexpr _Variadic_union(in_place_index_t<_Np>, _Args&&... __args)
  438022:	55                   	push   %rbp
  438023:	48 89 e5             	mov    %rsp,%rbp
  438026:	41 54                	push   %r12
  438028:	53                   	push   %rbx
  438029:	48 83 ec 10          	sub    $0x10,%rsp
  43802d:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  438031:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	: _M_rest(in_place_index<_Np-1>, std::forward<_Args>(__args)...)
  438035:	48 8b 5d e8          	mov    -0x18(%rbp),%rbx
  438039:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  43803d:	48 89 c7             	mov    %rax,%rdi
  438040:	e8 88 e4 ff ff       	callq  4364cd <x666::IntLiteral&& std::forward<x666::IntLiteral>(std::remove_reference<x666::IntLiteral>::type&)>
  438045:	48 83 ec 08          	sub    $0x8,%rsp
  438049:	41 54                	push   %r12
  43804b:	48 89 c6             	mov    %rax,%rsi
  43804e:	48 89 df             	mov    %rbx,%rdi
  438051:	e8 8a ff ff ff       	callq  437fe0 <std::__detail::__variant::_Variadic_union<x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>::_Variadic_union<1ul, x666::IntLiteral>(std::in_place_index_t<1ul>, x666::IntLiteral&&)>
  438056:	48 83 c4 10          	add    $0x10,%rsp
	{ }
  43805a:	90                   	nop
  43805b:	48 8d 65 f0          	lea    -0x10(%rbp),%rsp
  43805f:	5b                   	pop    %rbx
  438060:	41 5c                	pop    %r12
  438062:	5d                   	pop    %rbp
  438063:	c3                   	retq   

0000000000438064 <std::__detail::__variant::_Variant_storage<false, x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>::_Variant_storage<2ul, x666::IntLiteral>(std::in_place_index_t<2ul>, x666::IntLiteral&&)>:
	constexpr _Variant_storage(in_place_index_t<_Np>, _Args&&... __args)
  438064:	55                   	push   %rbp
  438065:	48 89 e5             	mov    %rsp,%rbp
  438068:	41 54                	push   %r12
  43806a:	53                   	push   %rbx
  43806b:	48 83 ec 10          	sub    $0x10,%rsp
  43806f:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  438073:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	_M_index(_Np)
  438077:	48 8b 5d e8          	mov    -0x18(%rbp),%rbx
  43807b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  43807f:	48 89 c7             	mov    %rax,%rdi
  438082:	e8 46 e4 ff ff       	callq  4364cd <x666::IntLiteral&& std::forward<x666::IntLiteral>(std::remove_reference<x666::IntLiteral>::type&)>
  438087:	48 83 ec 08          	sub    $0x8,%rsp
  43808b:	41 54                	push   %r12
  43808d:	48 89 c6             	mov    %rax,%rsi
  438090:	48 89 df             	mov    %rbx,%rdi
  438093:	e8 8a ff ff ff       	callq  438022 <std::__detail::__variant::_Variadic_union<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>::_Variadic_union<2ul, x666::IntLiteral>(std::in_place_index_t<2ul>, x666::IntLiteral&&)>
  438098:	48 83 c4 10          	add    $0x10,%rsp
  43809c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4380a0:	c6 40 28 02          	movb   $0x2,0x28(%rax)
	{ }
  4380a4:	90                   	nop
  4380a5:	48 8d 65 f0          	lea    -0x10(%rbp),%rsp
  4380a9:	5b                   	pop    %rbx
  4380aa:	41 5c                	pop    %r12
  4380ac:	5d                   	pop    %rbp
  4380ad:	c3                   	retq   

00000000004380ae <x666::Identifier::Identifier(x666::Identifier&&)>:
  struct Identifier {
  4380ae:	55                   	push   %rbp
  4380af:	48 89 e5             	mov    %rsp,%rbp
  4380b2:	48 83 ec 10          	sub    $0x10,%rsp
  4380b6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4380ba:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  4380be:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4380c2:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  4380c6:	48 89 d6             	mov    %rdx,%rsi
  4380c9:	48 89 c7             	mov    %rax,%rdi
  4380cc:	e8 25 df ff ff       	callq  435ff6 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)>
  4380d1:	90                   	nop
  4380d2:	c9                   	leaveq 
  4380d3:	c3                   	retq   

00000000004380d4 <std::__detail::__variant::_Uninitialized<x666::Identifier, false>::_Uninitialized<x666::Identifier>(std::in_place_index_t<0ul>, x666::Identifier&&)>:
      constexpr _Uninitialized(in_place_index_t<0>, _Args&&... __args)
  4380d4:	55                   	push   %rbp
  4380d5:	48 89 e5             	mov    %rsp,%rbp
  4380d8:	53                   	push   %rbx
  4380d9:	48 83 ec 18          	sub    $0x18,%rsp
  4380dd:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  4380e1:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
      { ::new (&_M_storage) _Type(std::forward<_Args>(__args)...); }
  4380e5:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4380e9:	48 89 c7             	mov    %rax,%rdi
  4380ec:	e8 86 e4 ff ff       	callq  436577 <x666::Identifier&& std::forward<x666::Identifier>(std::remove_reference<x666::Identifier>::type&)>
  4380f1:	48 89 c3             	mov    %rax,%rbx
  4380f4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4380f8:	48 89 c6             	mov    %rax,%rsi
  4380fb:	bf 20 00 00 00       	mov    $0x20,%edi
  438100:	e8 87 da ff ff       	callq  435b8c <operator new(unsigned long, void*)>
  438105:	48 89 de             	mov    %rbx,%rsi
  438108:	48 89 c7             	mov    %rax,%rdi
  43810b:	e8 9e ff ff ff       	callq  4380ae <x666::Identifier::Identifier(x666::Identifier&&)>
  438110:	90                   	nop
  438111:	48 83 c4 18          	add    $0x18,%rsp
  438115:	5b                   	pop    %rbx
  438116:	5d                   	pop    %rbp
  438117:	c3                   	retq   

0000000000438118 <std::__detail::__variant::_Variadic_union<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>::_Variadic_union<x666::Identifier>(std::in_place_index_t<0ul>, x666::Identifier&&)>:
	constexpr _Variadic_union(in_place_index_t<0>, _Args&&... __args)
  438118:	55                   	push   %rbp
  438119:	48 89 e5             	mov    %rsp,%rbp
  43811c:	41 54                	push   %r12
  43811e:	53                   	push   %rbx
  43811f:	48 83 ec 10          	sub    $0x10,%rsp
  438123:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  438127:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	: _M_first(in_place_index<0>, std::forward<_Args>(__args)...)
  43812b:	48 8b 5d e8          	mov    -0x18(%rbp),%rbx
  43812f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  438133:	48 89 c7             	mov    %rax,%rdi
  438136:	e8 3c e4 ff ff       	callq  436577 <x666::Identifier&& std::forward<x666::Identifier>(std::remove_reference<x666::Identifier>::type&)>
  43813b:	48 83 ec 08          	sub    $0x8,%rsp
  43813f:	41 54                	push   %r12
  438141:	48 89 c6             	mov    %rax,%rsi
  438144:	48 89 df             	mov    %rbx,%rdi
  438147:	e8 88 ff ff ff       	callq  4380d4 <std::__detail::__variant::_Uninitialized<x666::Identifier, false>::_Uninitialized<x666::Identifier>(std::in_place_index_t<0ul>, x666::Identifier&&)>
  43814c:	48 83 c4 10          	add    $0x10,%rsp
	{ }
  438150:	90                   	nop
  438151:	48 8d 65 f0          	lea    -0x10(%rbp),%rsp
  438155:	5b                   	pop    %rbx
  438156:	41 5c                	pop    %r12
  438158:	5d                   	pop    %rbp
  438159:	c3                   	retq   

000000000043815a <std::__detail::__variant::_Variant_storage<false, x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>::_Variant_storage<0ul, x666::Identifier>(std::in_place_index_t<0ul>, x666::Identifier&&)>:
	constexpr _Variant_storage(in_place_index_t<_Np>, _Args&&... __args)
  43815a:	55                   	push   %rbp
  43815b:	48 89 e5             	mov    %rsp,%rbp
  43815e:	41 54                	push   %r12
  438160:	53                   	push   %rbx
  438161:	48 83 ec 10          	sub    $0x10,%rsp
  438165:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  438169:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	_M_index(_Np)
  43816d:	48 8b 5d e8          	mov    -0x18(%rbp),%rbx
  438171:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  438175:	48 89 c7             	mov    %rax,%rdi
  438178:	e8 fa e3 ff ff       	callq  436577 <x666::Identifier&& std::forward<x666::Identifier>(std::remove_reference<x666::Identifier>::type&)>
  43817d:	48 83 ec 08          	sub    $0x8,%rsp
  438181:	41 54                	push   %r12
  438183:	48 89 c6             	mov    %rax,%rsi
  438186:	48 89 df             	mov    %rbx,%rdi
  438189:	e8 8a ff ff ff       	callq  438118 <std::__detail::__variant::_Variadic_union<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>::_Variadic_union<x666::Identifier>(std::in_place_index_t<0ul>, x666::Identifier&&)>
  43818e:	48 83 c4 10          	add    $0x10,%rsp
  438192:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  438196:	c6 40 28 00          	movb   $0x0,0x28(%rax)
	{ }
  43819a:	90                   	nop
  43819b:	48 8d 65 f0          	lea    -0x10(%rbp),%rsp
  43819f:	5b                   	pop    %rbx
  4381a0:	41 5c                	pop    %r12
  4381a2:	5d                   	pop    %rbp
  4381a3:	c3                   	retq   

00000000004381a4 <x666::StringLiteral::StringLiteral(x666::StringLiteral&&)>:
  struct StringLiteral {
  4381a4:	55                   	push   %rbp
  4381a5:	48 89 e5             	mov    %rsp,%rbp
  4381a8:	48 83 ec 10          	sub    $0x10,%rsp
  4381ac:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4381b0:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  4381b4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4381b8:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  4381bc:	48 89 d6             	mov    %rdx,%rsi
  4381bf:	48 89 c7             	mov    %rax,%rdi
  4381c2:	e8 2f de ff ff       	callq  435ff6 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)>
  4381c7:	90                   	nop
  4381c8:	c9                   	leaveq 
  4381c9:	c3                   	retq   

00000000004381ca <std::__detail::__variant::_Uninitialized<x666::StringLiteral, false>::_Uninitialized<x666::StringLiteral>(std::in_place_index_t<0ul>, x666::StringLiteral&&)>:
      constexpr _Uninitialized(in_place_index_t<0>, _Args&&... __args)
  4381ca:	55                   	push   %rbp
  4381cb:	48 89 e5             	mov    %rsp,%rbp
  4381ce:	53                   	push   %rbx
  4381cf:	48 83 ec 18          	sub    $0x18,%rsp
  4381d3:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  4381d7:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
      { ::new (&_M_storage) _Type(std::forward<_Args>(__args)...); }
  4381db:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4381df:	48 89 c7             	mov    %rax,%rdi
  4381e2:	e8 3a e4 ff ff       	callq  436621 <x666::StringLiteral&& std::forward<x666::StringLiteral>(std::remove_reference<x666::StringLiteral>::type&)>
  4381e7:	48 89 c3             	mov    %rax,%rbx
  4381ea:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4381ee:	48 89 c6             	mov    %rax,%rsi
  4381f1:	bf 20 00 00 00       	mov    $0x20,%edi
  4381f6:	e8 91 d9 ff ff       	callq  435b8c <operator new(unsigned long, void*)>
  4381fb:	48 89 de             	mov    %rbx,%rsi
  4381fe:	48 89 c7             	mov    %rax,%rdi
  438201:	e8 9e ff ff ff       	callq  4381a4 <x666::StringLiteral::StringLiteral(x666::StringLiteral&&)>
  438206:	90                   	nop
  438207:	48 83 c4 18          	add    $0x18,%rsp
  43820b:	5b                   	pop    %rbx
  43820c:	5d                   	pop    %rbp
  43820d:	c3                   	retq   

000000000043820e <std::__detail::__variant::_Variadic_union<x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>::_Variadic_union<x666::StringLiteral>(std::in_place_index_t<0ul>, x666::StringLiteral&&)>:
	constexpr _Variadic_union(in_place_index_t<0>, _Args&&... __args)
  43820e:	55                   	push   %rbp
  43820f:	48 89 e5             	mov    %rsp,%rbp
  438212:	41 54                	push   %r12
  438214:	53                   	push   %rbx
  438215:	48 83 ec 10          	sub    $0x10,%rsp
  438219:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  43821d:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	: _M_first(in_place_index<0>, std::forward<_Args>(__args)...)
  438221:	48 8b 5d e8          	mov    -0x18(%rbp),%rbx
  438225:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  438229:	48 89 c7             	mov    %rax,%rdi
  43822c:	e8 f0 e3 ff ff       	callq  436621 <x666::StringLiteral&& std::forward<x666::StringLiteral>(std::remove_reference<x666::StringLiteral>::type&)>
  438231:	48 83 ec 08          	sub    $0x8,%rsp
  438235:	41 54                	push   %r12
  438237:	48 89 c6             	mov    %rax,%rsi
  43823a:	48 89 df             	mov    %rbx,%rdi
  43823d:	e8 88 ff ff ff       	callq  4381ca <std::__detail::__variant::_Uninitialized<x666::StringLiteral, false>::_Uninitialized<x666::StringLiteral>(std::in_place_index_t<0ul>, x666::StringLiteral&&)>
  438242:	48 83 c4 10          	add    $0x10,%rsp
	{ }
  438246:	90                   	nop
  438247:	48 8d 65 f0          	lea    -0x10(%rbp),%rsp
  43824b:	5b                   	pop    %rbx
  43824c:	41 5c                	pop    %r12
  43824e:	5d                   	pop    %rbp
  43824f:	c3                   	retq   

0000000000438250 <std::__detail::__variant::_Variadic_union<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>::_Variadic_union<1ul, x666::StringLiteral>(std::in_place_index_t<1ul>, x666::StringLiteral&&)>:
	constexpr _Variadic_union(in_place_index_t<_Np>, _Args&&... __args)
  438250:	55                   	push   %rbp
  438251:	48 89 e5             	mov    %rsp,%rbp
  438254:	41 54                	push   %r12
  438256:	53                   	push   %rbx
  438257:	48 83 ec 10          	sub    $0x10,%rsp
  43825b:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  43825f:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	: _M_rest(in_place_index<_Np-1>, std::forward<_Args>(__args)...)
  438263:	48 8b 5d e8          	mov    -0x18(%rbp),%rbx
  438267:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  43826b:	48 89 c7             	mov    %rax,%rdi
  43826e:	e8 ae e3 ff ff       	callq  436621 <x666::StringLiteral&& std::forward<x666::StringLiteral>(std::remove_reference<x666::StringLiteral>::type&)>
  438273:	48 83 ec 08          	sub    $0x8,%rsp
  438277:	41 54                	push   %r12
  438279:	48 89 c6             	mov    %rax,%rsi
  43827c:	48 89 df             	mov    %rbx,%rdi
  43827f:	e8 8a ff ff ff       	callq  43820e <std::__detail::__variant::_Variadic_union<x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>::_Variadic_union<x666::StringLiteral>(std::in_place_index_t<0ul>, x666::StringLiteral&&)>
  438284:	48 83 c4 10          	add    $0x10,%rsp
	{ }
  438288:	90                   	nop
  438289:	48 8d 65 f0          	lea    -0x10(%rbp),%rsp
  43828d:	5b                   	pop    %rbx
  43828e:	41 5c                	pop    %r12
  438290:	5d                   	pop    %rbp
  438291:	c3                   	retq   

0000000000438292 <std::__detail::__variant::_Variant_storage<false, x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>::_Variant_storage<1ul, x666::StringLiteral>(std::in_place_index_t<1ul>, x666::StringLiteral&&)>:
	constexpr _Variant_storage(in_place_index_t<_Np>, _Args&&... __args)
  438292:	55                   	push   %rbp
  438293:	48 89 e5             	mov    %rsp,%rbp
  438296:	41 54                	push   %r12
  438298:	53                   	push   %rbx
  438299:	48 83 ec 10          	sub    $0x10,%rsp
  43829d:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  4382a1:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	_M_index(_Np)
  4382a5:	48 8b 5d e8          	mov    -0x18(%rbp),%rbx
  4382a9:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4382ad:	48 89 c7             	mov    %rax,%rdi
  4382b0:	e8 6c e3 ff ff       	callq  436621 <x666::StringLiteral&& std::forward<x666::StringLiteral>(std::remove_reference<x666::StringLiteral>::type&)>
  4382b5:	48 83 ec 08          	sub    $0x8,%rsp
  4382b9:	41 54                	push   %r12
  4382bb:	48 89 c6             	mov    %rax,%rsi
  4382be:	48 89 df             	mov    %rbx,%rdi
  4382c1:	e8 8a ff ff ff       	callq  438250 <std::__detail::__variant::_Variadic_union<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>::_Variadic_union<1ul, x666::StringLiteral>(std::in_place_index_t<1ul>, x666::StringLiteral&&)>
  4382c6:	48 83 c4 10          	add    $0x10,%rsp
  4382ca:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4382ce:	c6 40 28 01          	movb   $0x1,0x28(%rax)
	{ }
  4382d2:	90                   	nop
  4382d3:	48 8d 65 f0          	lea    -0x10(%rbp),%rsp
  4382d7:	5b                   	pop    %rbx
  4382d8:	41 5c                	pop    %r12
  4382da:	5d                   	pop    %rbp
  4382db:	c3                   	retq   

00000000004382dc <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_create(unsigned long&, unsigned long)>:
    basic_string<_CharT, _Traits, _Alloc>::
  4382dc:	55                   	push   %rbp
  4382dd:	48 89 e5             	mov    %rsp,%rbp
  4382e0:	53                   	push   %rbx
  4382e1:	48 83 ec 28          	sub    $0x28,%rsp
  4382e5:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  4382e9:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  4382ed:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
      if (__capacity > max_size())
  4382f1:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4382f5:	48 8b 18             	mov    (%rax),%rbx
  4382f8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4382fc:	48 89 c7             	mov    %rax,%rdi
  4382ff:	e8 84 03 00 00       	callq  438688 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::max_size() const>
  438304:	48 39 c3             	cmp    %rax,%rbx
  438307:	0f 97 c0             	seta   %al
  43830a:	84 c0                	test   %al,%al
  43830c:	74 0a                	je     438318 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_create(unsigned long&, unsigned long)+0x3c>
	std::__throw_length_error(__N("basic_string::_M_create"));
  43830e:	bf 8f 46 44 00       	mov    $0x44468f,%edi
  438313:	e8 f8 a3 ff ff       	callq  432710 <std::__throw_length_error(char const*)@plt>
      if (__capacity > __old_capacity && __capacity < 2 * __old_capacity)
  438318:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  43831c:	48 8b 00             	mov    (%rax),%rax
  43831f:	48 39 45 d8          	cmp    %rax,-0x28(%rbp)
  438323:	73 55                	jae    43837a <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_create(unsigned long&, unsigned long)+0x9e>
  438325:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  438329:	48 8b 10             	mov    (%rax),%rdx
  43832c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  438330:	48 01 c0             	add    %rax,%rax
  438333:	48 39 c2             	cmp    %rax,%rdx
  438336:	73 42                	jae    43837a <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_create(unsigned long&, unsigned long)+0x9e>
	  __capacity = 2 * __old_capacity;
  438338:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  43833c:	48 8d 14 00          	lea    (%rax,%rax,1),%rdx
  438340:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  438344:	48 89 10             	mov    %rdx,(%rax)
	  if (__capacity > max_size())
  438347:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  43834b:	48 8b 18             	mov    (%rax),%rbx
  43834e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  438352:	48 89 c7             	mov    %rax,%rdi
  438355:	e8 2e 03 00 00       	callq  438688 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::max_size() const>
  43835a:	48 39 c3             	cmp    %rax,%rbx
  43835d:	0f 97 c0             	seta   %al
  438360:	84 c0                	test   %al,%al
  438362:	74 16                	je     43837a <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_create(unsigned long&, unsigned long)+0x9e>
	    __capacity = max_size();
  438364:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  438368:	48 89 c7             	mov    %rax,%rdi
  43836b:	e8 18 03 00 00       	callq  438688 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::max_size() const>
  438370:	48 89 c2             	mov    %rax,%rdx
  438373:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  438377:	48 89 10             	mov    %rdx,(%rax)
      return _Alloc_traits::allocate(_M_get_allocator(), __capacity + 1);
  43837a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  43837e:	48 8b 00             	mov    (%rax),%rax
  438381:	48 8d 58 01          	lea    0x1(%rax),%rbx
  438385:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  438389:	48 89 c7             	mov    %rax,%rdi
  43838c:	e8 a7 e7 ff ff       	callq  436b38 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_get_allocator()>
  438391:	48 89 de             	mov    %rbx,%rsi
  438394:	48 89 c7             	mov    %rax,%rdi
  438397:	e8 79 03 00 00       	callq  438715 <std::allocator_traits<std::allocator<char> >::allocate(std::allocator<char>&, unsigned long)>
    }
  43839c:	48 83 c4 28          	add    $0x28,%rsp
  4383a0:	5b                   	pop    %rbx
  4383a1:	5d                   	pop    %rbp
  4383a2:	c3                   	retq   

00000000004383a3 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_assign(char*, unsigned long, char)>:
      _S_assign(_CharT* __d, size_type __n, _CharT __c)
  4383a3:	55                   	push   %rbp
  4383a4:	48 89 e5             	mov    %rsp,%rbp
  4383a7:	48 83 ec 20          	sub    $0x20,%rsp
  4383ab:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4383af:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  4383b3:	89 d0                	mov    %edx,%eax
  4383b5:	88 45 ec             	mov    %al,-0x14(%rbp)
	if (__n == 1)
  4383b8:	48 83 7d f0 01       	cmpq   $0x1,-0x10(%rbp)
  4383bd:	75 15                	jne    4383d4 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_assign(char*, unsigned long, char)+0x31>
	  traits_type::assign(*__d, __c);
  4383bf:	48 8d 45 ec          	lea    -0x14(%rbp),%rax
  4383c3:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  4383c7:	48 89 c6             	mov    %rax,%rsi
  4383ca:	48 89 d7             	mov    %rdx,%rdi
  4383cd:	e8 cf d6 ff ff       	callq  435aa1 <std::char_traits<char>::assign(char&, char const&)>
      }
  4383d2:	eb 19                	jmp    4383ed <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_assign(char*, unsigned long, char)+0x4a>
	  traits_type::assign(__d, __n, __c);
  4383d4:	0f b6 45 ec          	movzbl -0x14(%rbp),%eax
  4383d8:	0f be c0             	movsbl %al,%eax
  4383db:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
  4383df:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
  4383e3:	89 c2                	mov    %eax,%edx
  4383e5:	48 89 cf             	mov    %rcx,%rdi
  4383e8:	e8 5f d7 ff ff       	callq  435b4c <std::char_traits<char>::assign(char*, unsigned long, char)>
      }
  4383ed:	90                   	nop
  4383ee:	c9                   	leaveq 
  4383ef:	c3                   	retq   

00000000004383f0 <std::allocator_traits<std::allocator<char> >::deallocate(std::allocator<char>&, char*, unsigned long)>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
  4383f0:	55                   	push   %rbp
  4383f1:	48 89 e5             	mov    %rsp,%rbp
  4383f4:	48 83 ec 20          	sub    $0x20,%rsp
  4383f8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4383fc:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  438400:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      { __a.deallocate(__p, __n); }
  438404:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  438408:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  43840c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  438410:	48 89 ce             	mov    %rcx,%rsi
  438413:	48 89 c7             	mov    %rax,%rdi
  438416:	e8 25 03 00 00       	callq  438740 <__gnu_cxx::new_allocator<char>::deallocate(char*, unsigned long)>
  43841b:	90                   	nop
  43841c:	c9                   	leaveq 
  43841d:	c3                   	retq   

000000000043841e <char* std::addressof<char>(char&)>:
   *  @param  __r  Reference to an object or function.
   *  @return   The actual address.
  */
  template<typename _Tp>
    inline _GLIBCXX17_CONSTEXPR _Tp*
    addressof(_Tp& __r) noexcept
  43841e:	55                   	push   %rbp
  43841f:	48 89 e5             	mov    %rsp,%rbp
  438422:	48 83 ec 10          	sub    $0x10,%rsp
  438426:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return std::__addressof(__r); }
  43842a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43842e:	48 89 c7             	mov    %rax,%rdi
  438431:	e8 2c 03 00 00       	callq  438762 <char* std::__addressof<char>(char&)>
  438436:	c9                   	leaveq 
  438437:	c3                   	retq   

0000000000438438 <std::iterator_traits<char const*>::iterator_category std::__iterator_category<char const*>(char const* const&)>:
   *  sugar for internal library use only.
  */
  template<typename _Iter>
    inline _GLIBCXX_CONSTEXPR
    typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
  438438:	55                   	push   %rbp
  438439:	48 89 e5             	mov    %rsp,%rbp
  43843c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return typename iterator_traits<_Iter>::iterator_category(); }
  438440:	5d                   	pop    %rbp
  438441:	c3                   	retq   

0000000000438442 <std::iterator_traits<char const*>::difference_type std::distance<char const*>(char const*, char const*)>:
   *  and are constant time.  For other %iterator classes they are linear time.
  */
  template<typename _InputIterator>
    inline _GLIBCXX17_CONSTEXPR
    typename iterator_traits<_InputIterator>::difference_type
    distance(_InputIterator __first, _InputIterator __last)
  438442:	55                   	push   %rbp
  438443:	48 89 e5             	mov    %rsp,%rbp
  438446:	53                   	push   %rbx
  438447:	48 83 ec 18          	sub    $0x18,%rsp
  43844b:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  43844f:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    {
      // concept requirements -- taken care of in __distance
      return std::__distance(__first, __last,
			     std::__iterator_category(__first));
  438453:	48 8d 45 e8          	lea    -0x18(%rbp),%rax
  438457:	48 89 c7             	mov    %rax,%rdi
  43845a:	e8 d9 ff ff ff       	callq  438438 <std::iterator_traits<char const*>::iterator_category std::__iterator_category<char const*>(char const* const&)>
      return std::__distance(__first, __last,
  43845f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
			     std::__iterator_category(__first));
  438463:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  438467:	48 83 ec 08          	sub    $0x8,%rsp
  43846b:	53                   	push   %rbx
  43846c:	48 89 d6             	mov    %rdx,%rsi
  43846f:	48 89 c7             	mov    %rax,%rdi
  438472:	e8 0b 03 00 00       	callq  438782 <std::iterator_traits<char const*>::difference_type std::__distance<char const*>(char const*, char const*, std::random_access_iterator_tag)>
  438477:	48 83 c4 10          	add    $0x10,%rsp
    }
  43847b:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  43847f:	c9                   	leaveq 
  438480:	c3                   	retq   
  438481:	90                   	nop

0000000000438482 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)>:
      basic_string<_CharT, _Traits, _Alloc>::
  438482:	55                   	push   %rbp
  438483:	48 89 e5             	mov    %rsp,%rbp
  438486:	48 83 ec 30          	sub    $0x30,%rsp
  43848a:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  43848e:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  438492:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
	if (__gnu_cxx::__is_null_pointer(__beg) && __beg != __end)
  438496:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  43849a:	48 89 c7             	mov    %rax,%rdi
  43849d:	e8 ce 02 00 00       	callq  438770 <bool __gnu_cxx::__is_null_pointer<char const>(char const*)>
  4384a2:	84 c0                	test   %al,%al
  4384a4:	74 11                	je     4384b7 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)+0x35>
  4384a6:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4384aa:	48 3b 45 d8          	cmp    -0x28(%rbp),%rax
  4384ae:	74 07                	je     4384b7 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)+0x35>
  4384b0:	b8 01 00 00 00       	mov    $0x1,%eax
  4384b5:	eb 05                	jmp    4384bc <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)+0x3a>
  4384b7:	b8 00 00 00 00       	mov    $0x0,%eax
  4384bc:	84 c0                	test   %al,%al
  4384be:	74 0a                	je     4384ca <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)+0x48>
	  std::__throw_logic_error(__N("basic_string::"
  4384c0:	bf a8 46 44 00       	mov    $0x4446a8,%edi
  4384c5:	e8 96 a2 ff ff       	callq  432760 <std::__throw_logic_error(char const*)@plt>
	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
  4384ca:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  4384ce:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4384d2:	48 89 d6             	mov    %rdx,%rsi
  4384d5:	48 89 c7             	mov    %rax,%rdi
  4384d8:	e8 65 ff ff ff       	callq  438442 <std::iterator_traits<char const*>::difference_type std::distance<char const*>(char const*, char const*)>
  4384dd:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	if (__dnew > size_type(_S_local_capacity))
  4384e1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4384e5:	48 83 f8 0f          	cmp    $0xf,%rax
  4384e9:	76 3d                	jbe    438528 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)+0xa6>
	    _M_data(_M_create(__dnew, size_type(0)));
  4384eb:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
  4384ef:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  4384f3:	ba 00 00 00 00       	mov    $0x0,%edx
  4384f8:	48 89 c6             	mov    %rax,%rsi
  4384fb:	48 89 cf             	mov    %rcx,%rdi
  4384fe:	e8 d9 fd ff ff       	callq  4382dc <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_create(unsigned long&, unsigned long)>
  438503:	48 89 c2             	mov    %rax,%rdx
  438506:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  43850a:	48 89 d6             	mov    %rdx,%rsi
  43850d:	48 89 c7             	mov    %rax,%rdi
  438510:	e8 67 e6 ff ff       	callq  436b7c <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_data(char*)>
	    _M_capacity(__dnew);
  438515:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  438519:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  43851d:	48 89 d6             	mov    %rdx,%rsi
  438520:	48 89 c7             	mov    %rax,%rdi
  438523:	e8 6e e6 ff ff       	callq  436b96 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_capacity(unsigned long)>
	  { this->_S_copy_chars(_M_data(), __beg, __end); }
  438528:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  43852c:	48 89 c7             	mov    %rax,%rdi
  43852f:	e8 d4 e2 ff ff       	callq  436808 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_data() const>
  438534:	48 89 c1             	mov    %rax,%rcx
  438537:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  43853b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  43853f:	48 89 c6             	mov    %rax,%rsi
  438542:	48 89 cf             	mov    %rcx,%rdi
  438545:	e8 54 02 00 00       	callq  43879e <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_copy_chars(char*, char const*, char const*)>
	_M_set_length(__dnew);
  43854a:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  43854e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  438552:	48 89 d6             	mov    %rdx,%rsi
  438555:	48 89 c7             	mov    %rax,%rdi
  438558:	e8 e7 e4 ff ff       	callq  436a44 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_set_length(unsigned long)>
      }
  43855d:	90                   	nop
  43855e:	c9                   	leaveq 
  43855f:	c3                   	retq   

0000000000438560 <std::iterator_traits<char*>::iterator_category std::__iterator_category<char*>(char* const&)>:
    __iterator_category(const _Iter&)
  438560:	55                   	push   %rbp
  438561:	48 89 e5             	mov    %rsp,%rbp
  438564:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return typename iterator_traits<_Iter>::iterator_category(); }
  438568:	5d                   	pop    %rbp
  438569:	c3                   	retq   

000000000043856a <std::iterator_traits<char*>::difference_type std::distance<char*>(char*, char*)>:
    distance(_InputIterator __first, _InputIterator __last)
  43856a:	55                   	push   %rbp
  43856b:	48 89 e5             	mov    %rsp,%rbp
  43856e:	53                   	push   %rbx
  43856f:	48 83 ec 18          	sub    $0x18,%rsp
  438573:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  438577:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
			     std::__iterator_category(__first));
  43857b:	48 8d 45 e8          	lea    -0x18(%rbp),%rax
  43857f:	48 89 c7             	mov    %rax,%rdi
  438582:	e8 d9 ff ff ff       	callq  438560 <std::iterator_traits<char*>::iterator_category std::__iterator_category<char*>(char* const&)>
      return std::__distance(__first, __last,
  438587:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
			     std::__iterator_category(__first));
  43858b:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  43858f:	48 83 ec 08          	sub    $0x8,%rsp
  438593:	53                   	push   %rbx
  438594:	48 89 d6             	mov    %rdx,%rsi
  438597:	48 89 c7             	mov    %rax,%rdi
  43859a:	e8 4c 02 00 00       	callq  4387eb <std::iterator_traits<char*>::difference_type std::__distance<char*>(char*, char*, std::random_access_iterator_tag)>
  43859f:	48 83 c4 10          	add    $0x10,%rsp
    }
  4385a3:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  4385a7:	c9                   	leaveq 
  4385a8:	c3                   	retq   
  4385a9:	90                   	nop

00000000004385aa <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)>:
      basic_string<_CharT, _Traits, _Alloc>::
  4385aa:	55                   	push   %rbp
  4385ab:	48 89 e5             	mov    %rsp,%rbp
  4385ae:	48 83 ec 30          	sub    $0x30,%rsp
  4385b2:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  4385b6:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  4385ba:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
	if (__gnu_cxx::__is_null_pointer(__beg) && __beg != __end)
  4385be:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4385c2:	48 89 c7             	mov    %rax,%rdi
  4385c5:	e8 0f 02 00 00       	callq  4387d9 <bool __gnu_cxx::__is_null_pointer<char>(char*)>
  4385ca:	84 c0                	test   %al,%al
  4385cc:	74 11                	je     4385df <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)+0x35>
  4385ce:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4385d2:	48 3b 45 d8          	cmp    -0x28(%rbp),%rax
  4385d6:	74 07                	je     4385df <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)+0x35>
  4385d8:	b8 01 00 00 00       	mov    $0x1,%eax
  4385dd:	eb 05                	jmp    4385e4 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)+0x3a>
  4385df:	b8 00 00 00 00       	mov    $0x0,%eax
  4385e4:	84 c0                	test   %al,%al
  4385e6:	74 0a                	je     4385f2 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)+0x48>
	  std::__throw_logic_error(__N("basic_string::"
  4385e8:	bf a8 46 44 00       	mov    $0x4446a8,%edi
  4385ed:	e8 6e a1 ff ff       	callq  432760 <std::__throw_logic_error(char const*)@plt>
	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
  4385f2:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  4385f6:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4385fa:	48 89 d6             	mov    %rdx,%rsi
  4385fd:	48 89 c7             	mov    %rax,%rdi
  438600:	e8 65 ff ff ff       	callq  43856a <std::iterator_traits<char*>::difference_type std::distance<char*>(char*, char*)>
  438605:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	if (__dnew > size_type(_S_local_capacity))
  438609:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43860d:	48 83 f8 0f          	cmp    $0xf,%rax
  438611:	76 3d                	jbe    438650 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)+0xa6>
	    _M_data(_M_create(__dnew, size_type(0)));
  438613:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
  438617:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  43861b:	ba 00 00 00 00       	mov    $0x0,%edx
  438620:	48 89 c6             	mov    %rax,%rsi
  438623:	48 89 cf             	mov    %rcx,%rdi
  438626:	e8 b1 fc ff ff       	callq  4382dc <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_create(unsigned long&, unsigned long)>
  43862b:	48 89 c2             	mov    %rax,%rdx
  43862e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  438632:	48 89 d6             	mov    %rdx,%rsi
  438635:	48 89 c7             	mov    %rax,%rdi
  438638:	e8 3f e5 ff ff       	callq  436b7c <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_data(char*)>
	    _M_capacity(__dnew);
  43863d:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  438641:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  438645:	48 89 d6             	mov    %rdx,%rsi
  438648:	48 89 c7             	mov    %rax,%rdi
  43864b:	e8 46 e5 ff ff       	callq  436b96 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_capacity(unsigned long)>
	  { this->_S_copy_chars(_M_data(), __beg, __end); }
  438650:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  438654:	48 89 c7             	mov    %rax,%rdi
  438657:	e8 ac e1 ff ff       	callq  436808 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_data() const>
  43865c:	48 89 c1             	mov    %rax,%rcx
  43865f:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  438663:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  438667:	48 89 c6             	mov    %rax,%rsi
  43866a:	48 89 cf             	mov    %rcx,%rdi
  43866d:	e8 95 01 00 00       	callq  438807 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_copy_chars(char*, char*, char*)>
	_M_set_length(__dnew);
  438672:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  438676:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  43867a:	48 89 d6             	mov    %rdx,%rsi
  43867d:	48 89 c7             	mov    %rax,%rdi
  438680:	e8 bf e3 ff ff       	callq  436a44 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_set_length(unsigned long)>
      }
  438685:	90                   	nop
  438686:	c9                   	leaveq 
  438687:	c3                   	retq   

0000000000438688 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::max_size() const>:
      max_size() const _GLIBCXX_NOEXCEPT
  438688:	55                   	push   %rbp
  438689:	48 89 e5             	mov    %rsp,%rbp
  43868c:	48 83 ec 10          	sub    $0x10,%rsp
  438690:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return (_Alloc_traits::max_size(_M_get_allocator()) - 1) / 2; }
  438694:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  438698:	48 89 c7             	mov    %rax,%rdi
  43869b:	e8 7c e2 ff ff       	callq  43691c <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_get_allocator() const>
  4386a0:	48 89 c7             	mov    %rax,%rdi
  4386a3:	e8 9a 01 00 00       	callq  438842 <std::allocator_traits<std::allocator<char> >::max_size(std::allocator<char> const&)>
  4386a8:	48 83 e8 01          	sub    $0x1,%rax
  4386ac:	48 d1 e8             	shr    %rax
  4386af:	c9                   	leaveq 
  4386b0:	c3                   	retq   

00000000004386b1 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_copy(char*, char const*, unsigned long)>:
      _S_copy(_CharT* __d, const _CharT* __s, size_type __n)
  4386b1:	55                   	push   %rbp
  4386b2:	48 89 e5             	mov    %rsp,%rbp
  4386b5:	48 83 ec 20          	sub    $0x20,%rsp
  4386b9:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4386bd:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  4386c1:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	if (__n == 1)
  4386c5:	48 83 7d e8 01       	cmpq   $0x1,-0x18(%rbp)
  4386ca:	75 15                	jne    4386e1 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_copy(char*, char const*, unsigned long)+0x30>
	  traits_type::assign(*__d, *__s);
  4386cc:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  4386d0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4386d4:	48 89 d6             	mov    %rdx,%rsi
  4386d7:	48 89 c7             	mov    %rax,%rdi
  4386da:	e8 c2 d3 ff ff       	callq  435aa1 <std::char_traits<char>::assign(char&, char const&)>
      }
  4386df:	eb 17                	jmp    4386f8 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_copy(char*, char const*, unsigned long)+0x47>
	  traits_type::copy(__d, __s, __n);
  4386e1:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  4386e5:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  4386e9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4386ed:	48 89 ce             	mov    %rcx,%rsi
  4386f0:	48 89 c7             	mov    %rax,%rdi
  4386f3:	e8 14 d4 ff ff       	callq  435b0c <std::char_traits<char>::copy(char*, char const*, unsigned long)>
      }
  4386f8:	90                   	nop
  4386f9:	c9                   	leaveq 
  4386fa:	c3                   	retq   

00000000004386fb <std::pointer_traits<char const*>::pointer_to(char const&)>:
      pointer_to(__make_not_void<element_type>& __r) noexcept
  4386fb:	55                   	push   %rbp
  4386fc:	48 89 e5             	mov    %rsp,%rbp
  4386ff:	48 83 ec 10          	sub    $0x10,%rsp
  438703:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return std::addressof(__r); }
  438707:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43870b:	48 89 c7             	mov    %rax,%rdi
  43870e:	e8 49 01 00 00       	callq  43885c <char const* std::addressof<char const>(char const&)>
  438713:	c9                   	leaveq 
  438714:	c3                   	retq   

0000000000438715 <std::allocator_traits<std::allocator<char> >::allocate(std::allocator<char>&, unsigned long)>:
      allocate(allocator_type& __a, size_type __n)
  438715:	55                   	push   %rbp
  438716:	48 89 e5             	mov    %rsp,%rbp
  438719:	48 83 ec 10          	sub    $0x10,%rsp
  43871d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  438721:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      { return __a.allocate(__n); }
  438725:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  438729:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43872d:	ba 00 00 00 00       	mov    $0x0,%edx
  438732:	48 89 ce             	mov    %rcx,%rsi
  438735:	48 89 c7             	mov    %rax,%rdi
  438738:	e8 39 01 00 00       	callq  438876 <__gnu_cxx::new_allocator<char>::allocate(unsigned long, void const*)>
  43873d:	c9                   	leaveq 
  43873e:	c3                   	retq   
  43873f:	90                   	nop

0000000000438740 <__gnu_cxx::new_allocator<char>::deallocate(char*, unsigned long)>:
      deallocate(pointer __p, size_type)
  438740:	55                   	push   %rbp
  438741:	48 89 e5             	mov    %rsp,%rbp
  438744:	48 83 ec 20          	sub    $0x20,%rsp
  438748:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  43874c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  438750:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	::operator delete(__p);
  438754:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  438758:	48 89 c7             	mov    %rax,%rdi
  43875b:	e8 60 a0 ff ff       	callq  4327c0 <operator delete(void*)@plt>
      }
  438760:	c9                   	leaveq 
  438761:	c3                   	retq   

0000000000438762 <char* std::__addressof<char>(char&)>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
  438762:	55                   	push   %rbp
  438763:	48 89 e5             	mov    %rsp,%rbp
  438766:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return __builtin_addressof(__r); }
  43876a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43876e:	5d                   	pop    %rbp
  43876f:	c3                   	retq   

0000000000438770 <bool __gnu_cxx::__is_null_pointer<char const>(char const*)>:


  // For use in string and vstring.
  template<typename _Type>
    inline bool
    __is_null_pointer(_Type* __ptr)
  438770:	55                   	push   %rbp
  438771:	48 89 e5             	mov    %rsp,%rbp
  438774:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return __ptr == 0; }
  438778:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  43877d:	0f 94 c0             	sete   %al
  438780:	5d                   	pop    %rbp
  438781:	c3                   	retq   

0000000000438782 <std::iterator_traits<char const*>::difference_type std::__distance<char const*>(char const*, char const*, std::random_access_iterator_tag)>:
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
  438782:	55                   	push   %rbp
  438783:	48 89 e5             	mov    %rsp,%rbp
  438786:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  43878a:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      return __last - __first;
  43878e:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  438792:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  438796:	48 29 c2             	sub    %rax,%rdx
  438799:	48 89 d0             	mov    %rdx,%rax
    }
  43879c:	5d                   	pop    %rbp
  43879d:	c3                   	retq   

000000000043879e <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_copy_chars(char*, char const*, char const*)>:
      _S_copy_chars(_CharT* __p, const _CharT* __k1, const _CharT* __k2)
  43879e:	55                   	push   %rbp
  43879f:	48 89 e5             	mov    %rsp,%rbp
  4387a2:	48 83 ec 20          	sub    $0x20,%rsp
  4387a6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4387aa:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  4387ae:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      { _S_copy(__p, __k1, __k2 - __k1); }
  4387b2:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  4387b6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4387ba:	48 29 c2             	sub    %rax,%rdx
  4387bd:	48 89 d0             	mov    %rdx,%rax
  4387c0:	48 89 c2             	mov    %rax,%rdx
  4387c3:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  4387c7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4387cb:	48 89 ce             	mov    %rcx,%rsi
  4387ce:	48 89 c7             	mov    %rax,%rdi
  4387d1:	e8 db fe ff ff       	callq  4386b1 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_copy(char*, char const*, unsigned long)>
  4387d6:	90                   	nop
  4387d7:	c9                   	leaveq 
  4387d8:	c3                   	retq   

00000000004387d9 <bool __gnu_cxx::__is_null_pointer<char>(char*)>:
    __is_null_pointer(_Type* __ptr)
  4387d9:	55                   	push   %rbp
  4387da:	48 89 e5             	mov    %rsp,%rbp
  4387dd:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return __ptr == 0; }
  4387e1:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  4387e6:	0f 94 c0             	sete   %al
  4387e9:	5d                   	pop    %rbp
  4387ea:	c3                   	retq   

00000000004387eb <std::iterator_traits<char*>::difference_type std::__distance<char*>(char*, char*, std::random_access_iterator_tag)>:
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
  4387eb:	55                   	push   %rbp
  4387ec:	48 89 e5             	mov    %rsp,%rbp
  4387ef:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4387f3:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      return __last - __first;
  4387f7:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  4387fb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4387ff:	48 29 c2             	sub    %rax,%rdx
  438802:	48 89 d0             	mov    %rdx,%rax
    }
  438805:	5d                   	pop    %rbp
  438806:	c3                   	retq   

0000000000438807 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_copy_chars(char*, char*, char*)>:
      _S_copy_chars(_CharT* __p, _CharT* __k1, _CharT* __k2) _GLIBCXX_NOEXCEPT
  438807:	55                   	push   %rbp
  438808:	48 89 e5             	mov    %rsp,%rbp
  43880b:	48 83 ec 20          	sub    $0x20,%rsp
  43880f:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  438813:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  438817:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      { _S_copy(__p, __k1, __k2 - __k1); }
  43881b:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  43881f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  438823:	48 29 c2             	sub    %rax,%rdx
  438826:	48 89 d0             	mov    %rdx,%rax
  438829:	48 89 c2             	mov    %rax,%rdx
  43882c:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  438830:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  438834:	48 89 ce             	mov    %rcx,%rsi
  438837:	48 89 c7             	mov    %rax,%rdi
  43883a:	e8 72 fe ff ff       	callq  4386b1 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_copy(char*, char const*, unsigned long)>
  43883f:	90                   	nop
  438840:	c9                   	leaveq 
  438841:	c3                   	retq   

0000000000438842 <std::allocator_traits<std::allocator<char> >::max_size(std::allocator<char> const&)>:
      max_size(const allocator_type& __a) noexcept
  438842:	55                   	push   %rbp
  438843:	48 89 e5             	mov    %rsp,%rbp
  438846:	48 83 ec 10          	sub    $0x10,%rsp
  43884a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return __a.max_size(); }
  43884e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  438852:	48 89 c7             	mov    %rax,%rdi
  438855:	e8 5a 00 00 00       	callq  4388b4 <__gnu_cxx::new_allocator<char>::max_size() const>
  43885a:	c9                   	leaveq 
  43885b:	c3                   	retq   

000000000043885c <char const* std::addressof<char const>(char const&)>:
    addressof(_Tp& __r) noexcept
  43885c:	55                   	push   %rbp
  43885d:	48 89 e5             	mov    %rsp,%rbp
  438860:	48 83 ec 10          	sub    $0x10,%rsp
  438864:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return std::__addressof(__r); }
  438868:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43886c:	48 89 c7             	mov    %rax,%rdi
  43886f:	e8 51 00 00 00       	callq  4388c5 <char const* std::__addressof<char const>(char const&)>
  438874:	c9                   	leaveq 
  438875:	c3                   	retq   

0000000000438876 <__gnu_cxx::new_allocator<char>::allocate(unsigned long, void const*)>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
  438876:	55                   	push   %rbp
  438877:	48 89 e5             	mov    %rsp,%rbp
  43887a:	48 83 ec 20          	sub    $0x20,%rsp
  43887e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  438882:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  438886:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	if (__n > this->max_size())
  43888a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43888e:	48 89 c7             	mov    %rax,%rdi
  438891:	e8 1e 00 00 00       	callq  4388b4 <__gnu_cxx::new_allocator<char>::max_size() const>
  438896:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  43889a:	0f 97 c0             	seta   %al
  43889d:	84 c0                	test   %al,%al
  43889f:	74 05                	je     4388a6 <__gnu_cxx::new_allocator<char>::allocate(unsigned long, void const*)+0x30>
	  std::__throw_bad_alloc();
  4388a1:	e8 1a 9e ff ff       	callq  4326c0 <std::__throw_bad_alloc()@plt>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
  4388a6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4388aa:	48 89 c7             	mov    %rax,%rdi
  4388ad:	e8 3e 9f ff ff       	callq  4327f0 <operator new(unsigned long)@plt>
      }
  4388b2:	c9                   	leaveq 
  4388b3:	c3                   	retq   

00000000004388b4 <__gnu_cxx::new_allocator<char>::max_size() const>:

      size_type
      max_size() const _GLIBCXX_USE_NOEXCEPT
  4388b4:	55                   	push   %rbp
  4388b5:	48 89 e5             	mov    %rsp,%rbp
  4388b8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return size_t(-1) / sizeof(_Tp); }
  4388bc:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
  4388c3:	5d                   	pop    %rbp
  4388c4:	c3                   	retq   

00000000004388c5 <char const* std::__addressof<char const>(char const&)>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
  4388c5:	55                   	push   %rbp
  4388c6:	48 89 e5             	mov    %rsp,%rbp
  4388c9:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return __builtin_addressof(__r); }
  4388cd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4388d1:	5d                   	pop    %rbp
  4388d2:	c3                   	retq   
  4388d3:	90                   	nop

00000000004388d4 <x666::Expression::~Expression()>:
    1, 1, 1, // @ @@ @#
    0x582, 0x280, 0x280, 0x280, // ! & | |*
    0x582, 0x180, // # ,
  };
  // Methods specific to Expression-trees
  Expression::~Expression() {}
  4388d4:	55                   	push   %rbp
  4388d5:	48 89 e5             	mov    %rsp,%rbp
  4388d8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4388dc:	ba c8 4a 44 00       	mov    $0x444ac8,%edx
  4388e1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4388e5:	48 89 10             	mov    %rdx,(%rax)
  4388e8:	90                   	nop
  4388e9:	5d                   	pop    %rbp
  4388ea:	c3                   	retq   
  4388eb:	90                   	nop

00000000004388ec <x666::Expression::~Expression()>:
  4388ec:	55                   	push   %rbp
  4388ed:	48 89 e5             	mov    %rsp,%rbp
  4388f0:	48 83 ec 10          	sub    $0x10,%rsp
  4388f4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4388f8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4388fc:	48 89 c7             	mov    %rax,%rdi
  4388ff:	e8 d0 ff ff ff       	callq  4388d4 <x666::Expression::~Expression()>
  438904:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  438908:	be 08 00 00 00       	mov    $0x8,%esi
  43890d:	48 89 c7             	mov    %rax,%rdi
  438910:	e8 eb 9e ff ff       	callq  432800 <operator delete(void*, unsigned long)@plt>
  438915:	c9                   	leaveq 
  438916:	c3                   	retq   
  438917:	90                   	nop

0000000000438918 <x666::Expression::imbue(std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, x666::Operator, unsigned long, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >)>:
  ExpressionPtr Expression::imbue(
      ExpressionPtr a,
      Operator o, size_t /*precedence*/,
      ExpressionPtr b) {
  438918:	55                   	push   %rbp
  438919:	48 89 e5             	mov    %rsp,%rbp
  43891c:	53                   	push   %rbx
  43891d:	48 83 ec 48          	sub    $0x48,%rsp
  438921:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  438925:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  438929:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  43892d:	89 4d c4             	mov    %ecx,-0x3c(%rbp)
  438930:	4c 89 45 b8          	mov    %r8,-0x48(%rbp)
  438934:	4c 89 4d b0          	mov    %r9,-0x50(%rbp)
    return std::make_unique<BinaryOp>(std::move(a), std::move(b), o);
  438938:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  43893c:	48 89 c7             	mov    %rax,%rdi
  43893f:	e8 e3 0f 00 00       	callq  439927 <std::remove_reference<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&>::type&& std::move<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&>(std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&)>
  438944:	48 89 c3             	mov    %rax,%rbx
  438947:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  43894b:	48 89 c7             	mov    %rax,%rdi
  43894e:	e8 d4 0f 00 00       	callq  439927 <std::remove_reference<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&>::type&& std::move<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&>(std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&)>
  438953:	48 89 c6             	mov    %rax,%rsi
  438956:	48 8d 45 e8          	lea    -0x18(%rbp),%rax
  43895a:	48 8d 55 c4          	lea    -0x3c(%rbp),%rdx
  43895e:	48 89 d1             	mov    %rdx,%rcx
  438961:	48 89 da             	mov    %rbx,%rdx
  438964:	48 89 c7             	mov    %rax,%rdi
  438967:	e8 f6 30 00 00       	callq  43ba62 <std::_MakeUniq<x666::BinaryOp>::__single_object std::make_unique<x666::BinaryOp, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, x666::Operator&>(std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&&, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&&, x666::Operator&)>
  43896c:	48 8d 45 e8          	lea    -0x18(%rbp),%rax
  438970:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  438974:	48 89 c6             	mov    %rax,%rsi
  438977:	48 89 d7             	mov    %rdx,%rdi
  43897a:	e8 2b 32 00 00       	callq  43bbaa <std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >::unique_ptr<x666::BinaryOp, std::default_delete<x666::BinaryOp>, void>(std::unique_ptr<x666::BinaryOp, std::default_delete<x666::BinaryOp> >&&)>
  43897f:	48 8d 45 e8          	lea    -0x18(%rbp),%rax
  438983:	48 89 c7             	mov    %rax,%rdi
  438986:	e8 c7 31 00 00       	callq  43bb52 <std::unique_ptr<x666::BinaryOp, std::default_delete<x666::BinaryOp> >::~unique_ptr()>
  43898b:	90                   	nop
  }
  43898c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  438990:	48 83 c4 48          	add    $0x48,%rsp
  438994:	5b                   	pop    %rbx
  438995:	5d                   	pop    %rbp
  438996:	c3                   	retq   
  438997:	90                   	nop

0000000000438998 <x666::Expression::imbue(std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, x666::Operator, unsigned long)>:
  ExpressionPtr Expression::imbue(
      ExpressionPtr a,
      Operator o, size_t /*precedence*/) {
  438998:	55                   	push   %rbp
  438999:	48 89 e5             	mov    %rsp,%rbp
  43899c:	48 83 ec 40          	sub    $0x40,%rsp
  4389a0:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  4389a4:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  4389a8:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  4389ac:	89 4d d4             	mov    %ecx,-0x2c(%rbp)
  4389af:	4c 89 45 c8          	mov    %r8,-0x38(%rbp)
    return std::make_unique<UnaryOp>(std::move(a), o);
  4389b3:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4389b7:	48 89 c7             	mov    %rax,%rdi
  4389ba:	e8 68 0f 00 00       	callq  439927 <std::remove_reference<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&>::type&& std::move<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&>(std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&)>
  4389bf:	48 89 c1             	mov    %rax,%rcx
  4389c2:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
  4389c6:	48 8d 55 d4          	lea    -0x2c(%rbp),%rdx
  4389ca:	48 89 ce             	mov    %rcx,%rsi
  4389cd:	48 89 c7             	mov    %rax,%rdi
  4389d0:	e8 27 32 00 00       	callq  43bbfc <std::_MakeUniq<x666::UnaryOp>::__single_object std::make_unique<x666::UnaryOp, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, x666::Operator&>(std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&&, x666::Operator&)>
  4389d5:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
  4389d9:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  4389dd:	48 89 c6             	mov    %rax,%rsi
  4389e0:	48 89 d7             	mov    %rdx,%rdi
  4389e3:	e8 18 33 00 00       	callq  43bd00 <std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >::unique_ptr<x666::UnaryOp, std::default_delete<x666::UnaryOp>, void>(std::unique_ptr<x666::UnaryOp, std::default_delete<x666::UnaryOp> >&&)>
  4389e8:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
  4389ec:	48 89 c7             	mov    %rax,%rdi
  4389ef:	e8 b4 32 00 00       	callq  43bca8 <std::unique_ptr<x666::UnaryOp, std::default_delete<x666::UnaryOp> >::~unique_ptr()>
  4389f4:	90                   	nop
  }
  4389f5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4389f9:	c9                   	leaveq 
  4389fa:	c3                   	retq   
  4389fb:	90                   	nop

00000000004389fc <x666::BinaryOp::imbue(std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, x666::Operator, unsigned long, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >)>:
  ExpressionPtr BinaryOp::imbue(
      ExpressionPtr ax,
      Operator o, size_t prec,
      ExpressionPtr b) {
  4389fc:	55                   	push   %rbp
  4389fd:	48 89 e5             	mov    %rsp,%rbp
  438a00:	41 55                	push   %r13
  438a02:	41 54                	push   %r12
  438a04:	53                   	push   %rbx
  438a05:	48 83 ec 68          	sub    $0x68,%rsp
  438a09:	48 89 7d a8          	mov    %rdi,-0x58(%rbp)
  438a0d:	48 89 75 a0          	mov    %rsi,-0x60(%rbp)
  438a11:	48 89 55 98          	mov    %rdx,-0x68(%rbp)
  438a15:	89 4d 94             	mov    %ecx,-0x6c(%rbp)
  438a18:	4c 89 45 88          	mov    %r8,-0x78(%rbp)
  438a1c:	4c 89 4d 80          	mov    %r9,-0x80(%rbp)
    /*
        a->o        <- o
       /    \           \
      a->a  a->b         b
    */
    assert(ax->id() == 2);
  438a20:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  438a24:	48 89 c7             	mov    %rax,%rdi
  438a27:	e8 0a a7 ff ff       	callq  433136 <std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >::operator->() const>
  438a2c:	48 89 c2             	mov    %rax,%rdx
  438a2f:	48 8b 02             	mov    (%rdx),%rax
  438a32:	48 83 c0 10          	add    $0x10,%rax
  438a36:	48 8b 00             	mov    (%rax),%rax
  438a39:	48 89 d7             	mov    %rdx,%rdi
  438a3c:	ff d0                	callq  *%rax
  438a3e:	48 83 f8 02          	cmp    $0x2,%rax
  438a42:	74 19                	je     438a5d <x666::BinaryOp::imbue(std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, x666::Operator, unsigned long, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >)+0x61>
  438a44:	b9 80 47 44 00       	mov    $0x444780,%ecx
  438a49:	ba 33 00 00 00       	mov    $0x33,%edx
  438a4e:	be e8 46 44 00       	mov    $0x4446e8,%esi
  438a53:	bf 08 47 44 00       	mov    $0x444708,%edi
  438a58:	e8 f3 9c ff ff       	callq  432750 <__assert_fail@plt>
    BinaryOp* a = dynamic_cast<BinaryOp*>(ax.get());
  438a5d:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  438a61:	48 89 c7             	mov    %rax,%rdi
  438a64:	e8 81 ad ff ff       	callq  4337ea <std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >::get() const>
  438a69:	48 85 c0             	test   %rax,%rax
  438a6c:	74 19                	je     438a87 <x666::BinaryOp::imbue(std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, x666::Operator, unsigned long, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >)+0x8b>
  438a6e:	b9 00 00 00 00       	mov    $0x0,%ecx
  438a73:	ba 80 4b 44 00       	mov    $0x444b80,%edx
  438a78:	be e0 4b 44 00       	mov    $0x444be0,%esi
  438a7d:	48 89 c7             	mov    %rax,%rdi
  438a80:	e8 9b 9d ff ff       	callq  432820 <__dynamic_cast@plt>
  438a85:	eb 05                	jmp    438a8c <x666::BinaryOp::imbue(std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, x666::Operator, unsigned long, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >)+0x90>
  438a87:	b8 00 00 00 00       	mov    $0x0,%eax
  438a8c:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    size_t aprec = precedences[(size_t) a->o] >> 3;
  438a90:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  438a94:	8b 40 18             	mov    0x18(%rax),%eax
  438a97:	48 98                	cltq   
  438a99:	0f b7 84 00 00 13 65 	movzwl 0x651300(%rax,%rax,1),%eax
  438aa0:	00 
  438aa1:	0f b7 c0             	movzwl %ax,%eax
  438aa4:	c1 f8 03             	sar    $0x3,%eax
  438aa7:	48 98                	cltq   
  438aa9:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    if (aprec >= prec) {
  438aad:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  438ab1:	48 3b 45 88          	cmp    -0x78(%rbp),%rax
  438ab5:	72 58                	jb     438b0f <x666::BinaryOp::imbue(std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, x666::Operator, unsigned long, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >)+0x113>
           /   \
          a->o  b
         /    \
        a->a  a->b
      */
      return std::make_unique<BinaryOp>(std::move(ax), std::move(b), o);
  438ab7:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  438abb:	48 89 c7             	mov    %rax,%rdi
  438abe:	e8 64 0e 00 00       	callq  439927 <std::remove_reference<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&>::type&& std::move<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&>(std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&)>
  438ac3:	48 89 c3             	mov    %rax,%rbx
  438ac6:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  438aca:	48 89 c7             	mov    %rax,%rdi
  438acd:	e8 55 0e 00 00       	callq  439927 <std::remove_reference<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&>::type&& std::move<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&>(std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&)>
  438ad2:	48 89 c6             	mov    %rax,%rsi
  438ad5:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
  438ad9:	48 8d 55 94          	lea    -0x6c(%rbp),%rdx
  438add:	48 89 d1             	mov    %rdx,%rcx
  438ae0:	48 89 da             	mov    %rbx,%rdx
  438ae3:	48 89 c7             	mov    %rax,%rdi
  438ae6:	e8 77 2f 00 00       	callq  43ba62 <std::_MakeUniq<x666::BinaryOp>::__single_object std::make_unique<x666::BinaryOp, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, x666::Operator&>(std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&&, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&&, x666::Operator&)>
  438aeb:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
  438aef:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  438af3:	48 89 c6             	mov    %rax,%rsi
  438af6:	48 89 d7             	mov    %rdx,%rdi
  438af9:	e8 ac 30 00 00       	callq  43bbaa <std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >::unique_ptr<x666::BinaryOp, std::default_delete<x666::BinaryOp>, void>(std::unique_ptr<x666::BinaryOp, std::default_delete<x666::BinaryOp> >&&)>
  438afe:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
  438b02:	48 89 c7             	mov    %rax,%rdi
  438b05:	e8 48 30 00 00       	callq  43bb52 <std::unique_ptr<x666::BinaryOp, std::default_delete<x666::BinaryOp> >::~unique_ptr()>
  438b0a:	e9 f9 00 00 00       	jmpq   438c08 <x666::BinaryOp::imbue(std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, x666::Operator, unsigned long, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >)+0x20c>
        a->a   o--
              /   \
             a->b  b
        (this case showing the trivial imbuement into a->b)
      */
      a->b = a->b->imbue(std::move(a->b), o, prec, std::move(b));
  438b0f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  438b13:	48 83 c0 10          	add    $0x10,%rax
  438b17:	48 89 c7             	mov    %rax,%rdi
  438b1a:	e8 17 a6 ff ff       	callq  433136 <std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >::operator->() const>
  438b1f:	49 89 c4             	mov    %rax,%r12
  438b22:	49 8b 04 24          	mov    (%r12),%rax
  438b26:	48 83 c0 18          	add    $0x18,%rax
  438b2a:	48 8b 18             	mov    (%rax),%rbx
  438b2d:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  438b31:	48 89 c7             	mov    %rax,%rdi
  438b34:	e8 ee 0d 00 00       	callq  439927 <std::remove_reference<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&>::type&& std::move<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&>(std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&)>
  438b39:	48 89 c2             	mov    %rax,%rdx
  438b3c:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
  438b40:	48 89 d6             	mov    %rdx,%rsi
  438b43:	48 89 c7             	mov    %rax,%rdi
  438b46:	e8 a9 2e 00 00       	callq  43b9f4 <std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >::unique_ptr(std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&&)>
  438b4b:	44 8b 6d 94          	mov    -0x6c(%rbp),%r13d
  438b4f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  438b53:	48 83 c0 10          	add    $0x10,%rax
  438b57:	48 89 c7             	mov    %rax,%rdi
  438b5a:	e8 c8 0d 00 00       	callq  439927 <std::remove_reference<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&>::type&& std::move<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&>(std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&)>
  438b5f:	48 89 c2             	mov    %rax,%rdx
  438b62:	48 8d 45 c8          	lea    -0x38(%rbp),%rax
  438b66:	48 89 d6             	mov    %rdx,%rsi
  438b69:	48 89 c7             	mov    %rax,%rdi
  438b6c:	e8 83 2e 00 00       	callq  43b9f4 <std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >::unique_ptr(std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&&)>
  438b71:	48 8d 45 b8          	lea    -0x48(%rbp),%rax
  438b75:	48 8d 4d c0          	lea    -0x40(%rbp),%rcx
  438b79:	48 8b 75 88          	mov    -0x78(%rbp),%rsi
  438b7d:	48 8d 55 c8          	lea    -0x38(%rbp),%rdx
  438b81:	49 89 c9             	mov    %rcx,%r9
  438b84:	49 89 f0             	mov    %rsi,%r8
  438b87:	44 89 e9             	mov    %r13d,%ecx
  438b8a:	4c 89 e6             	mov    %r12,%rsi
  438b8d:	48 89 c7             	mov    %rax,%rdi
  438b90:	ff d3                	callq  *%rbx
  438b92:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  438b96:	48 8d 50 10          	lea    0x10(%rax),%rdx
  438b9a:	48 8d 45 b8          	lea    -0x48(%rbp),%rax
  438b9e:	48 89 c6             	mov    %rax,%rsi
  438ba1:	48 89 d7             	mov    %rdx,%rdi
  438ba4:	e8 a9 31 00 00       	callq  43bd52 <std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >::operator=(std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&&)>
  438ba9:	48 8d 45 b8          	lea    -0x48(%rbp),%rax
  438bad:	48 89 c7             	mov    %rax,%rdi
  438bb0:	e8 57 a2 ff ff       	callq  432e0c <std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >::~unique_ptr()>
  438bb5:	48 8d 45 c8          	lea    -0x38(%rbp),%rax
  438bb9:	48 89 c7             	mov    %rax,%rdi
  438bbc:	e8 4b a2 ff ff       	callq  432e0c <std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >::~unique_ptr()>
  438bc1:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
  438bc5:	48 89 c7             	mov    %rax,%rdi
  438bc8:	e8 3f a2 ff ff       	callq  432e0c <std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >::~unique_ptr()>
      return ax;
  438bcd:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
  438bd1:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  438bd5:	48 89 d6             	mov    %rdx,%rsi
  438bd8:	48 89 c7             	mov    %rax,%rdi
  438bdb:	e8 14 2e 00 00       	callq  43b9f4 <std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >::unique_ptr(std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&&)>
  438be0:	eb 26                	jmp    438c08 <x666::BinaryOp::imbue(std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, x666::Operator, unsigned long, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >)+0x20c>
  438be2:	48 89 c3             	mov    %rax,%rbx
      a->b = a->b->imbue(std::move(a->b), o, prec, std::move(b));
  438be5:	48 8d 45 c8          	lea    -0x38(%rbp),%rax
  438be9:	48 89 c7             	mov    %rax,%rdi
  438bec:	e8 1b a2 ff ff       	callq  432e0c <std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >::~unique_ptr()>
  438bf1:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
  438bf5:	48 89 c7             	mov    %rax,%rdi
  438bf8:	e8 0f a2 ff ff       	callq  432e0c <std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >::~unique_ptr()>
  438bfd:	48 89 d8             	mov    %rbx,%rax
  438c00:	48 89 c7             	mov    %rax,%rdi
  438c03:	e8 08 9d ff ff       	callq  432910 <_Unwind_Resume@plt>
    }
  }
  438c08:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  438c0c:	48 83 c4 68          	add    $0x68,%rsp
  438c10:	5b                   	pop    %rbx
  438c11:	41 5c                	pop    %r12
  438c13:	41 5d                	pop    %r13
  438c15:	5d                   	pop    %rbp
  438c16:	c3                   	retq   
  438c17:	90                   	nop

0000000000438c18 <x666::BinaryOp::imbue(std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, x666::Operator, unsigned long)>:
  ExpressionPtr BinaryOp::imbue(
      ExpressionPtr ax,
      Operator o, size_t prec) {
  438c18:	55                   	push   %rbp
  438c19:	48 89 e5             	mov    %rsp,%rbp
  438c1c:	41 55                	push   %r13
  438c1e:	41 54                	push   %r12
  438c20:	53                   	push   %rbx
  438c21:	48 83 ec 68          	sub    $0x68,%rsp
  438c25:	48 89 7d a8          	mov    %rdi,-0x58(%rbp)
  438c29:	48 89 75 a0          	mov    %rsi,-0x60(%rbp)
  438c2d:	48 89 55 98          	mov    %rdx,-0x68(%rbp)
  438c31:	89 4d 94             	mov    %ecx,-0x6c(%rbp)
  438c34:	4c 89 45 88          	mov    %r8,-0x78(%rbp)
    /*
        a->o        <- o
       /    \
      a->a  a->b
    */
    assert(ax->id() == 2);
  438c38:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  438c3c:	48 89 c7             	mov    %rax,%rdi
  438c3f:	e8 f2 a4 ff ff       	callq  433136 <std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >::operator->() const>
  438c44:	48 89 c2             	mov    %rax,%rdx
  438c47:	48 8b 02             	mov    (%rdx),%rax
  438c4a:	48 83 c0 10          	add    $0x10,%rax
  438c4e:	48 8b 00             	mov    (%rax),%rax
  438c51:	48 89 d7             	mov    %rdx,%rdi
  438c54:	ff d0                	callq  *%rax
  438c56:	48 83 f8 02          	cmp    $0x2,%rax
  438c5a:	74 19                	je     438c75 <x666::BinaryOp::imbue(std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, x666::Operator, unsigned long)+0x5d>
  438c5c:	b9 00 48 44 00       	mov    $0x444800,%ecx
  438c61:	ba 54 00 00 00       	mov    $0x54,%edx
  438c66:	be e8 46 44 00       	mov    $0x4446e8,%esi
  438c6b:	bf 08 47 44 00       	mov    $0x444708,%edi
  438c70:	e8 db 9a ff ff       	callq  432750 <__assert_fail@plt>
    BinaryOp* a = dynamic_cast<BinaryOp*>(ax.get());
  438c75:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  438c79:	48 89 c7             	mov    %rax,%rdi
  438c7c:	e8 69 ab ff ff       	callq  4337ea <std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >::get() const>
  438c81:	48 85 c0             	test   %rax,%rax
  438c84:	74 19                	je     438c9f <x666::BinaryOp::imbue(std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, x666::Operator, unsigned long)+0x87>
  438c86:	b9 00 00 00 00       	mov    $0x0,%ecx
  438c8b:	ba 80 4b 44 00       	mov    $0x444b80,%edx
  438c90:	be e0 4b 44 00       	mov    $0x444be0,%esi
  438c95:	48 89 c7             	mov    %rax,%rdi
  438c98:	e8 83 9b ff ff       	callq  432820 <__dynamic_cast@plt>
  438c9d:	eb 05                	jmp    438ca4 <x666::BinaryOp::imbue(std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, x666::Operator, unsigned long)+0x8c>
  438c9f:	b8 00 00 00 00       	mov    $0x0,%eax
  438ca4:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    size_t aprec = precedences[(size_t) a->o] >> 3;
  438ca8:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  438cac:	8b 40 18             	mov    0x18(%rax),%eax
  438caf:	48 98                	cltq   
  438cb1:	0f b7 84 00 00 13 65 	movzwl 0x651300(%rax,%rax,1),%eax
  438cb8:	00 
  438cb9:	0f b7 c0             	movzwl %ax,%eax
  438cbc:	c1 f8 03             	sar    $0x3,%eax
  438cbf:	48 98                	cltq   
  438cc1:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    if (aprec >= prec) {
  438cc5:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  438cc9:	48 3b 45 88          	cmp    -0x78(%rbp),%rax
  438ccd:	72 46                	jb     438d15 <x666::BinaryOp::imbue(std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, x666::Operator, unsigned long)+0xfd>
           /
          a->o
         /    \
        a->a  a->b
      */
      return std::make_unique<UnaryOp>(std::move(ax), o);
  438ccf:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  438cd3:	48 89 c7             	mov    %rax,%rdi
  438cd6:	e8 4c 0c 00 00       	callq  439927 <std::remove_reference<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&>::type&& std::move<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&>(std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&)>
  438cdb:	48 89 c1             	mov    %rax,%rcx
  438cde:	48 8d 45 b8          	lea    -0x48(%rbp),%rax
  438ce2:	48 8d 55 94          	lea    -0x6c(%rbp),%rdx
  438ce6:	48 89 ce             	mov    %rcx,%rsi
  438ce9:	48 89 c7             	mov    %rax,%rdi
  438cec:	e8 0b 2f 00 00       	callq  43bbfc <std::_MakeUniq<x666::UnaryOp>::__single_object std::make_unique<x666::UnaryOp, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, x666::Operator&>(std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&&, x666::Operator&)>
  438cf1:	48 8d 45 b8          	lea    -0x48(%rbp),%rax
  438cf5:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  438cf9:	48 89 c6             	mov    %rax,%rsi
  438cfc:	48 89 d7             	mov    %rdx,%rdi
  438cff:	e8 fc 2f 00 00       	callq  43bd00 <std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >::unique_ptr<x666::UnaryOp, std::default_delete<x666::UnaryOp>, void>(std::unique_ptr<x666::UnaryOp, std::default_delete<x666::UnaryOp> >&&)>
  438d04:	48 8d 45 b8          	lea    -0x48(%rbp),%rax
  438d08:	48 89 c7             	mov    %rax,%rdi
  438d0b:	e8 98 2f 00 00       	callq  43bca8 <std::unique_ptr<x666::UnaryOp, std::default_delete<x666::UnaryOp> >::~unique_ptr()>
  438d10:	e9 bc 00 00 00       	jmpq   438dd1 <x666::BinaryOp::imbue(std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, x666::Operator, unsigned long)+0x1b9>
        a->a   o
              /
             a->b
        (this case showing the trivial imbuement into a->b)
      */
      a->b = a->b->imbue(std::move(a->b), o, prec);
  438d15:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  438d19:	48 83 c0 10          	add    $0x10,%rax
  438d1d:	48 89 c7             	mov    %rax,%rdi
  438d20:	e8 11 a4 ff ff       	callq  433136 <std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >::operator->() const>
  438d25:	49 89 c4             	mov    %rax,%r12
  438d28:	49 8b 04 24          	mov    (%r12),%rax
  438d2c:	48 83 c0 20          	add    $0x20,%rax
  438d30:	48 8b 18             	mov    (%rax),%rbx
  438d33:	44 8b 6d 94          	mov    -0x6c(%rbp),%r13d
  438d37:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  438d3b:	48 83 c0 10          	add    $0x10,%rax
  438d3f:	48 89 c7             	mov    %rax,%rdi
  438d42:	e8 e0 0b 00 00       	callq  439927 <std::remove_reference<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&>::type&& std::move<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&>(std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&)>
  438d47:	48 89 c2             	mov    %rax,%rdx
  438d4a:	48 8d 45 c8          	lea    -0x38(%rbp),%rax
  438d4e:	48 89 d6             	mov    %rdx,%rsi
  438d51:	48 89 c7             	mov    %rax,%rdi
  438d54:	e8 9b 2c 00 00       	callq  43b9f4 <std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >::unique_ptr(std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&&)>
  438d59:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
  438d5d:	48 8b 4d 88          	mov    -0x78(%rbp),%rcx
  438d61:	48 8d 55 c8          	lea    -0x38(%rbp),%rdx
  438d65:	49 89 c8             	mov    %rcx,%r8
  438d68:	44 89 e9             	mov    %r13d,%ecx
  438d6b:	4c 89 e6             	mov    %r12,%rsi
  438d6e:	48 89 c7             	mov    %rax,%rdi
  438d71:	ff d3                	callq  *%rbx
  438d73:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  438d77:	48 8d 50 10          	lea    0x10(%rax),%rdx
  438d7b:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
  438d7f:	48 89 c6             	mov    %rax,%rsi
  438d82:	48 89 d7             	mov    %rdx,%rdi
  438d85:	e8 c8 2f 00 00       	callq  43bd52 <std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >::operator=(std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&&)>
  438d8a:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
  438d8e:	48 89 c7             	mov    %rax,%rdi
  438d91:	e8 76 a0 ff ff       	callq  432e0c <std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >::~unique_ptr()>
  438d96:	48 8d 45 c8          	lea    -0x38(%rbp),%rax
  438d9a:	48 89 c7             	mov    %rax,%rdi
  438d9d:	e8 6a a0 ff ff       	callq  432e0c <std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >::~unique_ptr()>
      return ax;
  438da2:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
  438da6:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  438daa:	48 89 d6             	mov    %rdx,%rsi
  438dad:	48 89 c7             	mov    %rax,%rdi
  438db0:	e8 3f 2c 00 00       	callq  43b9f4 <std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >::unique_ptr(std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&&)>
  438db5:	eb 1a                	jmp    438dd1 <x666::BinaryOp::imbue(std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, x666::Operator, unsigned long)+0x1b9>
  438db7:	48 89 c3             	mov    %rax,%rbx
      a->b = a->b->imbue(std::move(a->b), o, prec);
  438dba:	48 8d 45 c8          	lea    -0x38(%rbp),%rax
  438dbe:	48 89 c7             	mov    %rax,%rdi
  438dc1:	e8 46 a0 ff ff       	callq  432e0c <std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >::~unique_ptr()>
  438dc6:	48 89 d8             	mov    %rbx,%rax
  438dc9:	48 89 c7             	mov    %rax,%rdi
  438dcc:	e8 3f 9b ff ff       	callq  432910 <_Unwind_Resume@plt>
    }
  }
  438dd1:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  438dd5:	48 83 c4 68          	add    $0x68,%rsp
  438dd9:	5b                   	pop    %rbx
  438dda:	41 5c                	pop    %r12
  438ddc:	41 5d                	pop    %r13
  438dde:	5d                   	pop    %rbp
  438ddf:	c3                   	retq   

0000000000438de0 <x666::UnaryOp::imbue(std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, x666::Operator, unsigned long, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >)>:
  ExpressionPtr UnaryOp::imbue(
      ExpressionPtr ax,
      Operator o, size_t prec,
      ExpressionPtr b) {
  438de0:	55                   	push   %rbp
  438de1:	48 89 e5             	mov    %rsp,%rbp
  438de4:	41 55                	push   %r13
  438de6:	41 54                	push   %r12
  438de8:	53                   	push   %rbx
  438de9:	48 83 ec 68          	sub    $0x68,%rsp
  438ded:	48 89 7d a8          	mov    %rdi,-0x58(%rbp)
  438df1:	48 89 75 a0          	mov    %rsi,-0x60(%rbp)
  438df5:	48 89 55 98          	mov    %rdx,-0x68(%rbp)
  438df9:	89 4d 94             	mov    %ecx,-0x6c(%rbp)
  438dfc:	4c 89 45 88          	mov    %r8,-0x78(%rbp)
  438e00:	4c 89 4d 80          	mov    %r9,-0x80(%rbp)
    /*
        a->o        <- o
       /                \
      a->a               b
    */
    assert(ax->id() == 3);
  438e04:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  438e08:	48 89 c7             	mov    %rax,%rdi
  438e0b:	e8 26 a3 ff ff       	callq  433136 <std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >::operator->() const>
  438e10:	48 89 c2             	mov    %rax,%rdx
  438e13:	48 8b 02             	mov    (%rdx),%rax
  438e16:	48 83 c0 10          	add    $0x10,%rax
  438e1a:	48 8b 00             	mov    (%rax),%rax
  438e1d:	48 89 d7             	mov    %rdx,%rdi
  438e20:	ff d0                	callq  *%rax
  438e22:	48 83 f8 03          	cmp    $0x3,%rax
  438e26:	74 19                	je     438e41 <x666::UnaryOp::imbue(std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, x666::Operator, unsigned long, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >)+0x61>
  438e28:	b9 60 48 44 00       	mov    $0x444860,%ecx
  438e2d:	ba 76 00 00 00       	mov    $0x76,%edx
  438e32:	be e8 46 44 00       	mov    $0x4446e8,%esi
  438e37:	bf 16 47 44 00       	mov    $0x444716,%edi
  438e3c:	e8 0f 99 ff ff       	callq  432750 <__assert_fail@plt>
    UnaryOp* a = dynamic_cast<UnaryOp*>(ax.get());
  438e41:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  438e45:	48 89 c7             	mov    %rax,%rdi
  438e48:	e8 9d a9 ff ff       	callq  4337ea <std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >::get() const>
  438e4d:	48 85 c0             	test   %rax,%rax
  438e50:	74 19                	je     438e6b <x666::UnaryOp::imbue(std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, x666::Operator, unsigned long, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >)+0x8b>
  438e52:	b9 00 00 00 00       	mov    $0x0,%ecx
  438e57:	ba 50 4b 44 00       	mov    $0x444b50,%edx
  438e5c:	be e0 4b 44 00       	mov    $0x444be0,%esi
  438e61:	48 89 c7             	mov    %rax,%rdi
  438e64:	e8 b7 99 ff ff       	callq  432820 <__dynamic_cast@plt>
  438e69:	eb 05                	jmp    438e70 <x666::UnaryOp::imbue(std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, x666::Operator, unsigned long, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >)+0x90>
  438e6b:	b8 00 00 00 00       	mov    $0x0,%eax
  438e70:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    size_t aprec = precedences[(size_t) a->o] >> 3;
  438e74:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  438e78:	8b 40 10             	mov    0x10(%rax),%eax
  438e7b:	48 98                	cltq   
  438e7d:	0f b7 84 00 00 13 65 	movzwl 0x651300(%rax,%rax,1),%eax
  438e84:	00 
  438e85:	0f b7 c0             	movzwl %ax,%eax
  438e88:	c1 f8 03             	sar    $0x3,%eax
  438e8b:	48 98                	cltq   
  438e8d:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    if (aprec >= prec) {
  438e91:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  438e95:	48 3b 45 88          	cmp    -0x78(%rbp),%rax
  438e99:	72 58                	jb     438ef3 <x666::UnaryOp::imbue(std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, x666::Operator, unsigned long, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >)+0x113>
           /   \
          a->o  b
         /
        a->a
      */
      return std::make_unique<BinaryOp>(std::move(ax), std::move(b), o);
  438e9b:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  438e9f:	48 89 c7             	mov    %rax,%rdi
  438ea2:	e8 80 0a 00 00       	callq  439927 <std::remove_reference<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&>::type&& std::move<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&>(std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&)>
  438ea7:	48 89 c3             	mov    %rax,%rbx
  438eaa:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  438eae:	48 89 c7             	mov    %rax,%rdi
  438eb1:	e8 71 0a 00 00       	callq  439927 <std::remove_reference<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&>::type&& std::move<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&>(std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&)>
  438eb6:	48 89 c6             	mov    %rax,%rsi
  438eb9:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
  438ebd:	48 8d 55 94          	lea    -0x6c(%rbp),%rdx
  438ec1:	48 89 d1             	mov    %rdx,%rcx
  438ec4:	48 89 da             	mov    %rbx,%rdx
  438ec7:	48 89 c7             	mov    %rax,%rdi
  438eca:	e8 93 2b 00 00       	callq  43ba62 <std::_MakeUniq<x666::BinaryOp>::__single_object std::make_unique<x666::BinaryOp, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, x666::Operator&>(std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&&, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&&, x666::Operator&)>
  438ecf:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
  438ed3:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  438ed7:	48 89 c6             	mov    %rax,%rsi
  438eda:	48 89 d7             	mov    %rdx,%rdi
  438edd:	e8 c8 2c 00 00       	callq  43bbaa <std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >::unique_ptr<x666::BinaryOp, std::default_delete<x666::BinaryOp>, void>(std::unique_ptr<x666::BinaryOp, std::default_delete<x666::BinaryOp> >&&)>
  438ee2:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
  438ee6:	48 89 c7             	mov    %rax,%rdi
  438ee9:	e8 64 2c 00 00       	callq  43bb52 <std::unique_ptr<x666::BinaryOp, std::default_delete<x666::BinaryOp> >::~unique_ptr()>
  438eee:	e9 f9 00 00 00       	jmpq   438fec <x666::UnaryOp::imbue(std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, x666::Operator, unsigned long, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >)+0x20c>
          o--
         /   \
        a->a  b
        (this case showing the trivial imbuement into a->a)
      */
      a->a = a->a->imbue(std::move(a->a), o, prec, std::move(b));
  438ef3:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  438ef7:	48 83 c0 08          	add    $0x8,%rax
  438efb:	48 89 c7             	mov    %rax,%rdi
  438efe:	e8 33 a2 ff ff       	callq  433136 <std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >::operator->() const>
  438f03:	49 89 c4             	mov    %rax,%r12
  438f06:	49 8b 04 24          	mov    (%r12),%rax
  438f0a:	48 83 c0 18          	add    $0x18,%rax
  438f0e:	48 8b 18             	mov    (%rax),%rbx
  438f11:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  438f15:	48 89 c7             	mov    %rax,%rdi
  438f18:	e8 0a 0a 00 00       	callq  439927 <std::remove_reference<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&>::type&& std::move<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&>(std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&)>
  438f1d:	48 89 c2             	mov    %rax,%rdx
  438f20:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
  438f24:	48 89 d6             	mov    %rdx,%rsi
  438f27:	48 89 c7             	mov    %rax,%rdi
  438f2a:	e8 c5 2a 00 00       	callq  43b9f4 <std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >::unique_ptr(std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&&)>
  438f2f:	44 8b 6d 94          	mov    -0x6c(%rbp),%r13d
  438f33:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  438f37:	48 83 c0 08          	add    $0x8,%rax
  438f3b:	48 89 c7             	mov    %rax,%rdi
  438f3e:	e8 e4 09 00 00       	callq  439927 <std::remove_reference<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&>::type&& std::move<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&>(std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&)>
  438f43:	48 89 c2             	mov    %rax,%rdx
  438f46:	48 8d 45 c8          	lea    -0x38(%rbp),%rax
  438f4a:	48 89 d6             	mov    %rdx,%rsi
  438f4d:	48 89 c7             	mov    %rax,%rdi
  438f50:	e8 9f 2a 00 00       	callq  43b9f4 <std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >::unique_ptr(std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&&)>
  438f55:	48 8d 45 b8          	lea    -0x48(%rbp),%rax
  438f59:	48 8d 4d c0          	lea    -0x40(%rbp),%rcx
  438f5d:	48 8b 75 88          	mov    -0x78(%rbp),%rsi
  438f61:	48 8d 55 c8          	lea    -0x38(%rbp),%rdx
  438f65:	49 89 c9             	mov    %rcx,%r9
  438f68:	49 89 f0             	mov    %rsi,%r8
  438f6b:	44 89 e9             	mov    %r13d,%ecx
  438f6e:	4c 89 e6             	mov    %r12,%rsi
  438f71:	48 89 c7             	mov    %rax,%rdi
  438f74:	ff d3                	callq  *%rbx
  438f76:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  438f7a:	48 8d 50 08          	lea    0x8(%rax),%rdx
  438f7e:	48 8d 45 b8          	lea    -0x48(%rbp),%rax
  438f82:	48 89 c6             	mov    %rax,%rsi
  438f85:	48 89 d7             	mov    %rdx,%rdi
  438f88:	e8 c5 2d 00 00       	callq  43bd52 <std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >::operator=(std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&&)>
  438f8d:	48 8d 45 b8          	lea    -0x48(%rbp),%rax
  438f91:	48 89 c7             	mov    %rax,%rdi
  438f94:	e8 73 9e ff ff       	callq  432e0c <std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >::~unique_ptr()>
  438f99:	48 8d 45 c8          	lea    -0x38(%rbp),%rax
  438f9d:	48 89 c7             	mov    %rax,%rdi
  438fa0:	e8 67 9e ff ff       	callq  432e0c <std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >::~unique_ptr()>
  438fa5:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
  438fa9:	48 89 c7             	mov    %rax,%rdi
  438fac:	e8 5b 9e ff ff       	callq  432e0c <std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >::~unique_ptr()>
      return ax;
  438fb1:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
  438fb5:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  438fb9:	48 89 d6             	mov    %rdx,%rsi
  438fbc:	48 89 c7             	mov    %rax,%rdi
  438fbf:	e8 30 2a 00 00       	callq  43b9f4 <std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >::unique_ptr(std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&&)>
  438fc4:	eb 26                	jmp    438fec <x666::UnaryOp::imbue(std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, x666::Operator, unsigned long, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >)+0x20c>
  438fc6:	48 89 c3             	mov    %rax,%rbx
      a->a = a->a->imbue(std::move(a->a), o, prec, std::move(b));
  438fc9:	48 8d 45 c8          	lea    -0x38(%rbp),%rax
  438fcd:	48 89 c7             	mov    %rax,%rdi
  438fd0:	e8 37 9e ff ff       	callq  432e0c <std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >::~unique_ptr()>
  438fd5:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
  438fd9:	48 89 c7             	mov    %rax,%rdi
  438fdc:	e8 2b 9e ff ff       	callq  432e0c <std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >::~unique_ptr()>
  438fe1:	48 89 d8             	mov    %rbx,%rax
  438fe4:	48 89 c7             	mov    %rax,%rdi
  438fe7:	e8 24 99 ff ff       	callq  432910 <_Unwind_Resume@plt>
    }
  }
  438fec:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  438ff0:	48 83 c4 68          	add    $0x68,%rsp
  438ff4:	5b                   	pop    %rbx
  438ff5:	41 5c                	pop    %r12
  438ff7:	41 5d                	pop    %r13
  438ff9:	5d                   	pop    %rbp
  438ffa:	c3                   	retq   
  438ffb:	90                   	nop

0000000000438ffc <x666::Literal::trace() const>:
  void Literal::trace() const {
  438ffc:	55                   	push   %rbp
  438ffd:	48 89 e5             	mov    %rsp,%rbp
  439000:	53                   	push   %rbx
  439001:	48 83 ec 38          	sub    $0x38,%rsp
  439005:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
    switch (val.index()) {
  439009:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  43900d:	48 83 c0 08          	add    $0x8,%rax
  439011:	48 89 c7             	mov    %rax,%rdi
  439014:	e8 8d 2d 00 00       	callq  43bda6 <std::variant<x666::Identifier, x666::IntLiteral, x666::StringLiteral>::index() const>
  439019:	48 83 f8 01          	cmp    $0x1,%rax
  43901d:	74 2f                	je     43904e <x666::Literal::trace() const+0x52>
  43901f:	48 85 c0             	test   %rax,%rax
  439022:	74 0b                	je     43902f <x666::Literal::trace() const+0x33>
  439024:	48 83 f8 02          	cmp    $0x2,%rax
  439028:	74 46                	je     439070 <x666::Literal::trace() const+0x74>
      case 0: std::cout << std::get<0>(val).name; break;
      case 1: std::cout << std::get<1>(val).n; break;
      case 2: std::cout << "\"" << unescape(std::get<2>(val).str) << "\"";
      break;
    }
  }
  43902a:	e9 ba 00 00 00       	jmpq   4390e9 <x666::Literal::trace() const+0xed>
      case 0: std::cout << std::get<0>(val).name; break;
  43902f:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  439033:	48 83 c0 08          	add    $0x8,%rax
  439037:	48 89 c7             	mov    %rax,%rdi
  43903a:	e8 ff 2d 00 00       	callq  43be3e <std::variant_alternative<0ul, std::variant<x666::Identifier, x666::IntLiteral, x666::StringLiteral> >::type const& std::get<0ul, x666::Identifier, x666::IntLiteral, x666::StringLiteral>(std::variant<x666::Identifier, x666::IntLiteral, x666::StringLiteral> const&)>
  43903f:	48 89 c6             	mov    %rax,%rsi
  439042:	bf 40 13 65 00       	mov    $0x651340,%edi
  439047:	e8 fc d6 ff ff       	callq  436748 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <char, std::char_traits<char>, std::allocator<char> >(std::basic_ostream<char, std::char_traits<char> >&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
  43904c:	eb 7f                	jmp    4390cd <x666::Literal::trace() const+0xd1>
      case 1: std::cout << std::get<1>(val).n; break;
  43904e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  439052:	48 83 c0 08          	add    $0x8,%rax
  439056:	48 89 c7             	mov    %rax,%rdi
  439059:	e8 aa 2e 00 00       	callq  43bf08 <std::variant_alternative<1ul, std::variant<x666::Identifier, x666::IntLiteral, x666::StringLiteral> >::type const& std::get<1ul, x666::Identifier, x666::IntLiteral, x666::StringLiteral>(std::variant<x666::Identifier, x666::IntLiteral, x666::StringLiteral> const&)>
  43905e:	48 8b 00             	mov    (%rax),%rax
  439061:	48 89 c6             	mov    %rax,%rsi
  439064:	bf 40 13 65 00       	mov    $0x651340,%edi
  439069:	e8 c2 98 ff ff       	callq  432930 <std::ostream::operator<<(long)@plt>
  43906e:	eb 5d                	jmp    4390cd <x666::Literal::trace() const+0xd1>
      case 2: std::cout << "\"" << unescape(std::get<2>(val).str) << "\"";
  439070:	be 24 47 44 00       	mov    $0x444724,%esi
  439075:	bf 40 13 65 00       	mov    $0x651340,%edi
  43907a:	e8 61 97 ff ff       	callq  4327e0 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*)@plt>
  43907f:	48 89 c3             	mov    %rax,%rbx
  439082:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  439086:	48 83 c0 08          	add    $0x8,%rax
  43908a:	48 89 c7             	mov    %rax,%rdi
  43908d:	e8 71 2f 00 00       	callq  43c003 <std::variant_alternative<2ul, std::variant<x666::Identifier, x666::IntLiteral, x666::StringLiteral> >::type const& std::get<2ul, x666::Identifier, x666::IntLiteral, x666::StringLiteral>(std::variant<x666::Identifier, x666::IntLiteral, x666::StringLiteral> const&)>
  439092:	48 89 c2             	mov    %rax,%rdx
  439095:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  439099:	48 89 d6             	mov    %rdx,%rsi
  43909c:	48 89 c7             	mov    %rax,%rdi
  43909f:	e8 71 b5 ff ff       	callq  434615 <x666::unescape(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
  4390a4:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  4390a8:	48 89 c6             	mov    %rax,%rsi
  4390ab:	48 89 df             	mov    %rbx,%rdi
  4390ae:	e8 95 d6 ff ff       	callq  436748 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <char, std::char_traits<char>, std::allocator<char> >(std::basic_ostream<char, std::char_traits<char> >&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
  4390b3:	be 24 47 44 00       	mov    $0x444724,%esi
  4390b8:	48 89 c7             	mov    %rax,%rdi
  4390bb:	e8 20 97 ff ff       	callq  4327e0 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*)@plt>
  4390c0:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  4390c4:	48 89 c7             	mov    %rax,%rdi
  4390c7:	e8 a8 cc ff ff       	callq  435d74 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()>
      break;
  4390cc:	90                   	nop
  }
  4390cd:	eb 1a                	jmp    4390e9 <x666::Literal::trace() const+0xed>
  4390cf:	48 89 c3             	mov    %rax,%rbx
      case 2: std::cout << "\"" << unescape(std::get<2>(val).str) << "\"";
  4390d2:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  4390d6:	48 89 c7             	mov    %rax,%rdi
  4390d9:	e8 96 cc ff ff       	callq  435d74 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()>
  4390de:	48 89 d8             	mov    %rbx,%rax
  4390e1:	48 89 c7             	mov    %rax,%rdi
  4390e4:	e8 27 98 ff ff       	callq  432910 <_Unwind_Resume@plt>
  }
  4390e9:	48 83 c4 38          	add    $0x38,%rsp
  4390ed:	5b                   	pop    %rbx
  4390ee:	5d                   	pop    %rbp
  4390ef:	c3                   	retq   

00000000004390f0 <x666::BinaryOp::trace() const>:
  void BinaryOp::trace() const {
  4390f0:	55                   	push   %rbp
  4390f1:	48 89 e5             	mov    %rsp,%rbp
  4390f4:	48 83 ec 20          	sub    $0x20,%rsp
  4390f8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    size_t prec = precedences[(size_t) o];
  4390fc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  439100:	8b 40 18             	mov    0x18(%rax),%eax
  439103:	48 98                	cltq   
  439105:	0f b7 84 00 00 13 65 	movzwl 0x651300(%rax,%rax,1),%eax
  43910c:	00 
  43910d:	0f b7 c0             	movzwl %ax,%eax
  439110:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    ((prec & 1) == 0 ? a : b)->trace();
  439114:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  439118:	83 e0 01             	and    $0x1,%eax
  43911b:	48 85 c0             	test   %rax,%rax
  43911e:	75 0a                	jne    43912a <x666::BinaryOp::trace() const+0x3a>
  439120:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  439124:	48 83 c0 08          	add    $0x8,%rax
  439128:	eb 08                	jmp    439132 <x666::BinaryOp::trace() const+0x42>
  43912a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  43912e:	48 83 c0 10          	add    $0x10,%rax
  439132:	48 89 c7             	mov    %rax,%rdi
  439135:	e8 fc 9f ff ff       	callq  433136 <std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >::operator->() const>
  43913a:	48 89 c2             	mov    %rax,%rdx
  43913d:	48 8b 02             	mov    (%rdx),%rax
  439140:	48 83 c0 28          	add    $0x28,%rax
  439144:	48 8b 00             	mov    (%rax),%rax
  439147:	48 89 d7             	mov    %rdx,%rdi
  43914a:	ff d0                	callq  *%rax
    std::cout << " " << opsAsStrings[(size_t) o] << " ";
  43914c:	be 26 47 44 00       	mov    $0x444726,%esi
  439151:	bf 40 13 65 00       	mov    $0x651340,%edi
  439156:	e8 85 96 ff ff       	callq  4327e0 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*)@plt>
  43915b:	48 89 c2             	mov    %rax,%rdx
  43915e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  439162:	8b 40 18             	mov    0x18(%rax),%eax
  439165:	48 98                	cltq   
  439167:	48 8b 04 c5 00 12 65 	mov    0x651200(,%rax,8),%rax
  43916e:	00 
  43916f:	48 89 c6             	mov    %rax,%rsi
  439172:	48 89 d7             	mov    %rdx,%rdi
  439175:	e8 66 96 ff ff       	callq  4327e0 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*)@plt>
  43917a:	be 26 47 44 00       	mov    $0x444726,%esi
  43917f:	48 89 c7             	mov    %rax,%rdi
  439182:	e8 59 96 ff ff       	callq  4327e0 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*)@plt>
    ((prec & 1) == 0 ? b : a)->trace();
  439187:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43918b:	83 e0 01             	and    $0x1,%eax
  43918e:	48 85 c0             	test   %rax,%rax
  439191:	75 0a                	jne    43919d <x666::BinaryOp::trace() const+0xad>
  439193:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  439197:	48 83 c0 10          	add    $0x10,%rax
  43919b:	eb 08                	jmp    4391a5 <x666::BinaryOp::trace() const+0xb5>
  43919d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4391a1:	48 83 c0 08          	add    $0x8,%rax
  4391a5:	48 89 c7             	mov    %rax,%rdi
  4391a8:	e8 89 9f ff ff       	callq  433136 <std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >::operator->() const>
  4391ad:	48 89 c2             	mov    %rax,%rdx
  4391b0:	48 8b 02             	mov    (%rdx),%rax
  4391b3:	48 83 c0 28          	add    $0x28,%rax
  4391b7:	48 8b 00             	mov    (%rax),%rax
  4391ba:	48 89 d7             	mov    %rdx,%rdi
  4391bd:	ff d0                	callq  *%rax
  }
  4391bf:	90                   	nop
  4391c0:	c9                   	leaveq 
  4391c1:	c3                   	retq   

00000000004391c2 <x666::UnaryOp::trace() const>:
  void UnaryOp::trace() const {
  4391c2:	55                   	push   %rbp
  4391c3:	48 89 e5             	mov    %rsp,%rbp
  4391c6:	48 83 ec 10          	sub    $0x10,%rsp
  4391ca:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    std::cout << opsAsStrings[(size_t) o];
  4391ce:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4391d2:	8b 40 10             	mov    0x10(%rax),%eax
  4391d5:	48 98                	cltq   
  4391d7:	48 8b 04 c5 00 12 65 	mov    0x651200(,%rax,8),%rax
  4391de:	00 
  4391df:	48 89 c6             	mov    %rax,%rsi
  4391e2:	bf 40 13 65 00       	mov    $0x651340,%edi
  4391e7:	e8 f4 95 ff ff       	callq  4327e0 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*)@plt>
    a->trace();
  4391ec:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4391f0:	48 83 c0 08          	add    $0x8,%rax
  4391f4:	48 89 c7             	mov    %rax,%rdi
  4391f7:	e8 3a 9f ff ff       	callq  433136 <std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >::operator->() const>
  4391fc:	48 89 c2             	mov    %rax,%rdx
  4391ff:	48 8b 02             	mov    (%rdx),%rax
  439202:	48 83 c0 28          	add    $0x28,%rax
  439206:	48 8b 00             	mov    (%rax),%rax
  439209:	48 89 d7             	mov    %rdx,%rdi
  43920c:	ff d0                	callq  *%rax
  }
  43920e:	90                   	nop
  43920f:	c9                   	leaveq 
  439210:	c3                   	retq   
  439211:	90                   	nop

0000000000439212 <x666::Bracket::trace() const>:
  void Bracket::trace() const {
  439212:	55                   	push   %rbp
  439213:	48 89 e5             	mov    %rsp,%rbp
  439216:	48 83 ec 10          	sub    $0x10,%rsp
  43921a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    std::cout << "(";
  43921e:	be 28 47 44 00       	mov    $0x444728,%esi
  439223:	bf 40 13 65 00       	mov    $0x651340,%edi
  439228:	e8 b3 95 ff ff       	callq  4327e0 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*)@plt>
    ex->trace();
  43922d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  439231:	48 83 c0 08          	add    $0x8,%rax
  439235:	48 89 c7             	mov    %rax,%rdi
  439238:	e8 f9 9e ff ff       	callq  433136 <std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >::operator->() const>
  43923d:	48 89 c2             	mov    %rax,%rdx
  439240:	48 8b 02             	mov    (%rdx),%rax
  439243:	48 83 c0 28          	add    $0x28,%rax
  439247:	48 8b 00             	mov    (%rax),%rax
  43924a:	48 89 d7             	mov    %rdx,%rdi
  43924d:	ff d0                	callq  *%rax
    std::cout << ")";
  43924f:	be 2a 47 44 00       	mov    $0x44472a,%esi
  439254:	bf 40 13 65 00       	mov    $0x651340,%edi
  439259:	e8 82 95 ff ff       	callq  4327e0 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*)@plt>
  }
  43925e:	90                   	nop
  43925f:	c9                   	leaveq 
  439260:	c3                   	retq   
  439261:	90                   	nop

0000000000439262 <x666::Parser::Parser(std::istream*)>:
    }
  private:
    Parser* p;
    LineInfo li;
  };
  Parser::Parser(std::istream* fh) : fh(fh) {}
  439262:	55                   	push   %rbp
  439263:	48 89 e5             	mov    %rsp,%rbp
  439266:	53                   	push   %rbx
  439267:	48 83 ec 18          	sub    $0x18,%rsp
  43926b:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  43926f:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  439273:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  439277:	48 89 c7             	mov    %rax,%rdi
  43927a:	e8 41 36 00 00       	callq  43c8c0 <std::vector<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > >::vector()>
  43927f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  439283:	48 83 c0 18          	add    $0x18,%rax
  439287:	48 89 c7             	mov    %rax,%rdi
  43928a:	e8 4d 36 00 00       	callq  43c8dc <std::stack<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::deque<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > > >::stack<std::deque<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > >, void>()>
  43928f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  439293:	48 83 c0 68          	add    $0x68,%rax
  439297:	48 89 c7             	mov    %rax,%rdi
  43929a:	e8 59 36 00 00       	callq  43c8f8 <std::stack<x666::LineInfo, std::deque<x666::LineInfo, std::allocator<x666::LineInfo> > >::stack<std::deque<x666::LineInfo, std::allocator<x666::LineInfo> >, void>()>
  43929f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4392a3:	48 05 b8 00 00 00    	add    $0xb8,%rax
  4392a9:	48 89 c7             	mov    %rax,%rdi
  4392ac:	e8 63 36 00 00       	callq  43c914 <std::stack<x666::Parser::BracketEntry, std::deque<x666::Parser::BracketEntry, std::allocator<x666::Parser::BracketEntry> > >::stack<std::deque<x666::Parser::BracketEntry, std::allocator<x666::Parser::BracketEntry> >, void>()>
  4392b1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4392b5:	48 05 08 01 00 00    	add    $0x108,%rax
  4392bb:	48 89 c7             	mov    %rax,%rdi
  4392be:	e8 6d 36 00 00       	callq  43c930 <std::vector<x666::LexError, std::allocator<x666::LexError> >::vector()>
  4392c3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4392c7:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  4392cb:	48 89 90 20 01 00 00 	mov    %rdx,0x120(%rax)
  4392d2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4392d6:	48 05 28 01 00 00    	add    $0x128,%rax
  4392dc:	48 89 c7             	mov    %rax,%rdi
  4392df:	e8 44 04 00 00       	callq  439728 <x666::LineInfo::LineInfo()>
  4392e4:	eb 44                	jmp    43932a <x666::Parser::Parser(std::istream*)+0xc8>
  4392e6:	48 89 c3             	mov    %rax,%rbx
  4392e9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4392ed:	48 83 c0 68          	add    $0x68,%rax
  4392f1:	48 89 c7             	mov    %rax,%rdi
  4392f4:	e8 7b 9a ff ff       	callq  432d74 <std::stack<x666::LineInfo, std::deque<x666::LineInfo, std::allocator<x666::LineInfo> > >::~stack()>
  4392f9:	eb 03                	jmp    4392fe <x666::Parser::Parser(std::istream*)+0x9c>
  4392fb:	48 89 c3             	mov    %rax,%rbx
  4392fe:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  439302:	48 83 c0 18          	add    $0x18,%rax
  439306:	48 89 c7             	mov    %rax,%rdi
  439309:	e8 4a 9a ff ff       	callq  432d58 <std::stack<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::deque<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > > >::~stack()>
  43930e:	eb 03                	jmp    439313 <x666::Parser::Parser(std::istream*)+0xb1>
  439310:	48 89 c3             	mov    %rax,%rbx
  439313:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  439317:	48 89 c7             	mov    %rax,%rdi
  43931a:	e8 45 9b ff ff       	callq  432e64 <std::vector<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > >::~vector()>
  43931f:	48 89 d8             	mov    %rbx,%rax
  439322:	48 89 c7             	mov    %rax,%rdi
  439325:	e8 e6 95 ff ff       	callq  432910 <_Unwind_Resume@plt>
  43932a:	48 83 c4 18          	add    $0x18,%rsp
  43932e:	5b                   	pop    %rbx
  43932f:	5d                   	pop    %rbp
  439330:	c3                   	retq   
  439331:	90                   	nop

0000000000439332 <x666::Parser::requestToken()>:
  Token Parser::requestToken() {
  439332:	55                   	push   %rbp
  439333:	48 89 e5             	mov    %rsp,%rbp
  439336:	53                   	push   %rbx
  439337:	48 83 ec 18          	sub    $0x18,%rsp
  43933b:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  43933f:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    Token t = getNextToken(*fh, li);
  439343:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  439347:	48 8d 90 28 01 00 00 	lea    0x128(%rax),%rdx
  43934e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  439352:	48 8b 88 20 01 00 00 	mov    0x120(%rax),%rcx
  439359:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  43935d:	48 89 ce             	mov    %rcx,%rsi
  439360:	48 89 c7             	mov    %rax,%rdi
  439363:	e8 b3 b3 ff ff       	callq  43471b <x666::getNextToken(std::istream&, x666::LineInfo&)>
    if (std::holds_alternative<LexError>(t))
  439368:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  43936c:	48 89 c7             	mov    %rax,%rdi
  43936f:	e8 f3 35 00 00       	callq  43c967 <bool std::holds_alternative<x666::LexError, x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>(std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> const&)>
  439374:	84 c0                	test   %al,%al
  439376:	74 3e                	je     4393b6 <x666::Parser::requestToken()+0x84>
      errorLog.push_back(std::get<LexError>(t));
  439378:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  43937c:	48 8d 98 08 01 00 00 	lea    0x108(%rax),%rbx
  439383:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  439387:	48 89 c7             	mov    %rax,%rdi
  43938a:	e8 90 17 00 00       	callq  43ab1f <x666::LexError& std::get<x666::LexError, x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>(std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>&)>
  43938f:	48 89 c6             	mov    %rax,%rsi
  439392:	48 89 df             	mov    %rbx,%rdi
  439395:	e8 fc 30 00 00       	callq  43c496 <std::vector<x666::LexError, std::allocator<x666::LexError> >::push_back(x666::LexError const&)>
    return t;
  43939a:	eb 1a                	jmp    4393b6 <x666::Parser::requestToken()+0x84>
  43939c:	48 89 c3             	mov    %rax,%rbx
  43939f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4393a3:	48 89 c7             	mov    %rax,%rdi
  4393a6:	e8 59 17 00 00       	callq  43ab04 <std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>::~variant()>
  4393ab:	48 89 d8             	mov    %rbx,%rax
  4393ae:	48 89 c7             	mov    %rax,%rdi
  4393b1:	e8 5a 95 ff ff       	callq  432910 <_Unwind_Resume@plt>
  4393b6:	90                   	nop
  }
  4393b7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4393bb:	48 83 c4 18          	add    $0x18,%rsp
  4393bf:	5b                   	pop    %rbx
  4393c0:	5d                   	pop    %rbp
  4393c1:	c3                   	retq   

00000000004393c2 <x666::Parser::acceptToken(std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>&&)>:
  bool Parser::acceptToken(Token&& t) {
  4393c2:	55                   	push   %rbp
  4393c3:	48 89 e5             	mov    %rsp,%rbp
  4393c6:	53                   	push   %rbx
  4393c7:	48 83 ec 48          	sub    $0x48,%rsp
  4393cb:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
  4393cf:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
    return std::visit(ParserVisitor(this, li), std::move(t));
  4393d3:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  4393d7:	48 89 c7             	mov    %rax,%rdi
  4393da:	e8 a2 19 00 00       	callq  43ad81 <std::remove_reference<std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>&>::type&& std::move<std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>&>(std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>&)>
  4393df:	48 89 c3             	mov    %rax,%rbx
  4393e2:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  4393e6:	48 8d 90 28 01 00 00 	lea    0x128(%rax),%rdx
  4393ed:	48 8b 4d b8          	mov    -0x48(%rbp),%rcx
  4393f1:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
  4393f5:	48 89 ce             	mov    %rcx,%rsi
  4393f8:	48 89 c7             	mov    %rax,%rdi
  4393fb:	e8 a2 06 00 00       	callq  439aa2 <x666::ParserVisitor::ParserVisitor(x666::Parser*, x666::LineInfo const&)>
  439400:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
  439404:	48 89 de             	mov    %rbx,%rsi
  439407:	48 89 c7             	mov    %rax,%rdi
  43940a:	e8 6a 24 00 00       	callq  43b879 <decltype(auto) std::visit<x666::ParserVisitor, std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> >(x666::ParserVisitor&&, std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>&&)>
  }
  43940f:	48 83 c4 48          	add    $0x48,%rsp
  439413:	5b                   	pop    %rbx
  439414:	5d                   	pop    %rbp
  439415:	c3                   	retq   

0000000000439416 <x666::Parser::pushExpression()>:
  size_t Parser::pushExpression() {
  439416:	55                   	push   %rbp
  439417:	48 89 e5             	mov    %rsp,%rbp
  43941a:	53                   	push   %rbx
  43941b:	48 83 ec 58          	sub    $0x58,%rsp
  43941f:	48 89 7d a8          	mov    %rdi,-0x58(%rbp)
    size_t oldBracketsHeight = brackets.size();
  439423:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  439427:	48 05 b8 00 00 00    	add    $0xb8,%rax
  43942d:	48 89 c7             	mov    %rax,%rdi
  439430:	e8 65 38 00 00       	callq  43cc9a <std::stack<x666::Parser::BracketEntry, std::deque<x666::Parser::BracketEntry, std::allocator<x666::Parser::BracketEntry> > >::size() const>
  439435:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    size_t oldThisLineSize = thisLine.size();
  439439:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  43943d:	48 83 c0 18          	add    $0x18,%rax
  439441:	48 89 c7             	mov    %rax,%rdi
  439444:	e8 bd 31 00 00       	callq  43c606 <std::stack<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::deque<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > > >::size() const>
  439449:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    do {
      Token t = requestToken();
  43944d:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
  439451:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  439455:	48 89 d6             	mov    %rdx,%rsi
  439458:	48 89 c7             	mov    %rax,%rdi
  43945b:	e8 d2 fe ff ff       	callq  439332 <x666::Parser::requestToken()>
      if (std::holds_alternative<EndOfFile>(t) ||
  439460:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
  439464:	48 89 c7             	mov    %rax,%rdi
  439467:	e8 96 24 00 00       	callq  43b902 <bool std::holds_alternative<x666::EndOfFile, x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>(std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> const&)>
  43946c:	84 c0                	test   %al,%al
  43946e:	75 10                	jne    439480 <x666::Parser::pushExpression()+0x6a>
          std::holds_alternative<Newline>(t)) {
  439470:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
  439474:	48 89 c7             	mov    %rax,%rdi
  439477:	e8 38 38 00 00       	callq  43ccb4 <bool std::holds_alternative<x666::Newline, x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>(std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> const&)>
      if (std::holds_alternative<EndOfFile>(t) ||
  43947c:	84 c0                	test   %al,%al
  43947e:	74 07                	je     439487 <x666::Parser::pushExpression()+0x71>
  439480:	b8 01 00 00 00       	mov    $0x1,%eax
  439485:	eb 05                	jmp    43948c <x666::Parser::pushExpression()+0x76>
  439487:	b8 00 00 00 00       	mov    $0x0,%eax
  43948c:	84 c0                	test   %al,%al
  43948e:	74 07                	je     439497 <x666::Parser::pushExpression()+0x81>
  439490:	bb 00 00 00 00       	mov    $0x0,%ebx
        break;
  439495:	eb 23                	jmp    4394ba <x666::Parser::pushExpression()+0xa4>
      }
      acceptToken(std::move(t));
  439497:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
  43949b:	48 89 c7             	mov    %rax,%rdi
  43949e:	e8 de 18 00 00       	callq  43ad81 <std::remove_reference<std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>&>::type&& std::move<std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>&>(std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>&)>
  4394a3:	48 89 c2             	mov    %rax,%rdx
  4394a6:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  4394aa:	48 89 d6             	mov    %rdx,%rsi
  4394ad:	48 89 c7             	mov    %rax,%rdi
  4394b0:	e8 0d ff ff ff       	callq  4393c2 <x666::Parser::acceptToken(std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>&&)>
  4394b5:	bb 01 00 00 00       	mov    $0x1,%ebx
  4394ba:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
  4394be:	48 89 c7             	mov    %rax,%rdi
  4394c1:	e8 3e 16 00 00       	callq  43ab04 <std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>::~variant()>
  4394c6:	83 fb 01             	cmp    $0x1,%ebx
  4394c9:	75 22                	jne    4394ed <x666::Parser::pushExpression()+0xd7>
    } while (oldBracketsHeight != brackets.size());
  4394cb:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  4394cf:	48 05 b8 00 00 00    	add    $0xb8,%rax
  4394d5:	48 89 c7             	mov    %rax,%rdi
  4394d8:	e8 bd 37 00 00       	callq  43cc9a <std::stack<x666::Parser::BracketEntry, std::deque<x666::Parser::BracketEntry, std::allocator<x666::Parser::BracketEntry> > >::size() const>
  4394dd:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
  4394e1:	0f 95 c0             	setne  %al
  4394e4:	84 c0                	test   %al,%al
  4394e6:	74 05                	je     4394ed <x666::Parser::pushExpression()+0xd7>
    do {
  4394e8:	e9 60 ff ff ff       	jmpq   43944d <x666::Parser::pushExpression()+0x37>
    return thisLine.size() - oldThisLineSize;
  4394ed:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  4394f1:	48 83 c0 18          	add    $0x18,%rax
  4394f5:	48 89 c7             	mov    %rax,%rdi
  4394f8:	e8 09 31 00 00       	callq  43c606 <std::stack<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::deque<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > > >::size() const>
  4394fd:	48 2b 45 e0          	sub    -0x20(%rbp),%rax
  439501:	eb 1a                	jmp    43951d <x666::Parser::pushExpression()+0x107>
  439503:	48 89 c3             	mov    %rax,%rbx
      Token t = requestToken();
  439506:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
  43950a:	48 89 c7             	mov    %rax,%rdi
  43950d:	e8 f2 15 00 00       	callq  43ab04 <std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>::~variant()>
  439512:	48 89 d8             	mov    %rbx,%rax
  439515:	48 89 c7             	mov    %rax,%rdi
  439518:	e8 f3 93 ff ff       	callq  432910 <_Unwind_Resume@plt>
  }
  43951d:	48 83 c4 58          	add    $0x58,%rsp
  439521:	5b                   	pop    %rbx
  439522:	5d                   	pop    %rbp
  439523:	c3                   	retq   

0000000000439524 <x666::Parser::parse()>:
  void Parser::parse() {
  439524:	55                   	push   %rbp
  439525:	48 89 e5             	mov    %rsp,%rbp
  439528:	53                   	push   %rbx
  439529:	48 83 ec 48          	sub    $0x48,%rsp
  43952d:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
    while (true) {
      Token t = requestToken();
  439531:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
  439535:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  439539:	48 89 d6             	mov    %rdx,%rsi
  43953c:	48 89 c7             	mov    %rax,%rdi
  43953f:	e8 ee fd ff ff       	callq  439332 <x666::Parser::requestToken()>
      acceptToken(std::move(t));
  439544:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
  439548:	48 89 c7             	mov    %rax,%rdi
  43954b:	e8 31 18 00 00       	callq  43ad81 <std::remove_reference<std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>&>::type&& std::move<std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>&>(std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>&)>
  439550:	48 89 c2             	mov    %rax,%rdx
  439553:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  439557:	48 89 d6             	mov    %rdx,%rsi
  43955a:	48 89 c7             	mov    %rax,%rdi
  43955d:	e8 60 fe ff ff       	callq  4393c2 <x666::Parser::acceptToken(std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>&&)>
      if (std::holds_alternative<EndOfFile>(t)) break;
  439562:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
  439566:	48 89 c7             	mov    %rax,%rdi
  439569:	e8 94 23 00 00       	callq  43b902 <bool std::holds_alternative<x666::EndOfFile, x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>(std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> const&)>
  43956e:	84 c0                	test   %al,%al
  439570:	74 07                	je     439579 <x666::Parser::parse()+0x55>
  439572:	bb 00 00 00 00       	mov    $0x0,%ebx
  439577:	eb 46                	jmp    4395bf <x666::Parser::parse()+0x9b>
      assert(thisLine.size() == positions.size());
  439579:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  43957d:	48 83 c0 18          	add    $0x18,%rax
  439581:	48 89 c7             	mov    %rax,%rdi
  439584:	e8 7d 30 00 00       	callq  43c606 <std::stack<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::deque<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > > >::size() const>
  439589:	48 89 c3             	mov    %rax,%rbx
  43958c:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  439590:	48 83 c0 68          	add    $0x68,%rax
  439594:	48 89 c7             	mov    %rax,%rdi
  439597:	e8 3a 37 00 00       	callq  43ccd6 <std::stack<x666::LineInfo, std::deque<x666::LineInfo, std::allocator<x666::LineInfo> > >::size() const>
  43959c:	48 39 c3             	cmp    %rax,%rbx
  43959f:	74 19                	je     4395ba <x666::Parser::parse()+0x96>
  4395a1:	b9 e0 48 44 00       	mov    $0x4448e0,%ecx
  4395a6:	ba 5b 01 00 00       	mov    $0x15b,%edx
  4395ab:	be e8 46 44 00       	mov    $0x4446e8,%esi
  4395b0:	bf 40 47 44 00       	mov    $0x444740,%edi
  4395b5:	e8 96 91 ff ff       	callq  432750 <__assert_fail@plt>
  4395ba:	bb 01 00 00 00       	mov    $0x1,%ebx
  4395bf:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
  4395c3:	48 89 c7             	mov    %rax,%rdi
  4395c6:	e8 39 15 00 00       	callq  43ab04 <std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>::~variant()>
  4395cb:	83 fb 01             	cmp    $0x1,%ebx
  4395ce:	75 1f                	jne    4395ef <x666::Parser::parse()+0xcb>
    }
  4395d0:	e9 5c ff ff ff       	jmpq   439531 <x666::Parser::parse()+0xd>
  4395d5:	48 89 c3             	mov    %rax,%rbx
      Token t = requestToken();
  4395d8:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
  4395dc:	48 89 c7             	mov    %rax,%rdi
  4395df:	e8 20 15 00 00       	callq  43ab04 <std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>::~variant()>
  4395e4:	48 89 d8             	mov    %rbx,%rax
  4395e7:	48 89 c7             	mov    %rax,%rdi
  4395ea:	e8 21 93 ff ff       	callq  432910 <_Unwind_Resume@plt>
  }
  4395ef:	90                   	nop
  4395f0:	48 83 c4 48          	add    $0x48,%rsp
  4395f4:	5b                   	pop    %rbx
  4395f5:	5d                   	pop    %rbp
  4395f6:	c3                   	retq   
  4395f7:	90                   	nop

00000000004395f8 <x666::Parser::getLastLineInfo() const>:
  const LineInfo& Parser::getLastLineInfo() const {
  4395f8:	55                   	push   %rbp
  4395f9:	48 89 e5             	mov    %rsp,%rbp
  4395fc:	48 83 ec 10          	sub    $0x10,%rsp
  439600:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    return !positions.empty() ? positions.top() : li;
  439604:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  439608:	48 83 c0 68          	add    $0x68,%rax
  43960c:	48 89 c7             	mov    %rax,%rdi
  43960f:	e8 68 2e 00 00       	callq  43c47c <std::stack<x666::LineInfo, std::deque<x666::LineInfo, std::allocator<x666::LineInfo> > >::empty() const>
  439614:	83 f0 01             	xor    $0x1,%eax
  439617:	84 c0                	test   %al,%al
  439619:	74 12                	je     43962d <x666::Parser::getLastLineInfo() const+0x35>
  43961b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43961f:	48 83 c0 68          	add    $0x68,%rax
  439623:	48 89 c7             	mov    %rax,%rdi
  439626:	e8 c5 36 00 00       	callq  43ccf0 <std::stack<x666::LineInfo, std::deque<x666::LineInfo, std::allocator<x666::LineInfo> > >::top() const>
  43962b:	eb 0a                	jmp    439637 <x666::Parser::getLastLineInfo() const+0x3f>
  43962d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  439631:	48 05 28 01 00 00    	add    $0x128,%rax
  }
  439637:	c9                   	leaveq 
  439638:	c3                   	retq   

0000000000439639 <__static_initialization_and_destruction_0(int, int)>:
  439639:	55                   	push   %rbp
  43963a:	48 89 e5             	mov    %rsp,%rbp
  43963d:	48 83 ec 10          	sub    $0x10,%rsp
  439641:	89 7d fc             	mov    %edi,-0x4(%rbp)
  439644:	89 75 f8             	mov    %esi,-0x8(%rbp)
  439647:	83 7d fc 01          	cmpl   $0x1,-0x4(%rbp)
  43964b:	75 27                	jne    439674 <__static_initialization_and_destruction_0(int, int)+0x3b>
  43964d:	81 7d f8 ff ff 00 00 	cmpl   $0xffff,-0x8(%rbp)
  439654:	75 1e                	jne    439674 <__static_initialization_and_destruction_0(int, int)+0x3b>
  439656:	bf 73 15 65 00       	mov    $0x651573,%edi
  43965b:	e8 30 92 ff ff       	callq  432890 <std::ios_base::Init::Init()@plt>
  439660:	ba a8 11 65 00       	mov    $0x6511a8,%edx
  439665:	be 73 15 65 00       	mov    $0x651573,%esi
  43966a:	bf 80 29 43 00       	mov    $0x432980,%edi
  43966f:	e8 2c 91 ff ff       	callq  4327a0 <__cxa_atexit@plt>
  439674:	90                   	nop
  439675:	c9                   	leaveq 
  439676:	c3                   	retq   

0000000000439677 <_GLOBAL__sub_I__ZN4x66611precedencesE>:
  439677:	55                   	push   %rbp
  439678:	48 89 e5             	mov    %rsp,%rbp
  43967b:	be ff ff 00 00       	mov    $0xffff,%esi
  439680:	bf 01 00 00 00       	mov    $0x1,%edi
  439685:	e8 af ff ff ff       	callq  439639 <__static_initialization_and_destruction_0(int, int)>
  43968a:	5d                   	pop    %rbp
  43968b:	c3                   	retq   

000000000043968c <std::exception::exception()>:
   *  throw non-class data (e.g., fundamental types).
   */
  class exception
  {
  public:
    exception() _GLIBCXX_USE_NOEXCEPT { }
  43968c:	55                   	push   %rbp
  43968d:	48 89 e5             	mov    %rsp,%rbp
  439690:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  439694:	ba 68 0d 65 00       	mov    $0x650d68,%edx
  439699:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43969d:	48 89 10             	mov    %rdx,(%rax)
  4396a0:	90                   	nop
  4396a1:	5d                   	pop    %rbp
  4396a2:	c3                   	retq   
  4396a3:	90                   	nop

00000000004396a4 <std::bad_variant_access::what() const>:
    const char* what() const noexcept override
  4396a4:	55                   	push   %rbp
  4396a5:	48 89 e5             	mov    %rsp,%rbp
  4396a8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return _M_reason; }
  4396ac:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4396b0:	48 8b 40 08          	mov    0x8(%rax),%rax
  4396b4:	5d                   	pop    %rbp
  4396b5:	c3                   	retq   

00000000004396b6 <std::bad_variant_access::bad_variant_access(char const*)>:
    bad_variant_access(const char* __reason) : _M_reason(__reason) { }
  4396b6:	55                   	push   %rbp
  4396b7:	48 89 e5             	mov    %rsp,%rbp
  4396ba:	48 83 ec 10          	sub    $0x10,%rsp
  4396be:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4396c2:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  4396c6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4396ca:	48 89 c7             	mov    %rax,%rdi
  4396cd:	e8 ba ff ff ff       	callq  43968c <std::exception::exception()>
  4396d2:	ba 08 4b 44 00       	mov    $0x444b08,%edx
  4396d7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4396db:	48 89 10             	mov    %rdx,(%rax)
  4396de:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4396e2:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  4396e6:	48 89 50 08          	mov    %rdx,0x8(%rax)
  4396ea:	90                   	nop
  4396eb:	c9                   	leaveq 
  4396ec:	c3                   	retq   

00000000004396ed <std::__throw_bad_variant_access(char const*)>:
  { _GLIBCXX_THROW_OR_ABORT(bad_variant_access(__what)); }
  4396ed:	55                   	push   %rbp
  4396ee:	48 89 e5             	mov    %rsp,%rbp
  4396f1:	53                   	push   %rbx
  4396f2:	48 83 ec 18          	sub    $0x18,%rsp
  4396f6:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  4396fa:	bf 10 00 00 00       	mov    $0x10,%edi
  4396ff:	e8 fc 8f ff ff       	callq  432700 <__cxa_allocate_exception@plt>
  439704:	48 89 c3             	mov    %rax,%rbx
  439707:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  43970b:	48 89 c6             	mov    %rax,%rsi
  43970e:	48 89 df             	mov    %rbx,%rdi
  439711:	e8 a0 ff ff ff       	callq  4396b6 <std::bad_variant_access::bad_variant_access(char const*)>
  439716:	ba 20 41 44 00       	mov    $0x444120,%edx
  43971b:	be 08 4c 44 00       	mov    $0x444c08,%esi
  439720:	48 89 df             	mov    %rbx,%rdi
  439723:	e8 c8 91 ff ff       	callq  4328f0 <__cxa_throw@plt>

0000000000439728 <x666::LineInfo::LineInfo()>:
    LineInfo() : line(0), col(0), byte(0), sot(0) {}
  439728:	55                   	push   %rbp
  439729:	48 89 e5             	mov    %rsp,%rbp
  43972c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  439730:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  439734:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  43973b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43973f:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
  439746:	00 
  439747:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43974b:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)
  439752:	00 
  439753:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  439757:	48 c7 40 18 00 00 00 	movq   $0x0,0x18(%rax)
  43975e:	00 
  43975f:	90                   	nop
  439760:	5d                   	pop    %rbp
  439761:	c3                   	retq   

0000000000439762 <x666::Expression::Expression()>:
    Expression() {}
  439762:	55                   	push   %rbp
  439763:	48 89 e5             	mov    %rsp,%rbp
  439766:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  43976a:	ba c8 4a 44 00       	mov    $0x444ac8,%edx
  43976f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  439773:	48 89 10             	mov    %rdx,(%rax)
  439776:	90                   	nop
  439777:	5d                   	pop    %rbp
  439778:	c3                   	retq   

0000000000439779 <std::remove_reference<std::variant<x666::Identifier, x666::IntLiteral, x666::StringLiteral>&>::type&& std::move<std::variant<x666::Identifier, x666::IntLiteral, x666::StringLiteral>&>(std::variant<x666::Identifier, x666::IntLiteral, x666::StringLiteral>&)>:
    move(_Tp&& __t) noexcept
  439779:	55                   	push   %rbp
  43977a:	48 89 e5             	mov    %rsp,%rbp
  43977d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
  439781:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  439785:	5d                   	pop    %rbp
  439786:	c3                   	retq   
  439787:	90                   	nop

0000000000439788 <std::__detail::__variant::_Copy_ctor_base<false, x666::Identifier, x666::IntLiteral, x666::StringLiteral>::~_Copy_ctor_base()>:
    struct _Copy_ctor_base : _Variant_storage_alias<_Types...>
  439788:	55                   	push   %rbp
  439789:	48 89 e5             	mov    %rsp,%rbp
  43978c:	48 83 ec 10          	sub    $0x10,%rsp
  439790:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  439794:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  439798:	48 89 c7             	mov    %rax,%rdi
  43979b:	e8 38 22 00 00       	callq  43b9d8 <std::__detail::__variant::_Variant_storage<false, x666::Identifier, x666::IntLiteral, x666::StringLiteral>::~_Variant_storage()>
  4397a0:	90                   	nop
  4397a1:	c9                   	leaveq 
  4397a2:	c3                   	retq   
  4397a3:	90                   	nop

00000000004397a4 <std::__detail::__variant::_Move_ctor_base<false, x666::Identifier, x666::IntLiteral, x666::StringLiteral>::~_Move_ctor_base()>:
    struct _Move_ctor_base : _Copy_ctor_alias<_Types...>
  4397a4:	55                   	push   %rbp
  4397a5:	48 89 e5             	mov    %rsp,%rbp
  4397a8:	48 83 ec 10          	sub    $0x10,%rsp
  4397ac:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4397b0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4397b4:	48 89 c7             	mov    %rax,%rdi
  4397b7:	e8 cc ff ff ff       	callq  439788 <std::__detail::__variant::_Copy_ctor_base<false, x666::Identifier, x666::IntLiteral, x666::StringLiteral>::~_Copy_ctor_base()>
  4397bc:	90                   	nop
  4397bd:	c9                   	leaveq 
  4397be:	c3                   	retq   
  4397bf:	90                   	nop

00000000004397c0 <std::__detail::__variant::_Copy_assign_base<false, x666::Identifier, x666::IntLiteral, x666::StringLiteral>::_Copy_assign_base(std::__detail::__variant::_Copy_assign_base<false, x666::Identifier, x666::IntLiteral, x666::StringLiteral>&&)>:
      _Copy_assign_base(_Copy_assign_base&&) = default;
  4397c0:	55                   	push   %rbp
  4397c1:	48 89 e5             	mov    %rsp,%rbp
  4397c4:	48 83 ec 10          	sub    $0x10,%rsp
  4397c8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4397cc:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  4397d0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4397d4:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  4397d8:	48 89 d6             	mov    %rdx,%rsi
  4397db:	48 89 c7             	mov    %rax,%rdi
  4397de:	e8 75 21 00 00       	callq  43b958 <std::__detail::__variant::_Move_ctor_base<false, x666::Identifier, x666::IntLiteral, x666::StringLiteral>::_Move_ctor_base(std::__detail::__variant::_Move_ctor_base<false, x666::Identifier, x666::IntLiteral, x666::StringLiteral>&&)>
  4397e3:	90                   	nop
  4397e4:	c9                   	leaveq 
  4397e5:	c3                   	retq   

00000000004397e6 <std::__detail::__variant::_Copy_assign_base<false, x666::Identifier, x666::IntLiteral, x666::StringLiteral>::~_Copy_assign_base()>:
    struct _Copy_assign_base : _Move_ctor_alias<_Types...>
  4397e6:	55                   	push   %rbp
  4397e7:	48 89 e5             	mov    %rsp,%rbp
  4397ea:	48 83 ec 10          	sub    $0x10,%rsp
  4397ee:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4397f2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4397f6:	48 89 c7             	mov    %rax,%rdi
  4397f9:	e8 a6 ff ff ff       	callq  4397a4 <std::__detail::__variant::_Move_ctor_base<false, x666::Identifier, x666::IntLiteral, x666::StringLiteral>::~_Move_ctor_base()>
  4397fe:	90                   	nop
  4397ff:	c9                   	leaveq 
  439800:	c3                   	retq   
  439801:	90                   	nop

0000000000439802 <std::__detail::__variant::_Move_assign_base<false, x666::Identifier, x666::IntLiteral, x666::StringLiteral>::_Move_assign_base(std::__detail::__variant::_Move_assign_base<false, x666::Identifier, x666::IntLiteral, x666::StringLiteral>&&)>:
      _Move_assign_base(_Move_assign_base&&) = default;
  439802:	55                   	push   %rbp
  439803:	48 89 e5             	mov    %rsp,%rbp
  439806:	48 83 ec 10          	sub    $0x10,%rsp
  43980a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  43980e:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  439812:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  439816:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  43981a:	48 89 d6             	mov    %rdx,%rsi
  43981d:	48 89 c7             	mov    %rax,%rdi
  439820:	e8 9b ff ff ff       	callq  4397c0 <std::__detail::__variant::_Copy_assign_base<false, x666::Identifier, x666::IntLiteral, x666::StringLiteral>::_Copy_assign_base(std::__detail::__variant::_Copy_assign_base<false, x666::Identifier, x666::IntLiteral, x666::StringLiteral>&&)>
  439825:	90                   	nop
  439826:	c9                   	leaveq 
  439827:	c3                   	retq   

0000000000439828 <std::__detail::__variant::_Move_assign_base<false, x666::Identifier, x666::IntLiteral, x666::StringLiteral>::~_Move_assign_base()>:
    struct _Move_assign_base : _Copy_assign_alias<_Types...>
  439828:	55                   	push   %rbp
  439829:	48 89 e5             	mov    %rsp,%rbp
  43982c:	48 83 ec 10          	sub    $0x10,%rsp
  439830:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  439834:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  439838:	48 89 c7             	mov    %rax,%rdi
  43983b:	e8 a6 ff ff ff       	callq  4397e6 <std::__detail::__variant::_Copy_assign_base<false, x666::Identifier, x666::IntLiteral, x666::StringLiteral>::~_Copy_assign_base()>
  439840:	90                   	nop
  439841:	c9                   	leaveq 
  439842:	c3                   	retq   
  439843:	90                   	nop

0000000000439844 <std::__detail::__variant::_Variant_base<x666::Identifier, x666::IntLiteral, x666::StringLiteral>::_Variant_base(std::__detail::__variant::_Variant_base<x666::Identifier, x666::IntLiteral, x666::StringLiteral>&&)>:
      _Variant_base(_Variant_base&&) = default;
  439844:	55                   	push   %rbp
  439845:	48 89 e5             	mov    %rsp,%rbp
  439848:	48 83 ec 10          	sub    $0x10,%rsp
  43984c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  439850:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  439854:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  439858:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  43985c:	48 89 d6             	mov    %rdx,%rsi
  43985f:	48 89 c7             	mov    %rax,%rdi
  439862:	e8 9b ff ff ff       	callq  439802 <std::__detail::__variant::_Move_assign_base<false, x666::Identifier, x666::IntLiteral, x666::StringLiteral>::_Move_assign_base(std::__detail::__variant::_Move_assign_base<false, x666::Identifier, x666::IntLiteral, x666::StringLiteral>&&)>
  439867:	90                   	nop
  439868:	c9                   	leaveq 
  439869:	c3                   	retq   

000000000043986a <std::__detail::__variant::_Variant_base<x666::Identifier, x666::IntLiteral, x666::StringLiteral>::~_Variant_base()>:
    struct _Variant_base : _Move_assign_alias<_Types...>
  43986a:	55                   	push   %rbp
  43986b:	48 89 e5             	mov    %rsp,%rbp
  43986e:	48 83 ec 10          	sub    $0x10,%rsp
  439872:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  439876:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43987a:	48 89 c7             	mov    %rax,%rdi
  43987d:	e8 a6 ff ff ff       	callq  439828 <std::__detail::__variant::_Move_assign_base<false, x666::Identifier, x666::IntLiteral, x666::StringLiteral>::~_Move_assign_base()>
  439882:	90                   	nop
  439883:	c9                   	leaveq 
  439884:	c3                   	retq   
  439885:	90                   	nop

0000000000439886 <std::variant<x666::Identifier, x666::IntLiteral, x666::StringLiteral>::variant(std::variant<x666::Identifier, x666::IntLiteral, x666::StringLiteral>&&)>:
      variant(variant&&) = default;
  439886:	55                   	push   %rbp
  439887:	48 89 e5             	mov    %rsp,%rbp
  43988a:	48 83 ec 10          	sub    $0x10,%rsp
  43988e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  439892:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  439896:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43989a:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  43989e:	48 89 d6             	mov    %rdx,%rsi
  4398a1:	48 89 c7             	mov    %rax,%rdi
  4398a4:	e8 9b ff ff ff       	callq  439844 <std::__detail::__variant::_Variant_base<x666::Identifier, x666::IntLiteral, x666::StringLiteral>::_Variant_base(std::__detail::__variant::_Variant_base<x666::Identifier, x666::IntLiteral, x666::StringLiteral>&&)>
  4398a9:	90                   	nop
  4398aa:	c9                   	leaveq 
  4398ab:	c3                   	retq   

00000000004398ac <std::variant<x666::Identifier, x666::IntLiteral, x666::StringLiteral>::~variant()>:
      ~variant() = default;
  4398ac:	55                   	push   %rbp
  4398ad:	48 89 e5             	mov    %rsp,%rbp
  4398b0:	48 83 ec 10          	sub    $0x10,%rsp
  4398b4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4398b8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4398bc:	48 89 c7             	mov    %rax,%rdi
  4398bf:	e8 a6 ff ff ff       	callq  43986a <std::__detail::__variant::_Variant_base<x666::Identifier, x666::IntLiteral, x666::StringLiteral>::~_Variant_base()>
  4398c4:	90                   	nop
  4398c5:	c9                   	leaveq 
  4398c6:	c3                   	retq   
  4398c7:	90                   	nop

00000000004398c8 <x666::Literal::Literal(std::variant<x666::Identifier, x666::IntLiteral, x666::StringLiteral>&&)>:
    Literal(LiteralValue&& val) : val(std::move(val)) {}
  4398c8:	55                   	push   %rbp
  4398c9:	48 89 e5             	mov    %rsp,%rbp
  4398cc:	53                   	push   %rbx
  4398cd:	48 83 ec 18          	sub    $0x18,%rsp
  4398d1:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  4398d5:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  4398d9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4398dd:	48 89 c7             	mov    %rax,%rdi
  4398e0:	e8 7d fe ff ff       	callq  439762 <x666::Expression::Expression()>
  4398e5:	ba 08 4a 44 00       	mov    $0x444a08,%edx
  4398ea:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4398ee:	48 89 10             	mov    %rdx,(%rax)
  4398f1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4398f5:	48 8d 58 08          	lea    0x8(%rax),%rbx
  4398f9:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4398fd:	48 89 c7             	mov    %rax,%rdi
  439900:	e8 74 fe ff ff       	callq  439779 <std::remove_reference<std::variant<x666::Identifier, x666::IntLiteral, x666::StringLiteral>&>::type&& std::move<std::variant<x666::Identifier, x666::IntLiteral, x666::StringLiteral>&>(std::variant<x666::Identifier, x666::IntLiteral, x666::StringLiteral>&)>
  439905:	48 89 c6             	mov    %rax,%rsi
  439908:	48 89 df             	mov    %rbx,%rdi
  43990b:	e8 76 ff ff ff       	callq  439886 <std::variant<x666::Identifier, x666::IntLiteral, x666::StringLiteral>::variant(std::variant<x666::Identifier, x666::IntLiteral, x666::StringLiteral>&&)>
  439910:	90                   	nop
  439911:	48 83 c4 18          	add    $0x18,%rsp
  439915:	5b                   	pop    %rbx
  439916:	5d                   	pop    %rbp
  439917:	c3                   	retq   

0000000000439918 <x666::Literal::id() const>:
    size_t id() const override { return 1; }
  439918:	55                   	push   %rbp
  439919:	48 89 e5             	mov    %rsp,%rbp
  43991c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  439920:	b8 01 00 00 00       	mov    $0x1,%eax
  439925:	5d                   	pop    %rbp
  439926:	c3                   	retq   

0000000000439927 <std::remove_reference<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&>::type&& std::move<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&>(std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&)>:
    move(_Tp&& __t) noexcept
  439927:	55                   	push   %rbp
  439928:	48 89 e5             	mov    %rsp,%rbp
  43992b:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
  43992f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  439933:	5d                   	pop    %rbp
  439934:	c3                   	retq   
  439935:	90                   	nop

0000000000439936 <x666::BinaryOp::BinaryOp(std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, x666::Operator)>:
    BinaryOp(ExpressionPtr a, ExpressionPtr b, Operator o) :
  439936:	55                   	push   %rbp
  439937:	48 89 e5             	mov    %rsp,%rbp
  43993a:	53                   	push   %rbx
  43993b:	48 83 ec 28          	sub    $0x28,%rsp
  43993f:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  439943:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  439947:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  43994b:	89 4d d4             	mov    %ecx,-0x2c(%rbp)
      a(std::move(a)), b(std::move(b)), o(o) {}
  43994e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  439952:	48 89 c7             	mov    %rax,%rdi
  439955:	e8 08 fe ff ff       	callq  439762 <x666::Expression::Expression()>
  43995a:	ba 88 4a 44 00       	mov    $0x444a88,%edx
  43995f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  439963:	48 89 10             	mov    %rdx,(%rax)
  439966:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  43996a:	48 8d 58 08          	lea    0x8(%rax),%rbx
  43996e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  439972:	48 89 c7             	mov    %rax,%rdi
  439975:	e8 ad ff ff ff       	callq  439927 <std::remove_reference<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&>::type&& std::move<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&>(std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&)>
  43997a:	48 89 c6             	mov    %rax,%rsi
  43997d:	48 89 df             	mov    %rbx,%rdi
  439980:	e8 6f 20 00 00       	callq  43b9f4 <std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >::unique_ptr(std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&&)>
  439985:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  439989:	48 8d 58 10          	lea    0x10(%rax),%rbx
  43998d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  439991:	48 89 c7             	mov    %rax,%rdi
  439994:	e8 8e ff ff ff       	callq  439927 <std::remove_reference<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&>::type&& std::move<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&>(std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&)>
  439999:	48 89 c6             	mov    %rax,%rsi
  43999c:	48 89 df             	mov    %rbx,%rdi
  43999f:	e8 50 20 00 00       	callq  43b9f4 <std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >::unique_ptr(std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&&)>
  4399a4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4399a8:	8b 55 d4             	mov    -0x2c(%rbp),%edx
  4399ab:	89 50 18             	mov    %edx,0x18(%rax)
  4399ae:	90                   	nop
  4399af:	48 83 c4 28          	add    $0x28,%rsp
  4399b3:	5b                   	pop    %rbx
  4399b4:	5d                   	pop    %rbp
  4399b5:	c3                   	retq   

00000000004399b6 <x666::BinaryOp::id() const>:
    size_t id() const override { return 2; }
  4399b6:	55                   	push   %rbp
  4399b7:	48 89 e5             	mov    %rsp,%rbp
  4399ba:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4399be:	b8 02 00 00 00       	mov    $0x2,%eax
  4399c3:	5d                   	pop    %rbp
  4399c4:	c3                   	retq   
  4399c5:	90                   	nop

00000000004399c6 <x666::UnaryOp::UnaryOp(std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, x666::Operator)>:
    UnaryOp(ExpressionPtr a, Operator o) :
  4399c6:	55                   	push   %rbp
  4399c7:	48 89 e5             	mov    %rsp,%rbp
  4399ca:	53                   	push   %rbx
  4399cb:	48 83 ec 28          	sub    $0x28,%rsp
  4399cf:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  4399d3:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  4399d7:	89 55 dc             	mov    %edx,-0x24(%rbp)
      a(std::move(a)), o(o) {}
  4399da:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4399de:	48 89 c7             	mov    %rax,%rdi
  4399e1:	e8 7c fd ff ff       	callq  439762 <x666::Expression::Expression()>
  4399e6:	ba 48 4a 44 00       	mov    $0x444a48,%edx
  4399eb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4399ef:	48 89 10             	mov    %rdx,(%rax)
  4399f2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4399f6:	48 8d 58 08          	lea    0x8(%rax),%rbx
  4399fa:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4399fe:	48 89 c7             	mov    %rax,%rdi
  439a01:	e8 21 ff ff ff       	callq  439927 <std::remove_reference<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&>::type&& std::move<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&>(std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&)>
  439a06:	48 89 c6             	mov    %rax,%rsi
  439a09:	48 89 df             	mov    %rbx,%rdi
  439a0c:	e8 e3 1f 00 00       	callq  43b9f4 <std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >::unique_ptr(std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&&)>
  439a11:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  439a15:	8b 55 dc             	mov    -0x24(%rbp),%edx
  439a18:	89 50 10             	mov    %edx,0x10(%rax)
  439a1b:	90                   	nop
  439a1c:	48 83 c4 28          	add    $0x28,%rsp
  439a20:	5b                   	pop    %rbx
  439a21:	5d                   	pop    %rbp
  439a22:	c3                   	retq   
  439a23:	90                   	nop

0000000000439a24 <x666::UnaryOp::id() const>:
    size_t id() const override { return 3; }
  439a24:	55                   	push   %rbp
  439a25:	48 89 e5             	mov    %rsp,%rbp
  439a28:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  439a2c:	b8 03 00 00 00       	mov    $0x3,%eax
  439a31:	5d                   	pop    %rbp
  439a32:	c3                   	retq   
  439a33:	90                   	nop

0000000000439a34 <x666::Bracket::Bracket(std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, x666::Operator)>:
    Bracket(ExpressionPtr ex, Operator bracket) :
  439a34:	55                   	push   %rbp
  439a35:	48 89 e5             	mov    %rsp,%rbp
  439a38:	53                   	push   %rbx
  439a39:	48 83 ec 28          	sub    $0x28,%rsp
  439a3d:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  439a41:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  439a45:	89 55 dc             	mov    %edx,-0x24(%rbp)
      ex(std::move(ex)), bracket(bracket) {}
  439a48:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  439a4c:	48 89 c7             	mov    %rax,%rdi
  439a4f:	e8 0e fd ff ff       	callq  439762 <x666::Expression::Expression()>
  439a54:	ba c8 49 44 00       	mov    $0x4449c8,%edx
  439a59:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  439a5d:	48 89 10             	mov    %rdx,(%rax)
  439a60:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  439a64:	48 8d 58 08          	lea    0x8(%rax),%rbx
  439a68:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  439a6c:	48 89 c7             	mov    %rax,%rdi
  439a6f:	e8 b3 fe ff ff       	callq  439927 <std::remove_reference<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&>::type&& std::move<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&>(std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&)>
  439a74:	48 89 c6             	mov    %rax,%rsi
  439a77:	48 89 df             	mov    %rbx,%rdi
  439a7a:	e8 75 1f 00 00       	callq  43b9f4 <std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >::unique_ptr(std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&&)>
  439a7f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  439a83:	8b 55 dc             	mov    -0x24(%rbp),%edx
  439a86:	89 50 10             	mov    %edx,0x10(%rax)
  439a89:	90                   	nop
  439a8a:	48 83 c4 28          	add    $0x28,%rsp
  439a8e:	5b                   	pop    %rbx
  439a8f:	5d                   	pop    %rbp
  439a90:	c3                   	retq   
  439a91:	90                   	nop

0000000000439a92 <x666::Bracket::id() const>:
    size_t id() const override { return 4; }
  439a92:	55                   	push   %rbp
  439a93:	48 89 e5             	mov    %rsp,%rbp
  439a96:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  439a9a:	b8 04 00 00 00       	mov    $0x4,%eax
  439a9f:	5d                   	pop    %rbp
  439aa0:	c3                   	retq   
  439aa1:	90                   	nop

0000000000439aa2 <x666::ParserVisitor::ParserVisitor(x666::Parser*, x666::LineInfo const&)>:
    ParserVisitor(Parser* p, const LineInfo& li) : p(p), li(li) {}
  439aa2:	55                   	push   %rbp
  439aa3:	48 89 e5             	mov    %rsp,%rbp
  439aa6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  439aaa:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  439aae:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  439ab2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  439ab6:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  439aba:	48 89 10             	mov    %rdx,(%rax)
  439abd:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
  439ac1:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
  439ac5:	48 8b 06             	mov    (%rsi),%rax
  439ac8:	48 8b 56 08          	mov    0x8(%rsi),%rdx
  439acc:	48 89 41 08          	mov    %rax,0x8(%rcx)
  439ad0:	48 89 51 10          	mov    %rdx,0x10(%rcx)
  439ad4:	48 8b 46 10          	mov    0x10(%rsi),%rax
  439ad8:	48 8b 56 18          	mov    0x18(%rsi),%rdx
  439adc:	48 89 41 18          	mov    %rax,0x18(%rcx)
  439ae0:	48 89 51 20          	mov    %rdx,0x20(%rcx)
  439ae4:	90                   	nop
  439ae5:	5d                   	pop    %rbp
  439ae6:	c3                   	retq   

0000000000439ae7 <std::remove_reference<x666::Identifier&>::type&& std::move<x666::Identifier&>(x666::Identifier&)>:
    move(_Tp&& __t) noexcept
  439ae7:	55                   	push   %rbp
  439ae8:	48 89 e5             	mov    %rsp,%rbp
  439aeb:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
  439aef:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  439af3:	5d                   	pop    %rbp
  439af4:	c3                   	retq   
  439af5:	90                   	nop

0000000000439af6 <x666::ParserVisitor::operator()(x666::Identifier&&)>:
    bool operator()(Identifier&& i) {
  439af6:	55                   	push   %rbp
  439af7:	48 89 e5             	mov    %rsp,%rbp
  439afa:	53                   	push   %rbx
  439afb:	48 83 ec 28          	sub    $0x28,%rsp
  439aff:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  439b03:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
      p->thisLine.push(std::make_unique<Literal>(std::move(i)));
  439b07:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  439b0b:	48 8b 00             	mov    (%rax),%rax
  439b0e:	48 8d 58 18          	lea    0x18(%rax),%rbx
  439b12:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  439b16:	48 89 c7             	mov    %rax,%rdi
  439b19:	e8 c9 ff ff ff       	callq  439ae7 <std::remove_reference<x666::Identifier&>::type&& std::move<x666::Identifier&>(x666::Identifier&)>
  439b1e:	48 89 c2             	mov    %rax,%rdx
  439b21:	48 8d 45 e8          	lea    -0x18(%rbp),%rax
  439b25:	48 89 d6             	mov    %rdx,%rsi
  439b28:	48 89 c7             	mov    %rax,%rdi
  439b2b:	e8 0e 25 00 00       	callq  43c03e <std::_MakeUniq<x666::Literal>::__single_object std::make_unique<x666::Literal, x666::Identifier>(x666::Identifier&&)>
  439b30:	48 8d 55 e8          	lea    -0x18(%rbp),%rdx
  439b34:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  439b38:	48 89 d6             	mov    %rdx,%rsi
  439b3b:	48 89 c7             	mov    %rax,%rdi
  439b3e:	e8 e5 25 00 00       	callq  43c128 <std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >::unique_ptr<x666::Literal, std::default_delete<x666::Literal>, void>(std::unique_ptr<x666::Literal, std::default_delete<x666::Literal> >&&)>
  439b43:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  439b47:	48 89 c6             	mov    %rax,%rsi
  439b4a:	48 89 df             	mov    %rbx,%rdi
  439b4d:	e8 28 26 00 00       	callq  43c17a <std::stack<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::deque<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > > >::push(std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&&)>
  439b52:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  439b56:	48 89 c7             	mov    %rax,%rdi
  439b59:	e8 ae 92 ff ff       	callq  432e0c <std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >::~unique_ptr()>
  439b5e:	48 8d 45 e8          	lea    -0x18(%rbp),%rax
  439b62:	48 89 c7             	mov    %rax,%rdi
  439b65:	e8 66 25 00 00       	callq  43c0d0 <std::unique_ptr<x666::Literal, std::default_delete<x666::Literal> >::~unique_ptr()>
      p->positions.push(li);
  439b6a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  439b6e:	48 8b 00             	mov    (%rax),%rax
  439b71:	48 83 c0 68          	add    $0x68,%rax
  439b75:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  439b79:	48 83 c2 08          	add    $0x8,%rdx
  439b7d:	48 89 d6             	mov    %rdx,%rsi
  439b80:	48 89 c7             	mov    %rax,%rdi
  439b83:	e8 26 26 00 00       	callq  43c1ae <std::stack<x666::LineInfo, std::deque<x666::LineInfo, std::allocator<x666::LineInfo> > >::push(x666::LineInfo const&)>
      return true;
  439b88:	b8 01 00 00 00       	mov    $0x1,%eax
  439b8d:	eb 26                	jmp    439bb5 <x666::ParserVisitor::operator()(x666::Identifier&&)+0xbf>
  439b8f:	48 89 c3             	mov    %rax,%rbx
      p->thisLine.push(std::make_unique<Literal>(std::move(i)));
  439b92:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  439b96:	48 89 c7             	mov    %rax,%rdi
  439b99:	e8 6e 92 ff ff       	callq  432e0c <std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >::~unique_ptr()>
  439b9e:	48 8d 45 e8          	lea    -0x18(%rbp),%rax
  439ba2:	48 89 c7             	mov    %rax,%rdi
  439ba5:	e8 26 25 00 00       	callq  43c0d0 <std::unique_ptr<x666::Literal, std::default_delete<x666::Literal> >::~unique_ptr()>
  439baa:	48 89 d8             	mov    %rbx,%rax
  439bad:	48 89 c7             	mov    %rax,%rdi
  439bb0:	e8 5b 8d ff ff       	callq  432910 <_Unwind_Resume@plt>
    }
  439bb5:	48 83 c4 28          	add    $0x28,%rsp
  439bb9:	5b                   	pop    %rbx
  439bba:	5d                   	pop    %rbp
  439bbb:	c3                   	retq   

0000000000439bbc <std::remove_reference<x666::StringLiteral&>::type&& std::move<x666::StringLiteral&>(x666::StringLiteral&)>:
    move(_Tp&& __t) noexcept
  439bbc:	55                   	push   %rbp
  439bbd:	48 89 e5             	mov    %rsp,%rbp
  439bc0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
  439bc4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  439bc8:	5d                   	pop    %rbp
  439bc9:	c3                   	retq   

0000000000439bca <x666::ParserVisitor::operator()(x666::StringLiteral&&)>:
    bool operator()(StringLiteral&& i) {
  439bca:	55                   	push   %rbp
  439bcb:	48 89 e5             	mov    %rsp,%rbp
  439bce:	53                   	push   %rbx
  439bcf:	48 83 ec 28          	sub    $0x28,%rsp
  439bd3:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  439bd7:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
      p->thisLine.push(std::make_unique<Literal>(std::move(i)));
  439bdb:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  439bdf:	48 8b 00             	mov    (%rax),%rax
  439be2:	48 8d 58 18          	lea    0x18(%rax),%rbx
  439be6:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  439bea:	48 89 c7             	mov    %rax,%rdi
  439bed:	e8 ca ff ff ff       	callq  439bbc <std::remove_reference<x666::StringLiteral&>::type&& std::move<x666::StringLiteral&>(x666::StringLiteral&)>
  439bf2:	48 89 c2             	mov    %rax,%rdx
  439bf5:	48 8d 45 e8          	lea    -0x18(%rbp),%rax
  439bf9:	48 89 d6             	mov    %rdx,%rsi
  439bfc:	48 89 c7             	mov    %rax,%rdi
  439bff:	e8 d0 25 00 00       	callq  43c1d4 <std::_MakeUniq<x666::Literal>::__single_object std::make_unique<x666::Literal, x666::StringLiteral>(x666::StringLiteral&&)>
  439c04:	48 8d 55 e8          	lea    -0x18(%rbp),%rdx
  439c08:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  439c0c:	48 89 d6             	mov    %rdx,%rsi
  439c0f:	48 89 c7             	mov    %rax,%rdi
  439c12:	e8 11 25 00 00       	callq  43c128 <std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >::unique_ptr<x666::Literal, std::default_delete<x666::Literal>, void>(std::unique_ptr<x666::Literal, std::default_delete<x666::Literal> >&&)>
  439c17:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  439c1b:	48 89 c6             	mov    %rax,%rsi
  439c1e:	48 89 df             	mov    %rbx,%rdi
  439c21:	e8 54 25 00 00       	callq  43c17a <std::stack<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::deque<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > > >::push(std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&&)>
  439c26:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  439c2a:	48 89 c7             	mov    %rax,%rdi
  439c2d:	e8 da 91 ff ff       	callq  432e0c <std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >::~unique_ptr()>
  439c32:	48 8d 45 e8          	lea    -0x18(%rbp),%rax
  439c36:	48 89 c7             	mov    %rax,%rdi
  439c39:	e8 92 24 00 00       	callq  43c0d0 <std::unique_ptr<x666::Literal, std::default_delete<x666::Literal> >::~unique_ptr()>
      p->positions.push(li);
  439c3e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  439c42:	48 8b 00             	mov    (%rax),%rax
  439c45:	48 83 c0 68          	add    $0x68,%rax
  439c49:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  439c4d:	48 83 c2 08          	add    $0x8,%rdx
  439c51:	48 89 d6             	mov    %rdx,%rsi
  439c54:	48 89 c7             	mov    %rax,%rdi
  439c57:	e8 52 25 00 00       	callq  43c1ae <std::stack<x666::LineInfo, std::deque<x666::LineInfo, std::allocator<x666::LineInfo> > >::push(x666::LineInfo const&)>
      return true;
  439c5c:	b8 01 00 00 00       	mov    $0x1,%eax
  439c61:	eb 26                	jmp    439c89 <x666::ParserVisitor::operator()(x666::StringLiteral&&)+0xbf>
  439c63:	48 89 c3             	mov    %rax,%rbx
      p->thisLine.push(std::make_unique<Literal>(std::move(i)));
  439c66:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  439c6a:	48 89 c7             	mov    %rax,%rdi
  439c6d:	e8 9a 91 ff ff       	callq  432e0c <std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >::~unique_ptr()>
  439c72:	48 8d 45 e8          	lea    -0x18(%rbp),%rax
  439c76:	48 89 c7             	mov    %rax,%rdi
  439c79:	e8 52 24 00 00       	callq  43c0d0 <std::unique_ptr<x666::Literal, std::default_delete<x666::Literal> >::~unique_ptr()>
  439c7e:	48 89 d8             	mov    %rbx,%rax
  439c81:	48 89 c7             	mov    %rax,%rdi
  439c84:	e8 87 8c ff ff       	callq  432910 <_Unwind_Resume@plt>
    }
  439c89:	48 83 c4 28          	add    $0x28,%rsp
  439c8d:	5b                   	pop    %rbx
  439c8e:	5d                   	pop    %rbp
  439c8f:	c3                   	retq   

0000000000439c90 <std::remove_reference<x666::IntLiteral&>::type&& std::move<x666::IntLiteral&>(x666::IntLiteral&)>:
    move(_Tp&& __t) noexcept
  439c90:	55                   	push   %rbp
  439c91:	48 89 e5             	mov    %rsp,%rbp
  439c94:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
  439c98:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  439c9c:	5d                   	pop    %rbp
  439c9d:	c3                   	retq   

0000000000439c9e <x666::ParserVisitor::operator()(x666::IntLiteral&&)>:
    bool operator()(IntLiteral&& i) {
  439c9e:	55                   	push   %rbp
  439c9f:	48 89 e5             	mov    %rsp,%rbp
  439ca2:	53                   	push   %rbx
  439ca3:	48 83 ec 28          	sub    $0x28,%rsp
  439ca7:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  439cab:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
      p->thisLine.push(std::make_unique<Literal>(std::move(i)));
  439caf:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  439cb3:	48 8b 00             	mov    (%rax),%rax
  439cb6:	48 8d 58 18          	lea    0x18(%rax),%rbx
  439cba:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  439cbe:	48 89 c7             	mov    %rax,%rdi
  439cc1:	e8 ca ff ff ff       	callq  439c90 <std::remove_reference<x666::IntLiteral&>::type&& std::move<x666::IntLiteral&>(x666::IntLiteral&)>
  439cc6:	48 89 c2             	mov    %rax,%rdx
  439cc9:	48 8d 45 e8          	lea    -0x18(%rbp),%rax
  439ccd:	48 89 d6             	mov    %rdx,%rsi
  439cd0:	48 89 c7             	mov    %rax,%rdi
  439cd3:	e8 8d 25 00 00       	callq  43c265 <std::_MakeUniq<x666::Literal>::__single_object std::make_unique<x666::Literal, x666::IntLiteral>(x666::IntLiteral&&)>
  439cd8:	48 8d 55 e8          	lea    -0x18(%rbp),%rdx
  439cdc:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  439ce0:	48 89 d6             	mov    %rdx,%rsi
  439ce3:	48 89 c7             	mov    %rax,%rdi
  439ce6:	e8 3d 24 00 00       	callq  43c128 <std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >::unique_ptr<x666::Literal, std::default_delete<x666::Literal>, void>(std::unique_ptr<x666::Literal, std::default_delete<x666::Literal> >&&)>
  439ceb:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  439cef:	48 89 c6             	mov    %rax,%rsi
  439cf2:	48 89 df             	mov    %rbx,%rdi
  439cf5:	e8 80 24 00 00       	callq  43c17a <std::stack<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::deque<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > > >::push(std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&&)>
  439cfa:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  439cfe:	48 89 c7             	mov    %rax,%rdi
  439d01:	e8 06 91 ff ff       	callq  432e0c <std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >::~unique_ptr()>
  439d06:	48 8d 45 e8          	lea    -0x18(%rbp),%rax
  439d0a:	48 89 c7             	mov    %rax,%rdi
  439d0d:	e8 be 23 00 00       	callq  43c0d0 <std::unique_ptr<x666::Literal, std::default_delete<x666::Literal> >::~unique_ptr()>
      p->positions.push(li);
  439d12:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  439d16:	48 8b 00             	mov    (%rax),%rax
  439d19:	48 83 c0 68          	add    $0x68,%rax
  439d1d:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  439d21:	48 83 c2 08          	add    $0x8,%rdx
  439d25:	48 89 d6             	mov    %rdx,%rsi
  439d28:	48 89 c7             	mov    %rax,%rdi
  439d2b:	e8 7e 24 00 00       	callq  43c1ae <std::stack<x666::LineInfo, std::deque<x666::LineInfo, std::allocator<x666::LineInfo> > >::push(x666::LineInfo const&)>
      return true;
  439d30:	b8 01 00 00 00       	mov    $0x1,%eax
  439d35:	eb 26                	jmp    439d5d <x666::ParserVisitor::operator()(x666::IntLiteral&&)+0xbf>
  439d37:	48 89 c3             	mov    %rax,%rbx
      p->thisLine.push(std::make_unique<Literal>(std::move(i)));
  439d3a:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  439d3e:	48 89 c7             	mov    %rax,%rdi
  439d41:	e8 c6 90 ff ff       	callq  432e0c <std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >::~unique_ptr()>
  439d46:	48 8d 45 e8          	lea    -0x18(%rbp),%rax
  439d4a:	48 89 c7             	mov    %rax,%rdi
  439d4d:	e8 7e 23 00 00       	callq  43c0d0 <std::unique_ptr<x666::Literal, std::default_delete<x666::Literal> >::~unique_ptr()>
  439d52:	48 89 d8             	mov    %rbx,%rax
  439d55:	48 89 c7             	mov    %rax,%rdi
  439d58:	e8 b3 8b ff ff       	callq  432910 <_Unwind_Resume@plt>
    }
  439d5d:	48 83 c4 28          	add    $0x28,%rsp
  439d61:	5b                   	pop    %rbx
  439d62:	5d                   	pop    %rbp
  439d63:	c3                   	retq   

0000000000439d64 <x666::ParserVisitor::commitLine()>:
    void commitLine() {
  439d64:	55                   	push   %rbp
  439d65:	48 89 e5             	mov    %rsp,%rbp
  439d68:	53                   	push   %rbx
  439d69:	48 83 ec 28          	sub    $0x28,%rsp
  439d6d:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
      if (p->thisLine.empty()) return;
  439d71:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  439d75:	48 8b 00             	mov    (%rax),%rax
  439d78:	48 83 c0 18          	add    $0x18,%rax
  439d7c:	48 89 c7             	mov    %rax,%rdi
  439d7f:	e8 72 25 00 00       	callq  43c2f6 <std::stack<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::deque<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > > >::empty() const>
  439d84:	84 c0                	test   %al,%al
  439d86:	0f 85 4f 01 00 00    	jne    439edb <x666::ParserVisitor::commitLine()+0x177>
      ExpressionPtr ex = std::move(p->thisLine.top());
  439d8c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  439d90:	48 8b 00             	mov    (%rax),%rax
  439d93:	48 83 c0 18          	add    $0x18,%rax
  439d97:	48 89 c7             	mov    %rax,%rdi
  439d9a:	e8 71 25 00 00       	callq  43c310 <std::stack<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::deque<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > > >::top()>
  439d9f:	48 89 c7             	mov    %rax,%rdi
  439da2:	e8 80 fb ff ff       	callq  439927 <std::remove_reference<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&>::type&& std::move<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&>(std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&)>
  439da7:	48 89 c2             	mov    %rax,%rdx
  439daa:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  439dae:	48 89 d6             	mov    %rdx,%rsi
  439db1:	48 89 c7             	mov    %rax,%rdi
  439db4:	e8 3b 1c 00 00       	callq  43b9f4 <std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >::unique_ptr(std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&&)>
      p->thisLine.pop();
  439db9:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  439dbd:	48 8b 00             	mov    (%rax),%rax
  439dc0:	48 83 c0 18          	add    $0x18,%rax
  439dc4:	48 89 c7             	mov    %rax,%rdi
  439dc7:	e8 5e 25 00 00       	callq  43c32a <std::stack<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::deque<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > > >::pop()>
      p->positions.pop();
  439dcc:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  439dd0:	48 8b 00             	mov    (%rax),%rax
  439dd3:	48 83 c0 68          	add    $0x68,%rax
  439dd7:	48 89 c7             	mov    %rax,%rdi
  439dda:	e8 67 25 00 00       	callq  43c346 <std::stack<x666::LineInfo, std::deque<x666::LineInfo, std::allocator<x666::LineInfo> > >::pop()>
      p->expressions.push_back(std::move(ex));
  439ddf:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  439de3:	48 8b 00             	mov    (%rax),%rax
  439de6:	48 89 c3             	mov    %rax,%rbx
  439de9:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  439ded:	48 89 c7             	mov    %rax,%rdi
  439df0:	e8 32 fb ff ff       	callq  439927 <std::remove_reference<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&>::type&& std::move<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&>(std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&)>
  439df5:	48 89 c6             	mov    %rax,%rsi
  439df8:	48 89 df             	mov    %rbx,%rdi
  439dfb:	e8 62 25 00 00       	callq  43c362 <std::vector<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > >::push_back(std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&&)>
      if (!p->thisLine.empty()) {
  439e00:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  439e04:	48 8b 00             	mov    (%rax),%rax
  439e07:	48 83 c0 18          	add    $0x18,%rax
  439e0b:	48 89 c7             	mov    %rax,%rdi
  439e0e:	e8 e3 24 00 00       	callq  43c2f6 <std::stack<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::deque<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > > >::empty() const>
  439e13:	83 f0 01             	xor    $0x1,%eax
  439e16:	84 c0                	test   %al,%al
  439e18:	0f 84 94 00 00 00    	je     439eb2 <x666::ParserVisitor::commitLine()+0x14e>
        p->errorLog.emplace_back(
  439e1e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  439e22:	48 8b 00             	mov    (%rax),%rax
          p->getLastLineInfo());
  439e25:	48 8d 98 08 01 00 00 	lea    0x108(%rax),%rbx
  439e2c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  439e30:	48 8b 00             	mov    (%rax),%rax
  439e33:	48 89 c7             	mov    %rax,%rdi
  439e36:	e8 bd f7 ff ff       	callq  4395f8 <x666::Parser::getLastLineInfo() const>
  439e3b:	48 89 c2             	mov    %rax,%rdx
  439e3e:	c7 45 ec 03 00 00 00 	movl   $0x3,-0x14(%rbp)
        p->errorLog.emplace_back(
  439e45:	48 8d 45 ec          	lea    -0x14(%rbp),%rax
  439e49:	48 89 c6             	mov    %rax,%rsi
  439e4c:	48 89 df             	mov    %rbx,%rdi
  439e4f:	e8 5c 25 00 00       	callq  43c3b0 <x666::LexError& std::vector<x666::LexError, std::allocator<x666::LexError> >::emplace_back<x666::LexErrorCode, x666::LineInfo const&>(x666::LexErrorCode&&, x666::LineInfo const&)>
        while (!p->thisLine.empty()) p->thisLine.pop();
  439e54:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  439e58:	48 8b 00             	mov    (%rax),%rax
  439e5b:	48 83 c0 18          	add    $0x18,%rax
  439e5f:	48 89 c7             	mov    %rax,%rdi
  439e62:	e8 8f 24 00 00       	callq  43c2f6 <std::stack<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::deque<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > > >::empty() const>
  439e67:	83 f0 01             	xor    $0x1,%eax
  439e6a:	84 c0                	test   %al,%al
  439e6c:	74 15                	je     439e83 <x666::ParserVisitor::commitLine()+0x11f>
  439e6e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  439e72:	48 8b 00             	mov    (%rax),%rax
  439e75:	48 83 c0 18          	add    $0x18,%rax
  439e79:	48 89 c7             	mov    %rax,%rdi
  439e7c:	e8 a9 24 00 00       	callq  43c32a <std::stack<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::deque<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > > >::pop()>
  439e81:	eb d1                	jmp    439e54 <x666::ParserVisitor::commitLine()+0xf0>
        while (!p->positions.empty()) p->positions.pop();
  439e83:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  439e87:	48 8b 00             	mov    (%rax),%rax
  439e8a:	48 83 c0 68          	add    $0x68,%rax
  439e8e:	48 89 c7             	mov    %rax,%rdi
  439e91:	e8 e6 25 00 00       	callq  43c47c <std::stack<x666::LineInfo, std::deque<x666::LineInfo, std::allocator<x666::LineInfo> > >::empty() const>
  439e96:	83 f0 01             	xor    $0x1,%eax
  439e99:	84 c0                	test   %al,%al
  439e9b:	74 15                	je     439eb2 <x666::ParserVisitor::commitLine()+0x14e>
  439e9d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  439ea1:	48 8b 00             	mov    (%rax),%rax
  439ea4:	48 83 c0 68          	add    $0x68,%rax
  439ea8:	48 89 c7             	mov    %rax,%rdi
  439eab:	e8 96 24 00 00       	callq  43c346 <std::stack<x666::LineInfo, std::deque<x666::LineInfo, std::allocator<x666::LineInfo> > >::pop()>
  439eb0:	eb d1                	jmp    439e83 <x666::ParserVisitor::commitLine()+0x11f>
      return;
  439eb2:	90                   	nop
      ExpressionPtr ex = std::move(p->thisLine.top());
  439eb3:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  439eb7:	48 89 c7             	mov    %rax,%rdi
  439eba:	e8 4d 8f ff ff       	callq  432e0c <std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >::~unique_ptr()>
  439ebf:	eb 1b                	jmp    439edc <x666::ParserVisitor::commitLine()+0x178>
  439ec1:	48 89 c3             	mov    %rax,%rbx
  439ec4:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  439ec8:	48 89 c7             	mov    %rax,%rdi
  439ecb:	e8 3c 8f ff ff       	callq  432e0c <std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >::~unique_ptr()>
  439ed0:	48 89 d8             	mov    %rbx,%rax
  439ed3:	48 89 c7             	mov    %rax,%rdi
  439ed6:	e8 35 8a ff ff       	callq  432910 <_Unwind_Resume@plt>
      if (p->thisLine.empty()) return;
  439edb:	90                   	nop
    }
  439edc:	48 83 c4 28          	add    $0x28,%rsp
  439ee0:	5b                   	pop    %rbx
  439ee1:	5d                   	pop    %rbp
  439ee2:	c3                   	retq   
  439ee3:	90                   	nop

0000000000439ee4 <x666::ParserVisitor::operator()(x666::Newline&&)>:
    bool operator()(Newline&&) {
  439ee4:	55                   	push   %rbp
  439ee5:	48 89 e5             	mov    %rsp,%rbp
  439ee8:	48 83 ec 10          	sub    $0x10,%rsp
  439eec:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  439ef0:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      commitLine();
  439ef4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  439ef8:	48 89 c7             	mov    %rax,%rdi
  439efb:	e8 64 fe ff ff       	callq  439d64 <x666::ParserVisitor::commitLine()>
      return false;
  439f00:	b8 00 00 00 00       	mov    $0x0,%eax
    }
  439f05:	c9                   	leaveq 
  439f06:	c3                   	retq   
  439f07:	90                   	nop

0000000000439f08 <x666::ParserVisitor::operator()(x666::EndOfFile&&)>:
    bool operator()(EndOfFile&&) {
  439f08:	55                   	push   %rbp
  439f09:	48 89 e5             	mov    %rsp,%rbp
  439f0c:	48 83 ec 10          	sub    $0x10,%rsp
  439f10:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  439f14:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      commitLine();
  439f18:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  439f1c:	48 89 c7             	mov    %rax,%rdi
  439f1f:	e8 40 fe ff ff       	callq  439d64 <x666::ParserVisitor::commitLine()>
      return false;
  439f24:	b8 00 00 00 00       	mov    $0x0,%eax
    }
  439f29:	c9                   	leaveq 
  439f2a:	c3                   	retq   
  439f2b:	90                   	nop

0000000000439f2c <x666::ParserVisitor::operator()(x666::LexError&&)>:
    bool operator()(LexError&& e) {
  439f2c:	55                   	push   %rbp
  439f2d:	48 89 e5             	mov    %rsp,%rbp
  439f30:	48 83 ec 10          	sub    $0x10,%rsp
  439f34:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  439f38:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      p->errorLog.push_back(e);
  439f3c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  439f40:	48 8b 00             	mov    (%rax),%rax
  439f43:	48 05 08 01 00 00    	add    $0x108,%rax
  439f49:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  439f4d:	48 89 d6             	mov    %rdx,%rsi
  439f50:	48 89 c7             	mov    %rax,%rdi
  439f53:	e8 3e 25 00 00       	callq  43c496 <std::vector<x666::LexError, std::allocator<x666::LexError> >::push_back(x666::LexError const&)>
      return false;
  439f58:	b8 00 00 00 00       	mov    $0x0,%eax
    }
  439f5d:	c9                   	leaveq 
  439f5e:	c3                   	retq   
  439f5f:	90                   	nop

0000000000439f60 <x666::ParserVisitor::parseBinaryOp(x666::Operator const&, unsigned long&)>:
    bool parseBinaryOp(const Operator& op, size_t& prec) {
  439f60:	55                   	push   %rbp
  439f61:	48 89 e5             	mov    %rsp,%rbp
  439f64:	41 57                	push   %r15
  439f66:	41 56                	push   %r14
  439f68:	41 55                	push   %r13
  439f6a:	41 54                	push   %r12
  439f6c:	53                   	push   %rbx
  439f6d:	48 81 ec 88 00 00 00 	sub    $0x88,%rsp
  439f74:	48 89 bd 78 ff ff ff 	mov    %rdi,-0x88(%rbp)
  439f7b:	48 89 b5 70 ff ff ff 	mov    %rsi,-0x90(%rbp)
  439f82:	48 89 95 68 ff ff ff 	mov    %rdx,-0x98(%rbp)
      if (p->thisLine.empty()) {
  439f89:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  439f90:	48 8b 00             	mov    (%rax),%rax
  439f93:	48 83 c0 18          	add    $0x18,%rax
  439f97:	48 89 c7             	mov    %rax,%rdi
  439f9a:	e8 57 23 00 00       	callq  43c2f6 <std::stack<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::deque<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > > >::empty() const>
  439f9f:	84 c0                	test   %al,%al
  439fa1:	74 79                	je     43a01c <x666::ParserVisitor::parseBinaryOp(x666::Operator const&, unsigned long&)+0xbc>
        if ((prec & 4) != 0) {
  439fa3:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  439faa:	48 8b 00             	mov    (%rax),%rax
  439fad:	83 e0 04             	and    $0x4,%eax
  439fb0:	48 85 c0             	test   %rax,%rax
  439fb3:	74 25                	je     439fda <x666::ParserVisitor::parseBinaryOp(x666::Operator const&, unsigned long&)+0x7a>
          prec |= 2;
  439fb5:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  439fbc:	48 8b 00             	mov    (%rax),%rax
  439fbf:	48 83 c8 02          	or     $0x2,%rax
  439fc3:	48 89 c2             	mov    %rax,%rdx
  439fc6:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  439fcd:	48 89 10             	mov    %rdx,(%rax)
          return false;
  439fd0:	bb 00 00 00 00       	mov    $0x0,%ebx
  439fd5:	e9 8d 03 00 00       	jmpq   43a367 <x666::ParserVisitor::parseBinaryOp(x666::Operator const&, unsigned long&)+0x407>
          p->errorLog.emplace_back(
  439fda:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  439fe1:	48 8b 00             	mov    (%rax),%rax
            p->li);
  439fe4:	48 8d 88 08 01 00 00 	lea    0x108(%rax),%rcx
  439feb:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  439ff2:	48 8b 00             	mov    (%rax),%rax
  439ff5:	48 8d 90 28 01 00 00 	lea    0x128(%rax),%rdx
  439ffc:	c7 45 a0 04 00 00 00 	movl   $0x4,-0x60(%rbp)
          p->errorLog.emplace_back(
  43a003:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  43a007:	48 89 c6             	mov    %rax,%rsi
  43a00a:	48 89 cf             	mov    %rcx,%rdi
  43a00d:	e8 0e 25 00 00       	callq  43c520 <x666::LexError& std::vector<x666::LexError, std::allocator<x666::LexError> >::emplace_back<x666::LexErrorCode, x666::LineInfo&>(x666::LexErrorCode&&, x666::LineInfo&)>
          return false;
  43a012:	bb 00 00 00 00       	mov    $0x0,%ebx
  43a017:	e9 4b 03 00 00       	jmpq   43a367 <x666::ParserVisitor::parseBinaryOp(x666::Operator const&, unsigned long&)+0x407>
      ExpressionPtr a = std::move(p->thisLine.top());
  43a01c:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  43a023:	48 8b 00             	mov    (%rax),%rax
  43a026:	48 83 c0 18          	add    $0x18,%rax
  43a02a:	48 89 c7             	mov    %rax,%rdi
  43a02d:	e8 de 22 00 00       	callq  43c310 <std::stack<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::deque<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > > >::top()>
  43a032:	48 89 c7             	mov    %rax,%rdi
  43a035:	e8 ed f8 ff ff       	callq  439927 <std::remove_reference<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&>::type&& std::move<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&>(std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&)>
  43a03a:	48 89 c2             	mov    %rax,%rdx
  43a03d:	48 8d 45 98          	lea    -0x68(%rbp),%rax
  43a041:	48 89 d6             	mov    %rdx,%rsi
  43a044:	48 89 c7             	mov    %rax,%rdi
  43a047:	e8 a8 19 00 00       	callq  43b9f4 <std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >::unique_ptr(std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&&)>
      p->thisLine.pop();
  43a04c:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  43a053:	48 8b 00             	mov    (%rax),%rax
  43a056:	48 83 c0 18          	add    $0x18,%rax
  43a05a:	48 89 c7             	mov    %rax,%rdi
  43a05d:	e8 c8 22 00 00       	callq  43c32a <std::stack<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::deque<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > > >::pop()>
      size_t generatedExpressions = p->pushExpression();
  43a062:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  43a069:	48 8b 00             	mov    (%rax),%rax
  43a06c:	48 89 c7             	mov    %rax,%rdi
  43a06f:	e8 a2 f3 ff ff       	callq  439416 <x666::Parser::pushExpression()>
  43a074:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
      if (generatedExpressions != 1) {
  43a078:	48 83 7d c8 01       	cmpq   $0x1,-0x38(%rbp)
  43a07d:	74 60                	je     43a0df <x666::ParserVisitor::parseBinaryOp(x666::Operator const&, unsigned long&)+0x17f>
        p->errorLog.emplace_back(
  43a07f:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  43a086:	48 8b 00             	mov    (%rax),%rax
          p->positions.top());
  43a089:	48 8d 98 08 01 00 00 	lea    0x108(%rax),%rbx
  43a090:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  43a097:	48 8b 00             	mov    (%rax),%rax
  43a09a:	48 83 c0 68          	add    $0x68,%rax
  43a09e:	48 89 c7             	mov    %rax,%rdi
  43a0a1:	e8 46 25 00 00       	callq  43c5ec <std::stack<x666::LineInfo, std::deque<x666::LineInfo, std::allocator<x666::LineInfo> > >::top()>
  43a0a6:	48 89 c2             	mov    %rax,%rdx
  43a0a9:	c7 45 a4 05 00 00 00 	movl   $0x5,-0x5c(%rbp)
        p->errorLog.emplace_back(
  43a0b0:	48 8d 45 a4          	lea    -0x5c(%rbp),%rax
  43a0b4:	48 89 c6             	mov    %rax,%rsi
  43a0b7:	48 89 df             	mov    %rbx,%rdi
  43a0ba:	e8 61 24 00 00       	callq  43c520 <x666::LexError& std::vector<x666::LexError, std::allocator<x666::LexError> >::emplace_back<x666::LexErrorCode, x666::LineInfo&>(x666::LexErrorCode&&, x666::LineInfo&)>
        p->positions.pop();
  43a0bf:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  43a0c6:	48 8b 00             	mov    (%rax),%rax
  43a0c9:	48 83 c0 68          	add    $0x68,%rax
  43a0cd:	48 89 c7             	mov    %rax,%rdi
  43a0d0:	e8 71 22 00 00       	callq  43c346 <std::stack<x666::LineInfo, std::deque<x666::LineInfo, std::allocator<x666::LineInfo> > >::pop()>
        return false;
  43a0d5:	bb 00 00 00 00       	mov    $0x0,%ebx
  43a0da:	e9 7c 02 00 00       	jmpq   43a35b <x666::ParserVisitor::parseBinaryOp(x666::Operator const&, unsigned long&)+0x3fb>
      ExpressionPtr b = std::move(p->thisLine.top());
  43a0df:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  43a0e6:	48 8b 00             	mov    (%rax),%rax
  43a0e9:	48 83 c0 18          	add    $0x18,%rax
  43a0ed:	48 89 c7             	mov    %rax,%rdi
  43a0f0:	e8 1b 22 00 00       	callq  43c310 <std::stack<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::deque<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > > >::top()>
  43a0f5:	48 89 c7             	mov    %rax,%rdi
  43a0f8:	e8 2a f8 ff ff       	callq  439927 <std::remove_reference<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&>::type&& std::move<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&>(std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&)>
  43a0fd:	48 89 c2             	mov    %rax,%rdx
  43a100:	48 8d 45 90          	lea    -0x70(%rbp),%rax
  43a104:	48 89 d6             	mov    %rdx,%rsi
  43a107:	48 89 c7             	mov    %rax,%rdi
  43a10a:	e8 e5 18 00 00       	callq  43b9f4 <std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >::unique_ptr(std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&&)>
      p->thisLine.pop();
  43a10f:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  43a116:	48 8b 00             	mov    (%rax),%rax
  43a119:	48 83 c0 18          	add    $0x18,%rax
  43a11d:	48 89 c7             	mov    %rax,%rdi
  43a120:	e8 05 22 00 00       	callq  43c32a <std::stack<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::deque<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > > >::pop()>
      p->positions.pop();
  43a125:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  43a12c:	48 8b 00             	mov    (%rax),%rax
  43a12f:	48 83 c0 68          	add    $0x68,%rax
  43a133:	48 89 c7             	mov    %rax,%rdi
  43a136:	e8 0b 22 00 00       	callq  43c346 <std::stack<x666::LineInfo, std::deque<x666::LineInfo, std::allocator<x666::LineInfo> > >::pop()>
      ExpressionPtr ex = (prec & 1) == 0 ?
  43a13b:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  43a142:	48 8b 00             	mov    (%rax),%rax
  43a145:	83 e0 01             	and    $0x1,%eax
        b->imbue(std::move(b), op, prec >> 3, std::move(a));
  43a148:	bb 00 00 00 00       	mov    $0x0,%ebx
  43a14d:	41 bc 00 00 00 00    	mov    $0x0,%r12d
  43a153:	41 bd 00 00 00 00    	mov    $0x0,%r13d
  43a159:	41 be 00 00 00 00    	mov    $0x0,%r14d
  43a15f:	48 85 c0             	test   %rax,%rax
  43a162:	0f 85 b9 00 00 00    	jne    43a221 <x666::ParserVisitor::parseBinaryOp(x666::Operator const&, unsigned long&)+0x2c1>
        a->imbue(std::move(a), op, prec >> 3, std::move(b)) :
  43a168:	48 8d 45 98          	lea    -0x68(%rbp),%rax
  43a16c:	48 89 c7             	mov    %rax,%rdi
  43a16f:	e8 c2 8f ff ff       	callq  433136 <std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >::operator->() const>
  43a174:	48 89 85 50 ff ff ff 	mov    %rax,-0xb0(%rbp)
  43a17b:	48 8b 00             	mov    (%rax),%rax
  43a17e:	48 83 c0 18          	add    $0x18,%rax
  43a182:	4c 8b 38             	mov    (%rax),%r15
  43a185:	48 8d 45 90          	lea    -0x70(%rbp),%rax
  43a189:	48 89 c7             	mov    %rax,%rdi
  43a18c:	e8 96 f7 ff ff       	callq  439927 <std::remove_reference<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&>::type&& std::move<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&>(std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&)>
  43a191:	48 89 c2             	mov    %rax,%rdx
        b->imbue(std::move(b), op, prec >> 3, std::move(a));
  43a194:	48 8d 45 a8          	lea    -0x58(%rbp),%rax
  43a198:	48 89 d6             	mov    %rdx,%rsi
  43a19b:	48 89 c7             	mov    %rax,%rdi
  43a19e:	e8 51 18 00 00       	callq  43b9f4 <std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >::unique_ptr(std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&&)>
  43a1a3:	bb 01 00 00 00       	mov    $0x1,%ebx
        a->imbue(std::move(a), op, prec >> 3, std::move(b)) :
  43a1a8:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  43a1af:	48 8b 00             	mov    (%rax),%rax
        b->imbue(std::move(b), op, prec >> 3, std::move(a));
  43a1b2:	48 89 c1             	mov    %rax,%rcx
  43a1b5:	48 c1 e9 03          	shr    $0x3,%rcx
  43a1b9:	48 89 8d 60 ff ff ff 	mov    %rcx,-0xa0(%rbp)
  43a1c0:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  43a1c7:	8b 10                	mov    (%rax),%edx
  43a1c9:	89 95 5c ff ff ff    	mov    %edx,-0xa4(%rbp)
        a->imbue(std::move(a), op, prec >> 3, std::move(b)) :
  43a1cf:	48 8d 45 98          	lea    -0x68(%rbp),%rax
  43a1d3:	48 89 c7             	mov    %rax,%rdi
  43a1d6:	e8 4c f7 ff ff       	callq  439927 <std::remove_reference<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&>::type&& std::move<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&>(std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&)>
  43a1db:	48 89 c2             	mov    %rax,%rdx
        b->imbue(std::move(b), op, prec >> 3, std::move(a));
  43a1de:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
  43a1e2:	48 89 d6             	mov    %rdx,%rsi
  43a1e5:	48 89 c7             	mov    %rax,%rdi
  43a1e8:	e8 07 18 00 00       	callq  43b9f4 <std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >::unique_ptr(std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&&)>
  43a1ed:	41 bc 01 00 00 00    	mov    $0x1,%r12d
  43a1f3:	48 8d 45 88          	lea    -0x78(%rbp),%rax
  43a1f7:	48 8d 4d a8          	lea    -0x58(%rbp),%rcx
  43a1fb:	48 8d 55 b0          	lea    -0x50(%rbp),%rdx
  43a1ff:	49 89 c9             	mov    %rcx,%r9
  43a202:	4c 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%r8
  43a209:	8b 8d 5c ff ff ff    	mov    -0xa4(%rbp),%ecx
  43a20f:	48 8b b5 50 ff ff ff 	mov    -0xb0(%rbp),%rsi
  43a216:	48 89 c7             	mov    %rax,%rdi
  43a219:	41 ff d7             	callq  *%r15
  43a21c:	e9 b5 00 00 00       	jmpq   43a2d6 <x666::ParserVisitor::parseBinaryOp(x666::Operator const&, unsigned long&)+0x376>
  43a221:	48 8d 45 90          	lea    -0x70(%rbp),%rax
  43a225:	48 89 c7             	mov    %rax,%rdi
  43a228:	e8 09 8f ff ff       	callq  433136 <std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >::operator->() const>
  43a22d:	48 89 85 50 ff ff ff 	mov    %rax,-0xb0(%rbp)
  43a234:	48 8b 00             	mov    (%rax),%rax
  43a237:	48 83 c0 18          	add    $0x18,%rax
  43a23b:	4c 8b 38             	mov    (%rax),%r15
  43a23e:	48 8d 45 98          	lea    -0x68(%rbp),%rax
  43a242:	48 89 c7             	mov    %rax,%rdi
  43a245:	e8 dd f6 ff ff       	callq  439927 <std::remove_reference<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&>::type&& std::move<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&>(std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&)>
  43a24a:	48 89 c2             	mov    %rax,%rdx
  43a24d:	48 8d 45 b8          	lea    -0x48(%rbp),%rax
  43a251:	48 89 d6             	mov    %rdx,%rsi
  43a254:	48 89 c7             	mov    %rax,%rdi
  43a257:	e8 98 17 00 00       	callq  43b9f4 <std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >::unique_ptr(std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&&)>
  43a25c:	41 bd 01 00 00 00    	mov    $0x1,%r13d
  43a262:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  43a269:	48 8b 00             	mov    (%rax),%rax
  43a26c:	48 89 c1             	mov    %rax,%rcx
  43a26f:	48 c1 e9 03          	shr    $0x3,%rcx
  43a273:	48 89 8d 60 ff ff ff 	mov    %rcx,-0xa0(%rbp)
  43a27a:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  43a281:	8b 10                	mov    (%rax),%edx
  43a283:	89 95 5c ff ff ff    	mov    %edx,-0xa4(%rbp)
  43a289:	48 8d 45 90          	lea    -0x70(%rbp),%rax
  43a28d:	48 89 c7             	mov    %rax,%rdi
  43a290:	e8 92 f6 ff ff       	callq  439927 <std::remove_reference<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&>::type&& std::move<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&>(std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&)>
  43a295:	48 89 c2             	mov    %rax,%rdx
  43a298:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
  43a29c:	48 89 d6             	mov    %rdx,%rsi
  43a29f:	48 89 c7             	mov    %rax,%rdi
  43a2a2:	e8 4d 17 00 00       	callq  43b9f4 <std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >::unique_ptr(std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&&)>
  43a2a7:	41 be 01 00 00 00    	mov    $0x1,%r14d
  43a2ad:	48 8d 45 88          	lea    -0x78(%rbp),%rax
  43a2b1:	48 8d 4d b8          	lea    -0x48(%rbp),%rcx
  43a2b5:	48 8d 55 c0          	lea    -0x40(%rbp),%rdx
  43a2b9:	49 89 c9             	mov    %rcx,%r9
  43a2bc:	4c 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%r8
  43a2c3:	8b 8d 5c ff ff ff    	mov    -0xa4(%rbp),%ecx
  43a2c9:	48 8b b5 50 ff ff ff 	mov    -0xb0(%rbp),%rsi
  43a2d0:	48 89 c7             	mov    %rax,%rdi
  43a2d3:	41 ff d7             	callq  *%r15
  43a2d6:	45 84 f6             	test   %r14b,%r14b
  43a2d9:	74 0c                	je     43a2e7 <x666::ParserVisitor::parseBinaryOp(x666::Operator const&, unsigned long&)+0x387>
  43a2db:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
  43a2df:	48 89 c7             	mov    %rax,%rdi
  43a2e2:	e8 25 8b ff ff       	callq  432e0c <std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >::~unique_ptr()>
  43a2e7:	45 84 ed             	test   %r13b,%r13b
  43a2ea:	74 0c                	je     43a2f8 <x666::ParserVisitor::parseBinaryOp(x666::Operator const&, unsigned long&)+0x398>
  43a2ec:	48 8d 45 b8          	lea    -0x48(%rbp),%rax
  43a2f0:	48 89 c7             	mov    %rax,%rdi
  43a2f3:	e8 14 8b ff ff       	callq  432e0c <std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >::~unique_ptr()>
  43a2f8:	45 84 e4             	test   %r12b,%r12b
  43a2fb:	74 0c                	je     43a309 <x666::ParserVisitor::parseBinaryOp(x666::Operator const&, unsigned long&)+0x3a9>
  43a2fd:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
  43a301:	48 89 c7             	mov    %rax,%rdi
  43a304:	e8 03 8b ff ff       	callq  432e0c <std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >::~unique_ptr()>
  43a309:	84 db                	test   %bl,%bl
  43a30b:	74 0c                	je     43a319 <x666::ParserVisitor::parseBinaryOp(x666::Operator const&, unsigned long&)+0x3b9>
  43a30d:	48 8d 45 a8          	lea    -0x58(%rbp),%rax
  43a311:	48 89 c7             	mov    %rax,%rdi
  43a314:	e8 f3 8a ff ff       	callq  432e0c <std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >::~unique_ptr()>
      p->thisLine.push(std::move(ex));
  43a319:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  43a320:	48 8b 00             	mov    (%rax),%rax
  43a323:	48 8d 58 18          	lea    0x18(%rax),%rbx
  43a327:	48 8d 45 88          	lea    -0x78(%rbp),%rax
  43a32b:	48 89 c7             	mov    %rax,%rdi
  43a32e:	e8 f4 f5 ff ff       	callq  439927 <std::remove_reference<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&>::type&& std::move<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&>(std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&)>
  43a333:	48 89 c6             	mov    %rax,%rsi
  43a336:	48 89 df             	mov    %rbx,%rdi
  43a339:	e8 3c 1e 00 00       	callq  43c17a <std::stack<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::deque<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > > >::push(std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&&)>
      return true;
  43a33e:	bb 01 00 00 00       	mov    $0x1,%ebx
        b->imbue(std::move(b), op, prec >> 3, std::move(a));
  43a343:	48 8d 45 88          	lea    -0x78(%rbp),%rax
  43a347:	48 89 c7             	mov    %rax,%rdi
  43a34a:	e8 bd 8a ff ff       	callq  432e0c <std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >::~unique_ptr()>
      ExpressionPtr b = std::move(p->thisLine.top());
  43a34f:	48 8d 45 90          	lea    -0x70(%rbp),%rax
  43a353:	48 89 c7             	mov    %rax,%rdi
  43a356:	e8 b1 8a ff ff       	callq  432e0c <std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >::~unique_ptr()>
      ExpressionPtr a = std::move(p->thisLine.top());
  43a35b:	48 8d 45 98          	lea    -0x68(%rbp),%rax
  43a35f:	48 89 c7             	mov    %rax,%rdi
  43a362:	e8 a5 8a ff ff       	callq  432e0c <std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >::~unique_ptr()>
  43a367:	89 d8                	mov    %ebx,%eax
  43a369:	e9 8b 00 00 00       	jmpq   43a3f9 <x666::ParserVisitor::parseBinaryOp(x666::Operator const&, unsigned long&)+0x499>
  43a36e:	49 89 c7             	mov    %rax,%r15
        b->imbue(std::move(b), op, prec >> 3, std::move(a));
  43a371:	45 84 f6             	test   %r14b,%r14b
  43a374:	74 0c                	je     43a382 <x666::ParserVisitor::parseBinaryOp(x666::Operator const&, unsigned long&)+0x422>
  43a376:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
  43a37a:	48 89 c7             	mov    %rax,%rdi
  43a37d:	e8 8a 8a ff ff       	callq  432e0c <std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >::~unique_ptr()>
  43a382:	4d 89 fe             	mov    %r15,%r14
  43a385:	45 84 ed             	test   %r13b,%r13b
  43a388:	74 0c                	je     43a396 <x666::ParserVisitor::parseBinaryOp(x666::Operator const&, unsigned long&)+0x436>
  43a38a:	48 8d 45 b8          	lea    -0x48(%rbp),%rax
  43a38e:	48 89 c7             	mov    %rax,%rdi
  43a391:	e8 76 8a ff ff       	callq  432e0c <std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >::~unique_ptr()>
  43a396:	4d 89 f5             	mov    %r14,%r13
  43a399:	45 84 e4             	test   %r12b,%r12b
  43a39c:	74 0c                	je     43a3aa <x666::ParserVisitor::parseBinaryOp(x666::Operator const&, unsigned long&)+0x44a>
  43a39e:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
  43a3a2:	48 89 c7             	mov    %rax,%rdi
  43a3a5:	e8 62 8a ff ff       	callq  432e0c <std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >::~unique_ptr()>
  43a3aa:	4d 89 ec             	mov    %r13,%r12
  43a3ad:	84 db                	test   %bl,%bl
  43a3af:	74 0c                	je     43a3bd <x666::ParserVisitor::parseBinaryOp(x666::Operator const&, unsigned long&)+0x45d>
  43a3b1:	48 8d 45 a8          	lea    -0x58(%rbp),%rax
  43a3b5:	48 89 c7             	mov    %rax,%rdi
  43a3b8:	e8 4f 8a ff ff       	callq  432e0c <std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >::~unique_ptr()>
  43a3bd:	4c 89 e3             	mov    %r12,%rbx
  43a3c0:	eb 0f                	jmp    43a3d1 <x666::ParserVisitor::parseBinaryOp(x666::Operator const&, unsigned long&)+0x471>
  43a3c2:	48 89 c3             	mov    %rax,%rbx
  43a3c5:	48 8d 45 88          	lea    -0x78(%rbp),%rax
  43a3c9:	48 89 c7             	mov    %rax,%rdi
  43a3cc:	e8 3b 8a ff ff       	callq  432e0c <std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >::~unique_ptr()>
      ExpressionPtr b = std::move(p->thisLine.top());
  43a3d1:	48 8d 45 90          	lea    -0x70(%rbp),%rax
  43a3d5:	48 89 c7             	mov    %rax,%rdi
  43a3d8:	e8 2f 8a ff ff       	callq  432e0c <std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >::~unique_ptr()>
  43a3dd:	eb 03                	jmp    43a3e2 <x666::ParserVisitor::parseBinaryOp(x666::Operator const&, unsigned long&)+0x482>
  43a3df:	48 89 c3             	mov    %rax,%rbx
      ExpressionPtr a = std::move(p->thisLine.top());
  43a3e2:	48 8d 45 98          	lea    -0x68(%rbp),%rax
  43a3e6:	48 89 c7             	mov    %rax,%rdi
  43a3e9:	e8 1e 8a ff ff       	callq  432e0c <std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >::~unique_ptr()>
  43a3ee:	48 89 d8             	mov    %rbx,%rax
  43a3f1:	48 89 c7             	mov    %rax,%rdi
  43a3f4:	e8 17 85 ff ff       	callq  432910 <_Unwind_Resume@plt>
    }
  43a3f9:	48 81 c4 88 00 00 00 	add    $0x88,%rsp
  43a400:	5b                   	pop    %rbx
  43a401:	41 5c                	pop    %r12
  43a403:	41 5d                	pop    %r13
  43a405:	41 5e                	pop    %r14
  43a407:	41 5f                	pop    %r15
  43a409:	5d                   	pop    %rbp
  43a40a:	c3                   	retq   
  43a40b:	90                   	nop

000000000043a40c <x666::ParserVisitor::operator()(x666::Operator&&)>:
    bool operator()(Operator&& op) {
  43a40c:	55                   	push   %rbp
  43a40d:	48 89 e5             	mov    %rsp,%rbp
  43a410:	41 56                	push   %r14
  43a412:	41 55                	push   %r13
  43a414:	41 54                	push   %r12
  43a416:	53                   	push   %rbx
  43a417:	48 81 ec d0 00 00 00 	sub    $0xd0,%rsp
  43a41e:	48 89 bd 18 ff ff ff 	mov    %rdi,-0xe8(%rbp)
  43a425:	48 89 b5 10 ff ff ff 	mov    %rsi,-0xf0(%rbp)
      size_t prec = precedences[(size_t) op];
  43a42c:	48 8b 85 10 ff ff ff 	mov    -0xf0(%rbp),%rax
  43a433:	8b 00                	mov    (%rax),%eax
  43a435:	48 98                	cltq   
  43a437:	0f b7 84 00 00 13 65 	movzwl 0x651300(%rax,%rax,1),%eax
  43a43e:	00 
  43a43f:	0f b7 c0             	movzwl %ax,%eax
  43a442:	48 89 85 58 ff ff ff 	mov    %rax,-0xa8(%rbp)
      if (prec == 2) {
  43a449:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
  43a450:	48 83 f8 02          	cmp    $0x2,%rax
  43a454:	75 59                	jne    43a4af <x666::ParserVisitor::operator()(x666::Operator&&)+0xa3>
        p->brackets.push({ op, p->thisLine.size() });
  43a456:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
  43a45d:	48 8b 00             	mov    (%rax),%rax
  43a460:	48 8d 98 b8 00 00 00 	lea    0xb8(%rax),%rbx
  43a467:	48 8b 85 10 ff ff ff 	mov    -0xf0(%rbp),%rax
  43a46e:	8b 00                	mov    (%rax),%eax
  43a470:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%rbp)
  43a476:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
  43a47d:	48 8b 00             	mov    (%rax),%rax
  43a480:	48 83 c0 18          	add    $0x18,%rax
  43a484:	48 89 c7             	mov    %rax,%rdi
  43a487:	e8 7a 21 00 00       	callq  43c606 <std::stack<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::deque<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > > >::size() const>
  43a48c:	48 89 85 68 ff ff ff 	mov    %rax,-0x98(%rbp)
  43a493:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
  43a49a:	48 89 c6             	mov    %rax,%rsi
  43a49d:	48 89 df             	mov    %rbx,%rdi
  43a4a0:	e8 89 21 00 00       	callq  43c62e <std::stack<x666::Parser::BracketEntry, std::deque<x666::Parser::BracketEntry, std::allocator<x666::Parser::BracketEntry> > >::push(x666::Parser::BracketEntry&&)>
        return false;
  43a4a5:	b8 00 00 00 00       	mov    $0x0,%eax
  43a4aa:	e9 b9 05 00 00       	jmpq   43aa68 <x666::ParserVisitor::operator()(x666::Operator&&)+0x65c>
      } else if (prec == 3) {
  43a4af:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
  43a4b6:	48 83 f8 03          	cmp    $0x3,%rax
  43a4ba:	0f 85 04 03 00 00    	jne    43a7c4 <x666::ParserVisitor::operator()(x666::Operator&&)+0x3b8>
        bool matches = true;
  43a4c0:	c6 45 df 01          	movb   $0x1,-0x21(%rbp)
        size_t openingHeight = 0;
  43a4c4:	48 c7 45 d0 00 00 00 	movq   $0x0,-0x30(%rbp)
  43a4cb:	00 
        if (!p->brackets.empty()) {
  43a4cc:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
  43a4d3:	48 8b 00             	mov    (%rax),%rax
  43a4d6:	48 05 b8 00 00 00    	add    $0xb8,%rax
  43a4dc:	48 89 c7             	mov    %rax,%rdi
  43a4df:	e8 7e 21 00 00       	callq  43c662 <std::stack<x666::Parser::BracketEntry, std::deque<x666::Parser::BracketEntry, std::allocator<x666::Parser::BracketEntry> > >::empty() const>
  43a4e4:	83 f0 01             	xor    $0x1,%eax
  43a4e7:	84 c0                	test   %al,%al
  43a4e9:	74 70                	je     43a55b <x666::ParserVisitor::operator()(x666::Operator&&)+0x14f>
          Parser::BracketEntry op2 = p->brackets.top();
  43a4eb:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
  43a4f2:	48 8b 00             	mov    (%rax),%rax
  43a4f5:	48 05 b8 00 00 00    	add    $0xb8,%rax
  43a4fb:	48 89 c7             	mov    %rax,%rdi
  43a4fe:	e8 79 21 00 00       	callq  43c67c <std::stack<x666::Parser::BracketEntry, std::deque<x666::Parser::BracketEntry, std::allocator<x666::Parser::BracketEntry> > >::top()>
  43a503:	48 8b 50 08          	mov    0x8(%rax),%rdx
  43a507:	48 8b 00             	mov    (%rax),%rax
  43a50a:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
  43a511:	48 89 95 48 ff ff ff 	mov    %rdx,-0xb8(%rbp)
          p->brackets.pop();
  43a518:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
  43a51f:	48 8b 00             	mov    (%rax),%rax
  43a522:	48 05 b8 00 00 00    	add    $0xb8,%rax
  43a528:	48 89 c7             	mov    %rax,%rdi
  43a52b:	e8 66 21 00 00       	callq  43c696 <std::stack<x666::Parser::BracketEntry, std::deque<x666::Parser::BracketEntry, std::allocator<x666::Parser::BracketEntry> > >::pop()>
          if ((size_t) op2.bracket + 1 != (size_t) op)
  43a530:	8b 85 40 ff ff ff    	mov    -0xc0(%rbp),%eax
  43a536:	48 98                	cltq   
  43a538:	48 8d 50 01          	lea    0x1(%rax),%rdx
  43a53c:	48 8b 85 10 ff ff ff 	mov    -0xf0(%rbp),%rax
  43a543:	8b 00                	mov    (%rax),%eax
  43a545:	48 98                	cltq   
  43a547:	48 39 c2             	cmp    %rax,%rdx
  43a54a:	74 04                	je     43a550 <x666::ParserVisitor::operator()(x666::Operator&&)+0x144>
            matches = false;
  43a54c:	c6 45 df 00          	movb   $0x0,-0x21(%rbp)
          openingHeight = op2.thisLineSize;
  43a550:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
  43a557:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
        if (!matches) {
  43a55b:	0f b6 45 df          	movzbl -0x21(%rbp),%eax
  43a55f:	83 f0 01             	xor    $0x1,%eax
  43a562:	84 c0                	test   %al,%al
  43a564:	74 4c                	je     43a5b2 <x666::ParserVisitor::operator()(x666::Operator&&)+0x1a6>
          p->errorLog.emplace_back(
  43a566:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
  43a56d:	48 8b 00             	mov    (%rax),%rax
            p->getLastLineInfo());
  43a570:	48 8d 98 08 01 00 00 	lea    0x108(%rax),%rbx
  43a577:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
  43a57e:	48 8b 00             	mov    (%rax),%rax
  43a581:	48 89 c7             	mov    %rax,%rdi
  43a584:	e8 6f f0 ff ff       	callq  4395f8 <x666::Parser::getLastLineInfo() const>
  43a589:	48 89 c2             	mov    %rax,%rdx
  43a58c:	c7 85 70 ff ff ff 06 	movl   $0x6,-0x90(%rbp)
  43a593:	00 00 00 
          p->errorLog.emplace_back(
  43a596:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
  43a59d:	48 89 c6             	mov    %rax,%rsi
  43a5a0:	48 89 df             	mov    %rbx,%rdi
  43a5a3:	e8 08 1e 00 00       	callq  43c3b0 <x666::LexError& std::vector<x666::LexError, std::allocator<x666::LexError> >::emplace_back<x666::LexErrorCode, x666::LineInfo const&>(x666::LexErrorCode&&, x666::LineInfo const&)>
          return false;
  43a5a8:	b8 00 00 00 00       	mov    $0x0,%eax
  43a5ad:	e9 b6 04 00 00       	jmpq   43aa68 <x666::ParserVisitor::operator()(x666::Operator&&)+0x65c>
        ssize_t k = (ssize_t) p->thisLine.size() - (ssize_t) openingHeight;
  43a5b2:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
  43a5b9:	48 8b 00             	mov    (%rax),%rax
  43a5bc:	48 83 c0 18          	add    $0x18,%rax
  43a5c0:	48 89 c7             	mov    %rax,%rdi
  43a5c3:	e8 3e 20 00 00       	callq  43c606 <std::stack<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::deque<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > > >::size() const>
  43a5c8:	48 89 c2             	mov    %rax,%rdx
  43a5cb:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  43a5cf:	48 29 c2             	sub    %rax,%rdx
  43a5d2:	48 89 d0             	mov    %rdx,%rax
  43a5d5:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
        if (k < 0 || k > 1) {
  43a5d9:	48 83 7d c0 00       	cmpq   $0x0,-0x40(%rbp)
  43a5de:	78 07                	js     43a5e7 <x666::ParserVisitor::operator()(x666::Operator&&)+0x1db>
  43a5e0:	48 83 7d c0 01       	cmpq   $0x1,-0x40(%rbp)
  43a5e5:	7e 4c                	jle    43a633 <x666::ParserVisitor::operator()(x666::Operator&&)+0x227>
          p->errorLog.emplace_back(
  43a5e7:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
  43a5ee:	48 8b 00             	mov    (%rax),%rax
            p->getLastLineInfo());
  43a5f1:	48 8d 98 08 01 00 00 	lea    0x108(%rax),%rbx
  43a5f8:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
  43a5ff:	48 8b 00             	mov    (%rax),%rax
  43a602:	48 89 c7             	mov    %rax,%rdi
  43a605:	e8 ee ef ff ff       	callq  4395f8 <x666::Parser::getLastLineInfo() const>
  43a60a:	48 89 c2             	mov    %rax,%rdx
  43a60d:	c7 85 74 ff ff ff 03 	movl   $0x3,-0x8c(%rbp)
  43a614:	00 00 00 
          p->errorLog.emplace_back(
  43a617:	48 8d 85 74 ff ff ff 	lea    -0x8c(%rbp),%rax
  43a61e:	48 89 c6             	mov    %rax,%rsi
  43a621:	48 89 df             	mov    %rbx,%rdi
  43a624:	e8 87 1d 00 00       	callq  43c3b0 <x666::LexError& std::vector<x666::LexError, std::allocator<x666::LexError> >::emplace_back<x666::LexErrorCode, x666::LineInfo const&>(x666::LexErrorCode&&, x666::LineInfo const&)>
          return false;
  43a629:	b8 00 00 00 00       	mov    $0x0,%eax
  43a62e:	e9 35 04 00 00       	jmpq   43aa68 <x666::ParserVisitor::operator()(x666::Operator&&)+0x65c>
        } else if (k == 1) {
  43a633:	48 83 7d c0 01       	cmpq   $0x1,-0x40(%rbp)
  43a638:	0f 85 e2 00 00 00    	jne    43a720 <x666::ParserVisitor::operator()(x666::Operator&&)+0x314>
          ExpressionPtr ex = std::move(p->thisLine.top());
  43a63e:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
  43a645:	48 8b 00             	mov    (%rax),%rax
  43a648:	48 83 c0 18          	add    $0x18,%rax
  43a64c:	48 89 c7             	mov    %rax,%rdi
  43a64f:	e8 bc 1c 00 00       	callq  43c310 <std::stack<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::deque<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > > >::top()>
  43a654:	48 89 c7             	mov    %rax,%rdi
  43a657:	e8 cb f2 ff ff       	callq  439927 <std::remove_reference<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&>::type&& std::move<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&>(std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&)>
  43a65c:	48 89 c2             	mov    %rax,%rdx
  43a65f:	48 8d 85 38 ff ff ff 	lea    -0xc8(%rbp),%rax
  43a666:	48 89 d6             	mov    %rdx,%rsi
  43a669:	48 89 c7             	mov    %rax,%rdi
  43a66c:	e8 83 13 00 00       	callq  43b9f4 <std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >::unique_ptr(std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&&)>
          p->thisLine.pop();
  43a671:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
  43a678:	48 8b 00             	mov    (%rax),%rax
  43a67b:	48 83 c0 18          	add    $0x18,%rax
  43a67f:	48 89 c7             	mov    %rax,%rdi
  43a682:	e8 a3 1c 00 00       	callq  43c32a <std::stack<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::deque<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > > >::pop()>
          p->thisLine.push(
  43a687:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
  43a68e:	48 8b 00             	mov    (%rax),%rax
  43a691:	48 8d 58 18          	lea    0x18(%rax),%rbx
              std::move(ex), (Operator) ((size_t) op - 1)));
  43a695:	48 8b 85 10 ff ff ff 	mov    -0xf0(%rbp),%rax
  43a69c:	8b 00                	mov    (%rax),%eax
  43a69e:	83 e8 01             	sub    $0x1,%eax
  43a6a1:	89 45 8c             	mov    %eax,-0x74(%rbp)
  43a6a4:	48 8d 85 38 ff ff ff 	lea    -0xc8(%rbp),%rax
  43a6ab:	48 89 c7             	mov    %rax,%rdi
  43a6ae:	e8 74 f2 ff ff       	callq  439927 <std::remove_reference<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&>::type&& std::move<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&>(std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&)>
  43a6b3:	48 89 c1             	mov    %rax,%rcx
            std::make_unique<Bracket>(
  43a6b6:	48 8d 45 80          	lea    -0x80(%rbp),%rax
  43a6ba:	48 8d 55 8c          	lea    -0x74(%rbp),%rdx
  43a6be:	48 89 ce             	mov    %rcx,%rsi
  43a6c1:	48 89 c7             	mov    %rax,%rdi
  43a6c4:	e8 e8 1f 00 00       	callq  43c6b1 <std::_MakeUniq<x666::Bracket>::__single_object std::make_unique<x666::Bracket, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, x666::Operator>(std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&&, x666::Operator&&)>
          p->thisLine.push(
  43a6c9:	48 8d 55 80          	lea    -0x80(%rbp),%rdx
  43a6cd:	48 8d 85 78 ff ff ff 	lea    -0x88(%rbp),%rax
  43a6d4:	48 89 d6             	mov    %rdx,%rsi
  43a6d7:	48 89 c7             	mov    %rax,%rdi
  43a6da:	e8 d5 20 00 00       	callq  43c7b4 <std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >::unique_ptr<x666::Bracket, std::default_delete<x666::Bracket>, void>(std::unique_ptr<x666::Bracket, std::default_delete<x666::Bracket> >&&)>
  43a6df:	48 8d 85 78 ff ff ff 	lea    -0x88(%rbp),%rax
  43a6e6:	48 89 c6             	mov    %rax,%rsi
  43a6e9:	48 89 df             	mov    %rbx,%rdi
  43a6ec:	e8 89 1a 00 00       	callq  43c17a <std::stack<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::deque<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > > >::push(std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&&)>
  43a6f1:	48 8d 85 78 ff ff ff 	lea    -0x88(%rbp),%rax
  43a6f8:	48 89 c7             	mov    %rax,%rdi
  43a6fb:	e8 0c 87 ff ff       	callq  432e0c <std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >::~unique_ptr()>
            std::make_unique<Bracket>(
  43a700:	48 8d 45 80          	lea    -0x80(%rbp),%rax
  43a704:	48 89 c7             	mov    %rax,%rdi
  43a707:	e8 50 20 00 00       	callq  43c75c <std::unique_ptr<x666::Bracket, std::default_delete<x666::Bracket> >::~unique_ptr()>
          ExpressionPtr ex = std::move(p->thisLine.top());
  43a70c:	48 8d 85 38 ff ff ff 	lea    -0xc8(%rbp),%rax
  43a713:	48 89 c7             	mov    %rax,%rdi
  43a716:	e8 f1 86 ff ff       	callq  432e0c <std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >::~unique_ptr()>
  43a71b:	e9 9a 00 00 00       	jmpq   43a7ba <x666::ParserVisitor::operator()(x666::Operator&&)+0x3ae>
          p->thisLine.push(
  43a720:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
  43a727:	48 8b 00             	mov    (%rax),%rax
  43a72a:	48 8d 58 18          	lea    0x18(%rax),%rbx
              nullptr, (Operator) ((size_t) op - 1)));
  43a72e:	48 8b 85 10 ff ff ff 	mov    -0xf0(%rbp),%rax
  43a735:	8b 00                	mov    (%rax),%eax
  43a737:	83 e8 01             	sub    $0x1,%eax
  43a73a:	89 45 a4             	mov    %eax,-0x5c(%rbp)
            std::make_unique<Bracket>(
  43a73d:	48 c7 45 a8 00 00 00 	movq   $0x0,-0x58(%rbp)
  43a744:	00 
  43a745:	48 8d 45 98          	lea    -0x68(%rbp),%rax
  43a749:	48 8d 55 a4          	lea    -0x5c(%rbp),%rdx
  43a74d:	48 8d 4d a8          	lea    -0x58(%rbp),%rcx
  43a751:	48 89 ce             	mov    %rcx,%rsi
  43a754:	48 89 c7             	mov    %rax,%rdi
  43a757:	e8 b8 20 00 00       	callq  43c814 <std::_MakeUniq<x666::Bracket>::__single_object std::make_unique<x666::Bracket, decltype(nullptr), x666::Operator>(decltype(nullptr)&&, x666::Operator&&)>
          p->thisLine.push(
  43a75c:	48 8d 55 98          	lea    -0x68(%rbp),%rdx
  43a760:	48 8d 45 90          	lea    -0x70(%rbp),%rax
  43a764:	48 89 d6             	mov    %rdx,%rsi
  43a767:	48 89 c7             	mov    %rax,%rdi
  43a76a:	e8 45 20 00 00       	callq  43c7b4 <std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >::unique_ptr<x666::Bracket, std::default_delete<x666::Bracket>, void>(std::unique_ptr<x666::Bracket, std::default_delete<x666::Bracket> >&&)>
  43a76f:	48 8d 45 90          	lea    -0x70(%rbp),%rax
  43a773:	48 89 c6             	mov    %rax,%rsi
  43a776:	48 89 df             	mov    %rbx,%rdi
  43a779:	e8 fc 19 00 00       	callq  43c17a <std::stack<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::deque<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > > >::push(std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&&)>
  43a77e:	48 8d 45 90          	lea    -0x70(%rbp),%rax
  43a782:	48 89 c7             	mov    %rax,%rdi
  43a785:	e8 82 86 ff ff       	callq  432e0c <std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >::~unique_ptr()>
            std::make_unique<Bracket>(
  43a78a:	48 8d 45 98          	lea    -0x68(%rbp),%rax
  43a78e:	48 89 c7             	mov    %rax,%rdi
  43a791:	e8 c6 1f 00 00       	callq  43c75c <std::unique_ptr<x666::Bracket, std::default_delete<x666::Bracket> >::~unique_ptr()>
          p->positions.push(li);
  43a796:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
  43a79d:	48 8b 00             	mov    (%rax),%rax
  43a7a0:	48 83 c0 68          	add    $0x68,%rax
  43a7a4:	48 8b 95 18 ff ff ff 	mov    -0xe8(%rbp),%rdx
  43a7ab:	48 83 c2 08          	add    $0x8,%rdx
  43a7af:	48 89 d6             	mov    %rdx,%rsi
  43a7b2:	48 89 c7             	mov    %rax,%rdi
  43a7b5:	e8 f4 19 00 00       	callq  43c1ae <std::stack<x666::LineInfo, std::deque<x666::LineInfo, std::allocator<x666::LineInfo> > >::push(x666::LineInfo const&)>
        return true;
  43a7ba:	b8 01 00 00 00       	mov    $0x1,%eax
  43a7bf:	e9 a4 02 00 00       	jmpq   43aa68 <x666::ParserVisitor::operator()(x666::Operator&&)+0x65c>
      } else if (prec < 64) {
  43a7c4:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
  43a7cb:	48 83 f8 3f          	cmp    $0x3f,%rax
  43a7cf:	77 46                	ja     43a817 <x666::ParserVisitor::operator()(x666::Operator&&)+0x40b>
        p->errorLog.emplace_back(
  43a7d1:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
  43a7d8:	48 8b 00             	mov    (%rax),%rax
          p->getLastLineInfo());
  43a7db:	48 8d 98 08 01 00 00 	lea    0x108(%rax),%rbx
  43a7e2:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
  43a7e9:	48 8b 00             	mov    (%rax),%rax
  43a7ec:	48 89 c7             	mov    %rax,%rdi
  43a7ef:	e8 04 ee ff ff       	callq  4395f8 <x666::Parser::getLastLineInfo() const>
  43a7f4:	48 89 c2             	mov    %rax,%rdx
  43a7f7:	c7 45 b0 02 00 00 00 	movl   $0x2,-0x50(%rbp)
        p->errorLog.emplace_back(
  43a7fe:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
  43a802:	48 89 c6             	mov    %rax,%rsi
  43a805:	48 89 df             	mov    %rbx,%rdi
  43a808:	e8 a3 1b 00 00       	callq  43c3b0 <x666::LexError& std::vector<x666::LexError, std::allocator<x666::LexError> >::emplace_back<x666::LexErrorCode, x666::LineInfo const&>(x666::LexErrorCode&&, x666::LineInfo const&)>
        return false;
  43a80d:	b8 00 00 00 00       	mov    $0x0,%eax
  43a812:	e9 51 02 00 00       	jmpq   43aa68 <x666::ParserVisitor::operator()(x666::Operator&&)+0x65c>
      if ((prec & 2) == 0) { // This is a binary operator
  43a817:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
  43a81e:	83 e0 02             	and    $0x2,%eax
  43a821:	48 85 c0             	test   %rax,%rax
  43a824:	75 20                	jne    43a846 <x666::ParserVisitor::operator()(x666::Operator&&)+0x43a>
        parseBinaryOp(op, prec);
  43a826:	48 8d 85 58 ff ff ff 	lea    -0xa8(%rbp),%rax
  43a82d:	48 8b b5 10 ff ff ff 	mov    -0xf0(%rbp),%rsi
  43a834:	48 8b 8d 18 ff ff ff 	mov    -0xe8(%rbp),%rcx
  43a83b:	48 89 c2             	mov    %rax,%rdx
  43a83e:	48 89 cf             	mov    %rcx,%rdi
  43a841:	e8 1a f7 ff ff       	callq  439f60 <x666::ParserVisitor::parseBinaryOp(x666::Operator const&, unsigned long&)>
      if ((prec & 2) != 0) { // This is a unary operator
  43a846:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
  43a84d:	83 e0 02             	and    $0x2,%eax
  43a850:	48 85 c0             	test   %rax,%rax
  43a853:	0f 84 6d 01 00 00    	je     43a9c6 <x666::ParserVisitor::operator()(x666::Operator&&)+0x5ba>
        size_t generatedExpressions = p->pushExpression();
  43a859:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
  43a860:	48 8b 00             	mov    (%rax),%rax
  43a863:	48 89 c7             	mov    %rax,%rdi
  43a866:	e8 ab eb ff ff       	callq  439416 <x666::Parser::pushExpression()>
  43a86b:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
        if (generatedExpressions != 1) {
  43a86f:	48 83 7d c8 01       	cmpq   $0x1,-0x38(%rbp)
  43a874:	74 46                	je     43a8bc <x666::ParserVisitor::operator()(x666::Operator&&)+0x4b0>
          p->errorLog.emplace_back(
  43a876:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
  43a87d:	48 8b 00             	mov    (%rax),%rax
            p->getLastLineInfo());
  43a880:	48 8d 98 08 01 00 00 	lea    0x108(%rax),%rbx
  43a887:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
  43a88e:	48 8b 00             	mov    (%rax),%rax
  43a891:	48 89 c7             	mov    %rax,%rdi
  43a894:	e8 5f ed ff ff       	callq  4395f8 <x666::Parser::getLastLineInfo() const>
  43a899:	48 89 c2             	mov    %rax,%rdx
  43a89c:	c7 45 b4 05 00 00 00 	movl   $0x5,-0x4c(%rbp)
          p->errorLog.emplace_back(
  43a8a3:	48 8d 45 b4          	lea    -0x4c(%rbp),%rax
  43a8a7:	48 89 c6             	mov    %rax,%rsi
  43a8aa:	48 89 df             	mov    %rbx,%rdi
  43a8ad:	e8 fe 1a 00 00       	callq  43c3b0 <x666::LexError& std::vector<x666::LexError, std::allocator<x666::LexError> >::emplace_back<x666::LexErrorCode, x666::LineInfo const&>(x666::LexErrorCode&&, x666::LineInfo const&)>
          return false;
  43a8b2:	b8 00 00 00 00       	mov    $0x0,%eax
  43a8b7:	e9 ac 01 00 00       	jmpq   43aa68 <x666::ParserVisitor::operator()(x666::Operator&&)+0x65c>
        ExpressionPtr a = std::move(p->thisLine.top());
  43a8bc:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
  43a8c3:	48 8b 00             	mov    (%rax),%rax
  43a8c6:	48 83 c0 18          	add    $0x18,%rax
  43a8ca:	48 89 c7             	mov    %rax,%rdi
  43a8cd:	e8 3e 1a 00 00       	callq  43c310 <std::stack<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::deque<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > > >::top()>
  43a8d2:	48 89 c7             	mov    %rax,%rdi
  43a8d5:	e8 4d f0 ff ff       	callq  439927 <std::remove_reference<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&>::type&& std::move<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&>(std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&)>
  43a8da:	48 89 c2             	mov    %rax,%rdx
  43a8dd:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
  43a8e4:	48 89 d6             	mov    %rdx,%rsi
  43a8e7:	48 89 c7             	mov    %rax,%rdi
  43a8ea:	e8 05 11 00 00       	callq  43b9f4 <std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >::unique_ptr(std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&&)>
        p->thisLine.pop();
  43a8ef:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
  43a8f6:	48 8b 00             	mov    (%rax),%rax
  43a8f9:	48 83 c0 18          	add    $0x18,%rax
  43a8fd:	48 89 c7             	mov    %rax,%rdi
  43a900:	e8 25 1a 00 00       	callq  43c32a <std::stack<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::deque<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > > >::pop()>
        ExpressionPtr ex = a->imbue(std::move(a), op, prec >> 3);
  43a905:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
  43a90c:	48 89 c7             	mov    %rax,%rdi
  43a90f:	e8 22 88 ff ff       	callq  433136 <std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >::operator->() const>
  43a914:	49 89 c4             	mov    %rax,%r12
  43a917:	49 8b 04 24          	mov    (%r12),%rax
  43a91b:	48 83 c0 20          	add    $0x20,%rax
  43a91f:	48 8b 18             	mov    (%rax),%rbx
  43a922:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
  43a929:	48 c1 e8 03          	shr    $0x3,%rax
  43a92d:	49 89 c6             	mov    %rax,%r14
  43a930:	48 8b 85 10 ff ff ff 	mov    -0xf0(%rbp),%rax
  43a937:	44 8b 28             	mov    (%rax),%r13d
  43a93a:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
  43a941:	48 89 c7             	mov    %rax,%rdi
  43a944:	e8 de ef ff ff       	callq  439927 <std::remove_reference<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&>::type&& std::move<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&>(std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&)>
  43a949:	48 89 c2             	mov    %rax,%rdx
  43a94c:	48 8d 45 b8          	lea    -0x48(%rbp),%rax
  43a950:	48 89 d6             	mov    %rdx,%rsi
  43a953:	48 89 c7             	mov    %rax,%rdi
  43a956:	e8 99 10 00 00       	callq  43b9f4 <std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >::unique_ptr(std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&&)>
  43a95b:	48 8d 85 28 ff ff ff 	lea    -0xd8(%rbp),%rax
  43a962:	48 8d 55 b8          	lea    -0x48(%rbp),%rdx
  43a966:	4d 89 f0             	mov    %r14,%r8
  43a969:	44 89 e9             	mov    %r13d,%ecx
  43a96c:	4c 89 e6             	mov    %r12,%rsi
  43a96f:	48 89 c7             	mov    %rax,%rdi
  43a972:	ff d3                	callq  *%rbx
  43a974:	48 8d 45 b8          	lea    -0x48(%rbp),%rax
  43a978:	48 89 c7             	mov    %rax,%rdi
  43a97b:	e8 8c 84 ff ff       	callq  432e0c <std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >::~unique_ptr()>
        p->thisLine.push(std::move(ex));
  43a980:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
  43a987:	48 8b 00             	mov    (%rax),%rax
  43a98a:	48 8d 58 18          	lea    0x18(%rax),%rbx
  43a98e:	48 8d 85 28 ff ff ff 	lea    -0xd8(%rbp),%rax
  43a995:	48 89 c7             	mov    %rax,%rdi
  43a998:	e8 8a ef ff ff       	callq  439927 <std::remove_reference<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&>::type&& std::move<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&>(std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&)>
  43a99d:	48 89 c6             	mov    %rax,%rsi
  43a9a0:	48 89 df             	mov    %rbx,%rdi
  43a9a3:	e8 d2 17 00 00       	callq  43c17a <std::stack<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::deque<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > > >::push(std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&&)>
        ExpressionPtr ex = a->imbue(std::move(a), op, prec >> 3);
  43a9a8:	48 8d 85 28 ff ff ff 	lea    -0xd8(%rbp),%rax
  43a9af:	48 89 c7             	mov    %rax,%rdi
  43a9b2:	e8 55 84 ff ff       	callq  432e0c <std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >::~unique_ptr()>
        ExpressionPtr a = std::move(p->thisLine.top());
  43a9b7:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
  43a9be:	48 89 c7             	mov    %rax,%rdi
  43a9c1:	e8 46 84 ff ff       	callq  432e0c <std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >::~unique_ptr()>
  43a9c6:	48 89 c3             	mov    %rax,%rbx
          p->thisLine.push(
  43a9c9:	48 8d 85 78 ff ff ff 	lea    -0x88(%rbp),%rax
  43a9d0:	48 89 c7             	mov    %rax,%rdi
  43a9d3:	e8 34 84 ff ff       	callq  432e0c <std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >::~unique_ptr()>
            std::make_unique<Bracket>(
  43a9d8:	48 8d 45 80          	lea    -0x80(%rbp),%rax
  43a9dc:	48 89 c7             	mov    %rax,%rdi
  43a9df:	e8 78 1d 00 00       	callq  43c75c <std::unique_ptr<x666::Bracket, std::default_delete<x666::Bracket> >::~unique_ptr()>
  43a9e4:	eb 03                	jmp    43a9e9 <x666::ParserVisitor::operator()(x666::Operator&&)+0x5dd>
  43a9e6:	48 89 c3             	mov    %rax,%rbx
          ExpressionPtr ex = std::move(p->thisLine.top());
  43a9e9:	48 8d 85 38 ff ff ff 	lea    -0xc8(%rbp),%rax
  43a9f0:	48 89 c7             	mov    %rax,%rdi
  43a9f3:	e8 14 84 ff ff       	callq  432e0c <std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >::~unique_ptr()>
  43a9f8:	48 89 d8             	mov    %rbx,%rax
  43a9fb:	48 89 c7             	mov    %rax,%rdi
  43a9fe:	e8 0d 7f ff ff       	callq  432910 <_Unwind_Resume@plt>
  43aa03:	48 89 c3             	mov    %rax,%rbx
          p->thisLine.push(
  43aa06:	48 8d 45 90          	lea    -0x70(%rbp),%rax
  43aa0a:	48 89 c7             	mov    %rax,%rdi
  43aa0d:	e8 fa 83 ff ff       	callq  432e0c <std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >::~unique_ptr()>
            std::make_unique<Bracket>(
  43aa12:	48 8d 45 98          	lea    -0x68(%rbp),%rax
  43aa16:	48 89 c7             	mov    %rax,%rdi
  43aa19:	e8 3e 1d 00 00       	callq  43c75c <std::unique_ptr<x666::Bracket, std::default_delete<x666::Bracket> >::~unique_ptr()>
  43aa1e:	48 89 d8             	mov    %rbx,%rax
  43aa21:	eb 00                	jmp    43aa23 <x666::ParserVisitor::operator()(x666::Operator&&)+0x617>
  43aa23:	48 89 c7             	mov    %rax,%rdi
  43aa26:	e8 e5 7e ff ff       	callq  432910 <_Unwind_Resume@plt>
  43aa2b:	48 89 c3             	mov    %rax,%rbx
  43aa2e:	48 8d 45 b8          	lea    -0x48(%rbp),%rax
  43aa32:	48 89 c7             	mov    %rax,%rdi
  43aa35:	e8 d2 83 ff ff       	callq  432e0c <std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >::~unique_ptr()>
  43aa3a:	eb 12                	jmp    43aa4e <x666::ParserVisitor::operator()(x666::Operator&&)+0x642>
  43aa3c:	48 89 c3             	mov    %rax,%rbx
        ExpressionPtr ex = a->imbue(std::move(a), op, prec >> 3);
  43aa3f:	48 8d 85 28 ff ff ff 	lea    -0xd8(%rbp),%rax
  43aa46:	48 89 c7             	mov    %rax,%rdi
  43aa49:	e8 be 83 ff ff       	callq  432e0c <std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >::~unique_ptr()>
        ExpressionPtr a = std::move(p->thisLine.top());
  43aa4e:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
  43aa55:	48 89 c7             	mov    %rax,%rdi
  43aa58:	e8 af 83 ff ff       	callq  432e0c <std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >::~unique_ptr()>
  43aa5d:	48 89 d8             	mov    %rbx,%rax
  43aa60:	48 89 c7             	mov    %rax,%rdi
  43aa63:	e8 a8 7e ff ff       	callq  432910 <_Unwind_Resume@plt>
    }
  43aa68:	48 81 c4 d0 00 00 00 	add    $0xd0,%rsp
  43aa6f:	5b                   	pop    %rbx
  43aa70:	41 5c                	pop    %r12
  43aa72:	41 5d                	pop    %r13
  43aa74:	41 5e                	pop    %r14
  43aa76:	5d                   	pop    %rbp
  43aa77:	c3                   	retq   

000000000043aa78 <std::__detail::__variant::_Copy_ctor_base<false, x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>::~_Copy_ctor_base()>:
    struct _Copy_ctor_base : _Variant_storage_alias<_Types...>
  43aa78:	55                   	push   %rbp
  43aa79:	48 89 e5             	mov    %rsp,%rbp
  43aa7c:	48 83 ec 10          	sub    $0x10,%rsp
  43aa80:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  43aa84:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43aa88:	48 89 c7             	mov    %rax,%rdi
  43aa8b:	e8 bc 1e 00 00       	callq  43c94c <std::__detail::__variant::_Variant_storage<false, x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>::~_Variant_storage()>
  43aa90:	90                   	nop
  43aa91:	c9                   	leaveq 
  43aa92:	c3                   	retq   
  43aa93:	90                   	nop

000000000043aa94 <std::__detail::__variant::_Move_ctor_base<false, x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>::~_Move_ctor_base()>:
    struct _Move_ctor_base : _Copy_ctor_alias<_Types...>
  43aa94:	55                   	push   %rbp
  43aa95:	48 89 e5             	mov    %rsp,%rbp
  43aa98:	48 83 ec 10          	sub    $0x10,%rsp
  43aa9c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  43aaa0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43aaa4:	48 89 c7             	mov    %rax,%rdi
  43aaa7:	e8 cc ff ff ff       	callq  43aa78 <std::__detail::__variant::_Copy_ctor_base<false, x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>::~_Copy_ctor_base()>
  43aaac:	90                   	nop
  43aaad:	c9                   	leaveq 
  43aaae:	c3                   	retq   
  43aaaf:	90                   	nop

000000000043aab0 <std::__detail::__variant::_Copy_assign_base<false, x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>::~_Copy_assign_base()>:
    struct _Copy_assign_base : _Move_ctor_alias<_Types...>
  43aab0:	55                   	push   %rbp
  43aab1:	48 89 e5             	mov    %rsp,%rbp
  43aab4:	48 83 ec 10          	sub    $0x10,%rsp
  43aab8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  43aabc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43aac0:	48 89 c7             	mov    %rax,%rdi
  43aac3:	e8 cc ff ff ff       	callq  43aa94 <std::__detail::__variant::_Move_ctor_base<false, x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>::~_Move_ctor_base()>
  43aac8:	90                   	nop
  43aac9:	c9                   	leaveq 
  43aaca:	c3                   	retq   
  43aacb:	90                   	nop

000000000043aacc <std::__detail::__variant::_Move_assign_base<false, x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>::~_Move_assign_base()>:
    struct _Move_assign_base : _Copy_assign_alias<_Types...>
  43aacc:	55                   	push   %rbp
  43aacd:	48 89 e5             	mov    %rsp,%rbp
  43aad0:	48 83 ec 10          	sub    $0x10,%rsp
  43aad4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  43aad8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43aadc:	48 89 c7             	mov    %rax,%rdi
  43aadf:	e8 cc ff ff ff       	callq  43aab0 <std::__detail::__variant::_Copy_assign_base<false, x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>::~_Copy_assign_base()>
  43aae4:	90                   	nop
  43aae5:	c9                   	leaveq 
  43aae6:	c3                   	retq   
  43aae7:	90                   	nop

000000000043aae8 <std::__detail::__variant::_Variant_base<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>::~_Variant_base()>:
    struct _Variant_base : _Move_assign_alias<_Types...>
  43aae8:	55                   	push   %rbp
  43aae9:	48 89 e5             	mov    %rsp,%rbp
  43aaec:	48 83 ec 10          	sub    $0x10,%rsp
  43aaf0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  43aaf4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43aaf8:	48 89 c7             	mov    %rax,%rdi
  43aafb:	e8 cc ff ff ff       	callq  43aacc <std::__detail::__variant::_Move_assign_base<false, x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>::~_Move_assign_base()>
  43ab00:	90                   	nop
  43ab01:	c9                   	leaveq 
  43ab02:	c3                   	retq   
  43ab03:	90                   	nop

000000000043ab04 <std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>::~variant()>:
      ~variant() = default;
  43ab04:	55                   	push   %rbp
  43ab05:	48 89 e5             	mov    %rsp,%rbp
  43ab08:	48 83 ec 10          	sub    $0x10,%rsp
  43ab0c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  43ab10:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43ab14:	48 89 c7             	mov    %rax,%rdi
  43ab17:	e8 cc ff ff ff       	callq  43aae8 <std::__detail::__variant::_Variant_base<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>::~_Variant_base()>
  43ab1c:	90                   	nop
  43ab1d:	c9                   	leaveq 
  43ab1e:	c3                   	retq   

000000000043ab1f <x666::LexError& std::get<x666::LexError, x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>(std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>&)>:
    constexpr inline _Tp& get(variant<_Types...>& __v)
  43ab1f:	55                   	push   %rbp
  43ab20:	48 89 e5             	mov    %rsp,%rbp
  43ab23:	48 83 ec 10          	sub    $0x10,%rsp
  43ab27:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      return get<__detail::__variant::__index_of_v<_Tp, _Types...>>(__v);
  43ab2b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43ab2f:	48 89 c7             	mov    %rax,%rdi
  43ab32:	e8 0f 02 00 00       	callq  43ad46 <std::variant_alternative<6ul, std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> >::type& std::get<6ul, x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>(std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>&)>
    }
  43ab37:	c9                   	leaveq 
  43ab38:	c3                   	retq   
  43ab39:	90                   	nop

000000000043ab3a <std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>::index() const>:
	}

      constexpr bool valueless_by_exception() const noexcept
      { return !this->_M_valid(); }

      constexpr size_t index() const noexcept
  43ab3a:	55                   	push   %rbp
  43ab3b:	48 89 e5             	mov    %rsp,%rbp
  43ab3e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      {
	if (this->_M_index ==
  43ab42:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43ab46:	0f b6 40 28          	movzbl 0x28(%rax),%eax
  43ab4a:	3c ff                	cmp    $0xff,%al
  43ab4c:	75 09                	jne    43ab57 <std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>::index() const+0x1d>
	    typename _Base::__index_type(variant_npos))
	  return variant_npos;
  43ab4e:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
  43ab55:	eb 0b                	jmp    43ab62 <std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>::index() const+0x28>
	return this->_M_index;
  43ab57:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43ab5b:	0f b6 40 28          	movzbl 0x28(%rax),%eax
  43ab5f:	0f b6 c0             	movzbl %al,%eax
      }
  43ab62:	5d                   	pop    %rbp
  43ab63:	c3                   	retq   

000000000043ab64 <std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>& std::forward<std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>&>(std::remove_reference<std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>&>::type&)>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
  43ab64:	55                   	push   %rbp
  43ab65:	48 89 e5             	mov    %rsp,%rbp
  43ab68:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<_Tp&&>(__t); }
  43ab6c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43ab70:	5d                   	pop    %rbp
  43ab71:	c3                   	retq   

000000000043ab72 <std::__detail::__variant::_Variadic_union<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>& std::forward<std::__detail::__variant::_Variadic_union<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>&>(std::remove_reference<std::__detail::__variant::_Variadic_union<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>&>::type&)>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
  43ab72:	55                   	push   %rbp
  43ab73:	48 89 e5             	mov    %rsp,%rbp
  43ab76:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<_Tp&&>(__t); }
  43ab7a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43ab7e:	5d                   	pop    %rbp
  43ab7f:	c3                   	retq   

000000000043ab80 <std::__detail::__variant::_Variadic_union<x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>& std::forward<std::__detail::__variant::_Variadic_union<x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>&>(std::remove_reference<std::__detail::__variant::_Variadic_union<x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>&>::type&)>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
  43ab80:	55                   	push   %rbp
  43ab81:	48 89 e5             	mov    %rsp,%rbp
  43ab84:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<_Tp&&>(__t); }
  43ab88:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43ab8c:	5d                   	pop    %rbp
  43ab8d:	c3                   	retq   

000000000043ab8e <std::__detail::__variant::_Variadic_union<x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>& std::forward<std::__detail::__variant::_Variadic_union<x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>&>(std::remove_reference<std::__detail::__variant::_Variadic_union<x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>&>::type&)>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
  43ab8e:	55                   	push   %rbp
  43ab8f:	48 89 e5             	mov    %rsp,%rbp
  43ab92:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<_Tp&&>(__t); }
  43ab96:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43ab9a:	5d                   	pop    %rbp
  43ab9b:	c3                   	retq   

000000000043ab9c <std::__detail::__variant::_Variadic_union<x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>& std::forward<std::__detail::__variant::_Variadic_union<x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>&>(std::remove_reference<std::__detail::__variant::_Variadic_union<x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>&>::type&)>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
  43ab9c:	55                   	push   %rbp
  43ab9d:	48 89 e5             	mov    %rsp,%rbp
  43aba0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<_Tp&&>(__t); }
  43aba4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43aba8:	5d                   	pop    %rbp
  43aba9:	c3                   	retq   

000000000043abaa <std::__detail::__variant::_Variadic_union<x666::Newline, x666::EndOfFile, x666::LexError>& std::forward<std::__detail::__variant::_Variadic_union<x666::Newline, x666::EndOfFile, x666::LexError>&>(std::remove_reference<std::__detail::__variant::_Variadic_union<x666::Newline, x666::EndOfFile, x666::LexError>&>::type&)>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
  43abaa:	55                   	push   %rbp
  43abab:	48 89 e5             	mov    %rsp,%rbp
  43abae:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<_Tp&&>(__t); }
  43abb2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43abb6:	5d                   	pop    %rbp
  43abb7:	c3                   	retq   

000000000043abb8 <std::__detail::__variant::_Variadic_union<x666::EndOfFile, x666::LexError>& std::forward<std::__detail::__variant::_Variadic_union<x666::EndOfFile, x666::LexError>&>(std::remove_reference<std::__detail::__variant::_Variadic_union<x666::EndOfFile, x666::LexError>&>::type&)>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
  43abb8:	55                   	push   %rbp
  43abb9:	48 89 e5             	mov    %rsp,%rbp
  43abbc:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<_Tp&&>(__t); }
  43abc0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43abc4:	5d                   	pop    %rbp
  43abc5:	c3                   	retq   

000000000043abc6 <std::__detail::__variant::_Variadic_union<x666::LexError>& std::forward<std::__detail::__variant::_Variadic_union<x666::LexError>&>(std::remove_reference<std::__detail::__variant::_Variadic_union<x666::LexError>&>::type&)>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
  43abc6:	55                   	push   %rbp
  43abc7:	48 89 e5             	mov    %rsp,%rbp
  43abca:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<_Tp&&>(__t); }
  43abce:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43abd2:	5d                   	pop    %rbp
  43abd3:	c3                   	retq   

000000000043abd4 <decltype(auto) std::__detail::__variant::__get<std::__detail::__variant::_Variadic_union<x666::LexError>&>(std::in_place_index_t<0ul>, std::__detail::__variant::_Variadic_union<x666::LexError>&)>:
    constexpr decltype(auto) __get(in_place_index_t<0>, _Union&& __u)
  43abd4:	55                   	push   %rbp
  43abd5:	48 89 e5             	mov    %rsp,%rbp
  43abd8:	48 83 ec 10          	sub    $0x10,%rsp
  43abdc:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return std::forward<_Union>(__u)._M_first._M_get(); }
  43abe0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43abe4:	48 89 c7             	mov    %rax,%rdi
  43abe7:	e8 da ff ff ff       	callq  43abc6 <std::__detail::__variant::_Variadic_union<x666::LexError>& std::forward<std::__detail::__variant::_Variadic_union<x666::LexError>&>(std::remove_reference<std::__detail::__variant::_Variadic_union<x666::LexError>&>::type&)>
  43abec:	48 89 c7             	mov    %rax,%rdi
  43abef:	e8 94 1d 00 00       	callq  43c988 <std::__detail::__variant::_Uninitialized<x666::LexError, false>::_M_get() &>
  43abf4:	c9                   	leaveq 
  43abf5:	c3                   	retq   

000000000043abf6 <decltype(auto) std::__detail::__variant::__get<1ul, std::__detail::__variant::_Variadic_union<x666::EndOfFile, x666::LexError>&>(std::in_place_index_t<1ul>, std::__detail::__variant::_Variadic_union<x666::EndOfFile, x666::LexError>&)>:
    constexpr decltype(auto) __get(in_place_index_t<_Np>, _Union&& __u)
  43abf6:	55                   	push   %rbp
  43abf7:	48 89 e5             	mov    %rsp,%rbp
  43abfa:	53                   	push   %rbx
  43abfb:	48 83 ec 18          	sub    $0x18,%rsp
  43abff:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    { return __get(in_place_index<_Np-1>, std::forward<_Union>(__u)._M_rest); }
  43ac03:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  43ac07:	48 89 c7             	mov    %rax,%rdi
  43ac0a:	e8 a9 ff ff ff       	callq  43abb8 <std::__detail::__variant::_Variadic_union<x666::EndOfFile, x666::LexError>& std::forward<std::__detail::__variant::_Variadic_union<x666::EndOfFile, x666::LexError>&>(std::remove_reference<std::__detail::__variant::_Variadic_union<x666::EndOfFile, x666::LexError>&>::type&)>
  43ac0f:	48 83 ec 08          	sub    $0x8,%rsp
  43ac13:	53                   	push   %rbx
  43ac14:	48 89 c7             	mov    %rax,%rdi
  43ac17:	e8 b8 ff ff ff       	callq  43abd4 <decltype(auto) std::__detail::__variant::__get<std::__detail::__variant::_Variadic_union<x666::LexError>&>(std::in_place_index_t<0ul>, std::__detail::__variant::_Variadic_union<x666::LexError>&)>
  43ac1c:	48 83 c4 10          	add    $0x10,%rsp
  43ac20:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  43ac24:	c9                   	leaveq 
  43ac25:	c3                   	retq   

000000000043ac26 <decltype(auto) std::__detail::__variant::__get<2ul, std::__detail::__variant::_Variadic_union<x666::Newline, x666::EndOfFile, x666::LexError>&>(std::in_place_index_t<2ul>, std::__detail::__variant::_Variadic_union<x666::Newline, x666::EndOfFile, x666::LexError>&)>:
    constexpr decltype(auto) __get(in_place_index_t<_Np>, _Union&& __u)
  43ac26:	55                   	push   %rbp
  43ac27:	48 89 e5             	mov    %rsp,%rbp
  43ac2a:	53                   	push   %rbx
  43ac2b:	48 83 ec 18          	sub    $0x18,%rsp
  43ac2f:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    { return __get(in_place_index<_Np-1>, std::forward<_Union>(__u)._M_rest); }
  43ac33:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  43ac37:	48 89 c7             	mov    %rax,%rdi
  43ac3a:	e8 6b ff ff ff       	callq  43abaa <std::__detail::__variant::_Variadic_union<x666::Newline, x666::EndOfFile, x666::LexError>& std::forward<std::__detail::__variant::_Variadic_union<x666::Newline, x666::EndOfFile, x666::LexError>&>(std::remove_reference<std::__detail::__variant::_Variadic_union<x666::Newline, x666::EndOfFile, x666::LexError>&>::type&)>
  43ac3f:	48 83 ec 08          	sub    $0x8,%rsp
  43ac43:	53                   	push   %rbx
  43ac44:	48 89 c7             	mov    %rax,%rdi
  43ac47:	e8 aa ff ff ff       	callq  43abf6 <decltype(auto) std::__detail::__variant::__get<1ul, std::__detail::__variant::_Variadic_union<x666::EndOfFile, x666::LexError>&>(std::in_place_index_t<1ul>, std::__detail::__variant::_Variadic_union<x666::EndOfFile, x666::LexError>&)>
  43ac4c:	48 83 c4 10          	add    $0x10,%rsp
  43ac50:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  43ac54:	c9                   	leaveq 
  43ac55:	c3                   	retq   

000000000043ac56 <decltype(auto) std::__detail::__variant::__get<3ul, std::__detail::__variant::_Variadic_union<x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>&>(std::in_place_index_t<3ul>, std::__detail::__variant::_Variadic_union<x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>&)>:
    constexpr decltype(auto) __get(in_place_index_t<_Np>, _Union&& __u)
  43ac56:	55                   	push   %rbp
  43ac57:	48 89 e5             	mov    %rsp,%rbp
  43ac5a:	53                   	push   %rbx
  43ac5b:	48 83 ec 18          	sub    $0x18,%rsp
  43ac5f:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    { return __get(in_place_index<_Np-1>, std::forward<_Union>(__u)._M_rest); }
  43ac63:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  43ac67:	48 89 c7             	mov    %rax,%rdi
  43ac6a:	e8 2d ff ff ff       	callq  43ab9c <std::__detail::__variant::_Variadic_union<x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>& std::forward<std::__detail::__variant::_Variadic_union<x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>&>(std::remove_reference<std::__detail::__variant::_Variadic_union<x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>&>::type&)>
  43ac6f:	48 83 ec 08          	sub    $0x8,%rsp
  43ac73:	53                   	push   %rbx
  43ac74:	48 89 c7             	mov    %rax,%rdi
  43ac77:	e8 aa ff ff ff       	callq  43ac26 <decltype(auto) std::__detail::__variant::__get<2ul, std::__detail::__variant::_Variadic_union<x666::Newline, x666::EndOfFile, x666::LexError>&>(std::in_place_index_t<2ul>, std::__detail::__variant::_Variadic_union<x666::Newline, x666::EndOfFile, x666::LexError>&)>
  43ac7c:	48 83 c4 10          	add    $0x10,%rsp
  43ac80:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  43ac84:	c9                   	leaveq 
  43ac85:	c3                   	retq   

000000000043ac86 <decltype(auto) std::__detail::__variant::__get<4ul, std::__detail::__variant::_Variadic_union<x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>&>(std::in_place_index_t<4ul>, std::__detail::__variant::_Variadic_union<x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>&)>:
    constexpr decltype(auto) __get(in_place_index_t<_Np>, _Union&& __u)
  43ac86:	55                   	push   %rbp
  43ac87:	48 89 e5             	mov    %rsp,%rbp
  43ac8a:	53                   	push   %rbx
  43ac8b:	48 83 ec 18          	sub    $0x18,%rsp
  43ac8f:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    { return __get(in_place_index<_Np-1>, std::forward<_Union>(__u)._M_rest); }
  43ac93:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  43ac97:	48 89 c7             	mov    %rax,%rdi
  43ac9a:	e8 ef fe ff ff       	callq  43ab8e <std::__detail::__variant::_Variadic_union<x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>& std::forward<std::__detail::__variant::_Variadic_union<x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>&>(std::remove_reference<std::__detail::__variant::_Variadic_union<x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>&>::type&)>
  43ac9f:	48 83 ec 08          	sub    $0x8,%rsp
  43aca3:	53                   	push   %rbx
  43aca4:	48 89 c7             	mov    %rax,%rdi
  43aca7:	e8 aa ff ff ff       	callq  43ac56 <decltype(auto) std::__detail::__variant::__get<3ul, std::__detail::__variant::_Variadic_union<x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>&>(std::in_place_index_t<3ul>, std::__detail::__variant::_Variadic_union<x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>&)>
  43acac:	48 83 c4 10          	add    $0x10,%rsp
  43acb0:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  43acb4:	c9                   	leaveq 
  43acb5:	c3                   	retq   

000000000043acb6 <decltype(auto) std::__detail::__variant::__get<5ul, std::__detail::__variant::_Variadic_union<x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>&>(std::in_place_index_t<5ul>, std::__detail::__variant::_Variadic_union<x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>&)>:
    constexpr decltype(auto) __get(in_place_index_t<_Np>, _Union&& __u)
  43acb6:	55                   	push   %rbp
  43acb7:	48 89 e5             	mov    %rsp,%rbp
  43acba:	53                   	push   %rbx
  43acbb:	48 83 ec 18          	sub    $0x18,%rsp
  43acbf:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    { return __get(in_place_index<_Np-1>, std::forward<_Union>(__u)._M_rest); }
  43acc3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  43acc7:	48 89 c7             	mov    %rax,%rdi
  43acca:	e8 b1 fe ff ff       	callq  43ab80 <std::__detail::__variant::_Variadic_union<x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>& std::forward<std::__detail::__variant::_Variadic_union<x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>&>(std::remove_reference<std::__detail::__variant::_Variadic_union<x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>&>::type&)>
  43accf:	48 83 ec 08          	sub    $0x8,%rsp
  43acd3:	53                   	push   %rbx
  43acd4:	48 89 c7             	mov    %rax,%rdi
  43acd7:	e8 aa ff ff ff       	callq  43ac86 <decltype(auto) std::__detail::__variant::__get<4ul, std::__detail::__variant::_Variadic_union<x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>&>(std::in_place_index_t<4ul>, std::__detail::__variant::_Variadic_union<x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>&)>
  43acdc:	48 83 c4 10          	add    $0x10,%rsp
  43ace0:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  43ace4:	c9                   	leaveq 
  43ace5:	c3                   	retq   

000000000043ace6 <decltype(auto) std::__detail::__variant::__get<6ul, std::__detail::__variant::_Variadic_union<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>&>(std::in_place_index_t<6ul>, std::__detail::__variant::_Variadic_union<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>&)>:
    constexpr decltype(auto) __get(in_place_index_t<_Np>, _Union&& __u)
  43ace6:	55                   	push   %rbp
  43ace7:	48 89 e5             	mov    %rsp,%rbp
  43acea:	53                   	push   %rbx
  43aceb:	48 83 ec 18          	sub    $0x18,%rsp
  43acef:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    { return __get(in_place_index<_Np-1>, std::forward<_Union>(__u)._M_rest); }
  43acf3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  43acf7:	48 89 c7             	mov    %rax,%rdi
  43acfa:	e8 73 fe ff ff       	callq  43ab72 <std::__detail::__variant::_Variadic_union<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>& std::forward<std::__detail::__variant::_Variadic_union<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>&>(std::remove_reference<std::__detail::__variant::_Variadic_union<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>&>::type&)>
  43acff:	48 83 ec 08          	sub    $0x8,%rsp
  43ad03:	53                   	push   %rbx
  43ad04:	48 89 c7             	mov    %rax,%rdi
  43ad07:	e8 aa ff ff ff       	callq  43acb6 <decltype(auto) std::__detail::__variant::__get<5ul, std::__detail::__variant::_Variadic_union<x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>&>(std::in_place_index_t<5ul>, std::__detail::__variant::_Variadic_union<x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>&)>
  43ad0c:	48 83 c4 10          	add    $0x10,%rsp
  43ad10:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  43ad14:	c9                   	leaveq 
  43ad15:	c3                   	retq   

000000000043ad16 <decltype(auto) std::__detail::__variant::__get<6ul, std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>&>(std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>&)>:
    constexpr decltype(auto) __get(_Variant&& __v)
  43ad16:	55                   	push   %rbp
  43ad17:	48 89 e5             	mov    %rsp,%rbp
  43ad1a:	53                   	push   %rbx
  43ad1b:	48 83 ec 18          	sub    $0x18,%rsp
  43ad1f:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
      return __get(std::in_place_index<_Np>, std::forward<_Variant>(__v)._M_u);
  43ad23:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  43ad27:	48 89 c7             	mov    %rax,%rdi
  43ad2a:	e8 35 fe ff ff       	callq  43ab64 <std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>& std::forward<std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>&>(std::remove_reference<std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>&>::type&)>
  43ad2f:	48 83 ec 08          	sub    $0x8,%rsp
  43ad33:	53                   	push   %rbx
  43ad34:	48 89 c7             	mov    %rax,%rdi
  43ad37:	e8 aa ff ff ff       	callq  43ace6 <decltype(auto) std::__detail::__variant::__get<6ul, std::__detail::__variant::_Variadic_union<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>&>(std::in_place_index_t<6ul>, std::__detail::__variant::_Variadic_union<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>&)>
  43ad3c:	48 83 c4 10          	add    $0x10,%rsp
    }
  43ad40:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  43ad44:	c9                   	leaveq 
  43ad45:	c3                   	retq   

000000000043ad46 <std::variant_alternative<6ul, std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> >::type& std::get<6ul, x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>(std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>&)>:
#undef _VARIANT_RELATION_FUNCTION_TEMPLATE
    };

  template<size_t _Np, typename... _Types>
    constexpr variant_alternative_t<_Np, variant<_Types...>>&
    get(variant<_Types...>& __v)
  43ad46:	55                   	push   %rbp
  43ad47:	48 89 e5             	mov    %rsp,%rbp
  43ad4a:	48 83 ec 10          	sub    $0x10,%rsp
  43ad4e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    {
      static_assert(_Np < sizeof...(_Types),
		    "The index should be in [0, number of alternatives)");
      if (__v.index() != _Np)
  43ad52:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43ad56:	48 89 c7             	mov    %rax,%rdi
  43ad59:	e8 dc fd ff ff       	callq  43ab3a <std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>::index() const>
  43ad5e:	48 83 f8 06          	cmp    $0x6,%rax
  43ad62:	0f 95 c0             	setne  %al
  43ad65:	84 c0                	test   %al,%al
  43ad67:	74 0a                	je     43ad73 <std::variant_alternative<6ul, std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> >::type& std::get<6ul, x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>(std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>&)+0x2d>
	__throw_bad_variant_access("Unexpected index");
  43ad69:	bf 2c 47 44 00       	mov    $0x44472c,%edi
  43ad6e:	e8 7a e9 ff ff       	callq  4396ed <std::__throw_bad_variant_access(char const*)>
      return __detail::__variant::__get<_Np>(__v);
  43ad73:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43ad77:	48 89 c7             	mov    %rax,%rdi
  43ad7a:	e8 97 ff ff ff       	callq  43ad16 <decltype(auto) std::__detail::__variant::__get<6ul, std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>&>(std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>&)>
    }
  43ad7f:	c9                   	leaveq 
  43ad80:	c3                   	retq   

000000000043ad81 <std::remove_reference<std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>&>::type&& std::move<std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>&>(std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>&)>:
    move(_Tp&& __t) noexcept
  43ad81:	55                   	push   %rbp
  43ad82:	48 89 e5             	mov    %rsp,%rbp
  43ad85:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
  43ad89:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43ad8d:	5d                   	pop    %rbp
  43ad8e:	c3                   	retq   
  43ad8f:	90                   	nop

000000000043ad90 <std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>::valueless_by_exception() const>:
      constexpr bool valueless_by_exception() const noexcept
  43ad90:	55                   	push   %rbp
  43ad91:	48 89 e5             	mov    %rsp,%rbp
  43ad94:	48 83 ec 10          	sub    $0x10,%rsp
  43ad98:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return !this->_M_valid(); }
  43ad9c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43ada0:	48 89 c7             	mov    %rax,%rdi
  43ada3:	e8 06 00 00 00       	callq  43adae <std::__detail::__variant::_Variant_storage<false, x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>::_M_valid() const>
  43ada8:	83 f0 01             	xor    $0x1,%eax
  43adab:	c9                   	leaveq 
  43adac:	c3                   	retq   
  43adad:	90                   	nop

000000000043adae <std::__detail::__variant::_Variant_storage<false, x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>::_M_valid() const>:
      _M_valid() const noexcept
  43adae:	55                   	push   %rbp
  43adaf:	48 89 e5             	mov    %rsp,%rbp
  43adb2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	return this->_M_index != __index_type(variant_npos);
  43adb6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43adba:	0f b6 40 28          	movzbl 0x28(%rax),%eax
  43adbe:	3c ff                	cmp    $0xff,%al
  43adc0:	0f 95 c0             	setne  %al
      }
  43adc3:	5d                   	pop    %rbp
  43adc4:	c3                   	retq   

000000000043adc5 <std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>&& std::forward<std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> >(std::remove_reference<std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> >::type&)>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
  43adc5:	55                   	push   %rbp
  43adc6:	48 89 e5             	mov    %rsp,%rbp
  43adc9:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<_Tp&&>(__t); }
  43adcd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43add1:	5d                   	pop    %rbp
  43add2:	c3                   	retq   

000000000043add3 <x666::ParserVisitor&& std::forward<x666::ParserVisitor>(std::remove_reference<x666::ParserVisitor>::type&)>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
  43add3:	55                   	push   %rbp
  43add4:	48 89 e5             	mov    %rsp,%rbp
  43add7:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<_Tp&&>(__t); }
  43addb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43addf:	5d                   	pop    %rbp
  43ade0:	c3                   	retq   

000000000043ade1 <std::__detail::__variant::_Variadic_union<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>&& std::forward<std::__detail::__variant::_Variadic_union<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> >(std::remove_reference<std::__detail::__variant::_Variadic_union<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> >::type&)>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
  43ade1:	55                   	push   %rbp
  43ade2:	48 89 e5             	mov    %rsp,%rbp
  43ade5:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<_Tp&&>(__t); }
  43ade9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43aded:	5d                   	pop    %rbp
  43adee:	c3                   	retq   

000000000043adef <decltype(auto) std::__detail::__variant::__get<std::__detail::__variant::_Variadic_union<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> >(std::in_place_index_t<0ul>, std::__detail::__variant::_Variadic_union<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>&&)>:
    constexpr decltype(auto) __get(in_place_index_t<0>, _Union&& __u)
  43adef:	55                   	push   %rbp
  43adf0:	48 89 e5             	mov    %rsp,%rbp
  43adf3:	48 83 ec 10          	sub    $0x10,%rsp
  43adf7:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return std::forward<_Union>(__u)._M_first._M_get(); }
  43adfb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43adff:	48 89 c7             	mov    %rax,%rdi
  43ae02:	e8 da ff ff ff       	callq  43ade1 <std::__detail::__variant::_Variadic_union<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>&& std::forward<std::__detail::__variant::_Variadic_union<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> >(std::remove_reference<std::__detail::__variant::_Variadic_union<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> >::type&)>
  43ae07:	48 89 c7             	mov    %rax,%rdi
  43ae0a:	e8 93 1b 00 00       	callq  43c9a2 <std::__detail::__variant::_Uninitialized<x666::Identifier, false>::_M_get() &&>
  43ae0f:	c9                   	leaveq 
  43ae10:	c3                   	retq   

000000000043ae11 <decltype(auto) std::__detail::__variant::__get<0ul, std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> >(std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>&&)>:
    constexpr decltype(auto) __get(_Variant&& __v)
  43ae11:	55                   	push   %rbp
  43ae12:	48 89 e5             	mov    %rsp,%rbp
  43ae15:	53                   	push   %rbx
  43ae16:	48 83 ec 18          	sub    $0x18,%rsp
  43ae1a:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
      return __get(std::in_place_index<_Np>, std::forward<_Variant>(__v)._M_u);
  43ae1e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  43ae22:	48 89 c7             	mov    %rax,%rdi
  43ae25:	e8 9b ff ff ff       	callq  43adc5 <std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>&& std::forward<std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> >(std::remove_reference<std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> >::type&)>
  43ae2a:	48 83 ec 08          	sub    $0x8,%rsp
  43ae2e:	53                   	push   %rbx
  43ae2f:	48 89 c7             	mov    %rax,%rdi
  43ae32:	e8 b8 ff ff ff       	callq  43adef <decltype(auto) std::__detail::__variant::__get<std::__detail::__variant::_Variadic_union<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> >(std::in_place_index_t<0ul>, std::__detail::__variant::_Variadic_union<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>&&)>
  43ae37:	48 83 c4 10          	add    $0x10,%rsp
    }
  43ae3b:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  43ae3f:	c9                   	leaveq 
  43ae40:	c3                   	retq   

000000000043ae41 <std::variant_alternative<0ul, std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> >::type&& std::get<0ul, x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>(std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>&&)>:

  template<size_t _Np, typename... _Types>
    constexpr variant_alternative_t<_Np, variant<_Types...>>&&
    get(variant<_Types...>&& __v)
  43ae41:	55                   	push   %rbp
  43ae42:	48 89 e5             	mov    %rsp,%rbp
  43ae45:	48 83 ec 10          	sub    $0x10,%rsp
  43ae49:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    {
      static_assert(_Np < sizeof...(_Types),
		    "The index should be in [0, number of alternatives)");
      if (__v.index() != _Np)
  43ae4d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43ae51:	48 89 c7             	mov    %rax,%rdi
  43ae54:	e8 e1 fc ff ff       	callq  43ab3a <std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>::index() const>
  43ae59:	48 85 c0             	test   %rax,%rax
  43ae5c:	0f 95 c0             	setne  %al
  43ae5f:	84 c0                	test   %al,%al
  43ae61:	74 0a                	je     43ae6d <std::variant_alternative<0ul, std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> >::type&& std::get<0ul, x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>(std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>&&)+0x2c>
	__throw_bad_variant_access("Unexpected index");
  43ae63:	bf 2c 47 44 00       	mov    $0x44472c,%edi
  43ae68:	e8 80 e8 ff ff       	callq  4396ed <std::__throw_bad_variant_access(char const*)>
      return __detail::__variant::__get<_Np>(std::move(__v));
  43ae6d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43ae71:	48 89 c7             	mov    %rax,%rdi
  43ae74:	e8 08 ff ff ff       	callq  43ad81 <std::remove_reference<std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>&>::type&& std::move<std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>&>(std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>&)>
  43ae79:	48 89 c7             	mov    %rax,%rdi
  43ae7c:	e8 90 ff ff ff       	callq  43ae11 <decltype(auto) std::__detail::__variant::__get<0ul, std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> >(std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>&&)>
    }
  43ae81:	c9                   	leaveq 
  43ae82:	c3                   	retq   

000000000043ae83 <std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>&& std::forward<std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>&&>(std::remove_reference<std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>&&>::type&)>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
  43ae83:	55                   	push   %rbp
  43ae84:	48 89 e5             	mov    %rsp,%rbp
  43ae87:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<_Tp&&>(__t); }
  43ae8b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43ae8f:	5d                   	pop    %rbp
  43ae90:	c3                   	retq   

000000000043ae91 <x666::ParserVisitor&& std::forward<x666::ParserVisitor&&>(std::remove_reference<x666::ParserVisitor&&>::type&)>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
  43ae91:	55                   	push   %rbp
  43ae92:	48 89 e5             	mov    %rsp,%rbp
  43ae95:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<_Tp&&>(__t); }
  43ae99:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43ae9d:	5d                   	pop    %rbp
  43ae9e:	c3                   	retq   

000000000043ae9f <std::__detail::__variant::__gen_vtable_impl<std::__detail::__variant::_Multi_array<bool (*)(x666::ParserVisitor&&, std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>&&)>, std::tuple<std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>&&>, std::integer_sequence<unsigned long, 0ul> >::__visit_invoke(x666::ParserVisitor&&, std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>&&)>:
      static constexpr __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
  43ae9f:	55                   	push   %rbp
  43aea0:	48 89 e5             	mov    %rsp,%rbp
  43aea3:	53                   	push   %rbx
  43aea4:	48 83 ec 18          	sub    $0x18,%rsp
  43aea8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  43aeac:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
			std::get<__indices>(
  43aeb0:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  43aeb4:	48 89 c7             	mov    %rax,%rdi
  43aeb7:	e8 c7 ff ff ff       	callq  43ae83 <std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>&& std::forward<std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>&&>(std::remove_reference<std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>&&>::type&)>
  43aebc:	48 89 c7             	mov    %rax,%rdi
  43aebf:	e8 7d ff ff ff       	callq  43ae41 <std::variant_alternative<0ul, std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> >::type&& std::get<0ul, x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>(std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>&&)>
  43aec4:	48 89 c3             	mov    %rax,%rbx
	return __invoke(std::forward<_Visitor>(__visitor),
  43aec7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  43aecb:	48 89 c7             	mov    %rax,%rdi
  43aece:	e8 be ff ff ff       	callq  43ae91 <x666::ParserVisitor&& std::forward<x666::ParserVisitor&&>(std::remove_reference<x666::ParserVisitor&&>::type&)>
			    std::forward<_Variants>(__vars))...);
  43aed3:	48 89 de             	mov    %rbx,%rsi
  43aed6:	48 89 c7             	mov    %rax,%rdi
  43aed9:	e8 e6 1a 00 00       	callq  43c9c4 <std::__invoke_result<x666::ParserVisitor, x666::Identifier>::type std::__invoke<x666::ParserVisitor, x666::Identifier>(x666::ParserVisitor&&, x666::Identifier&&)>
      }
  43aede:	48 83 c4 18          	add    $0x18,%rsp
  43aee2:	5b                   	pop    %rbx
  43aee3:	5d                   	pop    %rbp
  43aee4:	c3                   	retq   

000000000043aee5 <std::__detail::__variant::_Variadic_union<x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>&& std::forward<std::__detail::__variant::_Variadic_union<x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> >(std::remove_reference<std::__detail::__variant::_Variadic_union<x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> >::type&)>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
  43aee5:	55                   	push   %rbp
  43aee6:	48 89 e5             	mov    %rsp,%rbp
  43aee9:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<_Tp&&>(__t); }
  43aeed:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43aef1:	5d                   	pop    %rbp
  43aef2:	c3                   	retq   

000000000043aef3 <decltype(auto) std::__detail::__variant::__get<std::__detail::__variant::_Variadic_union<x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> >(std::in_place_index_t<0ul>, std::__detail::__variant::_Variadic_union<x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>&&)>:
    constexpr decltype(auto) __get(in_place_index_t<0>, _Union&& __u)
  43aef3:	55                   	push   %rbp
  43aef4:	48 89 e5             	mov    %rsp,%rbp
  43aef7:	48 83 ec 10          	sub    $0x10,%rsp
  43aefb:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return std::forward<_Union>(__u)._M_first._M_get(); }
  43aeff:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43af03:	48 89 c7             	mov    %rax,%rdi
  43af06:	e8 da ff ff ff       	callq  43aee5 <std::__detail::__variant::_Variadic_union<x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>&& std::forward<std::__detail::__variant::_Variadic_union<x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> >(std::remove_reference<std::__detail::__variant::_Variadic_union<x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> >::type&)>
  43af0b:	48 89 c7             	mov    %rax,%rdi
  43af0e:	e8 fd 1a 00 00       	callq  43ca10 <std::__detail::__variant::_Uninitialized<x666::StringLiteral, false>::_M_get() &&>
  43af13:	c9                   	leaveq 
  43af14:	c3                   	retq   

000000000043af15 <decltype(auto) std::__detail::__variant::__get<1ul, std::__detail::__variant::_Variadic_union<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> >(std::in_place_index_t<1ul>, std::__detail::__variant::_Variadic_union<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>&&)>:
    constexpr decltype(auto) __get(in_place_index_t<_Np>, _Union&& __u)
  43af15:	55                   	push   %rbp
  43af16:	48 89 e5             	mov    %rsp,%rbp
  43af19:	53                   	push   %rbx
  43af1a:	48 83 ec 18          	sub    $0x18,%rsp
  43af1e:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    { return __get(in_place_index<_Np-1>, std::forward<_Union>(__u)._M_rest); }
  43af22:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  43af26:	48 89 c7             	mov    %rax,%rdi
  43af29:	e8 b3 fe ff ff       	callq  43ade1 <std::__detail::__variant::_Variadic_union<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>&& std::forward<std::__detail::__variant::_Variadic_union<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> >(std::remove_reference<std::__detail::__variant::_Variadic_union<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> >::type&)>
  43af2e:	48 83 ec 08          	sub    $0x8,%rsp
  43af32:	53                   	push   %rbx
  43af33:	48 89 c7             	mov    %rax,%rdi
  43af36:	e8 b8 ff ff ff       	callq  43aef3 <decltype(auto) std::__detail::__variant::__get<std::__detail::__variant::_Variadic_union<x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> >(std::in_place_index_t<0ul>, std::__detail::__variant::_Variadic_union<x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>&&)>
  43af3b:	48 83 c4 10          	add    $0x10,%rsp
  43af3f:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  43af43:	c9                   	leaveq 
  43af44:	c3                   	retq   

000000000043af45 <decltype(auto) std::__detail::__variant::__get<1ul, std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> >(std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>&&)>:
    constexpr decltype(auto) __get(_Variant&& __v)
  43af45:	55                   	push   %rbp
  43af46:	48 89 e5             	mov    %rsp,%rbp
  43af49:	53                   	push   %rbx
  43af4a:	48 83 ec 18          	sub    $0x18,%rsp
  43af4e:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
      return __get(std::in_place_index<_Np>, std::forward<_Variant>(__v)._M_u);
  43af52:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  43af56:	48 89 c7             	mov    %rax,%rdi
  43af59:	e8 67 fe ff ff       	callq  43adc5 <std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>&& std::forward<std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> >(std::remove_reference<std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> >::type&)>
  43af5e:	48 83 ec 08          	sub    $0x8,%rsp
  43af62:	53                   	push   %rbx
  43af63:	48 89 c7             	mov    %rax,%rdi
  43af66:	e8 aa ff ff ff       	callq  43af15 <decltype(auto) std::__detail::__variant::__get<1ul, std::__detail::__variant::_Variadic_union<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> >(std::in_place_index_t<1ul>, std::__detail::__variant::_Variadic_union<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>&&)>
  43af6b:	48 83 c4 10          	add    $0x10,%rsp
    }
  43af6f:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  43af73:	c9                   	leaveq 
  43af74:	c3                   	retq   

000000000043af75 <std::variant_alternative<1ul, std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> >::type&& std::get<1ul, x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>(std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>&&)>:
    get(variant<_Types...>&& __v)
  43af75:	55                   	push   %rbp
  43af76:	48 89 e5             	mov    %rsp,%rbp
  43af79:	48 83 ec 10          	sub    $0x10,%rsp
  43af7d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      if (__v.index() != _Np)
  43af81:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43af85:	48 89 c7             	mov    %rax,%rdi
  43af88:	e8 ad fb ff ff       	callq  43ab3a <std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>::index() const>
  43af8d:	48 83 f8 01          	cmp    $0x1,%rax
  43af91:	0f 95 c0             	setne  %al
  43af94:	84 c0                	test   %al,%al
  43af96:	74 0a                	je     43afa2 <std::variant_alternative<1ul, std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> >::type&& std::get<1ul, x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>(std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>&&)+0x2d>
	__throw_bad_variant_access("Unexpected index");
  43af98:	bf 2c 47 44 00       	mov    $0x44472c,%edi
  43af9d:	e8 4b e7 ff ff       	callq  4396ed <std::__throw_bad_variant_access(char const*)>
      return __detail::__variant::__get<_Np>(std::move(__v));
  43afa2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43afa6:	48 89 c7             	mov    %rax,%rdi
  43afa9:	e8 d3 fd ff ff       	callq  43ad81 <std::remove_reference<std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>&>::type&& std::move<std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>&>(std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>&)>
  43afae:	48 89 c7             	mov    %rax,%rdi
  43afb1:	e8 8f ff ff ff       	callq  43af45 <decltype(auto) std::__detail::__variant::__get<1ul, std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> >(std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>&&)>
    }
  43afb6:	c9                   	leaveq 
  43afb7:	c3                   	retq   

000000000043afb8 <std::__detail::__variant::__gen_vtable_impl<std::__detail::__variant::_Multi_array<bool (*)(x666::ParserVisitor&&, std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>&&)>, std::tuple<std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>&&>, std::integer_sequence<unsigned long, 1ul> >::__visit_invoke(x666::ParserVisitor&&, std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>&&)>:
      static constexpr __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
  43afb8:	55                   	push   %rbp
  43afb9:	48 89 e5             	mov    %rsp,%rbp
  43afbc:	53                   	push   %rbx
  43afbd:	48 83 ec 18          	sub    $0x18,%rsp
  43afc1:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  43afc5:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
			std::get<__indices>(
  43afc9:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  43afcd:	48 89 c7             	mov    %rax,%rdi
  43afd0:	e8 ae fe ff ff       	callq  43ae83 <std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>&& std::forward<std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>&&>(std::remove_reference<std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>&&>::type&)>
  43afd5:	48 89 c7             	mov    %rax,%rdi
  43afd8:	e8 98 ff ff ff       	callq  43af75 <std::variant_alternative<1ul, std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> >::type&& std::get<1ul, x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>(std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>&&)>
  43afdd:	48 89 c3             	mov    %rax,%rbx
	return __invoke(std::forward<_Visitor>(__visitor),
  43afe0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  43afe4:	48 89 c7             	mov    %rax,%rdi
  43afe7:	e8 a5 fe ff ff       	callq  43ae91 <x666::ParserVisitor&& std::forward<x666::ParserVisitor&&>(std::remove_reference<x666::ParserVisitor&&>::type&)>
			    std::forward<_Variants>(__vars))...);
  43afec:	48 89 de             	mov    %rbx,%rsi
  43afef:	48 89 c7             	mov    %rax,%rdi
  43aff2:	e8 3b 1a 00 00       	callq  43ca32 <std::__invoke_result<x666::ParserVisitor, x666::StringLiteral>::type std::__invoke<x666::ParserVisitor, x666::StringLiteral>(x666::ParserVisitor&&, x666::StringLiteral&&)>
      }
  43aff7:	48 83 c4 18          	add    $0x18,%rsp
  43affb:	5b                   	pop    %rbx
  43affc:	5d                   	pop    %rbp
  43affd:	c3                   	retq   

000000000043affe <std::__detail::__variant::_Variadic_union<x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>&& std::forward<std::__detail::__variant::_Variadic_union<x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> >(std::remove_reference<std::__detail::__variant::_Variadic_union<x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> >::type&)>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
  43affe:	55                   	push   %rbp
  43afff:	48 89 e5             	mov    %rsp,%rbp
  43b002:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<_Tp&&>(__t); }
  43b006:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43b00a:	5d                   	pop    %rbp
  43b00b:	c3                   	retq   

000000000043b00c <decltype(auto) std::__detail::__variant::__get<std::__detail::__variant::_Variadic_union<x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> >(std::in_place_index_t<0ul>, std::__detail::__variant::_Variadic_union<x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>&&)>:
    constexpr decltype(auto) __get(in_place_index_t<0>, _Union&& __u)
  43b00c:	55                   	push   %rbp
  43b00d:	48 89 e5             	mov    %rsp,%rbp
  43b010:	48 83 ec 10          	sub    $0x10,%rsp
  43b014:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return std::forward<_Union>(__u)._M_first._M_get(); }
  43b018:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43b01c:	48 89 c7             	mov    %rax,%rdi
  43b01f:	e8 da ff ff ff       	callq  43affe <std::__detail::__variant::_Variadic_union<x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>&& std::forward<std::__detail::__variant::_Variadic_union<x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> >(std::remove_reference<std::__detail::__variant::_Variadic_union<x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> >::type&)>
  43b024:	48 89 c7             	mov    %rax,%rdi
  43b027:	e8 52 1a 00 00       	callq  43ca7e <std::__detail::__variant::_Uninitialized<x666::IntLiteral, false>::_M_get() &&>
  43b02c:	c9                   	leaveq 
  43b02d:	c3                   	retq   

000000000043b02e <decltype(auto) std::__detail::__variant::__get<1ul, std::__detail::__variant::_Variadic_union<x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> >(std::in_place_index_t<1ul>, std::__detail::__variant::_Variadic_union<x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>&&)>:
    constexpr decltype(auto) __get(in_place_index_t<_Np>, _Union&& __u)
  43b02e:	55                   	push   %rbp
  43b02f:	48 89 e5             	mov    %rsp,%rbp
  43b032:	53                   	push   %rbx
  43b033:	48 83 ec 18          	sub    $0x18,%rsp
  43b037:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    { return __get(in_place_index<_Np-1>, std::forward<_Union>(__u)._M_rest); }
  43b03b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  43b03f:	48 89 c7             	mov    %rax,%rdi
  43b042:	e8 9e fe ff ff       	callq  43aee5 <std::__detail::__variant::_Variadic_union<x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>&& std::forward<std::__detail::__variant::_Variadic_union<x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> >(std::remove_reference<std::__detail::__variant::_Variadic_union<x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> >::type&)>
  43b047:	48 83 ec 08          	sub    $0x8,%rsp
  43b04b:	53                   	push   %rbx
  43b04c:	48 89 c7             	mov    %rax,%rdi
  43b04f:	e8 b8 ff ff ff       	callq  43b00c <decltype(auto) std::__detail::__variant::__get<std::__detail::__variant::_Variadic_union<x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> >(std::in_place_index_t<0ul>, std::__detail::__variant::_Variadic_union<x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>&&)>
  43b054:	48 83 c4 10          	add    $0x10,%rsp
  43b058:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  43b05c:	c9                   	leaveq 
  43b05d:	c3                   	retq   

000000000043b05e <decltype(auto) std::__detail::__variant::__get<2ul, std::__detail::__variant::_Variadic_union<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> >(std::in_place_index_t<2ul>, std::__detail::__variant::_Variadic_union<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>&&)>:
    constexpr decltype(auto) __get(in_place_index_t<_Np>, _Union&& __u)
  43b05e:	55                   	push   %rbp
  43b05f:	48 89 e5             	mov    %rsp,%rbp
  43b062:	53                   	push   %rbx
  43b063:	48 83 ec 18          	sub    $0x18,%rsp
  43b067:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    { return __get(in_place_index<_Np-1>, std::forward<_Union>(__u)._M_rest); }
  43b06b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  43b06f:	48 89 c7             	mov    %rax,%rdi
  43b072:	e8 6a fd ff ff       	callq  43ade1 <std::__detail::__variant::_Variadic_union<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>&& std::forward<std::__detail::__variant::_Variadic_union<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> >(std::remove_reference<std::__detail::__variant::_Variadic_union<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> >::type&)>
  43b077:	48 83 ec 08          	sub    $0x8,%rsp
  43b07b:	53                   	push   %rbx
  43b07c:	48 89 c7             	mov    %rax,%rdi
  43b07f:	e8 aa ff ff ff       	callq  43b02e <decltype(auto) std::__detail::__variant::__get<1ul, std::__detail::__variant::_Variadic_union<x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> >(std::in_place_index_t<1ul>, std::__detail::__variant::_Variadic_union<x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>&&)>
  43b084:	48 83 c4 10          	add    $0x10,%rsp
  43b088:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  43b08c:	c9                   	leaveq 
  43b08d:	c3                   	retq   

000000000043b08e <decltype(auto) std::__detail::__variant::__get<2ul, std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> >(std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>&&)>:
    constexpr decltype(auto) __get(_Variant&& __v)
  43b08e:	55                   	push   %rbp
  43b08f:	48 89 e5             	mov    %rsp,%rbp
  43b092:	53                   	push   %rbx
  43b093:	48 83 ec 18          	sub    $0x18,%rsp
  43b097:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
      return __get(std::in_place_index<_Np>, std::forward<_Variant>(__v)._M_u);
  43b09b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  43b09f:	48 89 c7             	mov    %rax,%rdi
  43b0a2:	e8 1e fd ff ff       	callq  43adc5 <std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>&& std::forward<std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> >(std::remove_reference<std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> >::type&)>
  43b0a7:	48 83 ec 08          	sub    $0x8,%rsp
  43b0ab:	53                   	push   %rbx
  43b0ac:	48 89 c7             	mov    %rax,%rdi
  43b0af:	e8 aa ff ff ff       	callq  43b05e <decltype(auto) std::__detail::__variant::__get<2ul, std::__detail::__variant::_Variadic_union<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> >(std::in_place_index_t<2ul>, std::__detail::__variant::_Variadic_union<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>&&)>
  43b0b4:	48 83 c4 10          	add    $0x10,%rsp
    }
  43b0b8:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  43b0bc:	c9                   	leaveq 
  43b0bd:	c3                   	retq   

000000000043b0be <std::variant_alternative<2ul, std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> >::type&& std::get<2ul, x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>(std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>&&)>:
    get(variant<_Types...>&& __v)
  43b0be:	55                   	push   %rbp
  43b0bf:	48 89 e5             	mov    %rsp,%rbp
  43b0c2:	48 83 ec 10          	sub    $0x10,%rsp
  43b0c6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      if (__v.index() != _Np)
  43b0ca:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43b0ce:	48 89 c7             	mov    %rax,%rdi
  43b0d1:	e8 64 fa ff ff       	callq  43ab3a <std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>::index() const>
  43b0d6:	48 83 f8 02          	cmp    $0x2,%rax
  43b0da:	0f 95 c0             	setne  %al
  43b0dd:	84 c0                	test   %al,%al
  43b0df:	74 0a                	je     43b0eb <std::variant_alternative<2ul, std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> >::type&& std::get<2ul, x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>(std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>&&)+0x2d>
	__throw_bad_variant_access("Unexpected index");
  43b0e1:	bf 2c 47 44 00       	mov    $0x44472c,%edi
  43b0e6:	e8 02 e6 ff ff       	callq  4396ed <std::__throw_bad_variant_access(char const*)>
      return __detail::__variant::__get<_Np>(std::move(__v));
  43b0eb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43b0ef:	48 89 c7             	mov    %rax,%rdi
  43b0f2:	e8 8a fc ff ff       	callq  43ad81 <std::remove_reference<std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>&>::type&& std::move<std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>&>(std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>&)>
  43b0f7:	48 89 c7             	mov    %rax,%rdi
  43b0fa:	e8 8f ff ff ff       	callq  43b08e <decltype(auto) std::__detail::__variant::__get<2ul, std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> >(std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>&&)>
    }
  43b0ff:	c9                   	leaveq 
  43b100:	c3                   	retq   

000000000043b101 <std::__detail::__variant::__gen_vtable_impl<std::__detail::__variant::_Multi_array<bool (*)(x666::ParserVisitor&&, std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>&&)>, std::tuple<std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>&&>, std::integer_sequence<unsigned long, 2ul> >::__visit_invoke(x666::ParserVisitor&&, std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>&&)>:
      static constexpr __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
  43b101:	55                   	push   %rbp
  43b102:	48 89 e5             	mov    %rsp,%rbp
  43b105:	53                   	push   %rbx
  43b106:	48 83 ec 18          	sub    $0x18,%rsp
  43b10a:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  43b10e:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
			std::get<__indices>(
  43b112:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  43b116:	48 89 c7             	mov    %rax,%rdi
  43b119:	e8 65 fd ff ff       	callq  43ae83 <std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>&& std::forward<std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>&&>(std::remove_reference<std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>&&>::type&)>
  43b11e:	48 89 c7             	mov    %rax,%rdi
  43b121:	e8 98 ff ff ff       	callq  43b0be <std::variant_alternative<2ul, std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> >::type&& std::get<2ul, x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>(std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>&&)>
  43b126:	48 89 c3             	mov    %rax,%rbx
	return __invoke(std::forward<_Visitor>(__visitor),
  43b129:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  43b12d:	48 89 c7             	mov    %rax,%rdi
  43b130:	e8 5c fd ff ff       	callq  43ae91 <x666::ParserVisitor&& std::forward<x666::ParserVisitor&&>(std::remove_reference<x666::ParserVisitor&&>::type&)>
			    std::forward<_Variants>(__vars))...);
  43b135:	48 89 de             	mov    %rbx,%rsi
  43b138:	48 89 c7             	mov    %rax,%rdi
  43b13b:	e8 60 19 00 00       	callq  43caa0 <std::__invoke_result<x666::ParserVisitor, x666::IntLiteral>::type std::__invoke<x666::ParserVisitor, x666::IntLiteral>(x666::ParserVisitor&&, x666::IntLiteral&&)>
      }
  43b140:	48 83 c4 18          	add    $0x18,%rsp
  43b144:	5b                   	pop    %rbx
  43b145:	5d                   	pop    %rbp
  43b146:	c3                   	retq   

000000000043b147 <std::__detail::__variant::_Variadic_union<x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>&& std::forward<std::__detail::__variant::_Variadic_union<x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> >(std::remove_reference<std::__detail::__variant::_Variadic_union<x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> >::type&)>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
  43b147:	55                   	push   %rbp
  43b148:	48 89 e5             	mov    %rsp,%rbp
  43b14b:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<_Tp&&>(__t); }
  43b14f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43b153:	5d                   	pop    %rbp
  43b154:	c3                   	retq   

000000000043b155 <decltype(auto) std::__detail::__variant::__get<std::__detail::__variant::_Variadic_union<x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> >(std::in_place_index_t<0ul>, std::__detail::__variant::_Variadic_union<x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>&&)>:
    constexpr decltype(auto) __get(in_place_index_t<0>, _Union&& __u)
  43b155:	55                   	push   %rbp
  43b156:	48 89 e5             	mov    %rsp,%rbp
  43b159:	48 83 ec 10          	sub    $0x10,%rsp
  43b15d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return std::forward<_Union>(__u)._M_first._M_get(); }
  43b161:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43b165:	48 89 c7             	mov    %rax,%rdi
  43b168:	e8 da ff ff ff       	callq  43b147 <std::__detail::__variant::_Variadic_union<x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>&& std::forward<std::__detail::__variant::_Variadic_union<x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> >(std::remove_reference<std::__detail::__variant::_Variadic_union<x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> >::type&)>
  43b16d:	48 89 c7             	mov    %rax,%rdi
  43b170:	e8 77 19 00 00       	callq  43caec <std::__detail::__variant::_Uninitialized<x666::Operator, true>::_M_get() &&>
  43b175:	c9                   	leaveq 
  43b176:	c3                   	retq   

000000000043b177 <decltype(auto) std::__detail::__variant::__get<1ul, std::__detail::__variant::_Variadic_union<x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> >(std::in_place_index_t<1ul>, std::__detail::__variant::_Variadic_union<x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>&&)>:
    constexpr decltype(auto) __get(in_place_index_t<_Np>, _Union&& __u)
  43b177:	55                   	push   %rbp
  43b178:	48 89 e5             	mov    %rsp,%rbp
  43b17b:	53                   	push   %rbx
  43b17c:	48 83 ec 18          	sub    $0x18,%rsp
  43b180:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    { return __get(in_place_index<_Np-1>, std::forward<_Union>(__u)._M_rest); }
  43b184:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  43b188:	48 89 c7             	mov    %rax,%rdi
  43b18b:	e8 6e fe ff ff       	callq  43affe <std::__detail::__variant::_Variadic_union<x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>&& std::forward<std::__detail::__variant::_Variadic_union<x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> >(std::remove_reference<std::__detail::__variant::_Variadic_union<x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> >::type&)>
  43b190:	48 83 ec 08          	sub    $0x8,%rsp
  43b194:	53                   	push   %rbx
  43b195:	48 89 c7             	mov    %rax,%rdi
  43b198:	e8 b8 ff ff ff       	callq  43b155 <decltype(auto) std::__detail::__variant::__get<std::__detail::__variant::_Variadic_union<x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> >(std::in_place_index_t<0ul>, std::__detail::__variant::_Variadic_union<x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>&&)>
  43b19d:	48 83 c4 10          	add    $0x10,%rsp
  43b1a1:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  43b1a5:	c9                   	leaveq 
  43b1a6:	c3                   	retq   

000000000043b1a7 <decltype(auto) std::__detail::__variant::__get<2ul, std::__detail::__variant::_Variadic_union<x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> >(std::in_place_index_t<2ul>, std::__detail::__variant::_Variadic_union<x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>&&)>:
    constexpr decltype(auto) __get(in_place_index_t<_Np>, _Union&& __u)
  43b1a7:	55                   	push   %rbp
  43b1a8:	48 89 e5             	mov    %rsp,%rbp
  43b1ab:	53                   	push   %rbx
  43b1ac:	48 83 ec 18          	sub    $0x18,%rsp
  43b1b0:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    { return __get(in_place_index<_Np-1>, std::forward<_Union>(__u)._M_rest); }
  43b1b4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  43b1b8:	48 89 c7             	mov    %rax,%rdi
  43b1bb:	e8 25 fd ff ff       	callq  43aee5 <std::__detail::__variant::_Variadic_union<x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>&& std::forward<std::__detail::__variant::_Variadic_union<x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> >(std::remove_reference<std::__detail::__variant::_Variadic_union<x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> >::type&)>
  43b1c0:	48 83 ec 08          	sub    $0x8,%rsp
  43b1c4:	53                   	push   %rbx
  43b1c5:	48 89 c7             	mov    %rax,%rdi
  43b1c8:	e8 aa ff ff ff       	callq  43b177 <decltype(auto) std::__detail::__variant::__get<1ul, std::__detail::__variant::_Variadic_union<x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> >(std::in_place_index_t<1ul>, std::__detail::__variant::_Variadic_union<x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>&&)>
  43b1cd:	48 83 c4 10          	add    $0x10,%rsp
  43b1d1:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  43b1d5:	c9                   	leaveq 
  43b1d6:	c3                   	retq   

000000000043b1d7 <decltype(auto) std::__detail::__variant::__get<3ul, std::__detail::__variant::_Variadic_union<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> >(std::in_place_index_t<3ul>, std::__detail::__variant::_Variadic_union<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>&&)>:
    constexpr decltype(auto) __get(in_place_index_t<_Np>, _Union&& __u)
  43b1d7:	55                   	push   %rbp
  43b1d8:	48 89 e5             	mov    %rsp,%rbp
  43b1db:	53                   	push   %rbx
  43b1dc:	48 83 ec 18          	sub    $0x18,%rsp
  43b1e0:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    { return __get(in_place_index<_Np-1>, std::forward<_Union>(__u)._M_rest); }
  43b1e4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  43b1e8:	48 89 c7             	mov    %rax,%rdi
  43b1eb:	e8 f1 fb ff ff       	callq  43ade1 <std::__detail::__variant::_Variadic_union<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>&& std::forward<std::__detail::__variant::_Variadic_union<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> >(std::remove_reference<std::__detail::__variant::_Variadic_union<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> >::type&)>
  43b1f0:	48 83 ec 08          	sub    $0x8,%rsp
  43b1f4:	53                   	push   %rbx
  43b1f5:	48 89 c7             	mov    %rax,%rdi
  43b1f8:	e8 aa ff ff ff       	callq  43b1a7 <decltype(auto) std::__detail::__variant::__get<2ul, std::__detail::__variant::_Variadic_union<x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> >(std::in_place_index_t<2ul>, std::__detail::__variant::_Variadic_union<x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>&&)>
  43b1fd:	48 83 c4 10          	add    $0x10,%rsp
  43b201:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  43b205:	c9                   	leaveq 
  43b206:	c3                   	retq   

000000000043b207 <decltype(auto) std::__detail::__variant::__get<3ul, std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> >(std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>&&)>:
    constexpr decltype(auto) __get(_Variant&& __v)
  43b207:	55                   	push   %rbp
  43b208:	48 89 e5             	mov    %rsp,%rbp
  43b20b:	53                   	push   %rbx
  43b20c:	48 83 ec 18          	sub    $0x18,%rsp
  43b210:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
      return __get(std::in_place_index<_Np>, std::forward<_Variant>(__v)._M_u);
  43b214:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  43b218:	48 89 c7             	mov    %rax,%rdi
  43b21b:	e8 a5 fb ff ff       	callq  43adc5 <std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>&& std::forward<std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> >(std::remove_reference<std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> >::type&)>
  43b220:	48 83 ec 08          	sub    $0x8,%rsp
  43b224:	53                   	push   %rbx
  43b225:	48 89 c7             	mov    %rax,%rdi
  43b228:	e8 aa ff ff ff       	callq  43b1d7 <decltype(auto) std::__detail::__variant::__get<3ul, std::__detail::__variant::_Variadic_union<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> >(std::in_place_index_t<3ul>, std::__detail::__variant::_Variadic_union<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>&&)>
  43b22d:	48 83 c4 10          	add    $0x10,%rsp
    }
  43b231:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  43b235:	c9                   	leaveq 
  43b236:	c3                   	retq   

000000000043b237 <std::variant_alternative<3ul, std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> >::type&& std::get<3ul, x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>(std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>&&)>:
    get(variant<_Types...>&& __v)
  43b237:	55                   	push   %rbp
  43b238:	48 89 e5             	mov    %rsp,%rbp
  43b23b:	48 83 ec 10          	sub    $0x10,%rsp
  43b23f:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      if (__v.index() != _Np)
  43b243:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43b247:	48 89 c7             	mov    %rax,%rdi
  43b24a:	e8 eb f8 ff ff       	callq  43ab3a <std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>::index() const>
  43b24f:	48 83 f8 03          	cmp    $0x3,%rax
  43b253:	0f 95 c0             	setne  %al
  43b256:	84 c0                	test   %al,%al
  43b258:	74 0a                	je     43b264 <std::variant_alternative<3ul, std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> >::type&& std::get<3ul, x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>(std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>&&)+0x2d>
	__throw_bad_variant_access("Unexpected index");
  43b25a:	bf 2c 47 44 00       	mov    $0x44472c,%edi
  43b25f:	e8 89 e4 ff ff       	callq  4396ed <std::__throw_bad_variant_access(char const*)>
      return __detail::__variant::__get<_Np>(std::move(__v));
  43b264:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43b268:	48 89 c7             	mov    %rax,%rdi
  43b26b:	e8 11 fb ff ff       	callq  43ad81 <std::remove_reference<std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>&>::type&& std::move<std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>&>(std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>&)>
  43b270:	48 89 c7             	mov    %rax,%rdi
  43b273:	e8 8f ff ff ff       	callq  43b207 <decltype(auto) std::__detail::__variant::__get<3ul, std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> >(std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>&&)>
    }
  43b278:	c9                   	leaveq 
  43b279:	c3                   	retq   

000000000043b27a <std::__detail::__variant::__gen_vtable_impl<std::__detail::__variant::_Multi_array<bool (*)(x666::ParserVisitor&&, std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>&&)>, std::tuple<std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>&&>, std::integer_sequence<unsigned long, 3ul> >::__visit_invoke(x666::ParserVisitor&&, std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>&&)>:
      static constexpr __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
  43b27a:	55                   	push   %rbp
  43b27b:	48 89 e5             	mov    %rsp,%rbp
  43b27e:	53                   	push   %rbx
  43b27f:	48 83 ec 18          	sub    $0x18,%rsp
  43b283:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  43b287:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
			std::get<__indices>(
  43b28b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  43b28f:	48 89 c7             	mov    %rax,%rdi
  43b292:	e8 ec fb ff ff       	callq  43ae83 <std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>&& std::forward<std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>&&>(std::remove_reference<std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>&&>::type&)>
  43b297:	48 89 c7             	mov    %rax,%rdi
  43b29a:	e8 98 ff ff ff       	callq  43b237 <std::variant_alternative<3ul, std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> >::type&& std::get<3ul, x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>(std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>&&)>
  43b29f:	48 89 c3             	mov    %rax,%rbx
	return __invoke(std::forward<_Visitor>(__visitor),
  43b2a2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  43b2a6:	48 89 c7             	mov    %rax,%rdi
  43b2a9:	e8 e3 fb ff ff       	callq  43ae91 <x666::ParserVisitor&& std::forward<x666::ParserVisitor&&>(std::remove_reference<x666::ParserVisitor&&>::type&)>
			    std::forward<_Variants>(__vars))...);
  43b2ae:	48 89 de             	mov    %rbx,%rsi
  43b2b1:	48 89 c7             	mov    %rax,%rdi
  43b2b4:	e8 4d 18 00 00       	callq  43cb06 <std::__invoke_result<x666::ParserVisitor, x666::Operator>::type std::__invoke<x666::ParserVisitor, x666::Operator>(x666::ParserVisitor&&, x666::Operator&&)>
      }
  43b2b9:	48 83 c4 18          	add    $0x18,%rsp
  43b2bd:	5b                   	pop    %rbx
  43b2be:	5d                   	pop    %rbp
  43b2bf:	c3                   	retq   

000000000043b2c0 <std::__detail::__variant::_Variadic_union<x666::Newline, x666::EndOfFile, x666::LexError>&& std::forward<std::__detail::__variant::_Variadic_union<x666::Newline, x666::EndOfFile, x666::LexError> >(std::remove_reference<std::__detail::__variant::_Variadic_union<x666::Newline, x666::EndOfFile, x666::LexError> >::type&)>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
  43b2c0:	55                   	push   %rbp
  43b2c1:	48 89 e5             	mov    %rsp,%rbp
  43b2c4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<_Tp&&>(__t); }
  43b2c8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43b2cc:	5d                   	pop    %rbp
  43b2cd:	c3                   	retq   

000000000043b2ce <decltype(auto) std::__detail::__variant::__get<std::__detail::__variant::_Variadic_union<x666::Newline, x666::EndOfFile, x666::LexError> >(std::in_place_index_t<0ul>, std::__detail::__variant::_Variadic_union<x666::Newline, x666::EndOfFile, x666::LexError>&&)>:
    constexpr decltype(auto) __get(in_place_index_t<0>, _Union&& __u)
  43b2ce:	55                   	push   %rbp
  43b2cf:	48 89 e5             	mov    %rsp,%rbp
  43b2d2:	48 83 ec 10          	sub    $0x10,%rsp
  43b2d6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return std::forward<_Union>(__u)._M_first._M_get(); }
  43b2da:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43b2de:	48 89 c7             	mov    %rax,%rdi
  43b2e1:	e8 da ff ff ff       	callq  43b2c0 <std::__detail::__variant::_Variadic_union<x666::Newline, x666::EndOfFile, x666::LexError>&& std::forward<std::__detail::__variant::_Variadic_union<x666::Newline, x666::EndOfFile, x666::LexError> >(std::remove_reference<std::__detail::__variant::_Variadic_union<x666::Newline, x666::EndOfFile, x666::LexError> >::type&)>
  43b2e6:	48 89 c7             	mov    %rax,%rdi
  43b2e9:	e8 64 18 00 00       	callq  43cb52 <std::__detail::__variant::_Uninitialized<x666::Newline, true>::_M_get() &&>
  43b2ee:	c9                   	leaveq 
  43b2ef:	c3                   	retq   

000000000043b2f0 <decltype(auto) std::__detail::__variant::__get<1ul, std::__detail::__variant::_Variadic_union<x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> >(std::in_place_index_t<1ul>, std::__detail::__variant::_Variadic_union<x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>&&)>:
    constexpr decltype(auto) __get(in_place_index_t<_Np>, _Union&& __u)
  43b2f0:	55                   	push   %rbp
  43b2f1:	48 89 e5             	mov    %rsp,%rbp
  43b2f4:	53                   	push   %rbx
  43b2f5:	48 83 ec 18          	sub    $0x18,%rsp
  43b2f9:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    { return __get(in_place_index<_Np-1>, std::forward<_Union>(__u)._M_rest); }
  43b2fd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  43b301:	48 89 c7             	mov    %rax,%rdi
  43b304:	e8 3e fe ff ff       	callq  43b147 <std::__detail::__variant::_Variadic_union<x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>&& std::forward<std::__detail::__variant::_Variadic_union<x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> >(std::remove_reference<std::__detail::__variant::_Variadic_union<x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> >::type&)>
  43b309:	48 83 ec 08          	sub    $0x8,%rsp
  43b30d:	53                   	push   %rbx
  43b30e:	48 89 c7             	mov    %rax,%rdi
  43b311:	e8 b8 ff ff ff       	callq  43b2ce <decltype(auto) std::__detail::__variant::__get<std::__detail::__variant::_Variadic_union<x666::Newline, x666::EndOfFile, x666::LexError> >(std::in_place_index_t<0ul>, std::__detail::__variant::_Variadic_union<x666::Newline, x666::EndOfFile, x666::LexError>&&)>
  43b316:	48 83 c4 10          	add    $0x10,%rsp
  43b31a:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  43b31e:	c9                   	leaveq 
  43b31f:	c3                   	retq   

000000000043b320 <decltype(auto) std::__detail::__variant::__get<2ul, std::__detail::__variant::_Variadic_union<x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> >(std::in_place_index_t<2ul>, std::__detail::__variant::_Variadic_union<x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>&&)>:
    constexpr decltype(auto) __get(in_place_index_t<_Np>, _Union&& __u)
  43b320:	55                   	push   %rbp
  43b321:	48 89 e5             	mov    %rsp,%rbp
  43b324:	53                   	push   %rbx
  43b325:	48 83 ec 18          	sub    $0x18,%rsp
  43b329:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    { return __get(in_place_index<_Np-1>, std::forward<_Union>(__u)._M_rest); }
  43b32d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  43b331:	48 89 c7             	mov    %rax,%rdi
  43b334:	e8 c5 fc ff ff       	callq  43affe <std::__detail::__variant::_Variadic_union<x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>&& std::forward<std::__detail::__variant::_Variadic_union<x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> >(std::remove_reference<std::__detail::__variant::_Variadic_union<x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> >::type&)>
  43b339:	48 83 ec 08          	sub    $0x8,%rsp
  43b33d:	53                   	push   %rbx
  43b33e:	48 89 c7             	mov    %rax,%rdi
  43b341:	e8 aa ff ff ff       	callq  43b2f0 <decltype(auto) std::__detail::__variant::__get<1ul, std::__detail::__variant::_Variadic_union<x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> >(std::in_place_index_t<1ul>, std::__detail::__variant::_Variadic_union<x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>&&)>
  43b346:	48 83 c4 10          	add    $0x10,%rsp
  43b34a:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  43b34e:	c9                   	leaveq 
  43b34f:	c3                   	retq   

000000000043b350 <decltype(auto) std::__detail::__variant::__get<3ul, std::__detail::__variant::_Variadic_union<x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> >(std::in_place_index_t<3ul>, std::__detail::__variant::_Variadic_union<x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>&&)>:
    constexpr decltype(auto) __get(in_place_index_t<_Np>, _Union&& __u)
  43b350:	55                   	push   %rbp
  43b351:	48 89 e5             	mov    %rsp,%rbp
  43b354:	53                   	push   %rbx
  43b355:	48 83 ec 18          	sub    $0x18,%rsp
  43b359:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    { return __get(in_place_index<_Np-1>, std::forward<_Union>(__u)._M_rest); }
  43b35d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  43b361:	48 89 c7             	mov    %rax,%rdi
  43b364:	e8 7c fb ff ff       	callq  43aee5 <std::__detail::__variant::_Variadic_union<x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>&& std::forward<std::__detail::__variant::_Variadic_union<x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> >(std::remove_reference<std::__detail::__variant::_Variadic_union<x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> >::type&)>
  43b369:	48 83 ec 08          	sub    $0x8,%rsp
  43b36d:	53                   	push   %rbx
  43b36e:	48 89 c7             	mov    %rax,%rdi
  43b371:	e8 aa ff ff ff       	callq  43b320 <decltype(auto) std::__detail::__variant::__get<2ul, std::__detail::__variant::_Variadic_union<x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> >(std::in_place_index_t<2ul>, std::__detail::__variant::_Variadic_union<x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>&&)>
  43b376:	48 83 c4 10          	add    $0x10,%rsp
  43b37a:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  43b37e:	c9                   	leaveq 
  43b37f:	c3                   	retq   

000000000043b380 <decltype(auto) std::__detail::__variant::__get<4ul, std::__detail::__variant::_Variadic_union<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> >(std::in_place_index_t<4ul>, std::__detail::__variant::_Variadic_union<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>&&)>:
    constexpr decltype(auto) __get(in_place_index_t<_Np>, _Union&& __u)
  43b380:	55                   	push   %rbp
  43b381:	48 89 e5             	mov    %rsp,%rbp
  43b384:	53                   	push   %rbx
  43b385:	48 83 ec 18          	sub    $0x18,%rsp
  43b389:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    { return __get(in_place_index<_Np-1>, std::forward<_Union>(__u)._M_rest); }
  43b38d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  43b391:	48 89 c7             	mov    %rax,%rdi
  43b394:	e8 48 fa ff ff       	callq  43ade1 <std::__detail::__variant::_Variadic_union<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>&& std::forward<std::__detail::__variant::_Variadic_union<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> >(std::remove_reference<std::__detail::__variant::_Variadic_union<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> >::type&)>
  43b399:	48 83 ec 08          	sub    $0x8,%rsp
  43b39d:	53                   	push   %rbx
  43b39e:	48 89 c7             	mov    %rax,%rdi
  43b3a1:	e8 aa ff ff ff       	callq  43b350 <decltype(auto) std::__detail::__variant::__get<3ul, std::__detail::__variant::_Variadic_union<x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> >(std::in_place_index_t<3ul>, std::__detail::__variant::_Variadic_union<x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>&&)>
  43b3a6:	48 83 c4 10          	add    $0x10,%rsp
  43b3aa:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  43b3ae:	c9                   	leaveq 
  43b3af:	c3                   	retq   

000000000043b3b0 <decltype(auto) std::__detail::__variant::__get<4ul, std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> >(std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>&&)>:
    constexpr decltype(auto) __get(_Variant&& __v)
  43b3b0:	55                   	push   %rbp
  43b3b1:	48 89 e5             	mov    %rsp,%rbp
  43b3b4:	53                   	push   %rbx
  43b3b5:	48 83 ec 18          	sub    $0x18,%rsp
  43b3b9:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
      return __get(std::in_place_index<_Np>, std::forward<_Variant>(__v)._M_u);
  43b3bd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  43b3c1:	48 89 c7             	mov    %rax,%rdi
  43b3c4:	e8 fc f9 ff ff       	callq  43adc5 <std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>&& std::forward<std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> >(std::remove_reference<std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> >::type&)>
  43b3c9:	48 83 ec 08          	sub    $0x8,%rsp
  43b3cd:	53                   	push   %rbx
  43b3ce:	48 89 c7             	mov    %rax,%rdi
  43b3d1:	e8 aa ff ff ff       	callq  43b380 <decltype(auto) std::__detail::__variant::__get<4ul, std::__detail::__variant::_Variadic_union<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> >(std::in_place_index_t<4ul>, std::__detail::__variant::_Variadic_union<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>&&)>
  43b3d6:	48 83 c4 10          	add    $0x10,%rsp
    }
  43b3da:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  43b3de:	c9                   	leaveq 
  43b3df:	c3                   	retq   

000000000043b3e0 <std::variant_alternative<4ul, std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> >::type&& std::get<4ul, x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>(std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>&&)>:
    get(variant<_Types...>&& __v)
  43b3e0:	55                   	push   %rbp
  43b3e1:	48 89 e5             	mov    %rsp,%rbp
  43b3e4:	48 83 ec 10          	sub    $0x10,%rsp
  43b3e8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      if (__v.index() != _Np)
  43b3ec:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43b3f0:	48 89 c7             	mov    %rax,%rdi
  43b3f3:	e8 42 f7 ff ff       	callq  43ab3a <std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>::index() const>
  43b3f8:	48 83 f8 04          	cmp    $0x4,%rax
  43b3fc:	0f 95 c0             	setne  %al
  43b3ff:	84 c0                	test   %al,%al
  43b401:	74 0a                	je     43b40d <std::variant_alternative<4ul, std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> >::type&& std::get<4ul, x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>(std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>&&)+0x2d>
	__throw_bad_variant_access("Unexpected index");
  43b403:	bf 2c 47 44 00       	mov    $0x44472c,%edi
  43b408:	e8 e0 e2 ff ff       	callq  4396ed <std::__throw_bad_variant_access(char const*)>
      return __detail::__variant::__get<_Np>(std::move(__v));
  43b40d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43b411:	48 89 c7             	mov    %rax,%rdi
  43b414:	e8 68 f9 ff ff       	callq  43ad81 <std::remove_reference<std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>&>::type&& std::move<std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>&>(std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>&)>
  43b419:	48 89 c7             	mov    %rax,%rdi
  43b41c:	e8 8f ff ff ff       	callq  43b3b0 <decltype(auto) std::__detail::__variant::__get<4ul, std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> >(std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>&&)>
    }
  43b421:	c9                   	leaveq 
  43b422:	c3                   	retq   

000000000043b423 <std::__detail::__variant::__gen_vtable_impl<std::__detail::__variant::_Multi_array<bool (*)(x666::ParserVisitor&&, std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>&&)>, std::tuple<std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>&&>, std::integer_sequence<unsigned long, 4ul> >::__visit_invoke(x666::ParserVisitor&&, std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>&&)>:
      static constexpr __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
  43b423:	55                   	push   %rbp
  43b424:	48 89 e5             	mov    %rsp,%rbp
  43b427:	53                   	push   %rbx
  43b428:	48 83 ec 18          	sub    $0x18,%rsp
  43b42c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  43b430:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
			std::get<__indices>(
  43b434:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  43b438:	48 89 c7             	mov    %rax,%rdi
  43b43b:	e8 43 fa ff ff       	callq  43ae83 <std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>&& std::forward<std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>&&>(std::remove_reference<std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>&&>::type&)>
  43b440:	48 89 c7             	mov    %rax,%rdi
  43b443:	e8 98 ff ff ff       	callq  43b3e0 <std::variant_alternative<4ul, std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> >::type&& std::get<4ul, x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>(std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>&&)>
  43b448:	48 89 c3             	mov    %rax,%rbx
	return __invoke(std::forward<_Visitor>(__visitor),
  43b44b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  43b44f:	48 89 c7             	mov    %rax,%rdi
  43b452:	e8 3a fa ff ff       	callq  43ae91 <x666::ParserVisitor&& std::forward<x666::ParserVisitor&&>(std::remove_reference<x666::ParserVisitor&&>::type&)>
			    std::forward<_Variants>(__vars))...);
  43b457:	48 89 de             	mov    %rbx,%rsi
  43b45a:	48 89 c7             	mov    %rax,%rdi
  43b45d:	e8 0a 17 00 00       	callq  43cb6c <std::__invoke_result<x666::ParserVisitor, x666::Newline>::type std::__invoke<x666::ParserVisitor, x666::Newline>(x666::ParserVisitor&&, x666::Newline&&)>
      }
  43b462:	48 83 c4 18          	add    $0x18,%rsp
  43b466:	5b                   	pop    %rbx
  43b467:	5d                   	pop    %rbp
  43b468:	c3                   	retq   

000000000043b469 <std::__detail::__variant::_Variadic_union<x666::EndOfFile, x666::LexError>&& std::forward<std::__detail::__variant::_Variadic_union<x666::EndOfFile, x666::LexError> >(std::remove_reference<std::__detail::__variant::_Variadic_union<x666::EndOfFile, x666::LexError> >::type&)>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
  43b469:	55                   	push   %rbp
  43b46a:	48 89 e5             	mov    %rsp,%rbp
  43b46d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<_Tp&&>(__t); }
  43b471:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43b475:	5d                   	pop    %rbp
  43b476:	c3                   	retq   

000000000043b477 <decltype(auto) std::__detail::__variant::__get<std::__detail::__variant::_Variadic_union<x666::EndOfFile, x666::LexError> >(std::in_place_index_t<0ul>, std::__detail::__variant::_Variadic_union<x666::EndOfFile, x666::LexError>&&)>:
    constexpr decltype(auto) __get(in_place_index_t<0>, _Union&& __u)
  43b477:	55                   	push   %rbp
  43b478:	48 89 e5             	mov    %rsp,%rbp
  43b47b:	48 83 ec 10          	sub    $0x10,%rsp
  43b47f:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return std::forward<_Union>(__u)._M_first._M_get(); }
  43b483:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43b487:	48 89 c7             	mov    %rax,%rdi
  43b48a:	e8 da ff ff ff       	callq  43b469 <std::__detail::__variant::_Variadic_union<x666::EndOfFile, x666::LexError>&& std::forward<std::__detail::__variant::_Variadic_union<x666::EndOfFile, x666::LexError> >(std::remove_reference<std::__detail::__variant::_Variadic_union<x666::EndOfFile, x666::LexError> >::type&)>
  43b48f:	48 89 c7             	mov    %rax,%rdi
  43b492:	e8 21 17 00 00       	callq  43cbb8 <std::__detail::__variant::_Uninitialized<x666::EndOfFile, true>::_M_get() &&>
  43b497:	c9                   	leaveq 
  43b498:	c3                   	retq   

000000000043b499 <decltype(auto) std::__detail::__variant::__get<1ul, std::__detail::__variant::_Variadic_union<x666::Newline, x666::EndOfFile, x666::LexError> >(std::in_place_index_t<1ul>, std::__detail::__variant::_Variadic_union<x666::Newline, x666::EndOfFile, x666::LexError>&&)>:
    constexpr decltype(auto) __get(in_place_index_t<_Np>, _Union&& __u)
  43b499:	55                   	push   %rbp
  43b49a:	48 89 e5             	mov    %rsp,%rbp
  43b49d:	53                   	push   %rbx
  43b49e:	48 83 ec 18          	sub    $0x18,%rsp
  43b4a2:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    { return __get(in_place_index<_Np-1>, std::forward<_Union>(__u)._M_rest); }
  43b4a6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  43b4aa:	48 89 c7             	mov    %rax,%rdi
  43b4ad:	e8 0e fe ff ff       	callq  43b2c0 <std::__detail::__variant::_Variadic_union<x666::Newline, x666::EndOfFile, x666::LexError>&& std::forward<std::__detail::__variant::_Variadic_union<x666::Newline, x666::EndOfFile, x666::LexError> >(std::remove_reference<std::__detail::__variant::_Variadic_union<x666::Newline, x666::EndOfFile, x666::LexError> >::type&)>
  43b4b2:	48 83 ec 08          	sub    $0x8,%rsp
  43b4b6:	53                   	push   %rbx
  43b4b7:	48 89 c7             	mov    %rax,%rdi
  43b4ba:	e8 b8 ff ff ff       	callq  43b477 <decltype(auto) std::__detail::__variant::__get<std::__detail::__variant::_Variadic_union<x666::EndOfFile, x666::LexError> >(std::in_place_index_t<0ul>, std::__detail::__variant::_Variadic_union<x666::EndOfFile, x666::LexError>&&)>
  43b4bf:	48 83 c4 10          	add    $0x10,%rsp
  43b4c3:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  43b4c7:	c9                   	leaveq 
  43b4c8:	c3                   	retq   

000000000043b4c9 <decltype(auto) std::__detail::__variant::__get<2ul, std::__detail::__variant::_Variadic_union<x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> >(std::in_place_index_t<2ul>, std::__detail::__variant::_Variadic_union<x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>&&)>:
    constexpr decltype(auto) __get(in_place_index_t<_Np>, _Union&& __u)
  43b4c9:	55                   	push   %rbp
  43b4ca:	48 89 e5             	mov    %rsp,%rbp
  43b4cd:	53                   	push   %rbx
  43b4ce:	48 83 ec 18          	sub    $0x18,%rsp
  43b4d2:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    { return __get(in_place_index<_Np-1>, std::forward<_Union>(__u)._M_rest); }
  43b4d6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  43b4da:	48 89 c7             	mov    %rax,%rdi
  43b4dd:	e8 65 fc ff ff       	callq  43b147 <std::__detail::__variant::_Variadic_union<x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>&& std::forward<std::__detail::__variant::_Variadic_union<x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> >(std::remove_reference<std::__detail::__variant::_Variadic_union<x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> >::type&)>
  43b4e2:	48 83 ec 08          	sub    $0x8,%rsp
  43b4e6:	53                   	push   %rbx
  43b4e7:	48 89 c7             	mov    %rax,%rdi
  43b4ea:	e8 aa ff ff ff       	callq  43b499 <decltype(auto) std::__detail::__variant::__get<1ul, std::__detail::__variant::_Variadic_union<x666::Newline, x666::EndOfFile, x666::LexError> >(std::in_place_index_t<1ul>, std::__detail::__variant::_Variadic_union<x666::Newline, x666::EndOfFile, x666::LexError>&&)>
  43b4ef:	48 83 c4 10          	add    $0x10,%rsp
  43b4f3:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  43b4f7:	c9                   	leaveq 
  43b4f8:	c3                   	retq   

000000000043b4f9 <decltype(auto) std::__detail::__variant::__get<3ul, std::__detail::__variant::_Variadic_union<x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> >(std::in_place_index_t<3ul>, std::__detail::__variant::_Variadic_union<x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>&&)>:
    constexpr decltype(auto) __get(in_place_index_t<_Np>, _Union&& __u)
  43b4f9:	55                   	push   %rbp
  43b4fa:	48 89 e5             	mov    %rsp,%rbp
  43b4fd:	53                   	push   %rbx
  43b4fe:	48 83 ec 18          	sub    $0x18,%rsp
  43b502:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    { return __get(in_place_index<_Np-1>, std::forward<_Union>(__u)._M_rest); }
  43b506:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  43b50a:	48 89 c7             	mov    %rax,%rdi
  43b50d:	e8 ec fa ff ff       	callq  43affe <std::__detail::__variant::_Variadic_union<x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>&& std::forward<std::__detail::__variant::_Variadic_union<x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> >(std::remove_reference<std::__detail::__variant::_Variadic_union<x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> >::type&)>
  43b512:	48 83 ec 08          	sub    $0x8,%rsp
  43b516:	53                   	push   %rbx
  43b517:	48 89 c7             	mov    %rax,%rdi
  43b51a:	e8 aa ff ff ff       	callq  43b4c9 <decltype(auto) std::__detail::__variant::__get<2ul, std::__detail::__variant::_Variadic_union<x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> >(std::in_place_index_t<2ul>, std::__detail::__variant::_Variadic_union<x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>&&)>
  43b51f:	48 83 c4 10          	add    $0x10,%rsp
  43b523:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  43b527:	c9                   	leaveq 
  43b528:	c3                   	retq   

000000000043b529 <decltype(auto) std::__detail::__variant::__get<4ul, std::__detail::__variant::_Variadic_union<x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> >(std::in_place_index_t<4ul>, std::__detail::__variant::_Variadic_union<x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>&&)>:
    constexpr decltype(auto) __get(in_place_index_t<_Np>, _Union&& __u)
  43b529:	55                   	push   %rbp
  43b52a:	48 89 e5             	mov    %rsp,%rbp
  43b52d:	53                   	push   %rbx
  43b52e:	48 83 ec 18          	sub    $0x18,%rsp
  43b532:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    { return __get(in_place_index<_Np-1>, std::forward<_Union>(__u)._M_rest); }
  43b536:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  43b53a:	48 89 c7             	mov    %rax,%rdi
  43b53d:	e8 a3 f9 ff ff       	callq  43aee5 <std::__detail::__variant::_Variadic_union<x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>&& std::forward<std::__detail::__variant::_Variadic_union<x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> >(std::remove_reference<std::__detail::__variant::_Variadic_union<x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> >::type&)>
  43b542:	48 83 ec 08          	sub    $0x8,%rsp
  43b546:	53                   	push   %rbx
  43b547:	48 89 c7             	mov    %rax,%rdi
  43b54a:	e8 aa ff ff ff       	callq  43b4f9 <decltype(auto) std::__detail::__variant::__get<3ul, std::__detail::__variant::_Variadic_union<x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> >(std::in_place_index_t<3ul>, std::__detail::__variant::_Variadic_union<x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>&&)>
  43b54f:	48 83 c4 10          	add    $0x10,%rsp
  43b553:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  43b557:	c9                   	leaveq 
  43b558:	c3                   	retq   

000000000043b559 <decltype(auto) std::__detail::__variant::__get<5ul, std::__detail::__variant::_Variadic_union<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> >(std::in_place_index_t<5ul>, std::__detail::__variant::_Variadic_union<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>&&)>:
    constexpr decltype(auto) __get(in_place_index_t<_Np>, _Union&& __u)
  43b559:	55                   	push   %rbp
  43b55a:	48 89 e5             	mov    %rsp,%rbp
  43b55d:	53                   	push   %rbx
  43b55e:	48 83 ec 18          	sub    $0x18,%rsp
  43b562:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    { return __get(in_place_index<_Np-1>, std::forward<_Union>(__u)._M_rest); }
  43b566:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  43b56a:	48 89 c7             	mov    %rax,%rdi
  43b56d:	e8 6f f8 ff ff       	callq  43ade1 <std::__detail::__variant::_Variadic_union<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>&& std::forward<std::__detail::__variant::_Variadic_union<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> >(std::remove_reference<std::__detail::__variant::_Variadic_union<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> >::type&)>
  43b572:	48 83 ec 08          	sub    $0x8,%rsp
  43b576:	53                   	push   %rbx
  43b577:	48 89 c7             	mov    %rax,%rdi
  43b57a:	e8 aa ff ff ff       	callq  43b529 <decltype(auto) std::__detail::__variant::__get<4ul, std::__detail::__variant::_Variadic_union<x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> >(std::in_place_index_t<4ul>, std::__detail::__variant::_Variadic_union<x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>&&)>
  43b57f:	48 83 c4 10          	add    $0x10,%rsp
  43b583:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  43b587:	c9                   	leaveq 
  43b588:	c3                   	retq   

000000000043b589 <decltype(auto) std::__detail::__variant::__get<5ul, std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> >(std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>&&)>:
    constexpr decltype(auto) __get(_Variant&& __v)
  43b589:	55                   	push   %rbp
  43b58a:	48 89 e5             	mov    %rsp,%rbp
  43b58d:	53                   	push   %rbx
  43b58e:	48 83 ec 18          	sub    $0x18,%rsp
  43b592:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
      return __get(std::in_place_index<_Np>, std::forward<_Variant>(__v)._M_u);
  43b596:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  43b59a:	48 89 c7             	mov    %rax,%rdi
  43b59d:	e8 23 f8 ff ff       	callq  43adc5 <std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>&& std::forward<std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> >(std::remove_reference<std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> >::type&)>
  43b5a2:	48 83 ec 08          	sub    $0x8,%rsp
  43b5a6:	53                   	push   %rbx
  43b5a7:	48 89 c7             	mov    %rax,%rdi
  43b5aa:	e8 aa ff ff ff       	callq  43b559 <decltype(auto) std::__detail::__variant::__get<5ul, std::__detail::__variant::_Variadic_union<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> >(std::in_place_index_t<5ul>, std::__detail::__variant::_Variadic_union<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>&&)>
  43b5af:	48 83 c4 10          	add    $0x10,%rsp
    }
  43b5b3:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  43b5b7:	c9                   	leaveq 
  43b5b8:	c3                   	retq   

000000000043b5b9 <std::variant_alternative<5ul, std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> >::type&& std::get<5ul, x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>(std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>&&)>:
    get(variant<_Types...>&& __v)
  43b5b9:	55                   	push   %rbp
  43b5ba:	48 89 e5             	mov    %rsp,%rbp
  43b5bd:	48 83 ec 10          	sub    $0x10,%rsp
  43b5c1:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      if (__v.index() != _Np)
  43b5c5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43b5c9:	48 89 c7             	mov    %rax,%rdi
  43b5cc:	e8 69 f5 ff ff       	callq  43ab3a <std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>::index() const>
  43b5d1:	48 83 f8 05          	cmp    $0x5,%rax
  43b5d5:	0f 95 c0             	setne  %al
  43b5d8:	84 c0                	test   %al,%al
  43b5da:	74 0a                	je     43b5e6 <std::variant_alternative<5ul, std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> >::type&& std::get<5ul, x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>(std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>&&)+0x2d>
	__throw_bad_variant_access("Unexpected index");
  43b5dc:	bf 2c 47 44 00       	mov    $0x44472c,%edi
  43b5e1:	e8 07 e1 ff ff       	callq  4396ed <std::__throw_bad_variant_access(char const*)>
      return __detail::__variant::__get<_Np>(std::move(__v));
  43b5e6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43b5ea:	48 89 c7             	mov    %rax,%rdi
  43b5ed:	e8 8f f7 ff ff       	callq  43ad81 <std::remove_reference<std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>&>::type&& std::move<std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>&>(std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>&)>
  43b5f2:	48 89 c7             	mov    %rax,%rdi
  43b5f5:	e8 8f ff ff ff       	callq  43b589 <decltype(auto) std::__detail::__variant::__get<5ul, std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> >(std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>&&)>
    }
  43b5fa:	c9                   	leaveq 
  43b5fb:	c3                   	retq   

000000000043b5fc <std::__detail::__variant::__gen_vtable_impl<std::__detail::__variant::_Multi_array<bool (*)(x666::ParserVisitor&&, std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>&&)>, std::tuple<std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>&&>, std::integer_sequence<unsigned long, 5ul> >::__visit_invoke(x666::ParserVisitor&&, std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>&&)>:
      static constexpr __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
  43b5fc:	55                   	push   %rbp
  43b5fd:	48 89 e5             	mov    %rsp,%rbp
  43b600:	53                   	push   %rbx
  43b601:	48 83 ec 18          	sub    $0x18,%rsp
  43b605:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  43b609:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
			std::get<__indices>(
  43b60d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  43b611:	48 89 c7             	mov    %rax,%rdi
  43b614:	e8 6a f8 ff ff       	callq  43ae83 <std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>&& std::forward<std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>&&>(std::remove_reference<std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>&&>::type&)>
  43b619:	48 89 c7             	mov    %rax,%rdi
  43b61c:	e8 98 ff ff ff       	callq  43b5b9 <std::variant_alternative<5ul, std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> >::type&& std::get<5ul, x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>(std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>&&)>
  43b621:	48 89 c3             	mov    %rax,%rbx
	return __invoke(std::forward<_Visitor>(__visitor),
  43b624:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  43b628:	48 89 c7             	mov    %rax,%rdi
  43b62b:	e8 61 f8 ff ff       	callq  43ae91 <x666::ParserVisitor&& std::forward<x666::ParserVisitor&&>(std::remove_reference<x666::ParserVisitor&&>::type&)>
			    std::forward<_Variants>(__vars))...);
  43b630:	48 89 de             	mov    %rbx,%rsi
  43b633:	48 89 c7             	mov    %rax,%rdi
  43b636:	e8 97 15 00 00       	callq  43cbd2 <std::__invoke_result<x666::ParserVisitor, x666::EndOfFile>::type std::__invoke<x666::ParserVisitor, x666::EndOfFile>(x666::ParserVisitor&&, x666::EndOfFile&&)>
      }
  43b63b:	48 83 c4 18          	add    $0x18,%rsp
  43b63f:	5b                   	pop    %rbx
  43b640:	5d                   	pop    %rbp
  43b641:	c3                   	retq   

000000000043b642 <std::__detail::__variant::_Variadic_union<x666::LexError>&& std::forward<std::__detail::__variant::_Variadic_union<x666::LexError> >(std::remove_reference<std::__detail::__variant::_Variadic_union<x666::LexError> >::type&)>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
  43b642:	55                   	push   %rbp
  43b643:	48 89 e5             	mov    %rsp,%rbp
  43b646:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<_Tp&&>(__t); }
  43b64a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43b64e:	5d                   	pop    %rbp
  43b64f:	c3                   	retq   

000000000043b650 <decltype(auto) std::__detail::__variant::__get<std::__detail::__variant::_Variadic_union<x666::LexError> >(std::in_place_index_t<0ul>, std::__detail::__variant::_Variadic_union<x666::LexError>&&)>:
    constexpr decltype(auto) __get(in_place_index_t<0>, _Union&& __u)
  43b650:	55                   	push   %rbp
  43b651:	48 89 e5             	mov    %rsp,%rbp
  43b654:	48 83 ec 10          	sub    $0x10,%rsp
  43b658:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return std::forward<_Union>(__u)._M_first._M_get(); }
  43b65c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43b660:	48 89 c7             	mov    %rax,%rdi
  43b663:	e8 da ff ff ff       	callq  43b642 <std::__detail::__variant::_Variadic_union<x666::LexError>&& std::forward<std::__detail::__variant::_Variadic_union<x666::LexError> >(std::remove_reference<std::__detail::__variant::_Variadic_union<x666::LexError> >::type&)>
  43b668:	48 89 c7             	mov    %rax,%rdi
  43b66b:	e8 ae 15 00 00       	callq  43cc1e <std::__detail::__variant::_Uninitialized<x666::LexError, false>::_M_get() &&>
  43b670:	c9                   	leaveq 
  43b671:	c3                   	retq   

000000000043b672 <decltype(auto) std::__detail::__variant::__get<1ul, std::__detail::__variant::_Variadic_union<x666::EndOfFile, x666::LexError> >(std::in_place_index_t<1ul>, std::__detail::__variant::_Variadic_union<x666::EndOfFile, x666::LexError>&&)>:
    constexpr decltype(auto) __get(in_place_index_t<_Np>, _Union&& __u)
  43b672:	55                   	push   %rbp
  43b673:	48 89 e5             	mov    %rsp,%rbp
  43b676:	53                   	push   %rbx
  43b677:	48 83 ec 18          	sub    $0x18,%rsp
  43b67b:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    { return __get(in_place_index<_Np-1>, std::forward<_Union>(__u)._M_rest); }
  43b67f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  43b683:	48 89 c7             	mov    %rax,%rdi
  43b686:	e8 de fd ff ff       	callq  43b469 <std::__detail::__variant::_Variadic_union<x666::EndOfFile, x666::LexError>&& std::forward<std::__detail::__variant::_Variadic_union<x666::EndOfFile, x666::LexError> >(std::remove_reference<std::__detail::__variant::_Variadic_union<x666::EndOfFile, x666::LexError> >::type&)>
  43b68b:	48 83 ec 08          	sub    $0x8,%rsp
  43b68f:	53                   	push   %rbx
  43b690:	48 89 c7             	mov    %rax,%rdi
  43b693:	e8 b8 ff ff ff       	callq  43b650 <decltype(auto) std::__detail::__variant::__get<std::__detail::__variant::_Variadic_union<x666::LexError> >(std::in_place_index_t<0ul>, std::__detail::__variant::_Variadic_union<x666::LexError>&&)>
  43b698:	48 83 c4 10          	add    $0x10,%rsp
  43b69c:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  43b6a0:	c9                   	leaveq 
  43b6a1:	c3                   	retq   

000000000043b6a2 <decltype(auto) std::__detail::__variant::__get<2ul, std::__detail::__variant::_Variadic_union<x666::Newline, x666::EndOfFile, x666::LexError> >(std::in_place_index_t<2ul>, std::__detail::__variant::_Variadic_union<x666::Newline, x666::EndOfFile, x666::LexError>&&)>:
    constexpr decltype(auto) __get(in_place_index_t<_Np>, _Union&& __u)
  43b6a2:	55                   	push   %rbp
  43b6a3:	48 89 e5             	mov    %rsp,%rbp
  43b6a6:	53                   	push   %rbx
  43b6a7:	48 83 ec 18          	sub    $0x18,%rsp
  43b6ab:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    { return __get(in_place_index<_Np-1>, std::forward<_Union>(__u)._M_rest); }
  43b6af:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  43b6b3:	48 89 c7             	mov    %rax,%rdi
  43b6b6:	e8 05 fc ff ff       	callq  43b2c0 <std::__detail::__variant::_Variadic_union<x666::Newline, x666::EndOfFile, x666::LexError>&& std::forward<std::__detail::__variant::_Variadic_union<x666::Newline, x666::EndOfFile, x666::LexError> >(std::remove_reference<std::__detail::__variant::_Variadic_union<x666::Newline, x666::EndOfFile, x666::LexError> >::type&)>
  43b6bb:	48 83 ec 08          	sub    $0x8,%rsp
  43b6bf:	53                   	push   %rbx
  43b6c0:	48 89 c7             	mov    %rax,%rdi
  43b6c3:	e8 aa ff ff ff       	callq  43b672 <decltype(auto) std::__detail::__variant::__get<1ul, std::__detail::__variant::_Variadic_union<x666::EndOfFile, x666::LexError> >(std::in_place_index_t<1ul>, std::__detail::__variant::_Variadic_union<x666::EndOfFile, x666::LexError>&&)>
  43b6c8:	48 83 c4 10          	add    $0x10,%rsp
  43b6cc:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  43b6d0:	c9                   	leaveq 
  43b6d1:	c3                   	retq   

000000000043b6d2 <decltype(auto) std::__detail::__variant::__get<3ul, std::__detail::__variant::_Variadic_union<x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> >(std::in_place_index_t<3ul>, std::__detail::__variant::_Variadic_union<x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>&&)>:
    constexpr decltype(auto) __get(in_place_index_t<_Np>, _Union&& __u)
  43b6d2:	55                   	push   %rbp
  43b6d3:	48 89 e5             	mov    %rsp,%rbp
  43b6d6:	53                   	push   %rbx
  43b6d7:	48 83 ec 18          	sub    $0x18,%rsp
  43b6db:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    { return __get(in_place_index<_Np-1>, std::forward<_Union>(__u)._M_rest); }
  43b6df:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  43b6e3:	48 89 c7             	mov    %rax,%rdi
  43b6e6:	e8 5c fa ff ff       	callq  43b147 <std::__detail::__variant::_Variadic_union<x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>&& std::forward<std::__detail::__variant::_Variadic_union<x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> >(std::remove_reference<std::__detail::__variant::_Variadic_union<x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> >::type&)>
  43b6eb:	48 83 ec 08          	sub    $0x8,%rsp
  43b6ef:	53                   	push   %rbx
  43b6f0:	48 89 c7             	mov    %rax,%rdi
  43b6f3:	e8 aa ff ff ff       	callq  43b6a2 <decltype(auto) std::__detail::__variant::__get<2ul, std::__detail::__variant::_Variadic_union<x666::Newline, x666::EndOfFile, x666::LexError> >(std::in_place_index_t<2ul>, std::__detail::__variant::_Variadic_union<x666::Newline, x666::EndOfFile, x666::LexError>&&)>
  43b6f8:	48 83 c4 10          	add    $0x10,%rsp
  43b6fc:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  43b700:	c9                   	leaveq 
  43b701:	c3                   	retq   

000000000043b702 <decltype(auto) std::__detail::__variant::__get<4ul, std::__detail::__variant::_Variadic_union<x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> >(std::in_place_index_t<4ul>, std::__detail::__variant::_Variadic_union<x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>&&)>:
    constexpr decltype(auto) __get(in_place_index_t<_Np>, _Union&& __u)
  43b702:	55                   	push   %rbp
  43b703:	48 89 e5             	mov    %rsp,%rbp
  43b706:	53                   	push   %rbx
  43b707:	48 83 ec 18          	sub    $0x18,%rsp
  43b70b:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    { return __get(in_place_index<_Np-1>, std::forward<_Union>(__u)._M_rest); }
  43b70f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  43b713:	48 89 c7             	mov    %rax,%rdi
  43b716:	e8 e3 f8 ff ff       	callq  43affe <std::__detail::__variant::_Variadic_union<x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>&& std::forward<std::__detail::__variant::_Variadic_union<x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> >(std::remove_reference<std::__detail::__variant::_Variadic_union<x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> >::type&)>
  43b71b:	48 83 ec 08          	sub    $0x8,%rsp
  43b71f:	53                   	push   %rbx
  43b720:	48 89 c7             	mov    %rax,%rdi
  43b723:	e8 aa ff ff ff       	callq  43b6d2 <decltype(auto) std::__detail::__variant::__get<3ul, std::__detail::__variant::_Variadic_union<x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> >(std::in_place_index_t<3ul>, std::__detail::__variant::_Variadic_union<x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>&&)>
  43b728:	48 83 c4 10          	add    $0x10,%rsp
  43b72c:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  43b730:	c9                   	leaveq 
  43b731:	c3                   	retq   

000000000043b732 <decltype(auto) std::__detail::__variant::__get<5ul, std::__detail::__variant::_Variadic_union<x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> >(std::in_place_index_t<5ul>, std::__detail::__variant::_Variadic_union<x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>&&)>:
    constexpr decltype(auto) __get(in_place_index_t<_Np>, _Union&& __u)
  43b732:	55                   	push   %rbp
  43b733:	48 89 e5             	mov    %rsp,%rbp
  43b736:	53                   	push   %rbx
  43b737:	48 83 ec 18          	sub    $0x18,%rsp
  43b73b:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    { return __get(in_place_index<_Np-1>, std::forward<_Union>(__u)._M_rest); }
  43b73f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  43b743:	48 89 c7             	mov    %rax,%rdi
  43b746:	e8 9a f7 ff ff       	callq  43aee5 <std::__detail::__variant::_Variadic_union<x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>&& std::forward<std::__detail::__variant::_Variadic_union<x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> >(std::remove_reference<std::__detail::__variant::_Variadic_union<x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> >::type&)>
  43b74b:	48 83 ec 08          	sub    $0x8,%rsp
  43b74f:	53                   	push   %rbx
  43b750:	48 89 c7             	mov    %rax,%rdi
  43b753:	e8 aa ff ff ff       	callq  43b702 <decltype(auto) std::__detail::__variant::__get<4ul, std::__detail::__variant::_Variadic_union<x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> >(std::in_place_index_t<4ul>, std::__detail::__variant::_Variadic_union<x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>&&)>
  43b758:	48 83 c4 10          	add    $0x10,%rsp
  43b75c:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  43b760:	c9                   	leaveq 
  43b761:	c3                   	retq   

000000000043b762 <decltype(auto) std::__detail::__variant::__get<6ul, std::__detail::__variant::_Variadic_union<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> >(std::in_place_index_t<6ul>, std::__detail::__variant::_Variadic_union<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>&&)>:
    constexpr decltype(auto) __get(in_place_index_t<_Np>, _Union&& __u)
  43b762:	55                   	push   %rbp
  43b763:	48 89 e5             	mov    %rsp,%rbp
  43b766:	53                   	push   %rbx
  43b767:	48 83 ec 18          	sub    $0x18,%rsp
  43b76b:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    { return __get(in_place_index<_Np-1>, std::forward<_Union>(__u)._M_rest); }
  43b76f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  43b773:	48 89 c7             	mov    %rax,%rdi
  43b776:	e8 66 f6 ff ff       	callq  43ade1 <std::__detail::__variant::_Variadic_union<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>&& std::forward<std::__detail::__variant::_Variadic_union<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> >(std::remove_reference<std::__detail::__variant::_Variadic_union<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> >::type&)>
  43b77b:	48 83 ec 08          	sub    $0x8,%rsp
  43b77f:	53                   	push   %rbx
  43b780:	48 89 c7             	mov    %rax,%rdi
  43b783:	e8 aa ff ff ff       	callq  43b732 <decltype(auto) std::__detail::__variant::__get<5ul, std::__detail::__variant::_Variadic_union<x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> >(std::in_place_index_t<5ul>, std::__detail::__variant::_Variadic_union<x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>&&)>
  43b788:	48 83 c4 10          	add    $0x10,%rsp
  43b78c:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  43b790:	c9                   	leaveq 
  43b791:	c3                   	retq   

000000000043b792 <decltype(auto) std::__detail::__variant::__get<6ul, std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> >(std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>&&)>:
    constexpr decltype(auto) __get(_Variant&& __v)
  43b792:	55                   	push   %rbp
  43b793:	48 89 e5             	mov    %rsp,%rbp
  43b796:	53                   	push   %rbx
  43b797:	48 83 ec 18          	sub    $0x18,%rsp
  43b79b:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
      return __get(std::in_place_index<_Np>, std::forward<_Variant>(__v)._M_u);
  43b79f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  43b7a3:	48 89 c7             	mov    %rax,%rdi
  43b7a6:	e8 1a f6 ff ff       	callq  43adc5 <std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>&& std::forward<std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> >(std::remove_reference<std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> >::type&)>
  43b7ab:	48 83 ec 08          	sub    $0x8,%rsp
  43b7af:	53                   	push   %rbx
  43b7b0:	48 89 c7             	mov    %rax,%rdi
  43b7b3:	e8 aa ff ff ff       	callq  43b762 <decltype(auto) std::__detail::__variant::__get<6ul, std::__detail::__variant::_Variadic_union<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> >(std::in_place_index_t<6ul>, std::__detail::__variant::_Variadic_union<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>&&)>
  43b7b8:	48 83 c4 10          	add    $0x10,%rsp
    }
  43b7bc:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  43b7c0:	c9                   	leaveq 
  43b7c1:	c3                   	retq   

000000000043b7c2 <std::variant_alternative<6ul, std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> >::type&& std::get<6ul, x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>(std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>&&)>:
    get(variant<_Types...>&& __v)
  43b7c2:	55                   	push   %rbp
  43b7c3:	48 89 e5             	mov    %rsp,%rbp
  43b7c6:	48 83 ec 10          	sub    $0x10,%rsp
  43b7ca:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      if (__v.index() != _Np)
  43b7ce:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43b7d2:	48 89 c7             	mov    %rax,%rdi
  43b7d5:	e8 60 f3 ff ff       	callq  43ab3a <std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>::index() const>
  43b7da:	48 83 f8 06          	cmp    $0x6,%rax
  43b7de:	0f 95 c0             	setne  %al
  43b7e1:	84 c0                	test   %al,%al
  43b7e3:	74 0a                	je     43b7ef <std::variant_alternative<6ul, std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> >::type&& std::get<6ul, x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>(std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>&&)+0x2d>
	__throw_bad_variant_access("Unexpected index");
  43b7e5:	bf 2c 47 44 00       	mov    $0x44472c,%edi
  43b7ea:	e8 fe de ff ff       	callq  4396ed <std::__throw_bad_variant_access(char const*)>
      return __detail::__variant::__get<_Np>(std::move(__v));
  43b7ef:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43b7f3:	48 89 c7             	mov    %rax,%rdi
  43b7f6:	e8 86 f5 ff ff       	callq  43ad81 <std::remove_reference<std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>&>::type&& std::move<std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>&>(std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>&)>
  43b7fb:	48 89 c7             	mov    %rax,%rdi
  43b7fe:	e8 8f ff ff ff       	callq  43b792 <decltype(auto) std::__detail::__variant::__get<6ul, std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> >(std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>&&)>
    }
  43b803:	c9                   	leaveq 
  43b804:	c3                   	retq   

000000000043b805 <std::__detail::__variant::__gen_vtable_impl<std::__detail::__variant::_Multi_array<bool (*)(x666::ParserVisitor&&, std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>&&)>, std::tuple<std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>&&>, std::integer_sequence<unsigned long, 6ul> >::__visit_invoke(x666::ParserVisitor&&, std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>&&)>:
      static constexpr __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
  43b805:	55                   	push   %rbp
  43b806:	48 89 e5             	mov    %rsp,%rbp
  43b809:	53                   	push   %rbx
  43b80a:	48 83 ec 18          	sub    $0x18,%rsp
  43b80e:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  43b812:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
			std::get<__indices>(
  43b816:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  43b81a:	48 89 c7             	mov    %rax,%rdi
  43b81d:	e8 61 f6 ff ff       	callq  43ae83 <std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>&& std::forward<std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>&&>(std::remove_reference<std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>&&>::type&)>
  43b822:	48 89 c7             	mov    %rax,%rdi
  43b825:	e8 98 ff ff ff       	callq  43b7c2 <std::variant_alternative<6ul, std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> >::type&& std::get<6ul, x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>(std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>&&)>
  43b82a:	48 89 c3             	mov    %rax,%rbx
	return __invoke(std::forward<_Visitor>(__visitor),
  43b82d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  43b831:	48 89 c7             	mov    %rax,%rdi
  43b834:	e8 58 f6 ff ff       	callq  43ae91 <x666::ParserVisitor&& std::forward<x666::ParserVisitor&&>(std::remove_reference<x666::ParserVisitor&&>::type&)>
			    std::forward<_Variants>(__vars))...);
  43b839:	48 89 de             	mov    %rbx,%rsi
  43b83c:	48 89 c7             	mov    %rax,%rdi
  43b83f:	e8 fc 13 00 00       	callq  43cc40 <std::__invoke_result<x666::ParserVisitor, x666::LexError>::type std::__invoke<x666::ParserVisitor, x666::LexError>(x666::ParserVisitor&&, x666::LexError&&)>
      }
  43b844:	48 83 c4 18          	add    $0x18,%rsp
  43b848:	5b                   	pop    %rbx
  43b849:	5d                   	pop    %rbp
  43b84a:	c3                   	retq   
  43b84b:	90                   	nop

000000000043b84c <bool (* const&std::__detail::__variant::_Multi_array<bool (*)(x666::ParserVisitor&&, std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>&&), 7ul>::_M_access<>(unsigned long) const)(x666::ParserVisitor&&, std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>&&)>:
	_M_access(size_t __first_index, _Args... __rest_indices) const
  43b84c:	55                   	push   %rbp
  43b84d:	48 89 e5             	mov    %rsp,%rbp
  43b850:	48 83 ec 10          	sub    $0x10,%rsp
  43b854:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  43b858:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	{ return _M_arr[__first_index]._M_access(__rest_indices...); }
  43b85c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  43b860:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  43b867:	00 
  43b868:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43b86c:	48 01 d0             	add    %rdx,%rax
  43b86f:	48 89 c7             	mov    %rax,%rdi
  43b872:	e8 15 14 00 00       	callq  43cc8c <std::__detail::__variant::_Multi_array<bool (*)(x666::ParserVisitor&&, std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>&&)>::_M_access() const>
  43b877:	c9                   	leaveq 
  43b878:	c3                   	retq   

000000000043b879 <decltype(auto) std::visit<x666::ParserVisitor, std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> >(x666::ParserVisitor&&, std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>&&)>:
      return __detail::__variant::__get<_Np>(std::move(__v));
    }

  template<typename _Visitor, typename... _Variants>
    constexpr decltype(auto)
    visit(_Visitor&& __visitor, _Variants&&... __variants)
  43b879:	55                   	push   %rbp
  43b87a:	48 89 e5             	mov    %rsp,%rbp
  43b87d:	53                   	push   %rbx
  43b87e:	48 83 ec 28          	sub    $0x28,%rsp
  43b882:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  43b886:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
    {
      if ((__variants.valueless_by_exception() || ...))
  43b88a:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  43b88e:	48 89 c7             	mov    %rax,%rdi
  43b891:	e8 fa f4 ff ff       	callq  43ad90 <std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>::valueless_by_exception() const>
  43b896:	84 c0                	test   %al,%al
  43b898:	74 0a                	je     43b8a4 <decltype(auto) std::visit<x666::ParserVisitor, std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> >(x666::ParserVisitor&&, std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>&&)+0x2b>
	__throw_bad_variant_access("Unexpected index");
  43b89a:	bf 2c 47 44 00       	mov    $0x44472c,%edi
  43b89f:	e8 49 de ff ff       	callq  4396ed <std::__throw_bad_variant_access(char const*)>

      using _Result_type =
	decltype(std::forward<_Visitor>(__visitor)(
	    get<0>(std::forward<_Variants>(__variants))...));

      constexpr auto& __vtable = __detail::__variant::__gen_vtable<
  43b8a4:	48 c7 45 e8 00 49 44 	movq   $0x444900,-0x18(%rbp)
  43b8ab:	00 
	_Result_type, _Visitor&&, _Variants&&...>::_S_vtable;

      auto __func_ptr = __vtable._M_access(__variants.index()...);
  43b8ac:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  43b8b0:	48 89 c7             	mov    %rax,%rdi
  43b8b3:	e8 82 f2 ff ff       	callq  43ab3a <std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>::index() const>
  43b8b8:	48 89 c2             	mov    %rax,%rdx
  43b8bb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  43b8bf:	48 89 d6             	mov    %rdx,%rsi
  43b8c2:	48 89 c7             	mov    %rax,%rdi
  43b8c5:	e8 82 ff ff ff       	callq  43b84c <bool (* const&std::__detail::__variant::_Multi_array<bool (*)(x666::ParserVisitor&&, std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>&&), 7ul>::_M_access<>(unsigned long) const)(x666::ParserVisitor&&, std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>&&)>
  43b8ca:	48 8b 00             	mov    (%rax),%rax
  43b8cd:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
      return (*__func_ptr)(std::forward<_Visitor>(__visitor),
  43b8d1:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  43b8d5:	48 89 c7             	mov    %rax,%rdi
  43b8d8:	e8 e8 f4 ff ff       	callq  43adc5 <std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>&& std::forward<std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> >(std::remove_reference<std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> >::type&)>
  43b8dd:	48 89 c3             	mov    %rax,%rbx
  43b8e0:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  43b8e4:	48 89 c7             	mov    %rax,%rdi
  43b8e7:	e8 e7 f4 ff ff       	callq  43add3 <x666::ParserVisitor&& std::forward<x666::ParserVisitor>(std::remove_reference<x666::ParserVisitor>::type&)>
  43b8ec:	48 89 c2             	mov    %rax,%rdx
			   std::forward<_Variants>(__variants)...);
  43b8ef:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  43b8f3:	48 89 de             	mov    %rbx,%rsi
  43b8f6:	48 89 d7             	mov    %rdx,%rdi
  43b8f9:	ff d0                	callq  *%rax
    }
  43b8fb:	48 83 c4 28          	add    $0x28,%rsp
  43b8ff:	5b                   	pop    %rbx
  43b900:	5d                   	pop    %rbp
  43b901:	c3                   	retq   

000000000043b902 <bool std::holds_alternative<x666::EndOfFile, x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>(std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> const&)>:
    inline constexpr bool holds_alternative(const variant<_Types...>& __v)
  43b902:	55                   	push   %rbp
  43b903:	48 89 e5             	mov    %rsp,%rbp
  43b906:	48 83 ec 10          	sub    $0x10,%rsp
  43b90a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      return __v.index() == __detail::__variant::__index_of_v<_Tp, _Types...>;
  43b90e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43b912:	48 89 c7             	mov    %rax,%rdi
  43b915:	e8 20 f2 ff ff       	callq  43ab3a <std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>::index() const>
  43b91a:	48 83 f8 05          	cmp    $0x5,%rax
  43b91e:	0f 94 c0             	sete   %al
    }
  43b921:	c9                   	leaveq 
  43b922:	c3                   	retq   
  43b923:	90                   	nop

000000000043b924 <std::__detail::__variant::_Copy_ctor_base<false, x666::Identifier, x666::IntLiteral, x666::StringLiteral>::_Variant_storage()>:
      using _Base::_Base;
  43b924:	55                   	push   %rbp
  43b925:	48 89 e5             	mov    %rsp,%rbp
  43b928:	48 83 ec 10          	sub    $0x10,%rsp
  43b92c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  43b930:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43b934:	48 89 c7             	mov    %rax,%rdi
  43b937:	e8 ea 13 00 00       	callq  43cd26 <std::__detail::__variant::_Variant_storage<false, x666::Identifier, x666::IntLiteral, x666::StringLiteral>::_Variant_storage()>
  43b93c:	90                   	nop
  43b93d:	c9                   	leaveq 
  43b93e:	c3                   	retq   
  43b93f:	90                   	nop

000000000043b940 <std::__detail::__variant::_Variant_storage<false, x666::Identifier, x666::IntLiteral, x666::StringLiteral>::_M_valid() const>:
      _M_valid() const noexcept
  43b940:	55                   	push   %rbp
  43b941:	48 89 e5             	mov    %rsp,%rbp
  43b944:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	return this->_M_index != __index_type(variant_npos);
  43b948:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43b94c:	0f b6 40 20          	movzbl 0x20(%rax),%eax
  43b950:	3c ff                	cmp    $0xff,%al
  43b952:	0f 95 c0             	setne  %al
      }
  43b955:	5d                   	pop    %rbp
  43b956:	c3                   	retq   
  43b957:	90                   	nop

000000000043b958 <std::__detail::__variant::_Move_ctor_base<false, x666::Identifier, x666::IntLiteral, x666::StringLiteral>::_Move_ctor_base(std::__detail::__variant::_Move_ctor_base<false, x666::Identifier, x666::IntLiteral, x666::StringLiteral>&&)>:
      _Move_ctor_base(_Move_ctor_base&& __rhs)
  43b958:	55                   	push   %rbp
  43b959:	48 89 e5             	mov    %rsp,%rbp
  43b95c:	41 54                	push   %r12
  43b95e:	53                   	push   %rbx
  43b95f:	48 83 ec 10          	sub    $0x10,%rsp
  43b963:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  43b967:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
      {
  43b96b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  43b96f:	48 89 c7             	mov    %rax,%rdi
  43b972:	e8 ad ff ff ff       	callq  43b924 <std::__detail::__variant::_Copy_ctor_base<false, x666::Identifier, x666::IntLiteral, x666::StringLiteral>::_Variant_storage()>
	if (__rhs._M_valid())
  43b977:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  43b97b:	48 89 c7             	mov    %rax,%rdi
  43b97e:	e8 bd ff ff ff       	callq  43b940 <std::__detail::__variant::_Variant_storage<false, x666::Identifier, x666::IntLiteral, x666::StringLiteral>::_M_valid() const>
  43b983:	84 c0                	test   %al,%al
  43b985:	74 47                	je     43b9ce <std::__detail::__variant::_Move_ctor_base<false, x666::Identifier, x666::IntLiteral, x666::StringLiteral>::_Move_ctor_base(std::__detail::__variant::_Move_ctor_base<false, x666::Identifier, x666::IntLiteral, x666::StringLiteral>&&)+0x76>
	    _S_vtable[__rhs._M_index](this->_M_storage(), __rhs._M_storage());
  43b987:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  43b98b:	0f b6 40 20          	movzbl 0x20(%rax),%eax
  43b98f:	0f b6 c0             	movzbl %al,%eax
  43b992:	48 98                	cltq   
  43b994:	48 8b 1c c5 40 49 44 	mov    0x444940(,%rax,8),%rbx
  43b99b:	00 
  43b99c:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  43b9a0:	48 89 c7             	mov    %rax,%rdi
  43b9a3:	e8 6c 14 00 00       	callq  43ce14 <std::__detail::__variant::_Variant_storage<false, x666::Identifier, x666::IntLiteral, x666::StringLiteral>::_M_storage() const>
  43b9a8:	49 89 c4             	mov    %rax,%r12
  43b9ab:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  43b9af:	48 89 c7             	mov    %rax,%rdi
  43b9b2:	e8 5d 14 00 00       	callq  43ce14 <std::__detail::__variant::_Variant_storage<false, x666::Identifier, x666::IntLiteral, x666::StringLiteral>::_M_storage() const>
  43b9b7:	4c 89 e6             	mov    %r12,%rsi
  43b9ba:	48 89 c7             	mov    %rax,%rdi
  43b9bd:	ff d3                	callq  *%rbx
	    this->_M_index = __rhs._M_index;
  43b9bf:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  43b9c3:	0f b6 50 20          	movzbl 0x20(%rax),%edx
  43b9c7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  43b9cb:	88 50 20             	mov    %dl,0x20(%rax)
      }
  43b9ce:	90                   	nop
  43b9cf:	48 83 c4 10          	add    $0x10,%rsp
  43b9d3:	5b                   	pop    %rbx
  43b9d4:	41 5c                	pop    %r12
  43b9d6:	5d                   	pop    %rbp
  43b9d7:	c3                   	retq   

000000000043b9d8 <std::__detail::__variant::_Variant_storage<false, x666::Identifier, x666::IntLiteral, x666::StringLiteral>::~_Variant_storage()>:
      ~_Variant_storage()
  43b9d8:	55                   	push   %rbp
  43b9d9:	48 89 e5             	mov    %rsp,%rbp
  43b9dc:	48 83 ec 10          	sub    $0x10,%rsp
  43b9e0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { _M_reset(); }
  43b9e4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43b9e8:	48 89 c7             	mov    %rax,%rdi
  43b9eb:	e8 3e 14 00 00       	callq  43ce2e <std::__detail::__variant::_Variant_storage<false, x666::Identifier, x666::IntLiteral, x666::StringLiteral>::_M_reset()>
  43b9f0:	90                   	nop
  43b9f1:	c9                   	leaveq 
  43b9f2:	c3                   	retq   
  43b9f3:	90                   	nop

000000000043b9f4 <std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >::unique_ptr(std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&&)>:
      unique_ptr(unique_ptr&& __u) noexcept
  43b9f4:	55                   	push   %rbp
  43b9f5:	48 89 e5             	mov    %rsp,%rbp
  43b9f8:	41 54                	push   %r12
  43b9fa:	53                   	push   %rbx
  43b9fb:	48 83 ec 10          	sub    $0x10,%rsp
  43b9ff:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  43ba03:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
      : _M_t(__u.release(), std::forward<deleter_type>(__u.get_deleter())) { }
  43ba07:	48 8b 5d e8          	mov    -0x18(%rbp),%rbx
  43ba0b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  43ba0f:	48 89 c7             	mov    %rax,%rdi
  43ba12:	e8 f7 77 ff ff       	callq  43320e <std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >::get_deleter()>
  43ba17:	48 89 c7             	mov    %rax,%rdi
  43ba1a:	e8 70 14 00 00       	callq  43ce8f <std::default_delete<x666::Expression>&& std::forward<std::default_delete<x666::Expression> >(std::remove_reference<std::default_delete<x666::Expression> >::type&)>
  43ba1f:	49 89 c4             	mov    %rax,%r12
  43ba22:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  43ba26:	48 89 c7             	mov    %rax,%rdi
  43ba29:	e8 2c 14 00 00       	callq  43ce5a <std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >::release()>
  43ba2e:	4c 89 e2             	mov    %r12,%rdx
  43ba31:	48 89 c6             	mov    %rax,%rsi
  43ba34:	48 89 df             	mov    %rbx,%rdi
  43ba37:	e8 62 14 00 00       	callq  43ce9e <std::__uniq_ptr_impl<x666::Expression, std::default_delete<x666::Expression> >::__uniq_ptr_impl<std::default_delete<x666::Expression> >(x666::Expression*, std::default_delete<x666::Expression>&&)>
  43ba3c:	90                   	nop
  43ba3d:	48 83 c4 10          	add    $0x10,%rsp
  43ba41:	5b                   	pop    %rbx
  43ba42:	41 5c                	pop    %r12
  43ba44:	5d                   	pop    %rbp
  43ba45:	c3                   	retq   

000000000043ba46 <std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&& std::forward<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > >(std::remove_reference<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > >::type&)>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
  43ba46:	55                   	push   %rbp
  43ba47:	48 89 e5             	mov    %rsp,%rbp
  43ba4a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<_Tp&&>(__t); }
  43ba4e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43ba52:	5d                   	pop    %rbp
  43ba53:	c3                   	retq   

000000000043ba54 <x666::Operator& std::forward<x666::Operator&>(std::remove_reference<x666::Operator&>::type&)>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
  43ba54:	55                   	push   %rbp
  43ba55:	48 89 e5             	mov    %rsp,%rbp
  43ba58:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<_Tp&&>(__t); }
  43ba5c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43ba60:	5d                   	pop    %rbp
  43ba61:	c3                   	retq   

000000000043ba62 <std::_MakeUniq<x666::BinaryOp>::__single_object std::make_unique<x666::BinaryOp, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, x666::Operator&>(std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&&, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&&, x666::Operator&)>:
    { struct __invalid_type { }; };

  /// std::make_unique for single objects
  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__single_object
    make_unique(_Args&&... __args)
  43ba62:	55                   	push   %rbp
  43ba63:	48 89 e5             	mov    %rsp,%rbp
  43ba66:	41 56                	push   %r14
  43ba68:	41 55                	push   %r13
  43ba6a:	41 54                	push   %r12
  43ba6c:	53                   	push   %rbx
  43ba6d:	48 83 ec 30          	sub    $0x30,%rsp
  43ba71:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  43ba75:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  43ba79:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  43ba7d:	48 89 4d b0          	mov    %rcx,-0x50(%rbp)
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
  43ba81:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  43ba85:	48 89 c7             	mov    %rax,%rdi
  43ba88:	e8 b9 ff ff ff       	callq  43ba46 <std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&& std::forward<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > >(std::remove_reference<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > >::type&)>
  43ba8d:	48 89 c2             	mov    %rax,%rdx
  43ba90:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  43ba94:	48 89 d6             	mov    %rdx,%rsi
  43ba97:	48 89 c7             	mov    %rax,%rdi
  43ba9a:	e8 55 ff ff ff       	callq  43b9f4 <std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >::unique_ptr(std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&&)>
  43ba9f:	48 8d 5d d0          	lea    -0x30(%rbp),%rbx
  43baa3:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  43baa7:	48 89 c7             	mov    %rax,%rdi
  43baaa:	e8 97 ff ff ff       	callq  43ba46 <std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&& std::forward<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > >(std::remove_reference<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > >::type&)>
  43baaf:	48 89 c2             	mov    %rax,%rdx
  43bab2:	48 8d 45 d8          	lea    -0x28(%rbp),%rax
  43bab6:	48 89 d6             	mov    %rdx,%rsi
  43bab9:	48 89 c7             	mov    %rax,%rdi
  43babc:	e8 33 ff ff ff       	callq  43b9f4 <std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >::unique_ptr(std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&&)>
  43bac1:	4c 8d 65 d8          	lea    -0x28(%rbp),%r12
  43bac5:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  43bac9:	48 89 c7             	mov    %rax,%rdi
  43bacc:	e8 83 ff ff ff       	callq  43ba54 <x666::Operator& std::forward<x666::Operator&>(std::remove_reference<x666::Operator&>::type&)>
  43bad1:	44 8b 28             	mov    (%rax),%r13d
  43bad4:	bf 20 00 00 00       	mov    $0x20,%edi
  43bad9:	e8 12 6d ff ff       	callq  4327f0 <operator new(unsigned long)@plt>
  43bade:	49 89 c6             	mov    %rax,%r14
  43bae1:	44 89 e9             	mov    %r13d,%ecx
  43bae4:	4c 89 e2             	mov    %r12,%rdx
  43bae7:	48 89 de             	mov    %rbx,%rsi
  43baea:	4c 89 f7             	mov    %r14,%rdi
  43baed:	e8 44 de ff ff       	callq  439936 <x666::BinaryOp::BinaryOp(std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, x666::Operator)>
  43baf2:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  43baf6:	4c 89 f6             	mov    %r14,%rsi
  43baf9:	48 89 c7             	mov    %rax,%rdi
  43bafc:	e8 dd 13 00 00       	callq  43cede <std::unique_ptr<x666::BinaryOp, std::default_delete<x666::BinaryOp> >::unique_ptr<std::default_delete<x666::BinaryOp>, void>(x666::BinaryOp*)>
  43bb01:	48 8d 45 d8          	lea    -0x28(%rbp),%rax
  43bb05:	48 89 c7             	mov    %rax,%rdi
  43bb08:	e8 ff 72 ff ff       	callq  432e0c <std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >::~unique_ptr()>
  43bb0d:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  43bb11:	48 89 c7             	mov    %rax,%rdi
  43bb14:	e8 f3 72 ff ff       	callq  432e0c <std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >::~unique_ptr()>
  43bb19:	eb 26                	jmp    43bb41 <std::_MakeUniq<x666::BinaryOp>::__single_object std::make_unique<x666::BinaryOp, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, x666::Operator&>(std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&&, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&&, x666::Operator&)+0xdf>
  43bb1b:	48 89 c3             	mov    %rax,%rbx
  43bb1e:	48 8d 45 d8          	lea    -0x28(%rbp),%rax
  43bb22:	48 89 c7             	mov    %rax,%rdi
  43bb25:	e8 e2 72 ff ff       	callq  432e0c <std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >::~unique_ptr()>
  43bb2a:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  43bb2e:	48 89 c7             	mov    %rax,%rdi
  43bb31:	e8 d6 72 ff ff       	callq  432e0c <std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >::~unique_ptr()>
  43bb36:	48 89 d8             	mov    %rbx,%rax
  43bb39:	48 89 c7             	mov    %rax,%rdi
  43bb3c:	e8 cf 6d ff ff       	callq  432910 <_Unwind_Resume@plt>
  43bb41:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  43bb45:	48 83 c4 30          	add    $0x30,%rsp
  43bb49:	5b                   	pop    %rbx
  43bb4a:	41 5c                	pop    %r12
  43bb4c:	41 5d                	pop    %r13
  43bb4e:	41 5e                	pop    %r14
  43bb50:	5d                   	pop    %rbp
  43bb51:	c3                   	retq   

000000000043bb52 <std::unique_ptr<x666::BinaryOp, std::default_delete<x666::BinaryOp> >::~unique_ptr()>:
      ~unique_ptr() noexcept
  43bb52:	55                   	push   %rbp
  43bb53:	48 89 e5             	mov    %rsp,%rbp
  43bb56:	48 83 ec 20          	sub    $0x20,%rsp
  43bb5a:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
	auto& __ptr = _M_t._M_ptr();
  43bb5e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  43bb62:	48 89 c7             	mov    %rax,%rdi
  43bb65:	e8 9a 13 00 00       	callq  43cf04 <std::__uniq_ptr_impl<x666::BinaryOp, std::default_delete<x666::BinaryOp> >::_M_ptr()>
  43bb6a:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	if (__ptr != nullptr)
  43bb6e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43bb72:	48 8b 00             	mov    (%rax),%rax
  43bb75:	48 85 c0             	test   %rax,%rax
  43bb78:	74 21                	je     43bb9b <std::unique_ptr<x666::BinaryOp, std::default_delete<x666::BinaryOp> >::~unique_ptr()+0x49>
	  get_deleter()(__ptr);
  43bb7a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  43bb7e:	48 89 c7             	mov    %rax,%rdi
  43bb81:	e8 98 13 00 00       	callq  43cf1e <std::unique_ptr<x666::BinaryOp, std::default_delete<x666::BinaryOp> >::get_deleter()>
  43bb86:	48 89 c2             	mov    %rax,%rdx
  43bb89:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43bb8d:	48 8b 00             	mov    (%rax),%rax
  43bb90:	48 89 c6             	mov    %rax,%rsi
  43bb93:	48 89 d7             	mov    %rdx,%rdi
  43bb96:	e8 11 14 00 00       	callq  43cfac <std::default_delete<x666::BinaryOp>::operator()(x666::BinaryOp*) const>
	__ptr = pointer();
  43bb9b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43bb9f:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
      }
  43bba6:	90                   	nop
  43bba7:	c9                   	leaveq 
  43bba8:	c3                   	retq   
  43bba9:	90                   	nop

000000000043bbaa <std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >::unique_ptr<x666::BinaryOp, std::default_delete<x666::BinaryOp>, void>(std::unique_ptr<x666::BinaryOp, std::default_delete<x666::BinaryOp> >&&)>:
	unique_ptr(unique_ptr<_Up, _Ep>&& __u) noexcept
  43bbaa:	55                   	push   %rbp
  43bbab:	48 89 e5             	mov    %rsp,%rbp
  43bbae:	41 54                	push   %r12
  43bbb0:	53                   	push   %rbx
  43bbb1:	48 83 ec 10          	sub    $0x10,%rsp
  43bbb5:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  43bbb9:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	: _M_t(__u.release(), std::forward<_Ep>(__u.get_deleter()))
  43bbbd:	48 8b 5d e8          	mov    -0x18(%rbp),%rbx
  43bbc1:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  43bbc5:	48 89 c7             	mov    %rax,%rdi
  43bbc8:	e8 51 13 00 00       	callq  43cf1e <std::unique_ptr<x666::BinaryOp, std::default_delete<x666::BinaryOp> >::get_deleter()>
  43bbcd:	48 89 c7             	mov    %rax,%rdi
  43bbd0:	e8 3e 14 00 00       	callq  43d013 <std::default_delete<x666::BinaryOp>&& std::forward<std::default_delete<x666::BinaryOp> >(std::remove_reference<std::default_delete<x666::BinaryOp> >::type&)>
  43bbd5:	49 89 c4             	mov    %rax,%r12
  43bbd8:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  43bbdc:	48 89 c7             	mov    %rax,%rdi
  43bbdf:	e8 fa 13 00 00       	callq  43cfde <std::unique_ptr<x666::BinaryOp, std::default_delete<x666::BinaryOp> >::release()>
  43bbe4:	4c 89 e2             	mov    %r12,%rdx
  43bbe7:	48 89 c6             	mov    %rax,%rsi
  43bbea:	48 89 df             	mov    %rbx,%rdi
  43bbed:	e8 30 14 00 00       	callq  43d022 <std::__uniq_ptr_impl<x666::Expression, std::default_delete<x666::Expression> >::__uniq_ptr_impl<std::default_delete<x666::BinaryOp> >(x666::Expression*, std::default_delete<x666::BinaryOp>&&)>
	{ }
  43bbf2:	90                   	nop
  43bbf3:	48 83 c4 10          	add    $0x10,%rsp
  43bbf7:	5b                   	pop    %rbx
  43bbf8:	41 5c                	pop    %r12
  43bbfa:	5d                   	pop    %rbp
  43bbfb:	c3                   	retq   

000000000043bbfc <std::_MakeUniq<x666::UnaryOp>::__single_object std::make_unique<x666::UnaryOp, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, x666::Operator&>(std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&&, x666::Operator&)>:
    make_unique(_Args&&... __args)
  43bbfc:	55                   	push   %rbp
  43bbfd:	48 89 e5             	mov    %rsp,%rbp
  43bc00:	41 55                	push   %r13
  43bc02:	41 54                	push   %r12
  43bc04:	53                   	push   %rbx
  43bc05:	48 83 ec 38          	sub    $0x38,%rsp
  43bc09:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  43bc0d:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  43bc11:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
  43bc15:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  43bc19:	48 89 c7             	mov    %rax,%rdi
  43bc1c:	e8 25 fe ff ff       	callq  43ba46 <std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&& std::forward<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > >(std::remove_reference<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > >::type&)>
  43bc21:	48 89 c2             	mov    %rax,%rdx
  43bc24:	48 8d 45 d8          	lea    -0x28(%rbp),%rax
  43bc28:	48 89 d6             	mov    %rdx,%rsi
  43bc2b:	48 89 c7             	mov    %rax,%rdi
  43bc2e:	e8 c1 fd ff ff       	callq  43b9f4 <std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >::unique_ptr(std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&&)>
  43bc33:	48 8d 5d d8          	lea    -0x28(%rbp),%rbx
  43bc37:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  43bc3b:	48 89 c7             	mov    %rax,%rdi
  43bc3e:	e8 11 fe ff ff       	callq  43ba54 <x666::Operator& std::forward<x666::Operator&>(std::remove_reference<x666::Operator&>::type&)>
  43bc43:	44 8b 20             	mov    (%rax),%r12d
  43bc46:	bf 18 00 00 00       	mov    $0x18,%edi
  43bc4b:	e8 a0 6b ff ff       	callq  4327f0 <operator new(unsigned long)@plt>
  43bc50:	49 89 c5             	mov    %rax,%r13
  43bc53:	44 89 e2             	mov    %r12d,%edx
  43bc56:	48 89 de             	mov    %rbx,%rsi
  43bc59:	4c 89 ef             	mov    %r13,%rdi
  43bc5c:	e8 65 dd ff ff       	callq  4399c6 <x666::UnaryOp::UnaryOp(std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, x666::Operator)>
  43bc61:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  43bc65:	4c 89 ee             	mov    %r13,%rsi
  43bc68:	48 89 c7             	mov    %rax,%rdi
  43bc6b:	e8 f2 13 00 00       	callq  43d062 <std::unique_ptr<x666::UnaryOp, std::default_delete<x666::UnaryOp> >::unique_ptr<std::default_delete<x666::UnaryOp>, void>(x666::UnaryOp*)>
  43bc70:	48 8d 45 d8          	lea    -0x28(%rbp),%rax
  43bc74:	48 89 c7             	mov    %rax,%rdi
  43bc77:	e8 90 71 ff ff       	callq  432e0c <std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >::~unique_ptr()>
  43bc7c:	eb 1a                	jmp    43bc98 <std::_MakeUniq<x666::UnaryOp>::__single_object std::make_unique<x666::UnaryOp, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, x666::Operator&>(std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&&, x666::Operator&)+0x9c>
  43bc7e:	48 89 c3             	mov    %rax,%rbx
  43bc81:	48 8d 45 d8          	lea    -0x28(%rbp),%rax
  43bc85:	48 89 c7             	mov    %rax,%rdi
  43bc88:	e8 7f 71 ff ff       	callq  432e0c <std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >::~unique_ptr()>
  43bc8d:	48 89 d8             	mov    %rbx,%rax
  43bc90:	48 89 c7             	mov    %rax,%rdi
  43bc93:	e8 78 6c ff ff       	callq  432910 <_Unwind_Resume@plt>
  43bc98:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  43bc9c:	48 83 c4 38          	add    $0x38,%rsp
  43bca0:	5b                   	pop    %rbx
  43bca1:	41 5c                	pop    %r12
  43bca3:	41 5d                	pop    %r13
  43bca5:	5d                   	pop    %rbp
  43bca6:	c3                   	retq   
  43bca7:	90                   	nop

000000000043bca8 <std::unique_ptr<x666::UnaryOp, std::default_delete<x666::UnaryOp> >::~unique_ptr()>:
      ~unique_ptr() noexcept
  43bca8:	55                   	push   %rbp
  43bca9:	48 89 e5             	mov    %rsp,%rbp
  43bcac:	48 83 ec 20          	sub    $0x20,%rsp
  43bcb0:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
	auto& __ptr = _M_t._M_ptr();
  43bcb4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  43bcb8:	48 89 c7             	mov    %rax,%rdi
  43bcbb:	e8 c8 13 00 00       	callq  43d088 <std::__uniq_ptr_impl<x666::UnaryOp, std::default_delete<x666::UnaryOp> >::_M_ptr()>
  43bcc0:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	if (__ptr != nullptr)
  43bcc4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43bcc8:	48 8b 00             	mov    (%rax),%rax
  43bccb:	48 85 c0             	test   %rax,%rax
  43bcce:	74 21                	je     43bcf1 <std::unique_ptr<x666::UnaryOp, std::default_delete<x666::UnaryOp> >::~unique_ptr()+0x49>
	  get_deleter()(__ptr);
  43bcd0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  43bcd4:	48 89 c7             	mov    %rax,%rdi
  43bcd7:	e8 c6 13 00 00       	callq  43d0a2 <std::unique_ptr<x666::UnaryOp, std::default_delete<x666::UnaryOp> >::get_deleter()>
  43bcdc:	48 89 c2             	mov    %rax,%rdx
  43bcdf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43bce3:	48 8b 00             	mov    (%rax),%rax
  43bce6:	48 89 c6             	mov    %rax,%rsi
  43bce9:	48 89 d7             	mov    %rdx,%rdi
  43bcec:	e8 2f 14 00 00       	callq  43d120 <std::default_delete<x666::UnaryOp>::operator()(x666::UnaryOp*) const>
	__ptr = pointer();
  43bcf1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43bcf5:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
      }
  43bcfc:	90                   	nop
  43bcfd:	c9                   	leaveq 
  43bcfe:	c3                   	retq   
  43bcff:	90                   	nop

000000000043bd00 <std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >::unique_ptr<x666::UnaryOp, std::default_delete<x666::UnaryOp>, void>(std::unique_ptr<x666::UnaryOp, std::default_delete<x666::UnaryOp> >&&)>:
	unique_ptr(unique_ptr<_Up, _Ep>&& __u) noexcept
  43bd00:	55                   	push   %rbp
  43bd01:	48 89 e5             	mov    %rsp,%rbp
  43bd04:	41 54                	push   %r12
  43bd06:	53                   	push   %rbx
  43bd07:	48 83 ec 10          	sub    $0x10,%rsp
  43bd0b:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  43bd0f:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	: _M_t(__u.release(), std::forward<_Ep>(__u.get_deleter()))
  43bd13:	48 8b 5d e8          	mov    -0x18(%rbp),%rbx
  43bd17:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  43bd1b:	48 89 c7             	mov    %rax,%rdi
  43bd1e:	e8 7f 13 00 00       	callq  43d0a2 <std::unique_ptr<x666::UnaryOp, std::default_delete<x666::UnaryOp> >::get_deleter()>
  43bd23:	48 89 c7             	mov    %rax,%rdi
  43bd26:	e8 5c 14 00 00       	callq  43d187 <std::default_delete<x666::UnaryOp>&& std::forward<std::default_delete<x666::UnaryOp> >(std::remove_reference<std::default_delete<x666::UnaryOp> >::type&)>
  43bd2b:	49 89 c4             	mov    %rax,%r12
  43bd2e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  43bd32:	48 89 c7             	mov    %rax,%rdi
  43bd35:	e8 18 14 00 00       	callq  43d152 <std::unique_ptr<x666::UnaryOp, std::default_delete<x666::UnaryOp> >::release()>
  43bd3a:	4c 89 e2             	mov    %r12,%rdx
  43bd3d:	48 89 c6             	mov    %rax,%rsi
  43bd40:	48 89 df             	mov    %rbx,%rdi
  43bd43:	e8 4e 14 00 00       	callq  43d196 <std::__uniq_ptr_impl<x666::Expression, std::default_delete<x666::Expression> >::__uniq_ptr_impl<std::default_delete<x666::UnaryOp> >(x666::Expression*, std::default_delete<x666::UnaryOp>&&)>
	{ }
  43bd48:	90                   	nop
  43bd49:	48 83 c4 10          	add    $0x10,%rsp
  43bd4d:	5b                   	pop    %rbx
  43bd4e:	41 5c                	pop    %r12
  43bd50:	5d                   	pop    %rbp
  43bd51:	c3                   	retq   

000000000043bd52 <std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >::operator=(std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&&)>:
      operator=(unique_ptr&& __u) noexcept
  43bd52:	55                   	push   %rbp
  43bd53:	48 89 e5             	mov    %rsp,%rbp
  43bd56:	48 83 ec 10          	sub    $0x10,%rsp
  43bd5a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  43bd5e:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	reset(__u.release());
  43bd62:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  43bd66:	48 89 c7             	mov    %rax,%rdi
  43bd69:	e8 ec 10 00 00       	callq  43ce5a <std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >::release()>
  43bd6e:	48 89 c2             	mov    %rax,%rdx
  43bd71:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43bd75:	48 89 d6             	mov    %rdx,%rsi
  43bd78:	48 89 c7             	mov    %rax,%rdi
  43bd7b:	e8 56 14 00 00       	callq  43d1d6 <std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >::reset(x666::Expression*)>
	get_deleter() = std::forward<deleter_type>(__u.get_deleter());
  43bd80:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  43bd84:	48 89 c7             	mov    %rax,%rdi
  43bd87:	e8 82 74 ff ff       	callq  43320e <std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >::get_deleter()>
  43bd8c:	48 89 c7             	mov    %rax,%rdi
  43bd8f:	e8 fb 10 00 00       	callq  43ce8f <std::default_delete<x666::Expression>&& std::forward<std::default_delete<x666::Expression> >(std::remove_reference<std::default_delete<x666::Expression> >::type&)>
  43bd94:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43bd98:	48 89 c7             	mov    %rax,%rdi
  43bd9b:	e8 6e 74 ff ff       	callq  43320e <std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >::get_deleter()>
	return *this;
  43bda0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
      }
  43bda4:	c9                   	leaveq 
  43bda5:	c3                   	retq   

000000000043bda6 <std::variant<x666::Identifier, x666::IntLiteral, x666::StringLiteral>::index() const>:
      constexpr size_t index() const noexcept
  43bda6:	55                   	push   %rbp
  43bda7:	48 89 e5             	mov    %rsp,%rbp
  43bdaa:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	if (this->_M_index ==
  43bdae:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43bdb2:	0f b6 40 20          	movzbl 0x20(%rax),%eax
  43bdb6:	3c ff                	cmp    $0xff,%al
  43bdb8:	75 09                	jne    43bdc3 <std::variant<x666::Identifier, x666::IntLiteral, x666::StringLiteral>::index() const+0x1d>
	  return variant_npos;
  43bdba:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
  43bdc1:	eb 0b                	jmp    43bdce <std::variant<x666::Identifier, x666::IntLiteral, x666::StringLiteral>::index() const+0x28>
	return this->_M_index;
  43bdc3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43bdc7:	0f b6 40 20          	movzbl 0x20(%rax),%eax
  43bdcb:	0f b6 c0             	movzbl %al,%eax
      }
  43bdce:	5d                   	pop    %rbp
  43bdcf:	c3                   	retq   

000000000043bdd0 <std::variant<x666::Identifier, x666::IntLiteral, x666::StringLiteral> const& std::forward<std::variant<x666::Identifier, x666::IntLiteral, x666::StringLiteral> const&>(std::remove_reference<std::variant<x666::Identifier, x666::IntLiteral, x666::StringLiteral> const&>::type&)>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
  43bdd0:	55                   	push   %rbp
  43bdd1:	48 89 e5             	mov    %rsp,%rbp
  43bdd4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<_Tp&&>(__t); }
  43bdd8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43bddc:	5d                   	pop    %rbp
  43bddd:	c3                   	retq   

000000000043bdde <std::__detail::__variant::_Variadic_union<x666::Identifier, x666::IntLiteral, x666::StringLiteral> const& std::forward<std::__detail::__variant::_Variadic_union<x666::Identifier, x666::IntLiteral, x666::StringLiteral> const&>(std::remove_reference<std::__detail::__variant::_Variadic_union<x666::Identifier, x666::IntLiteral, x666::StringLiteral> const&>::type&)>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
  43bdde:	55                   	push   %rbp
  43bddf:	48 89 e5             	mov    %rsp,%rbp
  43bde2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<_Tp&&>(__t); }
  43bde6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43bdea:	5d                   	pop    %rbp
  43bdeb:	c3                   	retq   

000000000043bdec <decltype(auto) std::__detail::__variant::__get<std::__detail::__variant::_Variadic_union<x666::Identifier, x666::IntLiteral, x666::StringLiteral> const&>(std::in_place_index_t<0ul>, std::__detail::__variant::_Variadic_union<x666::Identifier, x666::IntLiteral, x666::StringLiteral> const&)>:
    constexpr decltype(auto) __get(in_place_index_t<0>, _Union&& __u)
  43bdec:	55                   	push   %rbp
  43bded:	48 89 e5             	mov    %rsp,%rbp
  43bdf0:	48 83 ec 10          	sub    $0x10,%rsp
  43bdf4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return std::forward<_Union>(__u)._M_first._M_get(); }
  43bdf8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43bdfc:	48 89 c7             	mov    %rax,%rdi
  43bdff:	e8 da ff ff ff       	callq  43bdde <std::__detail::__variant::_Variadic_union<x666::Identifier, x666::IntLiteral, x666::StringLiteral> const& std::forward<std::__detail::__variant::_Variadic_union<x666::Identifier, x666::IntLiteral, x666::StringLiteral> const&>(std::remove_reference<std::__detail::__variant::_Variadic_union<x666::Identifier, x666::IntLiteral, x666::StringLiteral> const&>::type&)>
  43be04:	48 89 c7             	mov    %rax,%rdi
  43be07:	e8 22 14 00 00       	callq  43d22e <std::__detail::__variant::_Uninitialized<x666::Identifier, false>::_M_get() const &>
  43be0c:	c9                   	leaveq 
  43be0d:	c3                   	retq   

000000000043be0e <decltype(auto) std::__detail::__variant::__get<0ul, std::variant<x666::Identifier, x666::IntLiteral, x666::StringLiteral> const&>(std::variant<x666::Identifier, x666::IntLiteral, x666::StringLiteral> const&)>:
    constexpr decltype(auto) __get(_Variant&& __v)
  43be0e:	55                   	push   %rbp
  43be0f:	48 89 e5             	mov    %rsp,%rbp
  43be12:	53                   	push   %rbx
  43be13:	48 83 ec 18          	sub    $0x18,%rsp
  43be17:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
      return __get(std::in_place_index<_Np>, std::forward<_Variant>(__v)._M_u);
  43be1b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  43be1f:	48 89 c7             	mov    %rax,%rdi
  43be22:	e8 a9 ff ff ff       	callq  43bdd0 <std::variant<x666::Identifier, x666::IntLiteral, x666::StringLiteral> const& std::forward<std::variant<x666::Identifier, x666::IntLiteral, x666::StringLiteral> const&>(std::remove_reference<std::variant<x666::Identifier, x666::IntLiteral, x666::StringLiteral> const&>::type&)>
  43be27:	48 83 ec 08          	sub    $0x8,%rsp
  43be2b:	53                   	push   %rbx
  43be2c:	48 89 c7             	mov    %rax,%rdi
  43be2f:	e8 b8 ff ff ff       	callq  43bdec <decltype(auto) std::__detail::__variant::__get<std::__detail::__variant::_Variadic_union<x666::Identifier, x666::IntLiteral, x666::StringLiteral> const&>(std::in_place_index_t<0ul>, std::__detail::__variant::_Variadic_union<x666::Identifier, x666::IntLiteral, x666::StringLiteral> const&)>
  43be34:	48 83 c4 10          	add    $0x10,%rsp
    }
  43be38:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  43be3c:	c9                   	leaveq 
  43be3d:	c3                   	retq   

000000000043be3e <std::variant_alternative<0ul, std::variant<x666::Identifier, x666::IntLiteral, x666::StringLiteral> >::type const& std::get<0ul, x666::Identifier, x666::IntLiteral, x666::StringLiteral>(std::variant<x666::Identifier, x666::IntLiteral, x666::StringLiteral> const&)>:
    get(const variant<_Types...>& __v)
  43be3e:	55                   	push   %rbp
  43be3f:	48 89 e5             	mov    %rsp,%rbp
  43be42:	48 83 ec 10          	sub    $0x10,%rsp
  43be46:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      if (__v.index() != _Np)
  43be4a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43be4e:	48 89 c7             	mov    %rax,%rdi
  43be51:	e8 50 ff ff ff       	callq  43bda6 <std::variant<x666::Identifier, x666::IntLiteral, x666::StringLiteral>::index() const>
  43be56:	48 85 c0             	test   %rax,%rax
  43be59:	0f 95 c0             	setne  %al
  43be5c:	84 c0                	test   %al,%al
  43be5e:	74 0a                	je     43be6a <std::variant_alternative<0ul, std::variant<x666::Identifier, x666::IntLiteral, x666::StringLiteral> >::type const& std::get<0ul, x666::Identifier, x666::IntLiteral, x666::StringLiteral>(std::variant<x666::Identifier, x666::IntLiteral, x666::StringLiteral> const&)+0x2c>
	__throw_bad_variant_access("Unexpected index");
  43be60:	bf 2c 47 44 00       	mov    $0x44472c,%edi
  43be65:	e8 83 d8 ff ff       	callq  4396ed <std::__throw_bad_variant_access(char const*)>
      return __detail::__variant::__get<_Np>(__v);
  43be6a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43be6e:	48 89 c7             	mov    %rax,%rdi
  43be71:	e8 98 ff ff ff       	callq  43be0e <decltype(auto) std::__detail::__variant::__get<0ul, std::variant<x666::Identifier, x666::IntLiteral, x666::StringLiteral> const&>(std::variant<x666::Identifier, x666::IntLiteral, x666::StringLiteral> const&)>
    }
  43be76:	c9                   	leaveq 
  43be77:	c3                   	retq   

000000000043be78 <std::__detail::__variant::_Variadic_union<x666::IntLiteral, x666::StringLiteral> const& std::forward<std::__detail::__variant::_Variadic_union<x666::IntLiteral, x666::StringLiteral> const&>(std::remove_reference<std::__detail::__variant::_Variadic_union<x666::IntLiteral, x666::StringLiteral> const&>::type&)>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
  43be78:	55                   	push   %rbp
  43be79:	48 89 e5             	mov    %rsp,%rbp
  43be7c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<_Tp&&>(__t); }
  43be80:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43be84:	5d                   	pop    %rbp
  43be85:	c3                   	retq   

000000000043be86 <decltype(auto) std::__detail::__variant::__get<std::__detail::__variant::_Variadic_union<x666::IntLiteral, x666::StringLiteral> const&>(std::in_place_index_t<0ul>, std::__detail::__variant::_Variadic_union<x666::IntLiteral, x666::StringLiteral> const&)>:
    constexpr decltype(auto) __get(in_place_index_t<0>, _Union&& __u)
  43be86:	55                   	push   %rbp
  43be87:	48 89 e5             	mov    %rsp,%rbp
  43be8a:	48 83 ec 10          	sub    $0x10,%rsp
  43be8e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return std::forward<_Union>(__u)._M_first._M_get(); }
  43be92:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43be96:	48 89 c7             	mov    %rax,%rdi
  43be99:	e8 da ff ff ff       	callq  43be78 <std::__detail::__variant::_Variadic_union<x666::IntLiteral, x666::StringLiteral> const& std::forward<std::__detail::__variant::_Variadic_union<x666::IntLiteral, x666::StringLiteral> const&>(std::remove_reference<std::__detail::__variant::_Variadic_union<x666::IntLiteral, x666::StringLiteral> const&>::type&)>
  43be9e:	48 89 c7             	mov    %rax,%rdi
  43bea1:	e8 a2 13 00 00       	callq  43d248 <std::__detail::__variant::_Uninitialized<x666::IntLiteral, false>::_M_get() const &>
  43bea6:	c9                   	leaveq 
  43bea7:	c3                   	retq   

000000000043bea8 <decltype(auto) std::__detail::__variant::__get<1ul, std::__detail::__variant::_Variadic_union<x666::Identifier, x666::IntLiteral, x666::StringLiteral> const&>(std::in_place_index_t<1ul>, std::__detail::__variant::_Variadic_union<x666::Identifier, x666::IntLiteral, x666::StringLiteral> const&)>:
    constexpr decltype(auto) __get(in_place_index_t<_Np>, _Union&& __u)
  43bea8:	55                   	push   %rbp
  43bea9:	48 89 e5             	mov    %rsp,%rbp
  43beac:	53                   	push   %rbx
  43bead:	48 83 ec 18          	sub    $0x18,%rsp
  43beb1:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    { return __get(in_place_index<_Np-1>, std::forward<_Union>(__u)._M_rest); }
  43beb5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  43beb9:	48 89 c7             	mov    %rax,%rdi
  43bebc:	e8 1d ff ff ff       	callq  43bdde <std::__detail::__variant::_Variadic_union<x666::Identifier, x666::IntLiteral, x666::StringLiteral> const& std::forward<std::__detail::__variant::_Variadic_union<x666::Identifier, x666::IntLiteral, x666::StringLiteral> const&>(std::remove_reference<std::__detail::__variant::_Variadic_union<x666::Identifier, x666::IntLiteral, x666::StringLiteral> const&>::type&)>
  43bec1:	48 83 ec 08          	sub    $0x8,%rsp
  43bec5:	53                   	push   %rbx
  43bec6:	48 89 c7             	mov    %rax,%rdi
  43bec9:	e8 b8 ff ff ff       	callq  43be86 <decltype(auto) std::__detail::__variant::__get<std::__detail::__variant::_Variadic_union<x666::IntLiteral, x666::StringLiteral> const&>(std::in_place_index_t<0ul>, std::__detail::__variant::_Variadic_union<x666::IntLiteral, x666::StringLiteral> const&)>
  43bece:	48 83 c4 10          	add    $0x10,%rsp
  43bed2:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  43bed6:	c9                   	leaveq 
  43bed7:	c3                   	retq   

000000000043bed8 <decltype(auto) std::__detail::__variant::__get<1ul, std::variant<x666::Identifier, x666::IntLiteral, x666::StringLiteral> const&>(std::variant<x666::Identifier, x666::IntLiteral, x666::StringLiteral> const&)>:
    constexpr decltype(auto) __get(_Variant&& __v)
  43bed8:	55                   	push   %rbp
  43bed9:	48 89 e5             	mov    %rsp,%rbp
  43bedc:	53                   	push   %rbx
  43bedd:	48 83 ec 18          	sub    $0x18,%rsp
  43bee1:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
      return __get(std::in_place_index<_Np>, std::forward<_Variant>(__v)._M_u);
  43bee5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  43bee9:	48 89 c7             	mov    %rax,%rdi
  43beec:	e8 df fe ff ff       	callq  43bdd0 <std::variant<x666::Identifier, x666::IntLiteral, x666::StringLiteral> const& std::forward<std::variant<x666::Identifier, x666::IntLiteral, x666::StringLiteral> const&>(std::remove_reference<std::variant<x666::Identifier, x666::IntLiteral, x666::StringLiteral> const&>::type&)>
  43bef1:	48 83 ec 08          	sub    $0x8,%rsp
  43bef5:	53                   	push   %rbx
  43bef6:	48 89 c7             	mov    %rax,%rdi
  43bef9:	e8 aa ff ff ff       	callq  43bea8 <decltype(auto) std::__detail::__variant::__get<1ul, std::__detail::__variant::_Variadic_union<x666::Identifier, x666::IntLiteral, x666::StringLiteral> const&>(std::in_place_index_t<1ul>, std::__detail::__variant::_Variadic_union<x666::Identifier, x666::IntLiteral, x666::StringLiteral> const&)>
  43befe:	48 83 c4 10          	add    $0x10,%rsp
    }
  43bf02:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  43bf06:	c9                   	leaveq 
  43bf07:	c3                   	retq   

000000000043bf08 <std::variant_alternative<1ul, std::variant<x666::Identifier, x666::IntLiteral, x666::StringLiteral> >::type const& std::get<1ul, x666::Identifier, x666::IntLiteral, x666::StringLiteral>(std::variant<x666::Identifier, x666::IntLiteral, x666::StringLiteral> const&)>:
    get(const variant<_Types...>& __v)
  43bf08:	55                   	push   %rbp
  43bf09:	48 89 e5             	mov    %rsp,%rbp
  43bf0c:	48 83 ec 10          	sub    $0x10,%rsp
  43bf10:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      if (__v.index() != _Np)
  43bf14:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43bf18:	48 89 c7             	mov    %rax,%rdi
  43bf1b:	e8 86 fe ff ff       	callq  43bda6 <std::variant<x666::Identifier, x666::IntLiteral, x666::StringLiteral>::index() const>
  43bf20:	48 83 f8 01          	cmp    $0x1,%rax
  43bf24:	0f 95 c0             	setne  %al
  43bf27:	84 c0                	test   %al,%al
  43bf29:	74 0a                	je     43bf35 <std::variant_alternative<1ul, std::variant<x666::Identifier, x666::IntLiteral, x666::StringLiteral> >::type const& std::get<1ul, x666::Identifier, x666::IntLiteral, x666::StringLiteral>(std::variant<x666::Identifier, x666::IntLiteral, x666::StringLiteral> const&)+0x2d>
	__throw_bad_variant_access("Unexpected index");
  43bf2b:	bf 2c 47 44 00       	mov    $0x44472c,%edi
  43bf30:	e8 b8 d7 ff ff       	callq  4396ed <std::__throw_bad_variant_access(char const*)>
      return __detail::__variant::__get<_Np>(__v);
  43bf35:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43bf39:	48 89 c7             	mov    %rax,%rdi
  43bf3c:	e8 97 ff ff ff       	callq  43bed8 <decltype(auto) std::__detail::__variant::__get<1ul, std::variant<x666::Identifier, x666::IntLiteral, x666::StringLiteral> const&>(std::variant<x666::Identifier, x666::IntLiteral, x666::StringLiteral> const&)>
    }
  43bf41:	c9                   	leaveq 
  43bf42:	c3                   	retq   

000000000043bf43 <std::__detail::__variant::_Variadic_union<x666::StringLiteral> const& std::forward<std::__detail::__variant::_Variadic_union<x666::StringLiteral> const&>(std::remove_reference<std::__detail::__variant::_Variadic_union<x666::StringLiteral> const&>::type&)>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
  43bf43:	55                   	push   %rbp
  43bf44:	48 89 e5             	mov    %rsp,%rbp
  43bf47:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<_Tp&&>(__t); }
  43bf4b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43bf4f:	5d                   	pop    %rbp
  43bf50:	c3                   	retq   

000000000043bf51 <decltype(auto) std::__detail::__variant::__get<std::__detail::__variant::_Variadic_union<x666::StringLiteral> const&>(std::in_place_index_t<0ul>, std::__detail::__variant::_Variadic_union<x666::StringLiteral> const&)>:
    constexpr decltype(auto) __get(in_place_index_t<0>, _Union&& __u)
  43bf51:	55                   	push   %rbp
  43bf52:	48 89 e5             	mov    %rsp,%rbp
  43bf55:	48 83 ec 10          	sub    $0x10,%rsp
  43bf59:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return std::forward<_Union>(__u)._M_first._M_get(); }
  43bf5d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43bf61:	48 89 c7             	mov    %rax,%rdi
  43bf64:	e8 da ff ff ff       	callq  43bf43 <std::__detail::__variant::_Variadic_union<x666::StringLiteral> const& std::forward<std::__detail::__variant::_Variadic_union<x666::StringLiteral> const&>(std::remove_reference<std::__detail::__variant::_Variadic_union<x666::StringLiteral> const&>::type&)>
  43bf69:	48 89 c7             	mov    %rax,%rdi
  43bf6c:	e8 f1 12 00 00       	callq  43d262 <std::__detail::__variant::_Uninitialized<x666::StringLiteral, false>::_M_get() const &>
  43bf71:	c9                   	leaveq 
  43bf72:	c3                   	retq   

000000000043bf73 <decltype(auto) std::__detail::__variant::__get<1ul, std::__detail::__variant::_Variadic_union<x666::IntLiteral, x666::StringLiteral> const&>(std::in_place_index_t<1ul>, std::__detail::__variant::_Variadic_union<x666::IntLiteral, x666::StringLiteral> const&)>:
    constexpr decltype(auto) __get(in_place_index_t<_Np>, _Union&& __u)
  43bf73:	55                   	push   %rbp
  43bf74:	48 89 e5             	mov    %rsp,%rbp
  43bf77:	53                   	push   %rbx
  43bf78:	48 83 ec 18          	sub    $0x18,%rsp
  43bf7c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    { return __get(in_place_index<_Np-1>, std::forward<_Union>(__u)._M_rest); }
  43bf80:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  43bf84:	48 89 c7             	mov    %rax,%rdi
  43bf87:	e8 ec fe ff ff       	callq  43be78 <std::__detail::__variant::_Variadic_union<x666::IntLiteral, x666::StringLiteral> const& std::forward<std::__detail::__variant::_Variadic_union<x666::IntLiteral, x666::StringLiteral> const&>(std::remove_reference<std::__detail::__variant::_Variadic_union<x666::IntLiteral, x666::StringLiteral> const&>::type&)>
  43bf8c:	48 83 ec 08          	sub    $0x8,%rsp
  43bf90:	53                   	push   %rbx
  43bf91:	48 89 c7             	mov    %rax,%rdi
  43bf94:	e8 b8 ff ff ff       	callq  43bf51 <decltype(auto) std::__detail::__variant::__get<std::__detail::__variant::_Variadic_union<x666::StringLiteral> const&>(std::in_place_index_t<0ul>, std::__detail::__variant::_Variadic_union<x666::StringLiteral> const&)>
  43bf99:	48 83 c4 10          	add    $0x10,%rsp
  43bf9d:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  43bfa1:	c9                   	leaveq 
  43bfa2:	c3                   	retq   

000000000043bfa3 <decltype(auto) std::__detail::__variant::__get<2ul, std::__detail::__variant::_Variadic_union<x666::Identifier, x666::IntLiteral, x666::StringLiteral> const&>(std::in_place_index_t<2ul>, std::__detail::__variant::_Variadic_union<x666::Identifier, x666::IntLiteral, x666::StringLiteral> const&)>:
    constexpr decltype(auto) __get(in_place_index_t<_Np>, _Union&& __u)
  43bfa3:	55                   	push   %rbp
  43bfa4:	48 89 e5             	mov    %rsp,%rbp
  43bfa7:	53                   	push   %rbx
  43bfa8:	48 83 ec 18          	sub    $0x18,%rsp
  43bfac:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    { return __get(in_place_index<_Np-1>, std::forward<_Union>(__u)._M_rest); }
  43bfb0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  43bfb4:	48 89 c7             	mov    %rax,%rdi
  43bfb7:	e8 22 fe ff ff       	callq  43bdde <std::__detail::__variant::_Variadic_union<x666::Identifier, x666::IntLiteral, x666::StringLiteral> const& std::forward<std::__detail::__variant::_Variadic_union<x666::Identifier, x666::IntLiteral, x666::StringLiteral> const&>(std::remove_reference<std::__detail::__variant::_Variadic_union<x666::Identifier, x666::IntLiteral, x666::StringLiteral> const&>::type&)>
  43bfbc:	48 83 ec 08          	sub    $0x8,%rsp
  43bfc0:	53                   	push   %rbx
  43bfc1:	48 89 c7             	mov    %rax,%rdi
  43bfc4:	e8 aa ff ff ff       	callq  43bf73 <decltype(auto) std::__detail::__variant::__get<1ul, std::__detail::__variant::_Variadic_union<x666::IntLiteral, x666::StringLiteral> const&>(std::in_place_index_t<1ul>, std::__detail::__variant::_Variadic_union<x666::IntLiteral, x666::StringLiteral> const&)>
  43bfc9:	48 83 c4 10          	add    $0x10,%rsp
  43bfcd:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  43bfd1:	c9                   	leaveq 
  43bfd2:	c3                   	retq   

000000000043bfd3 <decltype(auto) std::__detail::__variant::__get<2ul, std::variant<x666::Identifier, x666::IntLiteral, x666::StringLiteral> const&>(std::variant<x666::Identifier, x666::IntLiteral, x666::StringLiteral> const&)>:
    constexpr decltype(auto) __get(_Variant&& __v)
  43bfd3:	55                   	push   %rbp
  43bfd4:	48 89 e5             	mov    %rsp,%rbp
  43bfd7:	53                   	push   %rbx
  43bfd8:	48 83 ec 18          	sub    $0x18,%rsp
  43bfdc:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
      return __get(std::in_place_index<_Np>, std::forward<_Variant>(__v)._M_u);
  43bfe0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  43bfe4:	48 89 c7             	mov    %rax,%rdi
  43bfe7:	e8 e4 fd ff ff       	callq  43bdd0 <std::variant<x666::Identifier, x666::IntLiteral, x666::StringLiteral> const& std::forward<std::variant<x666::Identifier, x666::IntLiteral, x666::StringLiteral> const&>(std::remove_reference<std::variant<x666::Identifier, x666::IntLiteral, x666::StringLiteral> const&>::type&)>
  43bfec:	48 83 ec 08          	sub    $0x8,%rsp
  43bff0:	53                   	push   %rbx
  43bff1:	48 89 c7             	mov    %rax,%rdi
  43bff4:	e8 aa ff ff ff       	callq  43bfa3 <decltype(auto) std::__detail::__variant::__get<2ul, std::__detail::__variant::_Variadic_union<x666::Identifier, x666::IntLiteral, x666::StringLiteral> const&>(std::in_place_index_t<2ul>, std::__detail::__variant::_Variadic_union<x666::Identifier, x666::IntLiteral, x666::StringLiteral> const&)>
  43bff9:	48 83 c4 10          	add    $0x10,%rsp
    }
  43bffd:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  43c001:	c9                   	leaveq 
  43c002:	c3                   	retq   

000000000043c003 <std::variant_alternative<2ul, std::variant<x666::Identifier, x666::IntLiteral, x666::StringLiteral> >::type const& std::get<2ul, x666::Identifier, x666::IntLiteral, x666::StringLiteral>(std::variant<x666::Identifier, x666::IntLiteral, x666::StringLiteral> const&)>:
    get(const variant<_Types...>& __v)
  43c003:	55                   	push   %rbp
  43c004:	48 89 e5             	mov    %rsp,%rbp
  43c007:	48 83 ec 10          	sub    $0x10,%rsp
  43c00b:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      if (__v.index() != _Np)
  43c00f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43c013:	48 89 c7             	mov    %rax,%rdi
  43c016:	e8 8b fd ff ff       	callq  43bda6 <std::variant<x666::Identifier, x666::IntLiteral, x666::StringLiteral>::index() const>
  43c01b:	48 83 f8 02          	cmp    $0x2,%rax
  43c01f:	0f 95 c0             	setne  %al
  43c022:	84 c0                	test   %al,%al
  43c024:	74 0a                	je     43c030 <std::variant_alternative<2ul, std::variant<x666::Identifier, x666::IntLiteral, x666::StringLiteral> >::type const& std::get<2ul, x666::Identifier, x666::IntLiteral, x666::StringLiteral>(std::variant<x666::Identifier, x666::IntLiteral, x666::StringLiteral> const&)+0x2d>
	__throw_bad_variant_access("Unexpected index");
  43c026:	bf 2c 47 44 00       	mov    $0x44472c,%edi
  43c02b:	e8 bd d6 ff ff       	callq  4396ed <std::__throw_bad_variant_access(char const*)>
      return __detail::__variant::__get<_Np>(__v);
  43c030:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43c034:	48 89 c7             	mov    %rax,%rdi
  43c037:	e8 97 ff ff ff       	callq  43bfd3 <decltype(auto) std::__detail::__variant::__get<2ul, std::variant<x666::Identifier, x666::IntLiteral, x666::StringLiteral> const&>(std::variant<x666::Identifier, x666::IntLiteral, x666::StringLiteral> const&)>
    }
  43c03c:	c9                   	leaveq 
  43c03d:	c3                   	retq   

000000000043c03e <std::_MakeUniq<x666::Literal>::__single_object std::make_unique<x666::Literal, x666::Identifier>(x666::Identifier&&)>:
    make_unique(_Args&&... __args)
  43c03e:	55                   	push   %rbp
  43c03f:	48 89 e5             	mov    %rsp,%rbp
  43c042:	41 54                	push   %r12
  43c044:	53                   	push   %rbx
  43c045:	48 83 ec 40          	sub    $0x40,%rsp
  43c049:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
  43c04d:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
  43c051:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  43c055:	48 89 c7             	mov    %rax,%rdi
  43c058:	e8 1a a5 ff ff       	callq  436577 <x666::Identifier&& std::forward<x666::Identifier>(std::remove_reference<x666::Identifier>::type&)>
  43c05d:	48 89 c2             	mov    %rax,%rdx
  43c060:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
  43c064:	48 89 d6             	mov    %rdx,%rsi
  43c067:	48 89 c7             	mov    %rax,%rdi
  43c06a:	e8 69 12 00 00       	callq  43d2d8 <std::variant<x666::Identifier, x666::IntLiteral, x666::StringLiteral>::variant<x666::Identifier, void, void, void>(x666::Identifier&&)>
  43c06f:	48 8d 5d c0          	lea    -0x40(%rbp),%rbx
  43c073:	bf 30 00 00 00       	mov    $0x30,%edi
  43c078:	e8 73 67 ff ff       	callq  4327f0 <operator new(unsigned long)@plt>
  43c07d:	49 89 c4             	mov    %rax,%r12
  43c080:	48 89 de             	mov    %rbx,%rsi
  43c083:	4c 89 e7             	mov    %r12,%rdi
  43c086:	e8 3d d8 ff ff       	callq  4398c8 <x666::Literal::Literal(std::variant<x666::Identifier, x666::IntLiteral, x666::StringLiteral>&&)>
  43c08b:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  43c08f:	4c 89 e6             	mov    %r12,%rsi
  43c092:	48 89 c7             	mov    %rax,%rdi
  43c095:	e8 7e 12 00 00       	callq  43d318 <std::unique_ptr<x666::Literal, std::default_delete<x666::Literal> >::unique_ptr<std::default_delete<x666::Literal>, void>(x666::Literal*)>
  43c09a:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
  43c09e:	48 89 c7             	mov    %rax,%rdi
  43c0a1:	e8 06 d8 ff ff       	callq  4398ac <std::variant<x666::Identifier, x666::IntLiteral, x666::StringLiteral>::~variant()>
  43c0a6:	eb 1a                	jmp    43c0c2 <std::_MakeUniq<x666::Literal>::__single_object std::make_unique<x666::Literal, x666::Identifier>(x666::Identifier&&)+0x84>
  43c0a8:	48 89 c3             	mov    %rax,%rbx
  43c0ab:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
  43c0af:	48 89 c7             	mov    %rax,%rdi
  43c0b2:	e8 f5 d7 ff ff       	callq  4398ac <std::variant<x666::Identifier, x666::IntLiteral, x666::StringLiteral>::~variant()>
  43c0b7:	48 89 d8             	mov    %rbx,%rax
  43c0ba:	48 89 c7             	mov    %rax,%rdi
  43c0bd:	e8 4e 68 ff ff       	callq  432910 <_Unwind_Resume@plt>
  43c0c2:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  43c0c6:	48 83 c4 40          	add    $0x40,%rsp
  43c0ca:	5b                   	pop    %rbx
  43c0cb:	41 5c                	pop    %r12
  43c0cd:	5d                   	pop    %rbp
  43c0ce:	c3                   	retq   
  43c0cf:	90                   	nop

000000000043c0d0 <std::unique_ptr<x666::Literal, std::default_delete<x666::Literal> >::~unique_ptr()>:
      ~unique_ptr() noexcept
  43c0d0:	55                   	push   %rbp
  43c0d1:	48 89 e5             	mov    %rsp,%rbp
  43c0d4:	48 83 ec 20          	sub    $0x20,%rsp
  43c0d8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
	auto& __ptr = _M_t._M_ptr();
  43c0dc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  43c0e0:	48 89 c7             	mov    %rax,%rdi
  43c0e3:	e8 56 12 00 00       	callq  43d33e <std::__uniq_ptr_impl<x666::Literal, std::default_delete<x666::Literal> >::_M_ptr()>
  43c0e8:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	if (__ptr != nullptr)
  43c0ec:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43c0f0:	48 8b 00             	mov    (%rax),%rax
  43c0f3:	48 85 c0             	test   %rax,%rax
  43c0f6:	74 21                	je     43c119 <std::unique_ptr<x666::Literal, std::default_delete<x666::Literal> >::~unique_ptr()+0x49>
	  get_deleter()(__ptr);
  43c0f8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  43c0fc:	48 89 c7             	mov    %rax,%rdi
  43c0ff:	e8 54 12 00 00       	callq  43d358 <std::unique_ptr<x666::Literal, std::default_delete<x666::Literal> >::get_deleter()>
  43c104:	48 89 c2             	mov    %rax,%rdx
  43c107:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43c10b:	48 8b 00             	mov    (%rax),%rax
  43c10e:	48 89 c6             	mov    %rax,%rsi
  43c111:	48 89 d7             	mov    %rdx,%rdi
  43c114:	e8 bd 12 00 00       	callq  43d3d6 <std::default_delete<x666::Literal>::operator()(x666::Literal*) const>
	__ptr = pointer();
  43c119:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43c11d:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
      }
  43c124:	90                   	nop
  43c125:	c9                   	leaveq 
  43c126:	c3                   	retq   
  43c127:	90                   	nop

000000000043c128 <std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >::unique_ptr<x666::Literal, std::default_delete<x666::Literal>, void>(std::unique_ptr<x666::Literal, std::default_delete<x666::Literal> >&&)>:
	unique_ptr(unique_ptr<_Up, _Ep>&& __u) noexcept
  43c128:	55                   	push   %rbp
  43c129:	48 89 e5             	mov    %rsp,%rbp
  43c12c:	41 54                	push   %r12
  43c12e:	53                   	push   %rbx
  43c12f:	48 83 ec 10          	sub    $0x10,%rsp
  43c133:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  43c137:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	: _M_t(__u.release(), std::forward<_Ep>(__u.get_deleter()))
  43c13b:	48 8b 5d e8          	mov    -0x18(%rbp),%rbx
  43c13f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  43c143:	48 89 c7             	mov    %rax,%rdi
  43c146:	e8 0d 12 00 00       	callq  43d358 <std::unique_ptr<x666::Literal, std::default_delete<x666::Literal> >::get_deleter()>
  43c14b:	48 89 c7             	mov    %rax,%rdi
  43c14e:	e8 ea 12 00 00       	callq  43d43d <std::default_delete<x666::Literal>&& std::forward<std::default_delete<x666::Literal> >(std::remove_reference<std::default_delete<x666::Literal> >::type&)>
  43c153:	49 89 c4             	mov    %rax,%r12
  43c156:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  43c15a:	48 89 c7             	mov    %rax,%rdi
  43c15d:	e8 a6 12 00 00       	callq  43d408 <std::unique_ptr<x666::Literal, std::default_delete<x666::Literal> >::release()>
  43c162:	4c 89 e2             	mov    %r12,%rdx
  43c165:	48 89 c6             	mov    %rax,%rsi
  43c168:	48 89 df             	mov    %rbx,%rdi
  43c16b:	e8 dc 12 00 00       	callq  43d44c <std::__uniq_ptr_impl<x666::Expression, std::default_delete<x666::Expression> >::__uniq_ptr_impl<std::default_delete<x666::Literal> >(x666::Expression*, std::default_delete<x666::Literal>&&)>
	{ }
  43c170:	90                   	nop
  43c171:	48 83 c4 10          	add    $0x10,%rsp
  43c175:	5b                   	pop    %rbx
  43c176:	41 5c                	pop    %r12
  43c178:	5d                   	pop    %rbp
  43c179:	c3                   	retq   

000000000043c17a <std::stack<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::deque<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > > >::push(std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&&)>:
      push(const value_type& __x)
      { c.push_back(__x); }

#if __cplusplus >= 201103L
      void
      push(value_type&& __x)
  43c17a:	55                   	push   %rbp
  43c17b:	48 89 e5             	mov    %rsp,%rbp
  43c17e:	53                   	push   %rbx
  43c17f:	48 83 ec 18          	sub    $0x18,%rsp
  43c183:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  43c187:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
      { c.push_back(std::move(__x)); }
  43c18b:	48 8b 5d e8          	mov    -0x18(%rbp),%rbx
  43c18f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  43c193:	48 89 c7             	mov    %rax,%rdi
  43c196:	e8 8c d7 ff ff       	callq  439927 <std::remove_reference<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&>::type&& std::move<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&>(std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&)>
  43c19b:	48 89 c6             	mov    %rax,%rsi
  43c19e:	48 89 df             	mov    %rbx,%rdi
  43c1a1:	e8 e6 12 00 00       	callq  43d48c <std::deque<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > >::push_back(std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&&)>
  43c1a6:	90                   	nop
  43c1a7:	48 83 c4 18          	add    $0x18,%rsp
  43c1ab:	5b                   	pop    %rbx
  43c1ac:	5d                   	pop    %rbp
  43c1ad:	c3                   	retq   

000000000043c1ae <std::stack<x666::LineInfo, std::deque<x666::LineInfo, std::allocator<x666::LineInfo> > >::push(x666::LineInfo const&)>:
      push(const value_type& __x)
  43c1ae:	55                   	push   %rbp
  43c1af:	48 89 e5             	mov    %rsp,%rbp
  43c1b2:	48 83 ec 10          	sub    $0x10,%rsp
  43c1b6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  43c1ba:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      { c.push_back(__x); }
  43c1be:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43c1c2:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  43c1c6:	48 89 d6             	mov    %rdx,%rsi
  43c1c9:	48 89 c7             	mov    %rax,%rdi
  43c1cc:	e8 ed 12 00 00       	callq  43d4be <std::deque<x666::LineInfo, std::allocator<x666::LineInfo> >::push_back(x666::LineInfo const&)>
  43c1d1:	90                   	nop
  43c1d2:	c9                   	leaveq 
  43c1d3:	c3                   	retq   

000000000043c1d4 <std::_MakeUniq<x666::Literal>::__single_object std::make_unique<x666::Literal, x666::StringLiteral>(x666::StringLiteral&&)>:
    make_unique(_Args&&... __args)
  43c1d4:	55                   	push   %rbp
  43c1d5:	48 89 e5             	mov    %rsp,%rbp
  43c1d8:	41 54                	push   %r12
  43c1da:	53                   	push   %rbx
  43c1db:	48 83 ec 40          	sub    $0x40,%rsp
  43c1df:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
  43c1e3:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
  43c1e7:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  43c1eb:	48 89 c7             	mov    %rax,%rdi
  43c1ee:	e8 2e a4 ff ff       	callq  436621 <x666::StringLiteral&& std::forward<x666::StringLiteral>(std::remove_reference<x666::StringLiteral>::type&)>
  43c1f3:	48 89 c2             	mov    %rax,%rdx
  43c1f6:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
  43c1fa:	48 89 d6             	mov    %rdx,%rsi
  43c1fd:	48 89 c7             	mov    %rax,%rdi
  43c200:	e8 85 13 00 00       	callq  43d58a <std::variant<x666::Identifier, x666::IntLiteral, x666::StringLiteral>::variant<x666::StringLiteral, void, void, void>(x666::StringLiteral&&)>
  43c205:	48 8d 5d c0          	lea    -0x40(%rbp),%rbx
  43c209:	bf 30 00 00 00       	mov    $0x30,%edi
  43c20e:	e8 dd 65 ff ff       	callq  4327f0 <operator new(unsigned long)@plt>
  43c213:	49 89 c4             	mov    %rax,%r12
  43c216:	48 89 de             	mov    %rbx,%rsi
  43c219:	4c 89 e7             	mov    %r12,%rdi
  43c21c:	e8 a7 d6 ff ff       	callq  4398c8 <x666::Literal::Literal(std::variant<x666::Identifier, x666::IntLiteral, x666::StringLiteral>&&)>
  43c221:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  43c225:	4c 89 e6             	mov    %r12,%rsi
  43c228:	48 89 c7             	mov    %rax,%rdi
  43c22b:	e8 e8 10 00 00       	callq  43d318 <std::unique_ptr<x666::Literal, std::default_delete<x666::Literal> >::unique_ptr<std::default_delete<x666::Literal>, void>(x666::Literal*)>
  43c230:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
  43c234:	48 89 c7             	mov    %rax,%rdi
  43c237:	e8 70 d6 ff ff       	callq  4398ac <std::variant<x666::Identifier, x666::IntLiteral, x666::StringLiteral>::~variant()>
  43c23c:	eb 1a                	jmp    43c258 <std::_MakeUniq<x666::Literal>::__single_object std::make_unique<x666::Literal, x666::StringLiteral>(x666::StringLiteral&&)+0x84>
  43c23e:	48 89 c3             	mov    %rax,%rbx
  43c241:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
  43c245:	48 89 c7             	mov    %rax,%rdi
  43c248:	e8 5f d6 ff ff       	callq  4398ac <std::variant<x666::Identifier, x666::IntLiteral, x666::StringLiteral>::~variant()>
  43c24d:	48 89 d8             	mov    %rbx,%rax
  43c250:	48 89 c7             	mov    %rax,%rdi
  43c253:	e8 b8 66 ff ff       	callq  432910 <_Unwind_Resume@plt>
  43c258:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  43c25c:	48 83 c4 40          	add    $0x40,%rsp
  43c260:	5b                   	pop    %rbx
  43c261:	41 5c                	pop    %r12
  43c263:	5d                   	pop    %rbp
  43c264:	c3                   	retq   

000000000043c265 <std::_MakeUniq<x666::Literal>::__single_object std::make_unique<x666::Literal, x666::IntLiteral>(x666::IntLiteral&&)>:
    make_unique(_Args&&... __args)
  43c265:	55                   	push   %rbp
  43c266:	48 89 e5             	mov    %rsp,%rbp
  43c269:	41 54                	push   %r12
  43c26b:	53                   	push   %rbx
  43c26c:	48 83 ec 40          	sub    $0x40,%rsp
  43c270:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
  43c274:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
  43c278:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  43c27c:	48 89 c7             	mov    %rax,%rdi
  43c27f:	e8 49 a2 ff ff       	callq  4364cd <x666::IntLiteral&& std::forward<x666::IntLiteral>(std::remove_reference<x666::IntLiteral>::type&)>
  43c284:	48 89 c2             	mov    %rax,%rdx
  43c287:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
  43c28b:	48 89 d6             	mov    %rdx,%rsi
  43c28e:	48 89 c7             	mov    %rax,%rdi
  43c291:	e8 90 13 00 00       	callq  43d626 <std::variant<x666::Identifier, x666::IntLiteral, x666::StringLiteral>::variant<x666::IntLiteral, void, void, void>(x666::IntLiteral&&)>
  43c296:	48 8d 5d c0          	lea    -0x40(%rbp),%rbx
  43c29a:	bf 30 00 00 00       	mov    $0x30,%edi
  43c29f:	e8 4c 65 ff ff       	callq  4327f0 <operator new(unsigned long)@plt>
  43c2a4:	49 89 c4             	mov    %rax,%r12
  43c2a7:	48 89 de             	mov    %rbx,%rsi
  43c2aa:	4c 89 e7             	mov    %r12,%rdi
  43c2ad:	e8 16 d6 ff ff       	callq  4398c8 <x666::Literal::Literal(std::variant<x666::Identifier, x666::IntLiteral, x666::StringLiteral>&&)>
  43c2b2:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  43c2b6:	4c 89 e6             	mov    %r12,%rsi
  43c2b9:	48 89 c7             	mov    %rax,%rdi
  43c2bc:	e8 57 10 00 00       	callq  43d318 <std::unique_ptr<x666::Literal, std::default_delete<x666::Literal> >::unique_ptr<std::default_delete<x666::Literal>, void>(x666::Literal*)>
  43c2c1:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
  43c2c5:	48 89 c7             	mov    %rax,%rdi
  43c2c8:	e8 df d5 ff ff       	callq  4398ac <std::variant<x666::Identifier, x666::IntLiteral, x666::StringLiteral>::~variant()>
  43c2cd:	eb 1a                	jmp    43c2e9 <std::_MakeUniq<x666::Literal>::__single_object std::make_unique<x666::Literal, x666::IntLiteral>(x666::IntLiteral&&)+0x84>
  43c2cf:	48 89 c3             	mov    %rax,%rbx
  43c2d2:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
  43c2d6:	48 89 c7             	mov    %rax,%rdi
  43c2d9:	e8 ce d5 ff ff       	callq  4398ac <std::variant<x666::Identifier, x666::IntLiteral, x666::StringLiteral>::~variant()>
  43c2de:	48 89 d8             	mov    %rbx,%rax
  43c2e1:	48 89 c7             	mov    %rax,%rdi
  43c2e4:	e8 27 66 ff ff       	callq  432910 <_Unwind_Resume@plt>
  43c2e9:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  43c2ed:	48 83 c4 40          	add    $0x40,%rsp
  43c2f1:	5b                   	pop    %rbx
  43c2f2:	41 5c                	pop    %r12
  43c2f4:	5d                   	pop    %rbp
  43c2f5:	c3                   	retq   

000000000043c2f6 <std::stack<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::deque<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > > >::empty() const>:
      empty() const
  43c2f6:	55                   	push   %rbp
  43c2f7:	48 89 e5             	mov    %rsp,%rbp
  43c2fa:	48 83 ec 10          	sub    $0x10,%rsp
  43c2fe:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return c.empty(); }
  43c302:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43c306:	48 89 c7             	mov    %rax,%rdi
  43c309:	e8 58 13 00 00       	callq  43d666 <std::deque<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > >::empty() const>
  43c30e:	c9                   	leaveq 
  43c30f:	c3                   	retq   

000000000043c310 <std::stack<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::deque<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > > >::top()>:
      top()
  43c310:	55                   	push   %rbp
  43c311:	48 89 e5             	mov    %rsp,%rbp
  43c314:	48 83 ec 10          	sub    $0x10,%rsp
  43c318:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	return c.back();
  43c31c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43c320:	48 89 c7             	mov    %rax,%rdi
  43c323:	e8 68 13 00 00       	callq  43d690 <std::deque<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > >::back()>
      }
  43c328:	c9                   	leaveq 
  43c329:	c3                   	retq   

000000000043c32a <std::stack<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::deque<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > > >::pop()>:
       *  Note that no data is returned, and if the first element's
       *  data is needed, it should be retrieved before pop() is
       *  called.
       */
      void
      pop()
  43c32a:	55                   	push   %rbp
  43c32b:	48 89 e5             	mov    %rsp,%rbp
  43c32e:	48 83 ec 10          	sub    $0x10,%rsp
  43c332:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      {
	__glibcxx_requires_nonempty();
	c.pop_back();
  43c336:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43c33a:	48 89 c7             	mov    %rax,%rdi
  43c33d:	e8 88 13 00 00       	callq  43d6ca <std::deque<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > >::pop_back()>
      }
  43c342:	90                   	nop
  43c343:	c9                   	leaveq 
  43c344:	c3                   	retq   
  43c345:	90                   	nop

000000000043c346 <std::stack<x666::LineInfo, std::deque<x666::LineInfo, std::allocator<x666::LineInfo> > >::pop()>:
      pop()
  43c346:	55                   	push   %rbp
  43c347:	48 89 e5             	mov    %rsp,%rbp
  43c34a:	48 83 ec 10          	sub    $0x10,%rsp
  43c34e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	c.pop_back();
  43c352:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43c356:	48 89 c7             	mov    %rax,%rdi
  43c359:	e8 ca 13 00 00       	callq  43d728 <std::deque<x666::LineInfo, std::allocator<x666::LineInfo> >::pop_back()>
      }
  43c35e:	90                   	nop
  43c35f:	c9                   	leaveq 
  43c360:	c3                   	retq   
  43c361:	90                   	nop

000000000043c362 <std::vector<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > >::push_back(std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&&)>:
	  _M_realloc_insert(end(), __x);
      }

#if __cplusplus >= 201103L
      void
      push_back(value_type&& __x)
  43c362:	55                   	push   %rbp
  43c363:	48 89 e5             	mov    %rsp,%rbp
  43c366:	48 83 ec 10          	sub    $0x10,%rsp
  43c36a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  43c36e:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      { emplace_back(std::move(__x)); }
  43c372:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  43c376:	48 89 c7             	mov    %rax,%rdi
  43c379:	e8 a9 d5 ff ff       	callq  439927 <std::remove_reference<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&>::type&& std::move<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&>(std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&)>
  43c37e:	48 89 c2             	mov    %rax,%rdx
  43c381:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43c385:	48 89 d6             	mov    %rdx,%rsi
  43c388:	48 89 c7             	mov    %rax,%rdi
  43c38b:	e8 f6 13 00 00       	callq  43d786 <std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >& std::vector<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > >::emplace_back<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > >(std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&&)>
  43c390:	90                   	nop
  43c391:	c9                   	leaveq 
  43c392:	c3                   	retq   

000000000043c393 <x666::LexErrorCode&& std::forward<x666::LexErrorCode>(std::remove_reference<x666::LexErrorCode>::type&)>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
  43c393:	55                   	push   %rbp
  43c394:	48 89 e5             	mov    %rsp,%rbp
  43c397:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<_Tp&&>(__t); }
  43c39b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43c39f:	5d                   	pop    %rbp
  43c3a0:	c3                   	retq   

000000000043c3a1 <x666::LineInfo const& std::forward<x666::LineInfo const&>(std::remove_reference<x666::LineInfo const&>::type&)>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
  43c3a1:	55                   	push   %rbp
  43c3a2:	48 89 e5             	mov    %rsp,%rbp
  43c3a5:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<_Tp&&>(__t); }
  43c3a9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43c3ad:	5d                   	pop    %rbp
  43c3ae:	c3                   	retq   
  43c3af:	90                   	nop

000000000043c3b0 <x666::LexError& std::vector<x666::LexError, std::allocator<x666::LexError> >::emplace_back<x666::LexErrorCode, x666::LineInfo const&>(x666::LexErrorCode&&, x666::LineInfo const&)>:
#if __cplusplus > 201402L
      typename vector<_Tp, _Alloc>::reference
#else
      void
#endif
      vector<_Tp, _Alloc>::
  43c3b0:	55                   	push   %rbp
  43c3b1:	48 89 e5             	mov    %rsp,%rbp
  43c3b4:	41 54                	push   %r12
  43c3b6:	53                   	push   %rbx
  43c3b7:	48 83 ec 20          	sub    $0x20,%rsp
  43c3bb:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  43c3bf:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  43c3c3:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
      emplace_back(_Args&&... __args)
      {
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
  43c3c7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  43c3cb:	48 8b 50 08          	mov    0x8(%rax),%rdx
  43c3cf:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  43c3d3:	48 8b 40 10          	mov    0x10(%rax),%rax
  43c3d7:	48 39 c2             	cmp    %rax,%rdx
  43c3da:	74 4b                	je     43c427 <x666::LexError& std::vector<x666::LexError, std::allocator<x666::LexError> >::emplace_back<x666::LexErrorCode, x666::LineInfo const&>(x666::LexErrorCode&&, x666::LineInfo const&)+0x77>
	  {
	    _GLIBCXX_ASAN_ANNOTATE_GROW(1);
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
  43c3dc:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  43c3e0:	48 89 c7             	mov    %rax,%rdi
  43c3e3:	e8 b9 ff ff ff       	callq  43c3a1 <x666::LineInfo const& std::forward<x666::LineInfo const&>(std::remove_reference<x666::LineInfo const&>::type&)>
  43c3e8:	48 89 c3             	mov    %rax,%rbx
  43c3eb:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  43c3ef:	48 89 c7             	mov    %rax,%rdi
  43c3f2:	e8 9c ff ff ff       	callq  43c393 <x666::LexErrorCode&& std::forward<x666::LexErrorCode>(std::remove_reference<x666::LexErrorCode>::type&)>
  43c3f7:	48 89 c2             	mov    %rax,%rdx
  43c3fa:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  43c3fe:	48 8b 70 08          	mov    0x8(%rax),%rsi
  43c402:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  43c406:	48 89 d9             	mov    %rbx,%rcx
  43c409:	48 89 c7             	mov    %rax,%rdi
  43c40c:	e8 1a 14 00 00       	callq  43d82b <void std::allocator_traits<std::allocator<x666::LexError> >::construct<x666::LexError, x666::LexErrorCode, x666::LineInfo const&>(std::allocator<x666::LexError>&, x666::LexError*, x666::LexErrorCode&&, x666::LineInfo const&)>
				     std::forward<_Args>(__args)...);
	    ++this->_M_impl._M_finish;
  43c411:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  43c415:	48 8b 40 08          	mov    0x8(%rax),%rax
  43c419:	48 8d 50 28          	lea    0x28(%rax),%rdx
  43c41d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  43c421:	48 89 50 08          	mov    %rdx,0x8(%rax)
  43c425:	eb 3f                	jmp    43c466 <x666::LexError& std::vector<x666::LexError, std::allocator<x666::LexError> >::emplace_back<x666::LexErrorCode, x666::LineInfo const&>(x666::LexErrorCode&&, x666::LineInfo const&)+0xb6>
	    _GLIBCXX_ASAN_ANNOTATE_GREW(1);
	  }
	else
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
  43c427:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  43c42b:	48 89 c7             	mov    %rax,%rdi
  43c42e:	e8 6e ff ff ff       	callq  43c3a1 <x666::LineInfo const& std::forward<x666::LineInfo const&>(std::remove_reference<x666::LineInfo const&>::type&)>
  43c433:	49 89 c4             	mov    %rax,%r12
  43c436:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  43c43a:	48 89 c7             	mov    %rax,%rdi
  43c43d:	e8 51 ff ff ff       	callq  43c393 <x666::LexErrorCode&& std::forward<x666::LexErrorCode>(std::remove_reference<x666::LexErrorCode>::type&)>
  43c442:	48 89 c3             	mov    %rax,%rbx
  43c445:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  43c449:	48 89 c7             	mov    %rax,%rdi
  43c44c:	e8 25 6d ff ff       	callq  433176 <std::vector<x666::LexError, std::allocator<x666::LexError> >::end()>
  43c451:	48 89 c6             	mov    %rax,%rsi
  43c454:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  43c458:	4c 89 e1             	mov    %r12,%rcx
  43c45b:	48 89 da             	mov    %rbx,%rdx
  43c45e:	48 89 c7             	mov    %rax,%rdi
  43c461:	e8 18 14 00 00       	callq  43d87e <void std::vector<x666::LexError, std::allocator<x666::LexError> >::_M_realloc_insert<x666::LexErrorCode, x666::LineInfo const&>(__gnu_cxx::__normal_iterator<x666::LexError*, std::vector<x666::LexError, std::allocator<x666::LexError> > >, x666::LexErrorCode&&, x666::LineInfo const&)>
#if __cplusplus > 201402L
	return back();
  43c466:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  43c46a:	48 89 c7             	mov    %rax,%rdi
  43c46d:	e8 9e 16 00 00       	callq  43db10 <std::vector<x666::LexError, std::allocator<x666::LexError> >::back()>
#endif
      }
  43c472:	48 83 c4 20          	add    $0x20,%rsp
  43c476:	5b                   	pop    %rbx
  43c477:	41 5c                	pop    %r12
  43c479:	5d                   	pop    %rbp
  43c47a:	c3                   	retq   
  43c47b:	90                   	nop

000000000043c47c <std::stack<x666::LineInfo, std::deque<x666::LineInfo, std::allocator<x666::LineInfo> > >::empty() const>:
      empty() const
  43c47c:	55                   	push   %rbp
  43c47d:	48 89 e5             	mov    %rsp,%rbp
  43c480:	48 83 ec 10          	sub    $0x10,%rsp
  43c484:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return c.empty(); }
  43c488:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43c48c:	48 89 c7             	mov    %rax,%rdi
  43c48f:	e8 bc 16 00 00       	callq  43db50 <std::deque<x666::LineInfo, std::allocator<x666::LineInfo> >::empty() const>
  43c494:	c9                   	leaveq 
  43c495:	c3                   	retq   

000000000043c496 <std::vector<x666::LexError, std::allocator<x666::LexError> >::push_back(x666::LexError const&)>:
      push_back(const value_type& __x)
  43c496:	55                   	push   %rbp
  43c497:	48 89 e5             	mov    %rsp,%rbp
  43c49a:	48 83 ec 10          	sub    $0x10,%rsp
  43c49e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  43c4a2:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
  43c4a6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43c4aa:	48 8b 50 08          	mov    0x8(%rax),%rdx
  43c4ae:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43c4b2:	48 8b 40 10          	mov    0x10(%rax),%rax
  43c4b6:	48 39 c2             	cmp    %rax,%rdx
  43c4b9:	74 31                	je     43c4ec <std::vector<x666::LexError, std::allocator<x666::LexError> >::push_back(x666::LexError const&)+0x56>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
  43c4bb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43c4bf:	48 8b 48 08          	mov    0x8(%rax),%rcx
  43c4c3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43c4c7:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  43c4cb:	48 89 ce             	mov    %rcx,%rsi
  43c4ce:	48 89 c7             	mov    %rax,%rdi
  43c4d1:	e8 b1 16 00 00       	callq  43db87 <void std::allocator_traits<std::allocator<x666::LexError> >::construct<x666::LexError, x666::LexError const&>(std::allocator<x666::LexError>&, x666::LexError*, x666::LexError const&)>
	    ++this->_M_impl._M_finish;
  43c4d6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43c4da:	48 8b 40 08          	mov    0x8(%rax),%rax
  43c4de:	48 8d 50 28          	lea    0x28(%rax),%rdx
  43c4e2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43c4e6:	48 89 50 08          	mov    %rdx,0x8(%rax)
      }
  43c4ea:	eb 22                	jmp    43c50e <std::vector<x666::LexError, std::allocator<x666::LexError> >::push_back(x666::LexError const&)+0x78>
	  _M_realloc_insert(end(), __x);
  43c4ec:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43c4f0:	48 89 c7             	mov    %rax,%rdi
  43c4f3:	e8 7e 6c ff ff       	callq  433176 <std::vector<x666::LexError, std::allocator<x666::LexError> >::end()>
  43c4f8:	48 89 c1             	mov    %rax,%rcx
  43c4fb:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  43c4ff:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43c503:	48 89 ce             	mov    %rcx,%rsi
  43c506:	48 89 c7             	mov    %rax,%rdi
  43c509:	e8 b2 16 00 00       	callq  43dbc0 <void std::vector<x666::LexError, std::allocator<x666::LexError> >::_M_realloc_insert<x666::LexError const&>(__gnu_cxx::__normal_iterator<x666::LexError*, std::vector<x666::LexError, std::allocator<x666::LexError> > >, x666::LexError const&)>
      }
  43c50e:	90                   	nop
  43c50f:	c9                   	leaveq 
  43c510:	c3                   	retq   

000000000043c511 <x666::LineInfo& std::forward<x666::LineInfo&>(std::remove_reference<x666::LineInfo&>::type&)>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
  43c511:	55                   	push   %rbp
  43c512:	48 89 e5             	mov    %rsp,%rbp
  43c515:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<_Tp&&>(__t); }
  43c519:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43c51d:	5d                   	pop    %rbp
  43c51e:	c3                   	retq   
  43c51f:	90                   	nop

000000000043c520 <x666::LexError& std::vector<x666::LexError, std::allocator<x666::LexError> >::emplace_back<x666::LexErrorCode, x666::LineInfo&>(x666::LexErrorCode&&, x666::LineInfo&)>:
      vector<_Tp, _Alloc>::
  43c520:	55                   	push   %rbp
  43c521:	48 89 e5             	mov    %rsp,%rbp
  43c524:	41 54                	push   %r12
  43c526:	53                   	push   %rbx
  43c527:	48 83 ec 20          	sub    $0x20,%rsp
  43c52b:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  43c52f:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  43c533:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
  43c537:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  43c53b:	48 8b 50 08          	mov    0x8(%rax),%rdx
  43c53f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  43c543:	48 8b 40 10          	mov    0x10(%rax),%rax
  43c547:	48 39 c2             	cmp    %rax,%rdx
  43c54a:	74 4b                	je     43c597 <x666::LexError& std::vector<x666::LexError, std::allocator<x666::LexError> >::emplace_back<x666::LexErrorCode, x666::LineInfo&>(x666::LexErrorCode&&, x666::LineInfo&)+0x77>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
  43c54c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  43c550:	48 89 c7             	mov    %rax,%rdi
  43c553:	e8 b9 ff ff ff       	callq  43c511 <x666::LineInfo& std::forward<x666::LineInfo&>(std::remove_reference<x666::LineInfo&>::type&)>
  43c558:	48 89 c3             	mov    %rax,%rbx
  43c55b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  43c55f:	48 89 c7             	mov    %rax,%rdi
  43c562:	e8 2c fe ff ff       	callq  43c393 <x666::LexErrorCode&& std::forward<x666::LexErrorCode>(std::remove_reference<x666::LexErrorCode>::type&)>
  43c567:	48 89 c2             	mov    %rax,%rdx
  43c56a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  43c56e:	48 8b 70 08          	mov    0x8(%rax),%rsi
  43c572:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  43c576:	48 89 d9             	mov    %rbx,%rcx
  43c579:	48 89 c7             	mov    %rax,%rdi
  43c57c:	e8 bd 18 00 00       	callq  43de3e <void std::allocator_traits<std::allocator<x666::LexError> >::construct<x666::LexError, x666::LexErrorCode, x666::LineInfo&>(std::allocator<x666::LexError>&, x666::LexError*, x666::LexErrorCode&&, x666::LineInfo&)>
	    ++this->_M_impl._M_finish;
  43c581:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  43c585:	48 8b 40 08          	mov    0x8(%rax),%rax
  43c589:	48 8d 50 28          	lea    0x28(%rax),%rdx
  43c58d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  43c591:	48 89 50 08          	mov    %rdx,0x8(%rax)
  43c595:	eb 3f                	jmp    43c5d6 <x666::LexError& std::vector<x666::LexError, std::allocator<x666::LexError> >::emplace_back<x666::LexErrorCode, x666::LineInfo&>(x666::LexErrorCode&&, x666::LineInfo&)+0xb6>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
  43c597:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  43c59b:	48 89 c7             	mov    %rax,%rdi
  43c59e:	e8 6e ff ff ff       	callq  43c511 <x666::LineInfo& std::forward<x666::LineInfo&>(std::remove_reference<x666::LineInfo&>::type&)>
  43c5a3:	49 89 c4             	mov    %rax,%r12
  43c5a6:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  43c5aa:	48 89 c7             	mov    %rax,%rdi
  43c5ad:	e8 e1 fd ff ff       	callq  43c393 <x666::LexErrorCode&& std::forward<x666::LexErrorCode>(std::remove_reference<x666::LexErrorCode>::type&)>
  43c5b2:	48 89 c3             	mov    %rax,%rbx
  43c5b5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  43c5b9:	48 89 c7             	mov    %rax,%rdi
  43c5bc:	e8 b5 6b ff ff       	callq  433176 <std::vector<x666::LexError, std::allocator<x666::LexError> >::end()>
  43c5c1:	48 89 c6             	mov    %rax,%rsi
  43c5c4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  43c5c8:	4c 89 e1             	mov    %r12,%rcx
  43c5cb:	48 89 da             	mov    %rbx,%rdx
  43c5ce:	48 89 c7             	mov    %rax,%rdi
  43c5d1:	e8 ba 18 00 00       	callq  43de90 <void std::vector<x666::LexError, std::allocator<x666::LexError> >::_M_realloc_insert<x666::LexErrorCode, x666::LineInfo&>(__gnu_cxx::__normal_iterator<x666::LexError*, std::vector<x666::LexError, std::allocator<x666::LexError> > >, x666::LexErrorCode&&, x666::LineInfo&)>
	return back();
  43c5d6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  43c5da:	48 89 c7             	mov    %rax,%rdi
  43c5dd:	e8 2e 15 00 00       	callq  43db10 <std::vector<x666::LexError, std::allocator<x666::LexError> >::back()>
      }
  43c5e2:	48 83 c4 20          	add    $0x20,%rsp
  43c5e6:	5b                   	pop    %rbx
  43c5e7:	41 5c                	pop    %r12
  43c5e9:	5d                   	pop    %rbp
  43c5ea:	c3                   	retq   
  43c5eb:	90                   	nop

000000000043c5ec <std::stack<x666::LineInfo, std::deque<x666::LineInfo, std::allocator<x666::LineInfo> > >::top()>:
      top()
  43c5ec:	55                   	push   %rbp
  43c5ed:	48 89 e5             	mov    %rsp,%rbp
  43c5f0:	48 83 ec 10          	sub    $0x10,%rsp
  43c5f4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	return c.back();
  43c5f8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43c5fc:	48 89 c7             	mov    %rax,%rdi
  43c5ff:	e8 1e 1b 00 00       	callq  43e122 <std::deque<x666::LineInfo, std::allocator<x666::LineInfo> >::back()>
      }
  43c604:	c9                   	leaveq 
  43c605:	c3                   	retq   

000000000043c606 <std::stack<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::deque<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > > >::size() const>:
      size() const
  43c606:	55                   	push   %rbp
  43c607:	48 89 e5             	mov    %rsp,%rbp
  43c60a:	48 83 ec 10          	sub    $0x10,%rsp
  43c60e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return c.size(); }
  43c612:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43c616:	48 89 c7             	mov    %rax,%rdi
  43c619:	e8 3e 1b 00 00       	callq  43e15c <std::deque<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > >::size() const>
  43c61e:	c9                   	leaveq 
  43c61f:	c3                   	retq   

000000000043c620 <std::remove_reference<x666::Parser::BracketEntry&>::type&& std::move<x666::Parser::BracketEntry&>(x666::Parser::BracketEntry&)>:
    move(_Tp&& __t) noexcept
  43c620:	55                   	push   %rbp
  43c621:	48 89 e5             	mov    %rsp,%rbp
  43c624:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
  43c628:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43c62c:	5d                   	pop    %rbp
  43c62d:	c3                   	retq   

000000000043c62e <std::stack<x666::Parser::BracketEntry, std::deque<x666::Parser::BracketEntry, std::allocator<x666::Parser::BracketEntry> > >::push(x666::Parser::BracketEntry&&)>:
      push(value_type&& __x)
  43c62e:	55                   	push   %rbp
  43c62f:	48 89 e5             	mov    %rsp,%rbp
  43c632:	53                   	push   %rbx
  43c633:	48 83 ec 18          	sub    $0x18,%rsp
  43c637:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  43c63b:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
      { c.push_back(std::move(__x)); }
  43c63f:	48 8b 5d e8          	mov    -0x18(%rbp),%rbx
  43c643:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  43c647:	48 89 c7             	mov    %rax,%rdi
  43c64a:	e8 d1 ff ff ff       	callq  43c620 <std::remove_reference<x666::Parser::BracketEntry&>::type&& std::move<x666::Parser::BracketEntry&>(x666::Parser::BracketEntry&)>
  43c64f:	48 89 c6             	mov    %rax,%rsi
  43c652:	48 89 df             	mov    %rbx,%rdi
  43c655:	e8 2c 1b 00 00       	callq  43e186 <std::deque<x666::Parser::BracketEntry, std::allocator<x666::Parser::BracketEntry> >::push_back(x666::Parser::BracketEntry&&)>
  43c65a:	90                   	nop
  43c65b:	48 83 c4 18          	add    $0x18,%rsp
  43c65f:	5b                   	pop    %rbx
  43c660:	5d                   	pop    %rbp
  43c661:	c3                   	retq   

000000000043c662 <std::stack<x666::Parser::BracketEntry, std::deque<x666::Parser::BracketEntry, std::allocator<x666::Parser::BracketEntry> > >::empty() const>:
      empty() const
  43c662:	55                   	push   %rbp
  43c663:	48 89 e5             	mov    %rsp,%rbp
  43c666:	48 83 ec 10          	sub    $0x10,%rsp
  43c66a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return c.empty(); }
  43c66e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43c672:	48 89 c7             	mov    %rax,%rdi
  43c675:	e8 3e 1b 00 00       	callq  43e1b8 <std::deque<x666::Parser::BracketEntry, std::allocator<x666::Parser::BracketEntry> >::empty() const>
  43c67a:	c9                   	leaveq 
  43c67b:	c3                   	retq   

000000000043c67c <std::stack<x666::Parser::BracketEntry, std::deque<x666::Parser::BracketEntry, std::allocator<x666::Parser::BracketEntry> > >::top()>:
      top()
  43c67c:	55                   	push   %rbp
  43c67d:	48 89 e5             	mov    %rsp,%rbp
  43c680:	48 83 ec 10          	sub    $0x10,%rsp
  43c684:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	return c.back();
  43c688:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43c68c:	48 89 c7             	mov    %rax,%rdi
  43c68f:	e8 4e 1b 00 00       	callq  43e1e2 <std::deque<x666::Parser::BracketEntry, std::allocator<x666::Parser::BracketEntry> >::back()>
      }
  43c694:	c9                   	leaveq 
  43c695:	c3                   	retq   

000000000043c696 <std::stack<x666::Parser::BracketEntry, std::deque<x666::Parser::BracketEntry, std::allocator<x666::Parser::BracketEntry> > >::pop()>:
      pop()
  43c696:	55                   	push   %rbp
  43c697:	48 89 e5             	mov    %rsp,%rbp
  43c69a:	48 83 ec 10          	sub    $0x10,%rsp
  43c69e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	c.pop_back();
  43c6a2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43c6a6:	48 89 c7             	mov    %rax,%rdi
  43c6a9:	e8 6e 1b 00 00       	callq  43e21c <std::deque<x666::Parser::BracketEntry, std::allocator<x666::Parser::BracketEntry> >::pop_back()>
      }
  43c6ae:	90                   	nop
  43c6af:	c9                   	leaveq 
  43c6b0:	c3                   	retq   

000000000043c6b1 <std::_MakeUniq<x666::Bracket>::__single_object std::make_unique<x666::Bracket, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, x666::Operator>(std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&&, x666::Operator&&)>:
    make_unique(_Args&&... __args)
  43c6b1:	55                   	push   %rbp
  43c6b2:	48 89 e5             	mov    %rsp,%rbp
  43c6b5:	41 55                	push   %r13
  43c6b7:	41 54                	push   %r12
  43c6b9:	53                   	push   %rbx
  43c6ba:	48 83 ec 38          	sub    $0x38,%rsp
  43c6be:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  43c6c2:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  43c6c6:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
  43c6ca:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  43c6ce:	48 89 c7             	mov    %rax,%rdi
  43c6d1:	e8 70 f3 ff ff       	callq  43ba46 <std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&& std::forward<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > >(std::remove_reference<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > >::type&)>
  43c6d6:	48 89 c2             	mov    %rax,%rdx
  43c6d9:	48 8d 45 d8          	lea    -0x28(%rbp),%rax
  43c6dd:	48 89 d6             	mov    %rdx,%rsi
  43c6e0:	48 89 c7             	mov    %rax,%rdi
  43c6e3:	e8 0c f3 ff ff       	callq  43b9f4 <std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >::unique_ptr(std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&&)>
  43c6e8:	48 8d 5d d8          	lea    -0x28(%rbp),%rbx
  43c6ec:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  43c6f0:	48 89 c7             	mov    %rax,%rdi
  43c6f3:	e8 81 9c ff ff       	callq  436379 <x666::Operator&& std::forward<x666::Operator>(std::remove_reference<x666::Operator>::type&)>
  43c6f8:	44 8b 20             	mov    (%rax),%r12d
  43c6fb:	bf 18 00 00 00       	mov    $0x18,%edi
  43c700:	e8 eb 60 ff ff       	callq  4327f0 <operator new(unsigned long)@plt>
  43c705:	49 89 c5             	mov    %rax,%r13
  43c708:	44 89 e2             	mov    %r12d,%edx
  43c70b:	48 89 de             	mov    %rbx,%rsi
  43c70e:	4c 89 ef             	mov    %r13,%rdi
  43c711:	e8 1e d3 ff ff       	callq  439a34 <x666::Bracket::Bracket(std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, x666::Operator)>
  43c716:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  43c71a:	4c 89 ee             	mov    %r13,%rsi
  43c71d:	48 89 c7             	mov    %rax,%rdi
  43c720:	e8 55 1b 00 00       	callq  43e27a <std::unique_ptr<x666::Bracket, std::default_delete<x666::Bracket> >::unique_ptr<std::default_delete<x666::Bracket>, void>(x666::Bracket*)>
  43c725:	48 8d 45 d8          	lea    -0x28(%rbp),%rax
  43c729:	48 89 c7             	mov    %rax,%rdi
  43c72c:	e8 db 66 ff ff       	callq  432e0c <std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >::~unique_ptr()>
  43c731:	eb 1a                	jmp    43c74d <std::_MakeUniq<x666::Bracket>::__single_object std::make_unique<x666::Bracket, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, x666::Operator>(std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&&, x666::Operator&&)+0x9c>
  43c733:	48 89 c3             	mov    %rax,%rbx
  43c736:	48 8d 45 d8          	lea    -0x28(%rbp),%rax
  43c73a:	48 89 c7             	mov    %rax,%rdi
  43c73d:	e8 ca 66 ff ff       	callq  432e0c <std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >::~unique_ptr()>
  43c742:	48 89 d8             	mov    %rbx,%rax
  43c745:	48 89 c7             	mov    %rax,%rdi
  43c748:	e8 c3 61 ff ff       	callq  432910 <_Unwind_Resume@plt>
  43c74d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  43c751:	48 83 c4 38          	add    $0x38,%rsp
  43c755:	5b                   	pop    %rbx
  43c756:	41 5c                	pop    %r12
  43c758:	41 5d                	pop    %r13
  43c75a:	5d                   	pop    %rbp
  43c75b:	c3                   	retq   

000000000043c75c <std::unique_ptr<x666::Bracket, std::default_delete<x666::Bracket> >::~unique_ptr()>:
      ~unique_ptr() noexcept
  43c75c:	55                   	push   %rbp
  43c75d:	48 89 e5             	mov    %rsp,%rbp
  43c760:	48 83 ec 20          	sub    $0x20,%rsp
  43c764:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
	auto& __ptr = _M_t._M_ptr();
  43c768:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  43c76c:	48 89 c7             	mov    %rax,%rdi
  43c76f:	e8 2c 1b 00 00       	callq  43e2a0 <std::__uniq_ptr_impl<x666::Bracket, std::default_delete<x666::Bracket> >::_M_ptr()>
  43c774:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	if (__ptr != nullptr)
  43c778:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43c77c:	48 8b 00             	mov    (%rax),%rax
  43c77f:	48 85 c0             	test   %rax,%rax
  43c782:	74 21                	je     43c7a5 <std::unique_ptr<x666::Bracket, std::default_delete<x666::Bracket> >::~unique_ptr()+0x49>
	  get_deleter()(__ptr);
  43c784:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  43c788:	48 89 c7             	mov    %rax,%rdi
  43c78b:	e8 2a 1b 00 00       	callq  43e2ba <std::unique_ptr<x666::Bracket, std::default_delete<x666::Bracket> >::get_deleter()>
  43c790:	48 89 c2             	mov    %rax,%rdx
  43c793:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43c797:	48 8b 00             	mov    (%rax),%rax
  43c79a:	48 89 c6             	mov    %rax,%rsi
  43c79d:	48 89 d7             	mov    %rdx,%rdi
  43c7a0:	e8 93 1b 00 00       	callq  43e338 <std::default_delete<x666::Bracket>::operator()(x666::Bracket*) const>
	__ptr = pointer();
  43c7a5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43c7a9:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
      }
  43c7b0:	90                   	nop
  43c7b1:	c9                   	leaveq 
  43c7b2:	c3                   	retq   
  43c7b3:	90                   	nop

000000000043c7b4 <std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >::unique_ptr<x666::Bracket, std::default_delete<x666::Bracket>, void>(std::unique_ptr<x666::Bracket, std::default_delete<x666::Bracket> >&&)>:
	unique_ptr(unique_ptr<_Up, _Ep>&& __u) noexcept
  43c7b4:	55                   	push   %rbp
  43c7b5:	48 89 e5             	mov    %rsp,%rbp
  43c7b8:	41 54                	push   %r12
  43c7ba:	53                   	push   %rbx
  43c7bb:	48 83 ec 10          	sub    $0x10,%rsp
  43c7bf:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  43c7c3:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	: _M_t(__u.release(), std::forward<_Ep>(__u.get_deleter()))
  43c7c7:	48 8b 5d e8          	mov    -0x18(%rbp),%rbx
  43c7cb:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  43c7cf:	48 89 c7             	mov    %rax,%rdi
  43c7d2:	e8 e3 1a 00 00       	callq  43e2ba <std::unique_ptr<x666::Bracket, std::default_delete<x666::Bracket> >::get_deleter()>
  43c7d7:	48 89 c7             	mov    %rax,%rdi
  43c7da:	e8 c0 1b 00 00       	callq  43e39f <std::default_delete<x666::Bracket>&& std::forward<std::default_delete<x666::Bracket> >(std::remove_reference<std::default_delete<x666::Bracket> >::type&)>
  43c7df:	49 89 c4             	mov    %rax,%r12
  43c7e2:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  43c7e6:	48 89 c7             	mov    %rax,%rdi
  43c7e9:	e8 7c 1b 00 00       	callq  43e36a <std::unique_ptr<x666::Bracket, std::default_delete<x666::Bracket> >::release()>
  43c7ee:	4c 89 e2             	mov    %r12,%rdx
  43c7f1:	48 89 c6             	mov    %rax,%rsi
  43c7f4:	48 89 df             	mov    %rbx,%rdi
  43c7f7:	e8 b2 1b 00 00       	callq  43e3ae <std::__uniq_ptr_impl<x666::Expression, std::default_delete<x666::Expression> >::__uniq_ptr_impl<std::default_delete<x666::Bracket> >(x666::Expression*, std::default_delete<x666::Bracket>&&)>
	{ }
  43c7fc:	90                   	nop
  43c7fd:	48 83 c4 10          	add    $0x10,%rsp
  43c801:	5b                   	pop    %rbx
  43c802:	41 5c                	pop    %r12
  43c804:	5d                   	pop    %rbp
  43c805:	c3                   	retq   

000000000043c806 <decltype(nullptr)&& std::forward<decltype(nullptr)>(std::remove_reference<decltype(nullptr)>::type&)>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
  43c806:	55                   	push   %rbp
  43c807:	48 89 e5             	mov    %rsp,%rbp
  43c80a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<_Tp&&>(__t); }
  43c80e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43c812:	5d                   	pop    %rbp
  43c813:	c3                   	retq   

000000000043c814 <std::_MakeUniq<x666::Bracket>::__single_object std::make_unique<x666::Bracket, decltype(nullptr), x666::Operator>(decltype(nullptr)&&, x666::Operator&&)>:
    make_unique(_Args&&... __args)
  43c814:	55                   	push   %rbp
  43c815:	48 89 e5             	mov    %rsp,%rbp
  43c818:	41 55                	push   %r13
  43c81a:	41 54                	push   %r12
  43c81c:	53                   	push   %rbx
  43c81d:	48 83 ec 38          	sub    $0x38,%rsp
  43c821:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  43c825:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  43c829:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
  43c82d:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  43c831:	48 89 c7             	mov    %rax,%rdi
  43c834:	e8 cd ff ff ff       	callq  43c806 <decltype(nullptr)&& std::forward<decltype(nullptr)>(std::remove_reference<decltype(nullptr)>::type&)>
  43c839:	48 8b 10             	mov    (%rax),%rdx
  43c83c:	48 8d 45 d8          	lea    -0x28(%rbp),%rax
  43c840:	48 89 d6             	mov    %rdx,%rsi
  43c843:	48 89 c7             	mov    %rax,%rdi
  43c846:	e8 01 1c 00 00       	callq  43e44c <std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >::unique_ptr<std::default_delete<x666::Expression>, void>(decltype(nullptr))>
  43c84b:	48 8d 5d d8          	lea    -0x28(%rbp),%rbx
  43c84f:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  43c853:	48 89 c7             	mov    %rax,%rdi
  43c856:	e8 1e 9b ff ff       	callq  436379 <x666::Operator&& std::forward<x666::Operator>(std::remove_reference<x666::Operator>::type&)>
  43c85b:	44 8b 20             	mov    (%rax),%r12d
  43c85e:	bf 18 00 00 00       	mov    $0x18,%edi
  43c863:	e8 88 5f ff ff       	callq  4327f0 <operator new(unsigned long)@plt>
  43c868:	49 89 c5             	mov    %rax,%r13
  43c86b:	44 89 e2             	mov    %r12d,%edx
  43c86e:	48 89 de             	mov    %rbx,%rsi
  43c871:	4c 89 ef             	mov    %r13,%rdi
  43c874:	e8 bb d1 ff ff       	callq  439a34 <x666::Bracket::Bracket(std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, x666::Operator)>
  43c879:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  43c87d:	4c 89 ee             	mov    %r13,%rsi
  43c880:	48 89 c7             	mov    %rax,%rdi
  43c883:	e8 f2 19 00 00       	callq  43e27a <std::unique_ptr<x666::Bracket, std::default_delete<x666::Bracket> >::unique_ptr<std::default_delete<x666::Bracket>, void>(x666::Bracket*)>
  43c888:	48 8d 45 d8          	lea    -0x28(%rbp),%rax
  43c88c:	48 89 c7             	mov    %rax,%rdi
  43c88f:	e8 78 65 ff ff       	callq  432e0c <std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >::~unique_ptr()>
  43c894:	eb 1a                	jmp    43c8b0 <std::_MakeUniq<x666::Bracket>::__single_object std::make_unique<x666::Bracket, decltype(nullptr), x666::Operator>(decltype(nullptr)&&, x666::Operator&&)+0x9c>
  43c896:	48 89 c3             	mov    %rax,%rbx
  43c899:	48 8d 45 d8          	lea    -0x28(%rbp),%rax
  43c89d:	48 89 c7             	mov    %rax,%rdi
  43c8a0:	e8 67 65 ff ff       	callq  432e0c <std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >::~unique_ptr()>
  43c8a5:	48 89 d8             	mov    %rbx,%rax
  43c8a8:	48 89 c7             	mov    %rax,%rdi
  43c8ab:	e8 60 60 ff ff       	callq  432910 <_Unwind_Resume@plt>
  43c8b0:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  43c8b4:	48 83 c4 38          	add    $0x38,%rsp
  43c8b8:	5b                   	pop    %rbx
  43c8b9:	41 5c                	pop    %r12
  43c8bb:	41 5d                	pop    %r13
  43c8bd:	5d                   	pop    %rbp
  43c8be:	c3                   	retq   
  43c8bf:	90                   	nop

000000000043c8c0 <std::vector<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > >::vector()>:
      vector()
  43c8c0:	55                   	push   %rbp
  43c8c1:	48 89 e5             	mov    %rsp,%rbp
  43c8c4:	48 83 ec 10          	sub    $0x10,%rsp
  43c8c8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      : _Base() { }
  43c8cc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43c8d0:	48 89 c7             	mov    %rax,%rdi
  43c8d3:	e8 94 1b 00 00       	callq  43e46c <std::_Vector_base<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > >::_Vector_base()>
  43c8d8:	90                   	nop
  43c8d9:	c9                   	leaveq 
  43c8da:	c3                   	retq   
  43c8db:	90                   	nop

000000000043c8dc <std::stack<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::deque<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > > >::stack<std::deque<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > >, void>()>:
	stack()
  43c8dc:	55                   	push   %rbp
  43c8dd:	48 89 e5             	mov    %rsp,%rbp
  43c8e0:	48 83 ec 10          	sub    $0x10,%rsp
  43c8e4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	: c() { }
  43c8e8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43c8ec:	48 89 c7             	mov    %rax,%rdi
  43c8ef:	e8 94 1b 00 00       	callq  43e488 <std::deque<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > >::deque()>
  43c8f4:	90                   	nop
  43c8f5:	c9                   	leaveq 
  43c8f6:	c3                   	retq   
  43c8f7:	90                   	nop

000000000043c8f8 <std::stack<x666::LineInfo, std::deque<x666::LineInfo, std::allocator<x666::LineInfo> > >::stack<std::deque<x666::LineInfo, std::allocator<x666::LineInfo> >, void>()>:
	stack()
  43c8f8:	55                   	push   %rbp
  43c8f9:	48 89 e5             	mov    %rsp,%rbp
  43c8fc:	48 83 ec 10          	sub    $0x10,%rsp
  43c900:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	: c() { }
  43c904:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43c908:	48 89 c7             	mov    %rax,%rdi
  43c90b:	e8 94 1b 00 00       	callq  43e4a4 <std::deque<x666::LineInfo, std::allocator<x666::LineInfo> >::deque()>
  43c910:	90                   	nop
  43c911:	c9                   	leaveq 
  43c912:	c3                   	retq   
  43c913:	90                   	nop

000000000043c914 <std::stack<x666::Parser::BracketEntry, std::deque<x666::Parser::BracketEntry, std::allocator<x666::Parser::BracketEntry> > >::stack<std::deque<x666::Parser::BracketEntry, std::allocator<x666::Parser::BracketEntry> >, void>()>:
	stack()
  43c914:	55                   	push   %rbp
  43c915:	48 89 e5             	mov    %rsp,%rbp
  43c918:	48 83 ec 10          	sub    $0x10,%rsp
  43c91c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	: c() { }
  43c920:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43c924:	48 89 c7             	mov    %rax,%rdi
  43c927:	e8 94 1b 00 00       	callq  43e4c0 <std::deque<x666::Parser::BracketEntry, std::allocator<x666::Parser::BracketEntry> >::deque()>
  43c92c:	90                   	nop
  43c92d:	c9                   	leaveq 
  43c92e:	c3                   	retq   
  43c92f:	90                   	nop

000000000043c930 <std::vector<x666::LexError, std::allocator<x666::LexError> >::vector()>:
      vector()
  43c930:	55                   	push   %rbp
  43c931:	48 89 e5             	mov    %rsp,%rbp
  43c934:	48 83 ec 10          	sub    $0x10,%rsp
  43c938:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      : _Base() { }
  43c93c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43c940:	48 89 c7             	mov    %rax,%rdi
  43c943:	e8 94 1b 00 00       	callq  43e4dc <std::_Vector_base<x666::LexError, std::allocator<x666::LexError> >::_Vector_base()>
  43c948:	90                   	nop
  43c949:	c9                   	leaveq 
  43c94a:	c3                   	retq   
  43c94b:	90                   	nop

000000000043c94c <std::__detail::__variant::_Variant_storage<false, x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>::~_Variant_storage()>:
      ~_Variant_storage()
  43c94c:	55                   	push   %rbp
  43c94d:	48 89 e5             	mov    %rsp,%rbp
  43c950:	48 83 ec 10          	sub    $0x10,%rsp
  43c954:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { _M_reset(); }
  43c958:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43c95c:	48 89 c7             	mov    %rax,%rdi
  43c95f:	e8 94 1b 00 00       	callq  43e4f8 <std::__detail::__variant::_Variant_storage<false, x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>::_M_reset()>
  43c964:	90                   	nop
  43c965:	c9                   	leaveq 
  43c966:	c3                   	retq   

000000000043c967 <bool std::holds_alternative<x666::LexError, x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>(std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> const&)>:
    inline constexpr bool holds_alternative(const variant<_Types...>& __v)
  43c967:	55                   	push   %rbp
  43c968:	48 89 e5             	mov    %rsp,%rbp
  43c96b:	48 83 ec 10          	sub    $0x10,%rsp
  43c96f:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      return __v.index() == __detail::__variant::__index_of_v<_Tp, _Types...>;
  43c973:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43c977:	48 89 c7             	mov    %rax,%rdi
  43c97a:	e8 bb e1 ff ff       	callq  43ab3a <std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>::index() const>
  43c97f:	48 83 f8 06          	cmp    $0x6,%rax
  43c983:	0f 94 c0             	sete   %al
    }
  43c986:	c9                   	leaveq 
  43c987:	c3                   	retq   

000000000043c988 <std::__detail::__variant::_Uninitialized<x666::LexError, false>::_M_get() &>:
      _Type& _M_get() &
  43c988:	55                   	push   %rbp
  43c989:	48 89 e5             	mov    %rsp,%rbp
  43c98c:	48 83 ec 10          	sub    $0x10,%rsp
  43c990:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return *_M_storage._M_ptr(); }
  43c994:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43c998:	48 89 c7             	mov    %rax,%rdi
  43c99b:	e8 84 1b 00 00       	callq  43e524 <__gnu_cxx::__aligned_membuf<x666::LexError>::_M_ptr()>
  43c9a0:	c9                   	leaveq 
  43c9a1:	c3                   	retq   

000000000043c9a2 <std::__detail::__variant::_Uninitialized<x666::Identifier, false>::_M_get() &&>:
      _Type&& _M_get() &&
  43c9a2:	55                   	push   %rbp
  43c9a3:	48 89 e5             	mov    %rsp,%rbp
  43c9a6:	48 83 ec 10          	sub    $0x10,%rsp
  43c9aa:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return std::move(*_M_storage._M_ptr()); }
  43c9ae:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43c9b2:	48 89 c7             	mov    %rax,%rdi
  43c9b5:	e8 84 1b 00 00       	callq  43e53e <__gnu_cxx::__aligned_membuf<x666::Identifier>::_M_ptr()>
  43c9ba:	48 89 c7             	mov    %rax,%rdi
  43c9bd:	e8 25 d1 ff ff       	callq  439ae7 <std::remove_reference<x666::Identifier&>::type&& std::move<x666::Identifier&>(x666::Identifier&)>
  43c9c2:	c9                   	leaveq 
  43c9c3:	c3                   	retq   

000000000043c9c4 <std::__invoke_result<x666::ParserVisitor, x666::Identifier>::type std::__invoke<x666::ParserVisitor, x666::Identifier>(x666::ParserVisitor&&, x666::Identifier&&)>:
    { return (*std::forward<_Tp>(__t)).*__f; }

  /// Invoke a callable object.
  template<typename _Callable, typename... _Args>
    constexpr typename __invoke_result<_Callable, _Args...>::type
    __invoke(_Callable&& __fn, _Args&&... __args)
  43c9c4:	55                   	push   %rbp
  43c9c5:	48 89 e5             	mov    %rsp,%rbp
  43c9c8:	41 54                	push   %r12
  43c9ca:	53                   	push   %rbx
  43c9cb:	48 83 ec 10          	sub    $0x10,%rsp
  43c9cf:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  43c9d3:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    noexcept(__is_nothrow_invocable<_Callable, _Args...>::value)
    {
      using __result = __invoke_result<_Callable, _Args...>;
      using __type = typename __result::type;
      using __tag = typename __result::__invoke_type;
      return std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
  43c9d7:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  43c9db:	48 89 c7             	mov    %rax,%rdi
  43c9de:	e8 94 9b ff ff       	callq  436577 <x666::Identifier&& std::forward<x666::Identifier>(std::remove_reference<x666::Identifier>::type&)>
  43c9e3:	48 89 c3             	mov    %rax,%rbx
  43c9e6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  43c9ea:	48 89 c7             	mov    %rax,%rdi
  43c9ed:	e8 e1 e3 ff ff       	callq  43add3 <x666::ParserVisitor&& std::forward<x666::ParserVisitor>(std::remove_reference<x666::ParserVisitor>::type&)>
					std::forward<_Args>(__args)...);
  43c9f2:	48 83 ec 08          	sub    $0x8,%rsp
  43c9f6:	41 54                	push   %r12
  43c9f8:	48 89 de             	mov    %rbx,%rsi
  43c9fb:	48 89 c7             	mov    %rax,%rdi
  43c9fe:	e8 55 1b 00 00       	callq  43e558 <bool std::__invoke_impl<bool, x666::ParserVisitor, x666::Identifier>(std::__invoke_other, x666::ParserVisitor&&, x666::Identifier&&)>
  43ca03:	48 83 c4 10          	add    $0x10,%rsp
    }
  43ca07:	48 8d 65 f0          	lea    -0x10(%rbp),%rsp
  43ca0b:	5b                   	pop    %rbx
  43ca0c:	41 5c                	pop    %r12
  43ca0e:	5d                   	pop    %rbp
  43ca0f:	c3                   	retq   

000000000043ca10 <std::__detail::__variant::_Uninitialized<x666::StringLiteral, false>::_M_get() &&>:
      _Type&& _M_get() &&
  43ca10:	55                   	push   %rbp
  43ca11:	48 89 e5             	mov    %rsp,%rbp
  43ca14:	48 83 ec 10          	sub    $0x10,%rsp
  43ca18:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return std::move(*_M_storage._M_ptr()); }
  43ca1c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43ca20:	48 89 c7             	mov    %rax,%rdi
  43ca23:	e8 6e 1b 00 00       	callq  43e596 <__gnu_cxx::__aligned_membuf<x666::StringLiteral>::_M_ptr()>
  43ca28:	48 89 c7             	mov    %rax,%rdi
  43ca2b:	e8 8c d1 ff ff       	callq  439bbc <std::remove_reference<x666::StringLiteral&>::type&& std::move<x666::StringLiteral&>(x666::StringLiteral&)>
  43ca30:	c9                   	leaveq 
  43ca31:	c3                   	retq   

000000000043ca32 <std::__invoke_result<x666::ParserVisitor, x666::StringLiteral>::type std::__invoke<x666::ParserVisitor, x666::StringLiteral>(x666::ParserVisitor&&, x666::StringLiteral&&)>:
    __invoke(_Callable&& __fn, _Args&&... __args)
  43ca32:	55                   	push   %rbp
  43ca33:	48 89 e5             	mov    %rsp,%rbp
  43ca36:	41 54                	push   %r12
  43ca38:	53                   	push   %rbx
  43ca39:	48 83 ec 10          	sub    $0x10,%rsp
  43ca3d:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  43ca41:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
      return std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
  43ca45:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  43ca49:	48 89 c7             	mov    %rax,%rdi
  43ca4c:	e8 d0 9b ff ff       	callq  436621 <x666::StringLiteral&& std::forward<x666::StringLiteral>(std::remove_reference<x666::StringLiteral>::type&)>
  43ca51:	48 89 c3             	mov    %rax,%rbx
  43ca54:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  43ca58:	48 89 c7             	mov    %rax,%rdi
  43ca5b:	e8 73 e3 ff ff       	callq  43add3 <x666::ParserVisitor&& std::forward<x666::ParserVisitor>(std::remove_reference<x666::ParserVisitor>::type&)>
					std::forward<_Args>(__args)...);
  43ca60:	48 83 ec 08          	sub    $0x8,%rsp
  43ca64:	41 54                	push   %r12
  43ca66:	48 89 de             	mov    %rbx,%rsi
  43ca69:	48 89 c7             	mov    %rax,%rdi
  43ca6c:	e8 3f 1b 00 00       	callq  43e5b0 <bool std::__invoke_impl<bool, x666::ParserVisitor, x666::StringLiteral>(std::__invoke_other, x666::ParserVisitor&&, x666::StringLiteral&&)>
  43ca71:	48 83 c4 10          	add    $0x10,%rsp
    }
  43ca75:	48 8d 65 f0          	lea    -0x10(%rbp),%rsp
  43ca79:	5b                   	pop    %rbx
  43ca7a:	41 5c                	pop    %r12
  43ca7c:	5d                   	pop    %rbp
  43ca7d:	c3                   	retq   

000000000043ca7e <std::__detail::__variant::_Uninitialized<x666::IntLiteral, false>::_M_get() &&>:
      _Type&& _M_get() &&
  43ca7e:	55                   	push   %rbp
  43ca7f:	48 89 e5             	mov    %rsp,%rbp
  43ca82:	48 83 ec 10          	sub    $0x10,%rsp
  43ca86:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return std::move(*_M_storage._M_ptr()); }
  43ca8a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43ca8e:	48 89 c7             	mov    %rax,%rdi
  43ca91:	e8 58 1b 00 00       	callq  43e5ee <__gnu_cxx::__aligned_membuf<x666::IntLiteral>::_M_ptr()>
  43ca96:	48 89 c7             	mov    %rax,%rdi
  43ca99:	e8 f2 d1 ff ff       	callq  439c90 <std::remove_reference<x666::IntLiteral&>::type&& std::move<x666::IntLiteral&>(x666::IntLiteral&)>
  43ca9e:	c9                   	leaveq 
  43ca9f:	c3                   	retq   

000000000043caa0 <std::__invoke_result<x666::ParserVisitor, x666::IntLiteral>::type std::__invoke<x666::ParserVisitor, x666::IntLiteral>(x666::ParserVisitor&&, x666::IntLiteral&&)>:
    __invoke(_Callable&& __fn, _Args&&... __args)
  43caa0:	55                   	push   %rbp
  43caa1:	48 89 e5             	mov    %rsp,%rbp
  43caa4:	41 54                	push   %r12
  43caa6:	53                   	push   %rbx
  43caa7:	48 83 ec 10          	sub    $0x10,%rsp
  43caab:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  43caaf:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
      return std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
  43cab3:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  43cab7:	48 89 c7             	mov    %rax,%rdi
  43caba:	e8 0e 9a ff ff       	callq  4364cd <x666::IntLiteral&& std::forward<x666::IntLiteral>(std::remove_reference<x666::IntLiteral>::type&)>
  43cabf:	48 89 c3             	mov    %rax,%rbx
  43cac2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  43cac6:	48 89 c7             	mov    %rax,%rdi
  43cac9:	e8 05 e3 ff ff       	callq  43add3 <x666::ParserVisitor&& std::forward<x666::ParserVisitor>(std::remove_reference<x666::ParserVisitor>::type&)>
					std::forward<_Args>(__args)...);
  43cace:	48 83 ec 08          	sub    $0x8,%rsp
  43cad2:	41 54                	push   %r12
  43cad4:	48 89 de             	mov    %rbx,%rsi
  43cad7:	48 89 c7             	mov    %rax,%rdi
  43cada:	e8 29 1b 00 00       	callq  43e608 <bool std::__invoke_impl<bool, x666::ParserVisitor, x666::IntLiteral>(std::__invoke_other, x666::ParserVisitor&&, x666::IntLiteral&&)>
  43cadf:	48 83 c4 10          	add    $0x10,%rsp
    }
  43cae3:	48 8d 65 f0          	lea    -0x10(%rbp),%rsp
  43cae7:	5b                   	pop    %rbx
  43cae8:	41 5c                	pop    %r12
  43caea:	5d                   	pop    %rbp
  43caeb:	c3                   	retq   

000000000043caec <std::__detail::__variant::_Uninitialized<x666::Operator, true>::_M_get() &&>:
      constexpr _Type&& _M_get() &&
  43caec:	55                   	push   %rbp
  43caed:	48 89 e5             	mov    %rsp,%rbp
  43caf0:	48 83 ec 10          	sub    $0x10,%rsp
  43caf4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return std::move(_M_storage); }
  43caf8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43cafc:	48 89 c7             	mov    %rax,%rdi
  43caff:	e8 42 1b 00 00       	callq  43e646 <std::remove_reference<x666::Operator&>::type&& std::move<x666::Operator&>(x666::Operator&)>
  43cb04:	c9                   	leaveq 
  43cb05:	c3                   	retq   

000000000043cb06 <std::__invoke_result<x666::ParserVisitor, x666::Operator>::type std::__invoke<x666::ParserVisitor, x666::Operator>(x666::ParserVisitor&&, x666::Operator&&)>:
    __invoke(_Callable&& __fn, _Args&&... __args)
  43cb06:	55                   	push   %rbp
  43cb07:	48 89 e5             	mov    %rsp,%rbp
  43cb0a:	41 54                	push   %r12
  43cb0c:	53                   	push   %rbx
  43cb0d:	48 83 ec 10          	sub    $0x10,%rsp
  43cb11:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  43cb15:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
      return std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
  43cb19:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  43cb1d:	48 89 c7             	mov    %rax,%rdi
  43cb20:	e8 54 98 ff ff       	callq  436379 <x666::Operator&& std::forward<x666::Operator>(std::remove_reference<x666::Operator>::type&)>
  43cb25:	48 89 c3             	mov    %rax,%rbx
  43cb28:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  43cb2c:	48 89 c7             	mov    %rax,%rdi
  43cb2f:	e8 9f e2 ff ff       	callq  43add3 <x666::ParserVisitor&& std::forward<x666::ParserVisitor>(std::remove_reference<x666::ParserVisitor>::type&)>
					std::forward<_Args>(__args)...);
  43cb34:	48 83 ec 08          	sub    $0x8,%rsp
  43cb38:	41 54                	push   %r12
  43cb3a:	48 89 de             	mov    %rbx,%rsi
  43cb3d:	48 89 c7             	mov    %rax,%rdi
  43cb40:	e8 0f 1b 00 00       	callq  43e654 <bool std::__invoke_impl<bool, x666::ParserVisitor, x666::Operator>(std::__invoke_other, x666::ParserVisitor&&, x666::Operator&&)>
  43cb45:	48 83 c4 10          	add    $0x10,%rsp
    }
  43cb49:	48 8d 65 f0          	lea    -0x10(%rbp),%rsp
  43cb4d:	5b                   	pop    %rbx
  43cb4e:	41 5c                	pop    %r12
  43cb50:	5d                   	pop    %rbp
  43cb51:	c3                   	retq   

000000000043cb52 <std::__detail::__variant::_Uninitialized<x666::Newline, true>::_M_get() &&>:
      constexpr _Type&& _M_get() &&
  43cb52:	55                   	push   %rbp
  43cb53:	48 89 e5             	mov    %rsp,%rbp
  43cb56:	48 83 ec 10          	sub    $0x10,%rsp
  43cb5a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return std::move(_M_storage); }
  43cb5e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43cb62:	48 89 c7             	mov    %rax,%rdi
  43cb65:	e8 28 1b 00 00       	callq  43e692 <std::remove_reference<x666::Newline&>::type&& std::move<x666::Newline&>(x666::Newline&)>
  43cb6a:	c9                   	leaveq 
  43cb6b:	c3                   	retq   

000000000043cb6c <std::__invoke_result<x666::ParserVisitor, x666::Newline>::type std::__invoke<x666::ParserVisitor, x666::Newline>(x666::ParserVisitor&&, x666::Newline&&)>:
    __invoke(_Callable&& __fn, _Args&&... __args)
  43cb6c:	55                   	push   %rbp
  43cb6d:	48 89 e5             	mov    %rsp,%rbp
  43cb70:	41 54                	push   %r12
  43cb72:	53                   	push   %rbx
  43cb73:	48 83 ec 10          	sub    $0x10,%rsp
  43cb77:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  43cb7b:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
      return std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
  43cb7f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  43cb83:	48 89 c7             	mov    %rax,%rdi
  43cb86:	e8 88 96 ff ff       	callq  436213 <x666::Newline&& std::forward<x666::Newline>(std::remove_reference<x666::Newline>::type&)>
  43cb8b:	48 89 c3             	mov    %rax,%rbx
  43cb8e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  43cb92:	48 89 c7             	mov    %rax,%rdi
  43cb95:	e8 39 e2 ff ff       	callq  43add3 <x666::ParserVisitor&& std::forward<x666::ParserVisitor>(std::remove_reference<x666::ParserVisitor>::type&)>
					std::forward<_Args>(__args)...);
  43cb9a:	48 83 ec 08          	sub    $0x8,%rsp
  43cb9e:	41 54                	push   %r12
  43cba0:	48 89 de             	mov    %rbx,%rsi
  43cba3:	48 89 c7             	mov    %rax,%rdi
  43cba6:	e8 f5 1a 00 00       	callq  43e6a0 <bool std::__invoke_impl<bool, x666::ParserVisitor, x666::Newline>(std::__invoke_other, x666::ParserVisitor&&, x666::Newline&&)>
  43cbab:	48 83 c4 10          	add    $0x10,%rsp
    }
  43cbaf:	48 8d 65 f0          	lea    -0x10(%rbp),%rsp
  43cbb3:	5b                   	pop    %rbx
  43cbb4:	41 5c                	pop    %r12
  43cbb6:	5d                   	pop    %rbp
  43cbb7:	c3                   	retq   

000000000043cbb8 <std::__detail::__variant::_Uninitialized<x666::EndOfFile, true>::_M_get() &&>:
      constexpr _Type&& _M_get() &&
  43cbb8:	55                   	push   %rbp
  43cbb9:	48 89 e5             	mov    %rsp,%rbp
  43cbbc:	48 83 ec 10          	sub    $0x10,%rsp
  43cbc0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return std::move(_M_storage); }
  43cbc4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43cbc8:	48 89 c7             	mov    %rax,%rdi
  43cbcb:	e8 0e 1b 00 00       	callq  43e6de <std::remove_reference<x666::EndOfFile&>::type&& std::move<x666::EndOfFile&>(x666::EndOfFile&)>
  43cbd0:	c9                   	leaveq 
  43cbd1:	c3                   	retq   

000000000043cbd2 <std::__invoke_result<x666::ParserVisitor, x666::EndOfFile>::type std::__invoke<x666::ParserVisitor, x666::EndOfFile>(x666::ParserVisitor&&, x666::EndOfFile&&)>:
    __invoke(_Callable&& __fn, _Args&&... __args)
  43cbd2:	55                   	push   %rbp
  43cbd3:	48 89 e5             	mov    %rsp,%rbp
  43cbd6:	41 54                	push   %r12
  43cbd8:	53                   	push   %rbx
  43cbd9:	48 83 ec 10          	sub    $0x10,%rsp
  43cbdd:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  43cbe1:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
      return std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
  43cbe5:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  43cbe9:	48 89 c7             	mov    %rax,%rdi
  43cbec:	e8 de 96 ff ff       	callq  4362cf <x666::EndOfFile&& std::forward<x666::EndOfFile>(std::remove_reference<x666::EndOfFile>::type&)>
  43cbf1:	48 89 c3             	mov    %rax,%rbx
  43cbf4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  43cbf8:	48 89 c7             	mov    %rax,%rdi
  43cbfb:	e8 d3 e1 ff ff       	callq  43add3 <x666::ParserVisitor&& std::forward<x666::ParserVisitor>(std::remove_reference<x666::ParserVisitor>::type&)>
					std::forward<_Args>(__args)...);
  43cc00:	48 83 ec 08          	sub    $0x8,%rsp
  43cc04:	41 54                	push   %r12
  43cc06:	48 89 de             	mov    %rbx,%rsi
  43cc09:	48 89 c7             	mov    %rax,%rdi
  43cc0c:	e8 db 1a 00 00       	callq  43e6ec <bool std::__invoke_impl<bool, x666::ParserVisitor, x666::EndOfFile>(std::__invoke_other, x666::ParserVisitor&&, x666::EndOfFile&&)>
  43cc11:	48 83 c4 10          	add    $0x10,%rsp
    }
  43cc15:	48 8d 65 f0          	lea    -0x10(%rbp),%rsp
  43cc19:	5b                   	pop    %rbx
  43cc1a:	41 5c                	pop    %r12
  43cc1c:	5d                   	pop    %rbp
  43cc1d:	c3                   	retq   

000000000043cc1e <std::__detail::__variant::_Uninitialized<x666::LexError, false>::_M_get() &&>:
      _Type&& _M_get() &&
  43cc1e:	55                   	push   %rbp
  43cc1f:	48 89 e5             	mov    %rsp,%rbp
  43cc22:	48 83 ec 10          	sub    $0x10,%rsp
  43cc26:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return std::move(*_M_storage._M_ptr()); }
  43cc2a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43cc2e:	48 89 c7             	mov    %rax,%rdi
  43cc31:	e8 ee 18 00 00       	callq  43e524 <__gnu_cxx::__aligned_membuf<x666::LexError>::_M_ptr()>
  43cc36:	48 89 c7             	mov    %rax,%rdi
  43cc39:	e8 ec 1a 00 00       	callq  43e72a <std::remove_reference<x666::LexError&>::type&& std::move<x666::LexError&>(x666::LexError&)>
  43cc3e:	c9                   	leaveq 
  43cc3f:	c3                   	retq   

000000000043cc40 <std::__invoke_result<x666::ParserVisitor, x666::LexError>::type std::__invoke<x666::ParserVisitor, x666::LexError>(x666::ParserVisitor&&, x666::LexError&&)>:
    __invoke(_Callable&& __fn, _Args&&... __args)
  43cc40:	55                   	push   %rbp
  43cc41:	48 89 e5             	mov    %rsp,%rbp
  43cc44:	41 54                	push   %r12
  43cc46:	53                   	push   %rbx
  43cc47:	48 83 ec 10          	sub    $0x10,%rsp
  43cc4b:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  43cc4f:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
      return std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
  43cc53:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  43cc57:	48 89 c7             	mov    %rax,%rdi
  43cc5a:	e8 c4 97 ff ff       	callq  436423 <x666::LexError&& std::forward<x666::LexError>(std::remove_reference<x666::LexError>::type&)>
  43cc5f:	48 89 c3             	mov    %rax,%rbx
  43cc62:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  43cc66:	48 89 c7             	mov    %rax,%rdi
  43cc69:	e8 65 e1 ff ff       	callq  43add3 <x666::ParserVisitor&& std::forward<x666::ParserVisitor>(std::remove_reference<x666::ParserVisitor>::type&)>
					std::forward<_Args>(__args)...);
  43cc6e:	48 83 ec 08          	sub    $0x8,%rsp
  43cc72:	41 54                	push   %r12
  43cc74:	48 89 de             	mov    %rbx,%rsi
  43cc77:	48 89 c7             	mov    %rax,%rdi
  43cc7a:	e8 b9 1a 00 00       	callq  43e738 <bool std::__invoke_impl<bool, x666::ParserVisitor, x666::LexError>(std::__invoke_other, x666::ParserVisitor&&, x666::LexError&&)>
  43cc7f:	48 83 c4 10          	add    $0x10,%rsp
    }
  43cc83:	48 8d 65 f0          	lea    -0x10(%rbp),%rsp
  43cc87:	5b                   	pop    %rbx
  43cc88:	41 5c                	pop    %r12
  43cc8a:	5d                   	pop    %rbp
  43cc8b:	c3                   	retq   

000000000043cc8c <std::__detail::__variant::_Multi_array<bool (*)(x666::ParserVisitor&&, std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>&&)>::_M_access() const>:
      _M_access() const
  43cc8c:	55                   	push   %rbp
  43cc8d:	48 89 e5             	mov    %rsp,%rbp
  43cc90:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_data; }
  43cc94:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43cc98:	5d                   	pop    %rbp
  43cc99:	c3                   	retq   

000000000043cc9a <std::stack<x666::Parser::BracketEntry, std::deque<x666::Parser::BracketEntry, std::allocator<x666::Parser::BracketEntry> > >::size() const>:
      size() const
  43cc9a:	55                   	push   %rbp
  43cc9b:	48 89 e5             	mov    %rsp,%rbp
  43cc9e:	48 83 ec 10          	sub    $0x10,%rsp
  43cca2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return c.size(); }
  43cca6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43ccaa:	48 89 c7             	mov    %rax,%rdi
  43ccad:	e8 c4 1a 00 00       	callq  43e776 <std::deque<x666::Parser::BracketEntry, std::allocator<x666::Parser::BracketEntry> >::size() const>
  43ccb2:	c9                   	leaveq 
  43ccb3:	c3                   	retq   

000000000043ccb4 <bool std::holds_alternative<x666::Newline, x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>(std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> const&)>:
    inline constexpr bool holds_alternative(const variant<_Types...>& __v)
  43ccb4:	55                   	push   %rbp
  43ccb5:	48 89 e5             	mov    %rsp,%rbp
  43ccb8:	48 83 ec 10          	sub    $0x10,%rsp
  43ccbc:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      return __v.index() == __detail::__variant::__index_of_v<_Tp, _Types...>;
  43ccc0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43ccc4:	48 89 c7             	mov    %rax,%rdi
  43ccc7:	e8 6e de ff ff       	callq  43ab3a <std::variant<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>::index() const>
  43cccc:	48 83 f8 04          	cmp    $0x4,%rax
  43ccd0:	0f 94 c0             	sete   %al
    }
  43ccd3:	c9                   	leaveq 
  43ccd4:	c3                   	retq   
  43ccd5:	90                   	nop

000000000043ccd6 <std::stack<x666::LineInfo, std::deque<x666::LineInfo, std::allocator<x666::LineInfo> > >::size() const>:
      size() const
  43ccd6:	55                   	push   %rbp
  43ccd7:	48 89 e5             	mov    %rsp,%rbp
  43ccda:	48 83 ec 10          	sub    $0x10,%rsp
  43ccde:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return c.size(); }
  43cce2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43cce6:	48 89 c7             	mov    %rax,%rdi
  43cce9:	e8 b2 1a 00 00       	callq  43e7a0 <std::deque<x666::LineInfo, std::allocator<x666::LineInfo> >::size() const>
  43ccee:	c9                   	leaveq 
  43ccef:	c3                   	retq   

000000000043ccf0 <std::stack<x666::LineInfo, std::deque<x666::LineInfo, std::allocator<x666::LineInfo> > >::top() const>:
      top() const
  43ccf0:	55                   	push   %rbp
  43ccf1:	48 89 e5             	mov    %rsp,%rbp
  43ccf4:	48 83 ec 10          	sub    $0x10,%rsp
  43ccf8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	return c.back();
  43ccfc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43cd00:	48 89 c7             	mov    %rax,%rdi
  43cd03:	e8 c2 1a 00 00       	callq  43e7ca <std::deque<x666::LineInfo, std::allocator<x666::LineInfo> >::back() const>
      }
  43cd08:	c9                   	leaveq 
  43cd09:	c3                   	retq   

000000000043cd0a <std::__detail::__variant::_Variadic_union<x666::Identifier, x666::IntLiteral, x666::StringLiteral>::_Variadic_union()>:
      constexpr _Variadic_union() : _M_rest() { }
  43cd0a:	55                   	push   %rbp
  43cd0b:	48 89 e5             	mov    %rsp,%rbp
  43cd0e:	48 83 ec 10          	sub    $0x10,%rsp
  43cd12:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  43cd16:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43cd1a:	48 89 c7             	mov    %rax,%rdi
  43cd1d:	e8 e2 1a 00 00       	callq  43e804 <std::__detail::__variant::_Variadic_union<x666::IntLiteral, x666::StringLiteral>::_Variadic_union()>
  43cd22:	90                   	nop
  43cd23:	c9                   	leaveq 
  43cd24:	c3                   	retq   
  43cd25:	90                   	nop

000000000043cd26 <std::__detail::__variant::_Variant_storage<false, x666::Identifier, x666::IntLiteral, x666::StringLiteral>::_Variant_storage()>:
      constexpr _Variant_storage() : _M_index(variant_npos) { }
  43cd26:	55                   	push   %rbp
  43cd27:	48 89 e5             	mov    %rsp,%rbp
  43cd2a:	48 83 ec 10          	sub    $0x10,%rsp
  43cd2e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  43cd32:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43cd36:	48 89 c7             	mov    %rax,%rdi
  43cd39:	e8 cc ff ff ff       	callq  43cd0a <std::__detail::__variant::_Variadic_union<x666::Identifier, x666::IntLiteral, x666::StringLiteral>::_Variadic_union()>
  43cd3e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43cd42:	c6 40 20 ff          	movb   $0xff,0x20(%rax)
  43cd46:	90                   	nop
  43cd47:	c9                   	leaveq 
  43cd48:	c3                   	retq   

000000000043cd49 <void std::__detail::__variant::__erased_ctor<x666::Identifier&, x666::Identifier&&>(void*, void*)>:
    __erased_ctor(void* __lhs, void* __rhs)
  43cd49:	55                   	push   %rbp
  43cd4a:	48 89 e5             	mov    %rsp,%rbp
  43cd4d:	53                   	push   %rbx
  43cd4e:	48 83 ec 18          	sub    $0x18,%rsp
  43cd52:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  43cd56:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
      ::new (__lhs) _Type(__variant::__ref_cast<_Rhs>(__rhs));
  43cd5a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  43cd5e:	48 89 c7             	mov    %rax,%rdi
  43cd61:	e8 b9 1a 00 00       	callq  43e81f <x666::Identifier&& std::__detail::__variant::__ref_cast<x666::Identifier&&>(void*)>
  43cd66:	48 89 c3             	mov    %rax,%rbx
  43cd69:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  43cd6d:	48 89 c6             	mov    %rax,%rsi
  43cd70:	bf 20 00 00 00       	mov    $0x20,%edi
  43cd75:	e8 12 8e ff ff       	callq  435b8c <operator new(unsigned long, void*)>
  43cd7a:	48 89 de             	mov    %rbx,%rsi
  43cd7d:	48 89 c7             	mov    %rax,%rdi
  43cd80:	e8 29 b3 ff ff       	callq  4380ae <x666::Identifier::Identifier(x666::Identifier&&)>
    }
  43cd85:	90                   	nop
  43cd86:	48 83 c4 18          	add    $0x18,%rsp
  43cd8a:	5b                   	pop    %rbx
  43cd8b:	5d                   	pop    %rbp
  43cd8c:	c3                   	retq   

000000000043cd8d <void std::__detail::__variant::__erased_ctor<x666::IntLiteral&, x666::IntLiteral&&>(void*, void*)>:
    __erased_ctor(void* __lhs, void* __rhs)
  43cd8d:	55                   	push   %rbp
  43cd8e:	48 89 e5             	mov    %rsp,%rbp
  43cd91:	53                   	push   %rbx
  43cd92:	48 83 ec 18          	sub    $0x18,%rsp
  43cd96:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  43cd9a:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
      ::new (__lhs) _Type(__variant::__ref_cast<_Rhs>(__rhs));
  43cd9e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  43cda2:	48 89 c7             	mov    %rax,%rdi
  43cda5:	e8 83 1a 00 00       	callq  43e82d <x666::IntLiteral&& std::__detail::__variant::__ref_cast<x666::IntLiteral&&>(void*)>
  43cdaa:	48 89 c3             	mov    %rax,%rbx
  43cdad:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  43cdb1:	48 89 c6             	mov    %rax,%rsi
  43cdb4:	bf 08 00 00 00       	mov    $0x8,%edi
  43cdb9:	e8 ce 8d ff ff       	callq  435b8c <operator new(unsigned long, void*)>
  43cdbe:	48 89 c2             	mov    %rax,%rdx
  43cdc1:	48 8b 03             	mov    (%rbx),%rax
  43cdc4:	48 89 02             	mov    %rax,(%rdx)
    }
  43cdc7:	90                   	nop
  43cdc8:	48 83 c4 18          	add    $0x18,%rsp
  43cdcc:	5b                   	pop    %rbx
  43cdcd:	5d                   	pop    %rbp
  43cdce:	c3                   	retq   

000000000043cdcf <void std::__detail::__variant::__erased_ctor<x666::StringLiteral&, x666::StringLiteral&&>(void*, void*)>:
    __erased_ctor(void* __lhs, void* __rhs)
  43cdcf:	55                   	push   %rbp
  43cdd0:	48 89 e5             	mov    %rsp,%rbp
  43cdd3:	53                   	push   %rbx
  43cdd4:	48 83 ec 18          	sub    $0x18,%rsp
  43cdd8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  43cddc:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
      ::new (__lhs) _Type(__variant::__ref_cast<_Rhs>(__rhs));
  43cde0:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  43cde4:	48 89 c7             	mov    %rax,%rdi
  43cde7:	e8 4f 1a 00 00       	callq  43e83b <x666::StringLiteral&& std::__detail::__variant::__ref_cast<x666::StringLiteral&&>(void*)>
  43cdec:	48 89 c3             	mov    %rax,%rbx
  43cdef:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  43cdf3:	48 89 c6             	mov    %rax,%rsi
  43cdf6:	bf 20 00 00 00       	mov    $0x20,%edi
  43cdfb:	e8 8c 8d ff ff       	callq  435b8c <operator new(unsigned long, void*)>
  43ce00:	48 89 de             	mov    %rbx,%rsi
  43ce03:	48 89 c7             	mov    %rax,%rdi
  43ce06:	e8 99 b3 ff ff       	callq  4381a4 <x666::StringLiteral::StringLiteral(x666::StringLiteral&&)>
    }
  43ce0b:	90                   	nop
  43ce0c:	48 83 c4 18          	add    $0x18,%rsp
  43ce10:	5b                   	pop    %rbx
  43ce11:	5d                   	pop    %rbp
  43ce12:	c3                   	retq   
  43ce13:	90                   	nop

000000000043ce14 <std::__detail::__variant::_Variant_storage<false, x666::Identifier, x666::IntLiteral, x666::StringLiteral>::_M_storage() const>:
      _M_storage() const
  43ce14:	55                   	push   %rbp
  43ce15:	48 89 e5             	mov    %rsp,%rbp
  43ce18:	48 83 ec 10          	sub    $0x10,%rsp
  43ce1c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	    std::addressof(_M_u)));
  43ce20:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43ce24:	48 89 c7             	mov    %rax,%rdi
  43ce27:	e8 1d 1a 00 00       	callq  43e849 <std::__detail::__variant::_Variadic_union<x666::Identifier, x666::IntLiteral, x666::StringLiteral> const* std::addressof<std::__detail::__variant::_Variadic_union<x666::Identifier, x666::IntLiteral, x666::StringLiteral> const>(std::__detail::__variant::_Variadic_union<x666::Identifier, x666::IntLiteral, x666::StringLiteral> const&)>
      }
  43ce2c:	c9                   	leaveq 
  43ce2d:	c3                   	retq   

000000000043ce2e <std::__detail::__variant::_Variant_storage<false, x666::Identifier, x666::IntLiteral, x666::StringLiteral>::_M_reset()>:
      void _M_reset()
  43ce2e:	55                   	push   %rbp
  43ce2f:	48 89 e5             	mov    %rsp,%rbp
  43ce32:	48 83 ec 10          	sub    $0x10,%rsp
  43ce36:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	_M_reset_impl(std::index_sequence_for<_Types...>{});
  43ce3a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43ce3e:	48 83 ec 08          	sub    $0x8,%rsp
  43ce42:	52                   	push   %rdx
  43ce43:	48 89 c7             	mov    %rax,%rdi
  43ce46:	e8 19 1a 00 00       	callq  43e864 <void std::__detail::__variant::_Variant_storage<false, x666::Identifier, x666::IntLiteral, x666::StringLiteral>::_M_reset_impl<0ul, 1ul, 2ul>(std::integer_sequence<unsigned long, 0ul, 1ul, 2ul>)>
  43ce4b:	48 83 c4 10          	add    $0x10,%rsp
	_M_index = variant_npos;
  43ce4f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43ce53:	c6 40 20 ff          	movb   $0xff,0x20(%rax)
      }
  43ce57:	90                   	nop
  43ce58:	c9                   	leaveq 
  43ce59:	c3                   	retq   

000000000043ce5a <std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >::release()>:
      release() noexcept
  43ce5a:	55                   	push   %rbp
  43ce5b:	48 89 e5             	mov    %rsp,%rbp
  43ce5e:	48 83 ec 20          	sub    $0x20,%rsp
  43ce62:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
	pointer __p = get();
  43ce66:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  43ce6a:	48 89 c7             	mov    %rax,%rdi
  43ce6d:	e8 78 69 ff ff       	callq  4337ea <std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >::get() const>
  43ce72:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	_M_t._M_ptr() = pointer();
  43ce76:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  43ce7a:	48 89 c7             	mov    %rax,%rdi
  43ce7d:	e8 a6 63 ff ff       	callq  433228 <std::__uniq_ptr_impl<x666::Expression, std::default_delete<x666::Expression> >::_M_ptr()>
  43ce82:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
	return __p;
  43ce89:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
      }
  43ce8d:	c9                   	leaveq 
  43ce8e:	c3                   	retq   

000000000043ce8f <std::default_delete<x666::Expression>&& std::forward<std::default_delete<x666::Expression> >(std::remove_reference<std::default_delete<x666::Expression> >::type&)>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
  43ce8f:	55                   	push   %rbp
  43ce90:	48 89 e5             	mov    %rsp,%rbp
  43ce93:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<_Tp&&>(__t); }
  43ce97:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43ce9b:	5d                   	pop    %rbp
  43ce9c:	c3                   	retq   
  43ce9d:	90                   	nop

000000000043ce9e <std::__uniq_ptr_impl<x666::Expression, std::default_delete<x666::Expression> >::__uniq_ptr_impl<std::default_delete<x666::Expression> >(x666::Expression*, std::default_delete<x666::Expression>&&)>:
      __uniq_ptr_impl(pointer __p, _Del&& __d)
  43ce9e:	55                   	push   %rbp
  43ce9f:	48 89 e5             	mov    %rsp,%rbp
  43cea2:	53                   	push   %rbx
  43cea3:	48 83 ec 28          	sub    $0x28,%rsp
  43cea7:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  43ceab:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  43ceaf:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
	: _M_t(__p, std::forward<_Del>(__d)) { }
  43ceb3:	48 8b 5d e8          	mov    -0x18(%rbp),%rbx
  43ceb7:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  43cebb:	48 89 c7             	mov    %rax,%rdi
  43cebe:	e8 cc ff ff ff       	callq  43ce8f <std::default_delete<x666::Expression>&& std::forward<std::default_delete<x666::Expression> >(std::remove_reference<std::default_delete<x666::Expression> >::type&)>
  43cec3:	48 89 c2             	mov    %rax,%rdx
  43cec6:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  43ceca:	48 89 c6             	mov    %rax,%rsi
  43cecd:	48 89 df             	mov    %rbx,%rdi
  43ced0:	e8 d7 19 00 00       	callq  43e8ac <std::tuple<x666::Expression*, std::default_delete<x666::Expression> >::tuple<x666::Expression*&, std::default_delete<x666::Expression>, true>(x666::Expression*&, std::default_delete<x666::Expression>&&)>
  43ced5:	90                   	nop
  43ced6:	48 83 c4 28          	add    $0x28,%rsp
  43ceda:	5b                   	pop    %rbx
  43cedb:	5d                   	pop    %rbp
  43cedc:	c3                   	retq   
  43cedd:	90                   	nop

000000000043cede <std::unique_ptr<x666::BinaryOp, std::default_delete<x666::BinaryOp> >::unique_ptr<std::default_delete<x666::BinaryOp>, void>(x666::BinaryOp*)>:
	unique_ptr(pointer __p) noexcept
  43cede:	55                   	push   %rbp
  43cedf:	48 89 e5             	mov    %rsp,%rbp
  43cee2:	48 83 ec 10          	sub    $0x10,%rsp
  43cee6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  43ceea:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	: _M_t(__p)
  43ceee:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43cef2:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  43cef6:	48 89 d6             	mov    %rdx,%rsi
  43cef9:	48 89 c7             	mov    %rax,%rdi
  43cefc:	e8 f9 19 00 00       	callq  43e8fa <std::__uniq_ptr_impl<x666::BinaryOp, std::default_delete<x666::BinaryOp> >::__uniq_ptr_impl(x666::BinaryOp*)>
        { }
  43cf01:	90                   	nop
  43cf02:	c9                   	leaveq 
  43cf03:	c3                   	retq   

000000000043cf04 <std::__uniq_ptr_impl<x666::BinaryOp, std::default_delete<x666::BinaryOp> >::_M_ptr()>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
  43cf04:	55                   	push   %rbp
  43cf05:	48 89 e5             	mov    %rsp,%rbp
  43cf08:	48 83 ec 10          	sub    $0x10,%rsp
  43cf0c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  43cf10:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43cf14:	48 89 c7             	mov    %rax,%rdi
  43cf17:	e8 16 1a 00 00       	callq  43e932 <std::tuple_element<0ul, std::tuple<x666::BinaryOp*, std::default_delete<x666::BinaryOp> > >::type& std::get<0ul, x666::BinaryOp*, std::default_delete<x666::BinaryOp> >(std::tuple<x666::BinaryOp*, std::default_delete<x666::BinaryOp> >&)>
  43cf1c:	c9                   	leaveq 
  43cf1d:	c3                   	retq   

000000000043cf1e <std::unique_ptr<x666::BinaryOp, std::default_delete<x666::BinaryOp> >::get_deleter()>:
      get_deleter() noexcept
  43cf1e:	55                   	push   %rbp
  43cf1f:	48 89 e5             	mov    %rsp,%rbp
  43cf22:	48 83 ec 10          	sub    $0x10,%rsp
  43cf26:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_t._M_deleter(); }
  43cf2a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43cf2e:	48 89 c7             	mov    %rax,%rdi
  43cf31:	e8 16 1a 00 00       	callq  43e94c <std::__uniq_ptr_impl<x666::BinaryOp, std::default_delete<x666::BinaryOp> >::_M_deleter()>
  43cf36:	c9                   	leaveq 
  43cf37:	c3                   	retq   

000000000043cf38 <x666::BinaryOp::~BinaryOp()>:
  class BinaryOp : public Expression {
  43cf38:	55                   	push   %rbp
  43cf39:	48 89 e5             	mov    %rsp,%rbp
  43cf3c:	48 83 ec 10          	sub    $0x10,%rsp
  43cf40:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  43cf44:	ba 88 4a 44 00       	mov    $0x444a88,%edx
  43cf49:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43cf4d:	48 89 10             	mov    %rdx,(%rax)
  43cf50:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43cf54:	48 83 c0 10          	add    $0x10,%rax
  43cf58:	48 89 c7             	mov    %rax,%rdi
  43cf5b:	e8 ac 5e ff ff       	callq  432e0c <std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >::~unique_ptr()>
  43cf60:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43cf64:	48 83 c0 08          	add    $0x8,%rax
  43cf68:	48 89 c7             	mov    %rax,%rdi
  43cf6b:	e8 9c 5e ff ff       	callq  432e0c <std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >::~unique_ptr()>
  43cf70:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43cf74:	48 89 c7             	mov    %rax,%rdi
  43cf77:	e8 58 b9 ff ff       	callq  4388d4 <x666::Expression::~Expression()>
  43cf7c:	90                   	nop
  43cf7d:	c9                   	leaveq 
  43cf7e:	c3                   	retq   
  43cf7f:	90                   	nop

000000000043cf80 <x666::BinaryOp::~BinaryOp()>:
  43cf80:	55                   	push   %rbp
  43cf81:	48 89 e5             	mov    %rsp,%rbp
  43cf84:	48 83 ec 10          	sub    $0x10,%rsp
  43cf88:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  43cf8c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43cf90:	48 89 c7             	mov    %rax,%rdi
  43cf93:	e8 a0 ff ff ff       	callq  43cf38 <x666::BinaryOp::~BinaryOp()>
  43cf98:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43cf9c:	be 20 00 00 00       	mov    $0x20,%esi
  43cfa1:	48 89 c7             	mov    %rax,%rdi
  43cfa4:	e8 57 58 ff ff       	callq  432800 <operator delete(void*, unsigned long)@plt>
  43cfa9:	c9                   	leaveq 
  43cfaa:	c3                   	retq   
  43cfab:	90                   	nop

000000000043cfac <std::default_delete<x666::BinaryOp>::operator()(x666::BinaryOp*) const>:
      operator()(_Tp* __ptr) const
  43cfac:	55                   	push   %rbp
  43cfad:	48 89 e5             	mov    %rsp,%rbp
  43cfb0:	48 83 ec 10          	sub    $0x10,%rsp
  43cfb4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  43cfb8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	delete __ptr;
  43cfbc:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
  43cfc1:	74 17                	je     43cfda <std::default_delete<x666::BinaryOp>::operator()(x666::BinaryOp*) const+0x2e>
  43cfc3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  43cfc7:	48 8b 00             	mov    (%rax),%rax
  43cfca:	48 83 c0 08          	add    $0x8,%rax
  43cfce:	48 8b 00             	mov    (%rax),%rax
  43cfd1:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  43cfd5:	48 89 d7             	mov    %rdx,%rdi
  43cfd8:	ff d0                	callq  *%rax
      }
  43cfda:	90                   	nop
  43cfdb:	c9                   	leaveq 
  43cfdc:	c3                   	retq   
  43cfdd:	90                   	nop

000000000043cfde <std::unique_ptr<x666::BinaryOp, std::default_delete<x666::BinaryOp> >::release()>:
      release() noexcept
  43cfde:	55                   	push   %rbp
  43cfdf:	48 89 e5             	mov    %rsp,%rbp
  43cfe2:	48 83 ec 20          	sub    $0x20,%rsp
  43cfe6:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
	pointer __p = get();
  43cfea:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  43cfee:	48 89 c7             	mov    %rax,%rdi
  43cff1:	e8 70 19 00 00       	callq  43e966 <std::unique_ptr<x666::BinaryOp, std::default_delete<x666::BinaryOp> >::get() const>
  43cff6:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	_M_t._M_ptr() = pointer();
  43cffa:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  43cffe:	48 89 c7             	mov    %rax,%rdi
  43d001:	e8 fe fe ff ff       	callq  43cf04 <std::__uniq_ptr_impl<x666::BinaryOp, std::default_delete<x666::BinaryOp> >::_M_ptr()>
  43d006:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
	return __p;
  43d00d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
      }
  43d011:	c9                   	leaveq 
  43d012:	c3                   	retq   

000000000043d013 <std::default_delete<x666::BinaryOp>&& std::forward<std::default_delete<x666::BinaryOp> >(std::remove_reference<std::default_delete<x666::BinaryOp> >::type&)>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
  43d013:	55                   	push   %rbp
  43d014:	48 89 e5             	mov    %rsp,%rbp
  43d017:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<_Tp&&>(__t); }
  43d01b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43d01f:	5d                   	pop    %rbp
  43d020:	c3                   	retq   
  43d021:	90                   	nop

000000000043d022 <std::__uniq_ptr_impl<x666::Expression, std::default_delete<x666::Expression> >::__uniq_ptr_impl<std::default_delete<x666::BinaryOp> >(x666::Expression*, std::default_delete<x666::BinaryOp>&&)>:
      __uniq_ptr_impl(pointer __p, _Del&& __d)
  43d022:	55                   	push   %rbp
  43d023:	48 89 e5             	mov    %rsp,%rbp
  43d026:	53                   	push   %rbx
  43d027:	48 83 ec 28          	sub    $0x28,%rsp
  43d02b:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  43d02f:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  43d033:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
	: _M_t(__p, std::forward<_Del>(__d)) { }
  43d037:	48 8b 5d e8          	mov    -0x18(%rbp),%rbx
  43d03b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  43d03f:	48 89 c7             	mov    %rax,%rdi
  43d042:	e8 cc ff ff ff       	callq  43d013 <std::default_delete<x666::BinaryOp>&& std::forward<std::default_delete<x666::BinaryOp> >(std::remove_reference<std::default_delete<x666::BinaryOp> >::type&)>
  43d047:	48 89 c2             	mov    %rax,%rdx
  43d04a:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  43d04e:	48 89 c6             	mov    %rax,%rsi
  43d051:	48 89 df             	mov    %rbx,%rdi
  43d054:	e8 27 19 00 00       	callq  43e980 <std::tuple<x666::Expression*, std::default_delete<x666::Expression> >::tuple<x666::Expression*&, std::default_delete<x666::BinaryOp>, true>(x666::Expression*&, std::default_delete<x666::BinaryOp>&&)>
  43d059:	90                   	nop
  43d05a:	48 83 c4 28          	add    $0x28,%rsp
  43d05e:	5b                   	pop    %rbx
  43d05f:	5d                   	pop    %rbp
  43d060:	c3                   	retq   
  43d061:	90                   	nop

000000000043d062 <std::unique_ptr<x666::UnaryOp, std::default_delete<x666::UnaryOp> >::unique_ptr<std::default_delete<x666::UnaryOp>, void>(x666::UnaryOp*)>:
	unique_ptr(pointer __p) noexcept
  43d062:	55                   	push   %rbp
  43d063:	48 89 e5             	mov    %rsp,%rbp
  43d066:	48 83 ec 10          	sub    $0x10,%rsp
  43d06a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  43d06e:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	: _M_t(__p)
  43d072:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43d076:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  43d07a:	48 89 d6             	mov    %rdx,%rsi
  43d07d:	48 89 c7             	mov    %rax,%rdi
  43d080:	e8 49 19 00 00       	callq  43e9ce <std::__uniq_ptr_impl<x666::UnaryOp, std::default_delete<x666::UnaryOp> >::__uniq_ptr_impl(x666::UnaryOp*)>
        { }
  43d085:	90                   	nop
  43d086:	c9                   	leaveq 
  43d087:	c3                   	retq   

000000000043d088 <std::__uniq_ptr_impl<x666::UnaryOp, std::default_delete<x666::UnaryOp> >::_M_ptr()>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
  43d088:	55                   	push   %rbp
  43d089:	48 89 e5             	mov    %rsp,%rbp
  43d08c:	48 83 ec 10          	sub    $0x10,%rsp
  43d090:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  43d094:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43d098:	48 89 c7             	mov    %rax,%rdi
  43d09b:	e8 66 19 00 00       	callq  43ea06 <std::tuple_element<0ul, std::tuple<x666::UnaryOp*, std::default_delete<x666::UnaryOp> > >::type& std::get<0ul, x666::UnaryOp*, std::default_delete<x666::UnaryOp> >(std::tuple<x666::UnaryOp*, std::default_delete<x666::UnaryOp> >&)>
  43d0a0:	c9                   	leaveq 
  43d0a1:	c3                   	retq   

000000000043d0a2 <std::unique_ptr<x666::UnaryOp, std::default_delete<x666::UnaryOp> >::get_deleter()>:
      get_deleter() noexcept
  43d0a2:	55                   	push   %rbp
  43d0a3:	48 89 e5             	mov    %rsp,%rbp
  43d0a6:	48 83 ec 10          	sub    $0x10,%rsp
  43d0aa:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_t._M_deleter(); }
  43d0ae:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43d0b2:	48 89 c7             	mov    %rax,%rdi
  43d0b5:	e8 66 19 00 00       	callq  43ea20 <std::__uniq_ptr_impl<x666::UnaryOp, std::default_delete<x666::UnaryOp> >::_M_deleter()>
  43d0ba:	c9                   	leaveq 
  43d0bb:	c3                   	retq   

000000000043d0bc <x666::UnaryOp::~UnaryOp()>:
  class UnaryOp : public Expression {
  43d0bc:	55                   	push   %rbp
  43d0bd:	48 89 e5             	mov    %rsp,%rbp
  43d0c0:	48 83 ec 10          	sub    $0x10,%rsp
  43d0c4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  43d0c8:	ba 48 4a 44 00       	mov    $0x444a48,%edx
  43d0cd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43d0d1:	48 89 10             	mov    %rdx,(%rax)
  43d0d4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43d0d8:	48 83 c0 08          	add    $0x8,%rax
  43d0dc:	48 89 c7             	mov    %rax,%rdi
  43d0df:	e8 28 5d ff ff       	callq  432e0c <std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >::~unique_ptr()>
  43d0e4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43d0e8:	48 89 c7             	mov    %rax,%rdi
  43d0eb:	e8 e4 b7 ff ff       	callq  4388d4 <x666::Expression::~Expression()>
  43d0f0:	90                   	nop
  43d0f1:	c9                   	leaveq 
  43d0f2:	c3                   	retq   
  43d0f3:	90                   	nop

000000000043d0f4 <x666::UnaryOp::~UnaryOp()>:
  43d0f4:	55                   	push   %rbp
  43d0f5:	48 89 e5             	mov    %rsp,%rbp
  43d0f8:	48 83 ec 10          	sub    $0x10,%rsp
  43d0fc:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  43d100:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43d104:	48 89 c7             	mov    %rax,%rdi
  43d107:	e8 b0 ff ff ff       	callq  43d0bc <x666::UnaryOp::~UnaryOp()>
  43d10c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43d110:	be 18 00 00 00       	mov    $0x18,%esi
  43d115:	48 89 c7             	mov    %rax,%rdi
  43d118:	e8 e3 56 ff ff       	callq  432800 <operator delete(void*, unsigned long)@plt>
  43d11d:	c9                   	leaveq 
  43d11e:	c3                   	retq   
  43d11f:	90                   	nop

000000000043d120 <std::default_delete<x666::UnaryOp>::operator()(x666::UnaryOp*) const>:
      operator()(_Tp* __ptr) const
  43d120:	55                   	push   %rbp
  43d121:	48 89 e5             	mov    %rsp,%rbp
  43d124:	48 83 ec 10          	sub    $0x10,%rsp
  43d128:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  43d12c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	delete __ptr;
  43d130:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
  43d135:	74 17                	je     43d14e <std::default_delete<x666::UnaryOp>::operator()(x666::UnaryOp*) const+0x2e>
  43d137:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  43d13b:	48 8b 00             	mov    (%rax),%rax
  43d13e:	48 83 c0 08          	add    $0x8,%rax
  43d142:	48 8b 00             	mov    (%rax),%rax
  43d145:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  43d149:	48 89 d7             	mov    %rdx,%rdi
  43d14c:	ff d0                	callq  *%rax
      }
  43d14e:	90                   	nop
  43d14f:	c9                   	leaveq 
  43d150:	c3                   	retq   
  43d151:	90                   	nop

000000000043d152 <std::unique_ptr<x666::UnaryOp, std::default_delete<x666::UnaryOp> >::release()>:
      release() noexcept
  43d152:	55                   	push   %rbp
  43d153:	48 89 e5             	mov    %rsp,%rbp
  43d156:	48 83 ec 20          	sub    $0x20,%rsp
  43d15a:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
	pointer __p = get();
  43d15e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  43d162:	48 89 c7             	mov    %rax,%rdi
  43d165:	e8 d0 18 00 00       	callq  43ea3a <std::unique_ptr<x666::UnaryOp, std::default_delete<x666::UnaryOp> >::get() const>
  43d16a:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	_M_t._M_ptr() = pointer();
  43d16e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  43d172:	48 89 c7             	mov    %rax,%rdi
  43d175:	e8 0e ff ff ff       	callq  43d088 <std::__uniq_ptr_impl<x666::UnaryOp, std::default_delete<x666::UnaryOp> >::_M_ptr()>
  43d17a:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
	return __p;
  43d181:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
      }
  43d185:	c9                   	leaveq 
  43d186:	c3                   	retq   

000000000043d187 <std::default_delete<x666::UnaryOp>&& std::forward<std::default_delete<x666::UnaryOp> >(std::remove_reference<std::default_delete<x666::UnaryOp> >::type&)>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
  43d187:	55                   	push   %rbp
  43d188:	48 89 e5             	mov    %rsp,%rbp
  43d18b:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<_Tp&&>(__t); }
  43d18f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43d193:	5d                   	pop    %rbp
  43d194:	c3                   	retq   
  43d195:	90                   	nop

000000000043d196 <std::__uniq_ptr_impl<x666::Expression, std::default_delete<x666::Expression> >::__uniq_ptr_impl<std::default_delete<x666::UnaryOp> >(x666::Expression*, std::default_delete<x666::UnaryOp>&&)>:
      __uniq_ptr_impl(pointer __p, _Del&& __d)
  43d196:	55                   	push   %rbp
  43d197:	48 89 e5             	mov    %rsp,%rbp
  43d19a:	53                   	push   %rbx
  43d19b:	48 83 ec 28          	sub    $0x28,%rsp
  43d19f:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  43d1a3:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  43d1a7:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
	: _M_t(__p, std::forward<_Del>(__d)) { }
  43d1ab:	48 8b 5d e8          	mov    -0x18(%rbp),%rbx
  43d1af:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  43d1b3:	48 89 c7             	mov    %rax,%rdi
  43d1b6:	e8 cc ff ff ff       	callq  43d187 <std::default_delete<x666::UnaryOp>&& std::forward<std::default_delete<x666::UnaryOp> >(std::remove_reference<std::default_delete<x666::UnaryOp> >::type&)>
  43d1bb:	48 89 c2             	mov    %rax,%rdx
  43d1be:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  43d1c2:	48 89 c6             	mov    %rax,%rsi
  43d1c5:	48 89 df             	mov    %rbx,%rdi
  43d1c8:	e8 87 18 00 00       	callq  43ea54 <std::tuple<x666::Expression*, std::default_delete<x666::Expression> >::tuple<x666::Expression*&, std::default_delete<x666::UnaryOp>, true>(x666::Expression*&, std::default_delete<x666::UnaryOp>&&)>
  43d1cd:	90                   	nop
  43d1ce:	48 83 c4 28          	add    $0x28,%rsp
  43d1d2:	5b                   	pop    %rbx
  43d1d3:	5d                   	pop    %rbp
  43d1d4:	c3                   	retq   
  43d1d5:	90                   	nop

000000000043d1d6 <std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >::reset(x666::Expression*)>:
      reset(pointer __p = pointer()) noexcept
  43d1d6:	55                   	push   %rbp
  43d1d7:	48 89 e5             	mov    %rsp,%rbp
  43d1da:	48 83 ec 10          	sub    $0x10,%rsp
  43d1de:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  43d1e2:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	swap(_M_t._M_ptr(), __p);
  43d1e6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43d1ea:	48 89 c7             	mov    %rax,%rdi
  43d1ed:	e8 36 60 ff ff       	callq  433228 <std::__uniq_ptr_impl<x666::Expression, std::default_delete<x666::Expression> >::_M_ptr()>
  43d1f2:	48 89 c2             	mov    %rax,%rdx
  43d1f5:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
  43d1f9:	48 89 c6             	mov    %rax,%rsi
  43d1fc:	48 89 d7             	mov    %rdx,%rdi
  43d1ff:	e8 ac 18 00 00       	callq  43eab0 <std::enable_if<std::__and_<std::__not_<std::__is_tuple_like<x666::Expression*> >, std::is_move_constructible<x666::Expression*>, std::is_move_assignable<x666::Expression*> >::value, void>::type std::swap<x666::Expression*>(x666::Expression*&, x666::Expression*&)>
	if (__p != pointer())
  43d204:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  43d208:	48 85 c0             	test   %rax,%rax
  43d20b:	74 1e                	je     43d22b <std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >::reset(x666::Expression*)+0x55>
	  get_deleter()(__p);
  43d20d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43d211:	48 89 c7             	mov    %rax,%rdi
  43d214:	e8 f5 5f ff ff       	callq  43320e <std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >::get_deleter()>
  43d219:	48 89 c2             	mov    %rax,%rdx
  43d21c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  43d220:	48 89 c6             	mov    %rax,%rsi
  43d223:	48 89 d7             	mov    %rdx,%rdi
  43d226:	e8 17 60 ff ff       	callq  433242 <std::default_delete<x666::Expression>::operator()(x666::Expression*) const>
      }
  43d22b:	90                   	nop
  43d22c:	c9                   	leaveq 
  43d22d:	c3                   	retq   

000000000043d22e <std::__detail::__variant::_Uninitialized<x666::Identifier, false>::_M_get() const &>:
      const _Type& _M_get() const &
  43d22e:	55                   	push   %rbp
  43d22f:	48 89 e5             	mov    %rsp,%rbp
  43d232:	48 83 ec 10          	sub    $0x10,%rsp
  43d236:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return *_M_storage._M_ptr(); }
  43d23a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43d23e:	48 89 c7             	mov    %rax,%rdi
  43d241:	e8 bc 18 00 00       	callq  43eb02 <__gnu_cxx::__aligned_membuf<x666::Identifier>::_M_ptr() const>
  43d246:	c9                   	leaveq 
  43d247:	c3                   	retq   

000000000043d248 <std::__detail::__variant::_Uninitialized<x666::IntLiteral, false>::_M_get() const &>:
      const _Type& _M_get() const &
  43d248:	55                   	push   %rbp
  43d249:	48 89 e5             	mov    %rsp,%rbp
  43d24c:	48 83 ec 10          	sub    $0x10,%rsp
  43d250:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return *_M_storage._M_ptr(); }
  43d254:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43d258:	48 89 c7             	mov    %rax,%rdi
  43d25b:	e8 bc 18 00 00       	callq  43eb1c <__gnu_cxx::__aligned_membuf<x666::IntLiteral>::_M_ptr() const>
  43d260:	c9                   	leaveq 
  43d261:	c3                   	retq   

000000000043d262 <std::__detail::__variant::_Uninitialized<x666::StringLiteral, false>::_M_get() const &>:
      const _Type& _M_get() const &
  43d262:	55                   	push   %rbp
  43d263:	48 89 e5             	mov    %rsp,%rbp
  43d266:	48 83 ec 10          	sub    $0x10,%rsp
  43d26a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return *_M_storage._M_ptr(); }
  43d26e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43d272:	48 89 c7             	mov    %rax,%rdi
  43d275:	e8 bc 18 00 00       	callq  43eb36 <__gnu_cxx::__aligned_membuf<x666::StringLiteral>::_M_ptr() const>
  43d27a:	c9                   	leaveq 
  43d27b:	c3                   	retq   

000000000043d27c <std::variant<x666::Identifier, x666::IntLiteral, x666::StringLiteral>::variant<0ul, x666::Identifier, void>(std::in_place_index_t<0ul>, x666::Identifier&&)>:
	variant(in_place_index_t<_Np>, _Args&&... __args)
  43d27c:	55                   	push   %rbp
  43d27d:	48 89 e5             	mov    %rsp,%rbp
  43d280:	41 55                	push   %r13
  43d282:	41 54                	push   %r12
  43d284:	53                   	push   %rbx
  43d285:	48 83 ec 18          	sub    $0x18,%rsp
  43d289:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  43d28d:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
	_Default_ctor_enabler(_Enable_default_constructor_tag{})
  43d291:	48 8b 5d d8          	mov    -0x28(%rbp),%rbx
  43d295:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  43d299:	48 89 c7             	mov    %rax,%rdi
  43d29c:	e8 d6 92 ff ff       	callq  436577 <x666::Identifier&& std::forward<x666::Identifier>(std::remove_reference<x666::Identifier>::type&)>
  43d2a1:	48 83 ec 08          	sub    $0x8,%rsp
  43d2a5:	41 55                	push   %r13
  43d2a7:	48 89 c6             	mov    %rax,%rsi
  43d2aa:	48 89 df             	mov    %rbx,%rdi
  43d2ad:	e8 6e 19 00 00       	callq  43ec20 <std::__detail::__variant::_Variant_base<x666::Identifier, x666::IntLiteral, x666::StringLiteral>::_Variant_base<0ul, x666::Identifier>(std::in_place_index_t<0ul>, x666::Identifier&&)>
  43d2b2:	48 83 c4 10          	add    $0x10,%rsp
  43d2b6:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  43d2ba:	48 83 ec 08          	sub    $0x8,%rsp
  43d2be:	41 54                	push   %r12
  43d2c0:	48 89 c7             	mov    %rax,%rdi
  43d2c3:	e8 9a 19 00 00       	callq  43ec62 <std::_Enable_default_constructor<false, std::variant<x666::Identifier, x666::IntLiteral, x666::StringLiteral> >::_Enable_default_constructor(std::_Enable_default_constructor_tag)>
  43d2c8:	48 83 c4 10          	add    $0x10,%rsp
	{ __glibcxx_assert(index() == _Np); }
  43d2cc:	90                   	nop
  43d2cd:	48 8d 65 e8          	lea    -0x18(%rbp),%rsp
  43d2d1:	5b                   	pop    %rbx
  43d2d2:	41 5c                	pop    %r12
  43d2d4:	41 5d                	pop    %r13
  43d2d6:	5d                   	pop    %rbp
  43d2d7:	c3                   	retq   

000000000043d2d8 <std::variant<x666::Identifier, x666::IntLiteral, x666::StringLiteral>::variant<x666::Identifier, void, void, void>(x666::Identifier&&)>:
	variant(_Tp&& __t)
  43d2d8:	55                   	push   %rbp
  43d2d9:	48 89 e5             	mov    %rsp,%rbp
  43d2dc:	53                   	push   %rbx
  43d2dd:	48 83 ec 18          	sub    $0x18,%rsp
  43d2e1:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  43d2e5:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
		  std::forward<_Tp>(__t))
  43d2e9:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  43d2ed:	48 89 c7             	mov    %rax,%rdi
  43d2f0:	e8 82 92 ff ff       	callq  436577 <x666::Identifier&& std::forward<x666::Identifier>(std::remove_reference<x666::Identifier>::type&)>
  43d2f5:	48 89 c2             	mov    %rax,%rdx
  43d2f8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  43d2fc:	48 83 ec 08          	sub    $0x8,%rsp
  43d300:	53                   	push   %rbx
  43d301:	48 89 d6             	mov    %rdx,%rsi
  43d304:	48 89 c7             	mov    %rax,%rdi
  43d307:	e8 70 ff ff ff       	callq  43d27c <std::variant<x666::Identifier, x666::IntLiteral, x666::StringLiteral>::variant<0ul, x666::Identifier, void>(std::in_place_index_t<0ul>, x666::Identifier&&)>
  43d30c:	48 83 c4 10          	add    $0x10,%rsp
	{ __glibcxx_assert(holds_alternative<__accepted_type<_Tp&&>>(*this)); }
  43d310:	90                   	nop
  43d311:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  43d315:	c9                   	leaveq 
  43d316:	c3                   	retq   
  43d317:	90                   	nop

000000000043d318 <std::unique_ptr<x666::Literal, std::default_delete<x666::Literal> >::unique_ptr<std::default_delete<x666::Literal>, void>(x666::Literal*)>:
	unique_ptr(pointer __p) noexcept
  43d318:	55                   	push   %rbp
  43d319:	48 89 e5             	mov    %rsp,%rbp
  43d31c:	48 83 ec 10          	sub    $0x10,%rsp
  43d320:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  43d324:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	: _M_t(__p)
  43d328:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43d32c:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  43d330:	48 89 d6             	mov    %rdx,%rsi
  43d333:	48 89 c7             	mov    %rax,%rdi
  43d336:	e8 33 19 00 00       	callq  43ec6e <std::__uniq_ptr_impl<x666::Literal, std::default_delete<x666::Literal> >::__uniq_ptr_impl(x666::Literal*)>
        { }
  43d33b:	90                   	nop
  43d33c:	c9                   	leaveq 
  43d33d:	c3                   	retq   

000000000043d33e <std::__uniq_ptr_impl<x666::Literal, std::default_delete<x666::Literal> >::_M_ptr()>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
  43d33e:	55                   	push   %rbp
  43d33f:	48 89 e5             	mov    %rsp,%rbp
  43d342:	48 83 ec 10          	sub    $0x10,%rsp
  43d346:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  43d34a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43d34e:	48 89 c7             	mov    %rax,%rdi
  43d351:	e8 50 19 00 00       	callq  43eca6 <std::tuple_element<0ul, std::tuple<x666::Literal*, std::default_delete<x666::Literal> > >::type& std::get<0ul, x666::Literal*, std::default_delete<x666::Literal> >(std::tuple<x666::Literal*, std::default_delete<x666::Literal> >&)>
  43d356:	c9                   	leaveq 
  43d357:	c3                   	retq   

000000000043d358 <std::unique_ptr<x666::Literal, std::default_delete<x666::Literal> >::get_deleter()>:
      get_deleter() noexcept
  43d358:	55                   	push   %rbp
  43d359:	48 89 e5             	mov    %rsp,%rbp
  43d35c:	48 83 ec 10          	sub    $0x10,%rsp
  43d360:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_t._M_deleter(); }
  43d364:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43d368:	48 89 c7             	mov    %rax,%rdi
  43d36b:	e8 50 19 00 00       	callq  43ecc0 <std::__uniq_ptr_impl<x666::Literal, std::default_delete<x666::Literal> >::_M_deleter()>
  43d370:	c9                   	leaveq 
  43d371:	c3                   	retq   

000000000043d372 <x666::Literal::~Literal()>:
  class Literal : public Expression {
  43d372:	55                   	push   %rbp
  43d373:	48 89 e5             	mov    %rsp,%rbp
  43d376:	48 83 ec 10          	sub    $0x10,%rsp
  43d37a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  43d37e:	ba 08 4a 44 00       	mov    $0x444a08,%edx
  43d383:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43d387:	48 89 10             	mov    %rdx,(%rax)
  43d38a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43d38e:	48 83 c0 08          	add    $0x8,%rax
  43d392:	48 89 c7             	mov    %rax,%rdi
  43d395:	e8 12 c5 ff ff       	callq  4398ac <std::variant<x666::Identifier, x666::IntLiteral, x666::StringLiteral>::~variant()>
  43d39a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43d39e:	48 89 c7             	mov    %rax,%rdi
  43d3a1:	e8 2e b5 ff ff       	callq  4388d4 <x666::Expression::~Expression()>
  43d3a6:	90                   	nop
  43d3a7:	c9                   	leaveq 
  43d3a8:	c3                   	retq   
  43d3a9:	90                   	nop

000000000043d3aa <x666::Literal::~Literal()>:
  43d3aa:	55                   	push   %rbp
  43d3ab:	48 89 e5             	mov    %rsp,%rbp
  43d3ae:	48 83 ec 10          	sub    $0x10,%rsp
  43d3b2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  43d3b6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43d3ba:	48 89 c7             	mov    %rax,%rdi
  43d3bd:	e8 b0 ff ff ff       	callq  43d372 <x666::Literal::~Literal()>
  43d3c2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43d3c6:	be 30 00 00 00       	mov    $0x30,%esi
  43d3cb:	48 89 c7             	mov    %rax,%rdi
  43d3ce:	e8 2d 54 ff ff       	callq  432800 <operator delete(void*, unsigned long)@plt>
  43d3d3:	c9                   	leaveq 
  43d3d4:	c3                   	retq   
  43d3d5:	90                   	nop

000000000043d3d6 <std::default_delete<x666::Literal>::operator()(x666::Literal*) const>:
      operator()(_Tp* __ptr) const
  43d3d6:	55                   	push   %rbp
  43d3d7:	48 89 e5             	mov    %rsp,%rbp
  43d3da:	48 83 ec 10          	sub    $0x10,%rsp
  43d3de:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  43d3e2:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	delete __ptr;
  43d3e6:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
  43d3eb:	74 17                	je     43d404 <std::default_delete<x666::Literal>::operator()(x666::Literal*) const+0x2e>
  43d3ed:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  43d3f1:	48 8b 00             	mov    (%rax),%rax
  43d3f4:	48 83 c0 08          	add    $0x8,%rax
  43d3f8:	48 8b 00             	mov    (%rax),%rax
  43d3fb:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  43d3ff:	48 89 d7             	mov    %rdx,%rdi
  43d402:	ff d0                	callq  *%rax
      }
  43d404:	90                   	nop
  43d405:	c9                   	leaveq 
  43d406:	c3                   	retq   
  43d407:	90                   	nop

000000000043d408 <std::unique_ptr<x666::Literal, std::default_delete<x666::Literal> >::release()>:
      release() noexcept
  43d408:	55                   	push   %rbp
  43d409:	48 89 e5             	mov    %rsp,%rbp
  43d40c:	48 83 ec 20          	sub    $0x20,%rsp
  43d410:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
	pointer __p = get();
  43d414:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  43d418:	48 89 c7             	mov    %rax,%rdi
  43d41b:	e8 ba 18 00 00       	callq  43ecda <std::unique_ptr<x666::Literal, std::default_delete<x666::Literal> >::get() const>
  43d420:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	_M_t._M_ptr() = pointer();
  43d424:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  43d428:	48 89 c7             	mov    %rax,%rdi
  43d42b:	e8 0e ff ff ff       	callq  43d33e <std::__uniq_ptr_impl<x666::Literal, std::default_delete<x666::Literal> >::_M_ptr()>
  43d430:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
	return __p;
  43d437:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
      }
  43d43b:	c9                   	leaveq 
  43d43c:	c3                   	retq   

000000000043d43d <std::default_delete<x666::Literal>&& std::forward<std::default_delete<x666::Literal> >(std::remove_reference<std::default_delete<x666::Literal> >::type&)>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
  43d43d:	55                   	push   %rbp
  43d43e:	48 89 e5             	mov    %rsp,%rbp
  43d441:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<_Tp&&>(__t); }
  43d445:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43d449:	5d                   	pop    %rbp
  43d44a:	c3                   	retq   
  43d44b:	90                   	nop

000000000043d44c <std::__uniq_ptr_impl<x666::Expression, std::default_delete<x666::Expression> >::__uniq_ptr_impl<std::default_delete<x666::Literal> >(x666::Expression*, std::default_delete<x666::Literal>&&)>:
      __uniq_ptr_impl(pointer __p, _Del&& __d)
  43d44c:	55                   	push   %rbp
  43d44d:	48 89 e5             	mov    %rsp,%rbp
  43d450:	53                   	push   %rbx
  43d451:	48 83 ec 28          	sub    $0x28,%rsp
  43d455:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  43d459:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  43d45d:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
	: _M_t(__p, std::forward<_Del>(__d)) { }
  43d461:	48 8b 5d e8          	mov    -0x18(%rbp),%rbx
  43d465:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  43d469:	48 89 c7             	mov    %rax,%rdi
  43d46c:	e8 cc ff ff ff       	callq  43d43d <std::default_delete<x666::Literal>&& std::forward<std::default_delete<x666::Literal> >(std::remove_reference<std::default_delete<x666::Literal> >::type&)>
  43d471:	48 89 c2             	mov    %rax,%rdx
  43d474:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  43d478:	48 89 c6             	mov    %rax,%rsi
  43d47b:	48 89 df             	mov    %rbx,%rdi
  43d47e:	e8 71 18 00 00       	callq  43ecf4 <std::tuple<x666::Expression*, std::default_delete<x666::Expression> >::tuple<x666::Expression*&, std::default_delete<x666::Literal>, true>(x666::Expression*&, std::default_delete<x666::Literal>&&)>
  43d483:	90                   	nop
  43d484:	48 83 c4 28          	add    $0x28,%rsp
  43d488:	5b                   	pop    %rbx
  43d489:	5d                   	pop    %rbp
  43d48a:	c3                   	retq   
  43d48b:	90                   	nop

000000000043d48c <std::deque<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > >::push_back(std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&&)>:
      push_back(value_type&& __x)
  43d48c:	55                   	push   %rbp
  43d48d:	48 89 e5             	mov    %rsp,%rbp
  43d490:	48 83 ec 10          	sub    $0x10,%rsp
  43d494:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  43d498:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      { emplace_back(std::move(__x)); }
  43d49c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  43d4a0:	48 89 c7             	mov    %rax,%rdi
  43d4a3:	e8 7f c4 ff ff       	callq  439927 <std::remove_reference<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&>::type&& std::move<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&>(std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&)>
  43d4a8:	48 89 c2             	mov    %rax,%rdx
  43d4ab:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43d4af:	48 89 d6             	mov    %rdx,%rsi
  43d4b2:	48 89 c7             	mov    %rax,%rdi
  43d4b5:	e8 88 18 00 00       	callq  43ed42 <std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >& std::deque<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > >::emplace_back<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > >(std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&&)>
  43d4ba:	90                   	nop
  43d4bb:	c9                   	leaveq 
  43d4bc:	c3                   	retq   
  43d4bd:	90                   	nop

000000000043d4be <std::deque<x666::LineInfo, std::allocator<x666::LineInfo> >::push_back(x666::LineInfo const&)>:
      push_back(const value_type& __x)
  43d4be:	55                   	push   %rbp
  43d4bf:	48 89 e5             	mov    %rsp,%rbp
  43d4c2:	48 83 ec 10          	sub    $0x10,%rsp
  43d4c6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  43d4ca:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	if (this->_M_impl._M_finish._M_cur
  43d4ce:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43d4d2:	48 8b 50 30          	mov    0x30(%rax),%rdx
	    != this->_M_impl._M_finish._M_last - 1)
  43d4d6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43d4da:	48 8b 40 40          	mov    0x40(%rax),%rax
  43d4de:	48 83 e8 20          	sub    $0x20,%rax
	if (this->_M_impl._M_finish._M_cur
  43d4e2:	48 39 c2             	cmp    %rax,%rdx
  43d4e5:	74 31                	je     43d518 <std::deque<x666::LineInfo, std::allocator<x666::LineInfo> >::push_back(x666::LineInfo const&)+0x5a>
	    _Alloc_traits::construct(this->_M_impl,
  43d4e7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43d4eb:	48 8b 48 30          	mov    0x30(%rax),%rcx
  43d4ef:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43d4f3:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  43d4f7:	48 89 ce             	mov    %rcx,%rsi
  43d4fa:	48 89 c7             	mov    %rax,%rdi
  43d4fd:	e8 d1 18 00 00       	callq  43edd3 <void std::allocator_traits<std::allocator<x666::LineInfo> >::construct<x666::LineInfo, x666::LineInfo const&>(std::allocator<x666::LineInfo>&, x666::LineInfo*, x666::LineInfo const&)>
	    ++this->_M_impl._M_finish._M_cur;
  43d502:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43d506:	48 8b 40 30          	mov    0x30(%rax),%rax
  43d50a:	48 8d 50 20          	lea    0x20(%rax),%rdx
  43d50e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43d512:	48 89 50 30          	mov    %rdx,0x30(%rax)
      }
  43d516:	eb 13                	jmp    43d52b <std::deque<x666::LineInfo, std::allocator<x666::LineInfo> >::push_back(x666::LineInfo const&)+0x6d>
	  _M_push_back_aux(__x);
  43d518:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  43d51c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43d520:	48 89 d6             	mov    %rdx,%rsi
  43d523:	48 89 c7             	mov    %rax,%rdi
  43d526:	e8 e1 18 00 00       	callq  43ee0c <void std::deque<x666::LineInfo, std::allocator<x666::LineInfo> >::_M_push_back_aux<x666::LineInfo const&>(x666::LineInfo const&)>
      }
  43d52b:	90                   	nop
  43d52c:	c9                   	leaveq 
  43d52d:	c3                   	retq   

000000000043d52e <std::variant<x666::Identifier, x666::IntLiteral, x666::StringLiteral>::variant<2ul, x666::StringLiteral, void>(std::in_place_index_t<2ul>, x666::StringLiteral&&)>:
	variant(in_place_index_t<_Np>, _Args&&... __args)
  43d52e:	55                   	push   %rbp
  43d52f:	48 89 e5             	mov    %rsp,%rbp
  43d532:	41 55                	push   %r13
  43d534:	41 54                	push   %r12
  43d536:	53                   	push   %rbx
  43d537:	48 83 ec 18          	sub    $0x18,%rsp
  43d53b:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  43d53f:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
	_Default_ctor_enabler(_Enable_default_constructor_tag{})
  43d543:	48 8b 5d d8          	mov    -0x28(%rbp),%rbx
  43d547:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  43d54b:	48 89 c7             	mov    %rax,%rdi
  43d54e:	e8 ce 90 ff ff       	callq  436621 <x666::StringLiteral&& std::forward<x666::StringLiteral>(std::remove_reference<x666::StringLiteral>::type&)>
  43d553:	48 83 ec 08          	sub    $0x8,%rsp
  43d557:	41 55                	push   %r13
  43d559:	48 89 c6             	mov    %rax,%rsi
  43d55c:	48 89 df             	mov    %rbx,%rdi
  43d55f:	e8 12 1a 00 00       	callq  43ef76 <std::__detail::__variant::_Variant_base<x666::Identifier, x666::IntLiteral, x666::StringLiteral>::_Variant_base<2ul, x666::StringLiteral>(std::in_place_index_t<2ul>, x666::StringLiteral&&)>
  43d564:	48 83 c4 10          	add    $0x10,%rsp
  43d568:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  43d56c:	48 83 ec 08          	sub    $0x8,%rsp
  43d570:	41 54                	push   %r12
  43d572:	48 89 c7             	mov    %rax,%rdi
  43d575:	e8 e8 16 00 00       	callq  43ec62 <std::_Enable_default_constructor<false, std::variant<x666::Identifier, x666::IntLiteral, x666::StringLiteral> >::_Enable_default_constructor(std::_Enable_default_constructor_tag)>
  43d57a:	48 83 c4 10          	add    $0x10,%rsp
	{ __glibcxx_assert(index() == _Np); }
  43d57e:	90                   	nop
  43d57f:	48 8d 65 e8          	lea    -0x18(%rbp),%rsp
  43d583:	5b                   	pop    %rbx
  43d584:	41 5c                	pop    %r12
  43d586:	41 5d                	pop    %r13
  43d588:	5d                   	pop    %rbp
  43d589:	c3                   	retq   

000000000043d58a <std::variant<x666::Identifier, x666::IntLiteral, x666::StringLiteral>::variant<x666::StringLiteral, void, void, void>(x666::StringLiteral&&)>:
	variant(_Tp&& __t)
  43d58a:	55                   	push   %rbp
  43d58b:	48 89 e5             	mov    %rsp,%rbp
  43d58e:	53                   	push   %rbx
  43d58f:	48 83 ec 18          	sub    $0x18,%rsp
  43d593:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  43d597:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
		  std::forward<_Tp>(__t))
  43d59b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  43d59f:	48 89 c7             	mov    %rax,%rdi
  43d5a2:	e8 7a 90 ff ff       	callq  436621 <x666::StringLiteral&& std::forward<x666::StringLiteral>(std::remove_reference<x666::StringLiteral>::type&)>
  43d5a7:	48 89 c2             	mov    %rax,%rdx
  43d5aa:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  43d5ae:	48 83 ec 08          	sub    $0x8,%rsp
  43d5b2:	53                   	push   %rbx
  43d5b3:	48 89 d6             	mov    %rdx,%rsi
  43d5b6:	48 89 c7             	mov    %rax,%rdi
  43d5b9:	e8 70 ff ff ff       	callq  43d52e <std::variant<x666::Identifier, x666::IntLiteral, x666::StringLiteral>::variant<2ul, x666::StringLiteral, void>(std::in_place_index_t<2ul>, x666::StringLiteral&&)>
  43d5be:	48 83 c4 10          	add    $0x10,%rsp
	{ __glibcxx_assert(holds_alternative<__accepted_type<_Tp&&>>(*this)); }
  43d5c2:	90                   	nop
  43d5c3:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  43d5c7:	c9                   	leaveq 
  43d5c8:	c3                   	retq   
  43d5c9:	90                   	nop

000000000043d5ca <std::variant<x666::Identifier, x666::IntLiteral, x666::StringLiteral>::variant<1ul, x666::IntLiteral, void>(std::in_place_index_t<1ul>, x666::IntLiteral&&)>:
	variant(in_place_index_t<_Np>, _Args&&... __args)
  43d5ca:	55                   	push   %rbp
  43d5cb:	48 89 e5             	mov    %rsp,%rbp
  43d5ce:	41 55                	push   %r13
  43d5d0:	41 54                	push   %r12
  43d5d2:	53                   	push   %rbx
  43d5d3:	48 83 ec 18          	sub    $0x18,%rsp
  43d5d7:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  43d5db:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
	_Default_ctor_enabler(_Enable_default_constructor_tag{})
  43d5df:	48 8b 5d d8          	mov    -0x28(%rbp),%rbx
  43d5e3:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  43d5e7:	48 89 c7             	mov    %rax,%rdi
  43d5ea:	e8 de 8e ff ff       	callq  4364cd <x666::IntLiteral&& std::forward<x666::IntLiteral>(std::remove_reference<x666::IntLiteral>::type&)>
  43d5ef:	48 83 ec 08          	sub    $0x8,%rsp
  43d5f3:	41 55                	push   %r13
  43d5f5:	48 89 c6             	mov    %rax,%rsi
  43d5f8:	48 89 df             	mov    %rbx,%rdi
  43d5fb:	e8 88 1a 00 00       	callq  43f088 <std::__detail::__variant::_Variant_base<x666::Identifier, x666::IntLiteral, x666::StringLiteral>::_Variant_base<1ul, x666::IntLiteral>(std::in_place_index_t<1ul>, x666::IntLiteral&&)>
  43d600:	48 83 c4 10          	add    $0x10,%rsp
  43d604:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  43d608:	48 83 ec 08          	sub    $0x8,%rsp
  43d60c:	41 54                	push   %r12
  43d60e:	48 89 c7             	mov    %rax,%rdi
  43d611:	e8 4c 16 00 00       	callq  43ec62 <std::_Enable_default_constructor<false, std::variant<x666::Identifier, x666::IntLiteral, x666::StringLiteral> >::_Enable_default_constructor(std::_Enable_default_constructor_tag)>
  43d616:	48 83 c4 10          	add    $0x10,%rsp
	{ __glibcxx_assert(index() == _Np); }
  43d61a:	90                   	nop
  43d61b:	48 8d 65 e8          	lea    -0x18(%rbp),%rsp
  43d61f:	5b                   	pop    %rbx
  43d620:	41 5c                	pop    %r12
  43d622:	41 5d                	pop    %r13
  43d624:	5d                   	pop    %rbp
  43d625:	c3                   	retq   

000000000043d626 <std::variant<x666::Identifier, x666::IntLiteral, x666::StringLiteral>::variant<x666::IntLiteral, void, void, void>(x666::IntLiteral&&)>:
	variant(_Tp&& __t)
  43d626:	55                   	push   %rbp
  43d627:	48 89 e5             	mov    %rsp,%rbp
  43d62a:	53                   	push   %rbx
  43d62b:	48 83 ec 18          	sub    $0x18,%rsp
  43d62f:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  43d633:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
		  std::forward<_Tp>(__t))
  43d637:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  43d63b:	48 89 c7             	mov    %rax,%rdi
  43d63e:	e8 8a 8e ff ff       	callq  4364cd <x666::IntLiteral&& std::forward<x666::IntLiteral>(std::remove_reference<x666::IntLiteral>::type&)>
  43d643:	48 89 c2             	mov    %rax,%rdx
  43d646:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  43d64a:	48 83 ec 08          	sub    $0x8,%rsp
  43d64e:	53                   	push   %rbx
  43d64f:	48 89 d6             	mov    %rdx,%rsi
  43d652:	48 89 c7             	mov    %rax,%rdi
  43d655:	e8 70 ff ff ff       	callq  43d5ca <std::variant<x666::Identifier, x666::IntLiteral, x666::StringLiteral>::variant<1ul, x666::IntLiteral, void>(std::in_place_index_t<1ul>, x666::IntLiteral&&)>
  43d65a:	48 83 c4 10          	add    $0x10,%rsp
	{ __glibcxx_assert(holds_alternative<__accepted_type<_Tp&&>>(*this)); }
  43d65e:	90                   	nop
  43d65f:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  43d663:	c9                   	leaveq 
  43d664:	c3                   	retq   
  43d665:	90                   	nop

000000000043d666 <std::deque<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > >::empty() const>:
      empty() const _GLIBCXX_NOEXCEPT
  43d666:	55                   	push   %rbp
  43d667:	48 89 e5             	mov    %rsp,%rbp
  43d66a:	48 83 ec 10          	sub    $0x10,%rsp
  43d66e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return this->_M_impl._M_finish == this->_M_impl._M_start; }
  43d672:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43d676:	48 8d 50 10          	lea    0x10(%rax),%rdx
  43d67a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43d67e:	48 83 c0 30          	add    $0x30,%rax
  43d682:	48 89 d6             	mov    %rdx,%rsi
  43d685:	48 89 c7             	mov    %rax,%rdi
  43d688:	e8 3d 1a 00 00       	callq  43f0ca <bool std::operator==<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*>(std::_Deque_iterator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*> const&, std::_Deque_iterator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*> const&)>
  43d68d:	c9                   	leaveq 
  43d68e:	c3                   	retq   
  43d68f:	90                   	nop

000000000043d690 <std::deque<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > >::back()>:
      back() _GLIBCXX_NOEXCEPT
  43d690:	55                   	push   %rbp
  43d691:	48 89 e5             	mov    %rsp,%rbp
  43d694:	48 83 ec 30          	sub    $0x30,%rsp
  43d698:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
	iterator __tmp = end();
  43d69c:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  43d6a0:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  43d6a4:	48 89 d6             	mov    %rdx,%rsi
  43d6a7:	48 89 c7             	mov    %rax,%rdi
  43d6aa:	e8 1b 5d ff ff       	callq  4333ca <std::deque<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > >::end()>
	--__tmp;
  43d6af:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  43d6b3:	48 89 c7             	mov    %rax,%rdi
  43d6b6:	e8 31 1a 00 00       	callq  43f0ec <std::_Deque_iterator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*>::operator--()>
	return *__tmp;
  43d6bb:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  43d6bf:	48 89 c7             	mov    %rax,%rdi
  43d6c2:	e8 87 1a 00 00       	callq  43f14e <std::_Deque_iterator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*>::operator*() const>
      }
  43d6c7:	c9                   	leaveq 
  43d6c8:	c3                   	retq   
  43d6c9:	90                   	nop

000000000043d6ca <std::deque<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > >::pop_back()>:
      pop_back() _GLIBCXX_NOEXCEPT
  43d6ca:	55                   	push   %rbp
  43d6cb:	48 89 e5             	mov    %rsp,%rbp
  43d6ce:	48 83 ec 10          	sub    $0x10,%rsp
  43d6d2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	if (this->_M_impl._M_finish._M_cur
  43d6d6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43d6da:	48 8b 50 30          	mov    0x30(%rax),%rdx
	    != this->_M_impl._M_finish._M_first)
  43d6de:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43d6e2:	48 8b 40 38          	mov    0x38(%rax),%rax
	if (this->_M_impl._M_finish._M_cur
  43d6e6:	48 39 c2             	cmp    %rax,%rdx
  43d6e9:	74 2d                	je     43d718 <std::deque<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > >::pop_back()+0x4e>
	    --this->_M_impl._M_finish._M_cur;
  43d6eb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43d6ef:	48 8b 40 30          	mov    0x30(%rax),%rax
  43d6f3:	48 8d 50 f8          	lea    -0x8(%rax),%rdx
  43d6f7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43d6fb:	48 89 50 30          	mov    %rdx,0x30(%rax)
	    _Alloc_traits::destroy(this->_M_impl,
  43d6ff:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43d703:	48 8b 50 30          	mov    0x30(%rax),%rdx
  43d707:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43d70b:	48 89 d6             	mov    %rdx,%rsi
  43d70e:	48 89 c7             	mov    %rax,%rdi
  43d711:	e8 49 1a 00 00       	callq  43f15f <void std::allocator_traits<std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > >::destroy<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > >(std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > >&, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*)>
      }
  43d716:	eb 0c                	jmp    43d724 <std::deque<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > >::pop_back()+0x5a>
	  _M_pop_back_aux();
  43d718:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43d71c:	48 89 c7             	mov    %rax,%rdi
  43d71f:	e8 62 1a 00 00       	callq  43f186 <std::deque<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > >::_M_pop_back_aux()>
      }
  43d724:	90                   	nop
  43d725:	c9                   	leaveq 
  43d726:	c3                   	retq   
  43d727:	90                   	nop

000000000043d728 <std::deque<x666::LineInfo, std::allocator<x666::LineInfo> >::pop_back()>:
      pop_back() _GLIBCXX_NOEXCEPT
  43d728:	55                   	push   %rbp
  43d729:	48 89 e5             	mov    %rsp,%rbp
  43d72c:	48 83 ec 10          	sub    $0x10,%rsp
  43d730:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	if (this->_M_impl._M_finish._M_cur
  43d734:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43d738:	48 8b 50 30          	mov    0x30(%rax),%rdx
	    != this->_M_impl._M_finish._M_first)
  43d73c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43d740:	48 8b 40 38          	mov    0x38(%rax),%rax
	if (this->_M_impl._M_finish._M_cur
  43d744:	48 39 c2             	cmp    %rax,%rdx
  43d747:	74 2d                	je     43d776 <std::deque<x666::LineInfo, std::allocator<x666::LineInfo> >::pop_back()+0x4e>
	    --this->_M_impl._M_finish._M_cur;
  43d749:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43d74d:	48 8b 40 30          	mov    0x30(%rax),%rax
  43d751:	48 8d 50 e0          	lea    -0x20(%rax),%rdx
  43d755:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43d759:	48 89 50 30          	mov    %rdx,0x30(%rax)
	    _Alloc_traits::destroy(this->_M_impl,
  43d75d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43d761:	48 8b 50 30          	mov    0x30(%rax),%rdx
  43d765:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43d769:	48 89 d6             	mov    %rdx,%rsi
  43d76c:	48 89 c7             	mov    %rax,%rdi
  43d76f:	e8 90 1a 00 00       	callq  43f204 <void std::allocator_traits<std::allocator<x666::LineInfo> >::destroy<x666::LineInfo>(std::allocator<x666::LineInfo>&, x666::LineInfo*)>
      }
  43d774:	eb 0c                	jmp    43d782 <std::deque<x666::LineInfo, std::allocator<x666::LineInfo> >::pop_back()+0x5a>
	  _M_pop_back_aux();
  43d776:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43d77a:	48 89 c7             	mov    %rax,%rdi
  43d77d:	e8 a8 1a 00 00       	callq  43f22a <std::deque<x666::LineInfo, std::allocator<x666::LineInfo> >::_M_pop_back_aux()>
      }
  43d782:	90                   	nop
  43d783:	c9                   	leaveq 
  43d784:	c3                   	retq   
  43d785:	90                   	nop

000000000043d786 <std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >& std::vector<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > >::emplace_back<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > >(std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&&)>:
      vector<_Tp, _Alloc>::
  43d786:	55                   	push   %rbp
  43d787:	48 89 e5             	mov    %rsp,%rbp
  43d78a:	53                   	push   %rbx
  43d78b:	48 83 ec 18          	sub    $0x18,%rsp
  43d78f:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  43d793:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
  43d797:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  43d79b:	48 8b 50 08          	mov    0x8(%rax),%rdx
  43d79f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  43d7a3:	48 8b 40 10          	mov    0x10(%rax),%rax
  43d7a7:	48 39 c2             	cmp    %rax,%rdx
  43d7aa:	74 3c                	je     43d7e8 <std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >& std::vector<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > >::emplace_back<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > >(std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&&)+0x62>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
  43d7ac:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  43d7b0:	48 89 c7             	mov    %rax,%rdi
  43d7b3:	e8 8e e2 ff ff       	callq  43ba46 <std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&& std::forward<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > >(std::remove_reference<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > >::type&)>
  43d7b8:	48 89 c2             	mov    %rax,%rdx
  43d7bb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  43d7bf:	48 8b 48 08          	mov    0x8(%rax),%rcx
  43d7c3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  43d7c7:	48 89 ce             	mov    %rcx,%rsi
  43d7ca:	48 89 c7             	mov    %rax,%rdi
  43d7cd:	e8 d6 1a 00 00       	callq  43f2a8 <void std::allocator_traits<std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > >::construct<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > >(std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > >&, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&&)>
	    ++this->_M_impl._M_finish;
  43d7d2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  43d7d6:	48 8b 40 08          	mov    0x8(%rax),%rax
  43d7da:	48 8d 50 08          	lea    0x8(%rax),%rdx
  43d7de:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  43d7e2:	48 89 50 08          	mov    %rdx,0x8(%rax)
  43d7e6:	eb 30                	jmp    43d818 <std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >& std::vector<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > >::emplace_back<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > >(std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&&)+0x92>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
  43d7e8:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  43d7ec:	48 89 c7             	mov    %rax,%rdi
  43d7ef:	e8 52 e2 ff ff       	callq  43ba46 <std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&& std::forward<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > >(std::remove_reference<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > >::type&)>
  43d7f4:	48 89 c3             	mov    %rax,%rbx
  43d7f7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  43d7fb:	48 89 c7             	mov    %rax,%rdi
  43d7fe:	e8 9b 58 ff ff       	callq  43309e <std::vector<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > >::end()>
  43d803:	48 89 c1             	mov    %rax,%rcx
  43d806:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  43d80a:	48 89 da             	mov    %rbx,%rdx
  43d80d:	48 89 ce             	mov    %rcx,%rsi
  43d810:	48 89 c7             	mov    %rax,%rdi
  43d813:	e8 ca 1a 00 00       	callq  43f2e2 <void std::vector<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > >::_M_realloc_insert<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > >(__gnu_cxx::__normal_iterator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*, std::vector<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > > >, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&&)>
	return back();
  43d818:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  43d81c:	48 89 c7             	mov    %rax,%rdi
  43d81f:	e8 10 1d 00 00       	callq  43f534 <std::vector<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > >::back()>
      }
  43d824:	48 83 c4 18          	add    $0x18,%rsp
  43d828:	5b                   	pop    %rbx
  43d829:	5d                   	pop    %rbp
  43d82a:	c3                   	retq   

000000000043d82b <void std::allocator_traits<std::allocator<x666::LexError> >::construct<x666::LexError, x666::LexErrorCode, x666::LineInfo const&>(std::allocator<x666::LexError>&, x666::LexError*, x666::LexErrorCode&&, x666::LineInfo const&)>:
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
  43d82b:	55                   	push   %rbp
  43d82c:	48 89 e5             	mov    %rsp,%rbp
  43d82f:	53                   	push   %rbx
  43d830:	48 83 ec 28          	sub    $0x28,%rsp
  43d834:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  43d838:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  43d83c:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  43d840:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
  43d844:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  43d848:	48 89 c7             	mov    %rax,%rdi
  43d84b:	e8 51 eb ff ff       	callq  43c3a1 <x666::LineInfo const& std::forward<x666::LineInfo const&>(std::remove_reference<x666::LineInfo const&>::type&)>
  43d850:	48 89 c3             	mov    %rax,%rbx
  43d853:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  43d857:	48 89 c7             	mov    %rax,%rdi
  43d85a:	e8 34 eb ff ff       	callq  43c393 <x666::LexErrorCode&& std::forward<x666::LexErrorCode>(std::remove_reference<x666::LexErrorCode>::type&)>
  43d85f:	48 89 c2             	mov    %rax,%rdx
  43d862:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
  43d866:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  43d86a:	48 89 d9             	mov    %rbx,%rcx
  43d86d:	48 89 c7             	mov    %rax,%rdi
  43d870:	e8 ff 1c 00 00       	callq  43f574 <void __gnu_cxx::new_allocator<x666::LexError>::construct<x666::LexError, x666::LexErrorCode, x666::LineInfo const&>(x666::LexError*, x666::LexErrorCode&&, x666::LineInfo const&)>
  43d875:	90                   	nop
  43d876:	48 83 c4 28          	add    $0x28,%rsp
  43d87a:	5b                   	pop    %rbx
  43d87b:	5d                   	pop    %rbp
  43d87c:	c3                   	retq   
  43d87d:	90                   	nop

000000000043d87e <void std::vector<x666::LexError, std::allocator<x666::LexError> >::_M_realloc_insert<x666::LexErrorCode, x666::LineInfo const&>(__gnu_cxx::__normal_iterator<x666::LexError*, std::vector<x666::LexError, std::allocator<x666::LexError> > >, x666::LexErrorCode&&, x666::LineInfo const&)>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
  43d87e:	55                   	push   %rbp
  43d87f:	48 89 e5             	mov    %rsp,%rbp
  43d882:	41 54                	push   %r12
  43d884:	53                   	push   %rbx
  43d885:	48 83 ec 50          	sub    $0x50,%rsp
  43d889:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
  43d88d:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
  43d891:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
  43d895:	48 89 4d a0          	mov    %rcx,-0x60(%rbp)
    void
    vector<_Tp, _Alloc>::
    _M_realloc_insert(iterator __position, const _Tp& __x)
#endif
    {
      const size_type __len =
  43d899:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  43d89d:	ba 64 47 44 00       	mov    $0x444764,%edx
  43d8a2:	be 01 00 00 00       	mov    $0x1,%esi
  43d8a7:	48 89 c7             	mov    %rax,%rdi
  43d8aa:	e8 25 1d 00 00       	callq  43f5d4 <std::vector<x666::LexError, std::allocator<x666::LexError> >::_M_check_len(unsigned long, char const*) const>
  43d8af:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
      const size_type __elems_before = __position - begin();
  43d8b3:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  43d8b7:	48 89 c7             	mov    %rax,%rdi
  43d8ba:	e8 91 58 ff ff       	callq  433150 <std::vector<x666::LexError, std::allocator<x666::LexError> >::begin()>
  43d8bf:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  43d8c3:	48 8d 55 c8          	lea    -0x38(%rbp),%rdx
  43d8c7:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
  43d8cb:	48 89 d6             	mov    %rdx,%rsi
  43d8ce:	48 89 c7             	mov    %rax,%rdi
  43d8d1:	e8 c7 1d 00 00       	callq  43f69d <__gnu_cxx::__normal_iterator<x666::LexError*, std::vector<x666::LexError, std::allocator<x666::LexError> > >::difference_type __gnu_cxx::operator-<x666::LexError*, std::vector<x666::LexError, std::allocator<x666::LexError> > >(__gnu_cxx::__normal_iterator<x666::LexError*, std::vector<x666::LexError, std::allocator<x666::LexError> > > const&, __gnu_cxx::__normal_iterator<x666::LexError*, std::vector<x666::LexError, std::allocator<x666::LexError> > > const&)>
  43d8d6:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
      pointer __new_start(this->_M_allocate(__len));
  43d8da:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  43d8de:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  43d8e2:	48 89 d6             	mov    %rdx,%rsi
  43d8e5:	48 89 c7             	mov    %rax,%rdi
  43d8e8:	e8 05 1e 00 00       	callq  43f6f2 <std::_Vector_base<x666::LexError, std::allocator<x666::LexError> >::_M_allocate(unsigned long)>
  43d8ed:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
      pointer __new_finish(__new_start);
  43d8f1:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  43d8f5:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	  // The order of the three operations is dictated by the C++11
	  // case, where the moves could alter a new element belonging
	  // to the existing vector.  This is an issue only for callers
	  // taking the element by lvalue ref (see last bullet of C++11
	  // [res.on.arguments]).
	  _Alloc_traits::construct(this->_M_impl,
  43d8f9:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  43d8fd:	48 89 c7             	mov    %rax,%rdi
  43d900:	e8 9c ea ff ff       	callq  43c3a1 <x666::LineInfo const& std::forward<x666::LineInfo const&>(std::remove_reference<x666::LineInfo const&>::type&)>
  43d905:	48 89 c3             	mov    %rax,%rbx
  43d908:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  43d90c:	48 89 c7             	mov    %rax,%rdi
  43d90f:	e8 7f ea ff ff       	callq  43c393 <x666::LexErrorCode&& std::forward<x666::LexErrorCode>(std::remove_reference<x666::LexErrorCode>::type&)>
  43d914:	48 89 c7             	mov    %rax,%rdi
				   __new_start + __elems_before,
  43d917:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  43d91b:	48 89 d0             	mov    %rdx,%rax
  43d91e:	48 c1 e0 02          	shl    $0x2,%rax
  43d922:	48 01 d0             	add    %rdx,%rax
  43d925:	48 c1 e0 03          	shl    $0x3,%rax
  43d929:	48 89 c2             	mov    %rax,%rdx
	  _Alloc_traits::construct(this->_M_impl,
  43d92c:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  43d930:	48 8d 34 02          	lea    (%rdx,%rax,1),%rsi
  43d934:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  43d938:	48 89 d9             	mov    %rbx,%rcx
  43d93b:	48 89 fa             	mov    %rdi,%rdx
  43d93e:	48 89 c7             	mov    %rax,%rdi
  43d941:	e8 e5 fe ff ff       	callq  43d82b <void std::allocator_traits<std::allocator<x666::LexError> >::construct<x666::LexError, x666::LexErrorCode, x666::LineInfo const&>(std::allocator<x666::LexError>&, x666::LexError*, x666::LexErrorCode&&, x666::LineInfo const&)>
#if __cplusplus >= 201103L
				   std::forward<_Args>(__args)...);
#else
				   __x);
#endif
	  __new_finish = pointer();
  43d946:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  43d94d:	00 

	  __new_finish
	    = std::__uninitialized_move_if_noexcept_a
	    (this->_M_impl._M_start, __position.base(),
	     __new_start, _M_get_Tp_allocator());
  43d94e:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  43d952:	48 89 c7             	mov    %rax,%rdi
  43d955:	e8 8e 5d ff ff       	callq  4336e8 <std::_Vector_base<x666::LexError, std::allocator<x666::LexError> >::_M_get_Tp_allocator()>
  43d95a:	48 89 c3             	mov    %rax,%rbx
	    (this->_M_impl._M_start, __position.base(),
  43d95d:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
  43d961:	48 89 c7             	mov    %rax,%rdi
  43d964:	e8 b9 5e ff ff       	callq  433822 <__gnu_cxx::__normal_iterator<x666::LexError*, std::vector<x666::LexError, std::allocator<x666::LexError> > >::base() const>
  43d969:	48 8b 30             	mov    (%rax),%rsi
  43d96c:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  43d970:	48 8b 00             	mov    (%rax),%rax
	  __new_finish
  43d973:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  43d977:	48 89 d9             	mov    %rbx,%rcx
  43d97a:	48 89 c7             	mov    %rax,%rdi
  43d97d:	e8 c8 1d 00 00       	callq  43f74a <x666::LexError* std::__uninitialized_move_if_noexcept_a<x666::LexError*, x666::LexError*, std::allocator<x666::LexError> >(x666::LexError*, x666::LexError*, x666::LexError*, std::allocator<x666::LexError>&)>
  43d982:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

	  ++__new_finish;
  43d986:	48 83 45 e8 28       	addq   $0x28,-0x18(%rbp)

	  __new_finish
	    = std::__uninitialized_move_if_noexcept_a
	    (__position.base(), this->_M_impl._M_finish,
	     __new_finish, _M_get_Tp_allocator());
  43d98b:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  43d98f:	48 89 c7             	mov    %rax,%rdi
  43d992:	e8 51 5d ff ff       	callq  4336e8 <std::_Vector_base<x666::LexError, std::allocator<x666::LexError> >::_M_get_Tp_allocator()>
  43d997:	49 89 c4             	mov    %rax,%r12
	    (__position.base(), this->_M_impl._M_finish,
  43d99a:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  43d99e:	48 8b 58 08          	mov    0x8(%rax),%rbx
  43d9a2:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
  43d9a6:	48 89 c7             	mov    %rax,%rdi
  43d9a9:	e8 74 5e ff ff       	callq  433822 <__gnu_cxx::__normal_iterator<x666::LexError*, std::vector<x666::LexError, std::allocator<x666::LexError> > >::base() const>
  43d9ae:	48 8b 00             	mov    (%rax),%rax
	  __new_finish
  43d9b1:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  43d9b5:	4c 89 e1             	mov    %r12,%rcx
  43d9b8:	48 89 de             	mov    %rbx,%rsi
  43d9bb:	48 89 c7             	mov    %rax,%rdi
  43d9be:	e8 87 1d 00 00       	callq  43f74a <x666::LexError* std::__uninitialized_move_if_noexcept_a<x666::LexError*, x666::LexError*, std::allocator<x666::LexError> >(x666::LexError*, x666::LexError*, x666::LexError*, std::allocator<x666::LexError>&)>
  43d9c3:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	  _M_deallocate(__new_start, __len);
	  __throw_exception_again;
	}
      _GLIBCXX_ASAN_ANNOTATE_REINIT;
      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
		    _M_get_Tp_allocator());
  43d9c7:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  43d9cb:	48 89 c7             	mov    %rax,%rdi
  43d9ce:	e8 15 5d ff ff       	callq  4336e8 <std::_Vector_base<x666::LexError, std::allocator<x666::LexError> >::_M_get_Tp_allocator()>
  43d9d3:	48 89 c2             	mov    %rax,%rdx
      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
  43d9d6:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  43d9da:	48 8b 48 08          	mov    0x8(%rax),%rcx
  43d9de:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  43d9e2:	48 8b 00             	mov    (%rax),%rax
  43d9e5:	48 89 ce             	mov    %rcx,%rsi
  43d9e8:	48 89 c7             	mov    %rax,%rdi
  43d9eb:	e8 06 5d ff ff       	callq  4336f6 <void std::_Destroy<x666::LexError*, x666::LexError>(x666::LexError*, x666::LexError*, std::allocator<x666::LexError>&)>
      _M_deallocate(this->_M_impl._M_start,
  43d9f0:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
		    this->_M_impl._M_end_of_storage - this->_M_impl._M_start);
  43d9f4:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  43d9f8:	48 8b 52 10          	mov    0x10(%rdx),%rdx
  43d9fc:	48 89 d1             	mov    %rdx,%rcx
  43d9ff:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  43da03:	48 8b 12             	mov    (%rdx),%rdx
  43da06:	48 29 d1             	sub    %rdx,%rcx
  43da09:	48 89 ca             	mov    %rcx,%rdx
  43da0c:	48 89 d1             	mov    %rdx,%rcx
  43da0f:	48 c1 f9 03          	sar    $0x3,%rcx
  43da13:	48 ba cd cc cc cc cc 	movabs $0xcccccccccccccccd,%rdx
  43da1a:	cc cc cc 
  43da1d:	48 0f af d1          	imul   %rcx,%rdx
      _M_deallocate(this->_M_impl._M_start,
  43da21:	48 89 d6             	mov    %rdx,%rsi
  43da24:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  43da28:	48 8b 0a             	mov    (%rdx),%rcx
  43da2b:	48 89 f2             	mov    %rsi,%rdx
  43da2e:	48 89 ce             	mov    %rcx,%rsi
  43da31:	48 89 c7             	mov    %rax,%rdi
  43da34:	e8 ad 62 ff ff       	callq  433ce6 <std::_Vector_base<x666::LexError, std::allocator<x666::LexError> >::_M_deallocate(x666::LexError*, unsigned long)>
      this->_M_impl._M_start = __new_start;
  43da39:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  43da3d:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  43da41:	48 89 10             	mov    %rdx,(%rax)
      this->_M_impl._M_finish = __new_finish;
  43da44:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  43da48:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  43da4c:	48 89 50 08          	mov    %rdx,0x8(%rax)
      this->_M_impl._M_end_of_storage = __new_start + __len;
  43da50:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  43da54:	48 89 d0             	mov    %rdx,%rax
  43da57:	48 c1 e0 02          	shl    $0x2,%rax
  43da5b:	48 01 d0             	add    %rdx,%rax
  43da5e:	48 c1 e0 03          	shl    $0x3,%rax
  43da62:	48 89 c2             	mov    %rax,%rdx
  43da65:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  43da69:	48 01 c2             	add    %rax,%rdx
  43da6c:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  43da70:	48 89 50 10          	mov    %rdx,0x10(%rax)
    }
  43da74:	e9 8d 00 00 00       	jmpq   43db06 <void std::vector<x666::LexError, std::allocator<x666::LexError> >::_M_realloc_insert<x666::LexErrorCode, x666::LineInfo const&>(__gnu_cxx::__normal_iterator<x666::LexError*, std::vector<x666::LexError, std::allocator<x666::LexError> > >, x666::LexErrorCode&&, x666::LineInfo const&)+0x288>
      __catch(...)
  43da79:	48 89 c7             	mov    %rax,%rdi
  43da7c:	e8 5f 4c ff ff       	callq  4326e0 <__cxa_begin_catch@plt>
	  if (!__new_finish)
  43da81:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  43da86:	75 2d                	jne    43dab5 <void std::vector<x666::LexError, std::allocator<x666::LexError> >::_M_realloc_insert<x666::LexErrorCode, x666::LineInfo const&>(__gnu_cxx::__normal_iterator<x666::LexError*, std::vector<x666::LexError, std::allocator<x666::LexError> > >, x666::LexErrorCode&&, x666::LineInfo const&)+0x237>
				   __new_start + __elems_before);
  43da88:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  43da8c:	48 89 d0             	mov    %rdx,%rax
  43da8f:	48 c1 e0 02          	shl    $0x2,%rax
  43da93:	48 01 d0             	add    %rdx,%rax
  43da96:	48 c1 e0 03          	shl    $0x3,%rax
  43da9a:	48 89 c2             	mov    %rax,%rdx
	    _Alloc_traits::destroy(this->_M_impl,
  43da9d:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  43daa1:	48 01 c2             	add    %rax,%rdx
  43daa4:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  43daa8:	48 89 d6             	mov    %rdx,%rsi
  43daab:	48 89 c7             	mov    %rax,%rdi
  43daae:	e8 eb 1c 00 00       	callq  43f79e <void std::allocator_traits<std::allocator<x666::LexError> >::destroy<x666::LexError>(std::allocator<x666::LexError>&, x666::LexError*)>
  43dab3:	eb 22                	jmp    43dad7 <void std::vector<x666::LexError, std::allocator<x666::LexError> >::_M_realloc_insert<x666::LexErrorCode, x666::LineInfo const&>(__gnu_cxx::__normal_iterator<x666::LexError*, std::vector<x666::LexError, std::allocator<x666::LexError> > >, x666::LexErrorCode&&, x666::LineInfo const&)+0x259>
	    std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator());
  43dab5:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  43dab9:	48 89 c7             	mov    %rax,%rdi
  43dabc:	e8 27 5c ff ff       	callq  4336e8 <std::_Vector_base<x666::LexError, std::allocator<x666::LexError> >::_M_get_Tp_allocator()>
  43dac1:	48 89 c2             	mov    %rax,%rdx
  43dac4:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  43dac8:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  43dacc:	48 89 ce             	mov    %rcx,%rsi
  43dacf:	48 89 c7             	mov    %rax,%rdi
  43dad2:	e8 1f 5c ff ff       	callq  4336f6 <void std::_Destroy<x666::LexError*, x666::LexError>(x666::LexError*, x666::LexError*, std::allocator<x666::LexError>&)>
	  _M_deallocate(__new_start, __len);
  43dad7:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  43dadb:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  43dadf:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
  43dae3:	48 89 ce             	mov    %rcx,%rsi
  43dae6:	48 89 c7             	mov    %rax,%rdi
  43dae9:	e8 f8 61 ff ff       	callq  433ce6 <std::_Vector_base<x666::LexError, std::allocator<x666::LexError> >::_M_deallocate(x666::LexError*, unsigned long)>
	  __throw_exception_again;
  43daee:	e8 8d 4d ff ff       	callq  432880 <__cxa_rethrow@plt>
  43daf3:	48 89 c3             	mov    %rax,%rbx
      __catch(...)
  43daf6:	e8 c5 4d ff ff       	callq  4328c0 <__cxa_end_catch@plt>
  43dafb:	48 89 d8             	mov    %rbx,%rax
  43dafe:	48 89 c7             	mov    %rax,%rdi
  43db01:	e8 0a 4e ff ff       	callq  432910 <_Unwind_Resume@plt>
    }
  43db06:	48 83 c4 50          	add    $0x50,%rsp
  43db0a:	5b                   	pop    %rbx
  43db0b:	41 5c                	pop    %r12
  43db0d:	5d                   	pop    %rbp
  43db0e:	c3                   	retq   
  43db0f:	90                   	nop

000000000043db10 <std::vector<x666::LexError, std::allocator<x666::LexError> >::back()>:
      back() _GLIBCXX_NOEXCEPT
  43db10:	55                   	push   %rbp
  43db11:	48 89 e5             	mov    %rsp,%rbp
  43db14:	48 83 ec 20          	sub    $0x20,%rsp
  43db18:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
	return *(end() - 1);
  43db1c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  43db20:	48 89 c7             	mov    %rax,%rdi
  43db23:	e8 4e 56 ff ff       	callq  433176 <std::vector<x666::LexError, std::allocator<x666::LexError> >::end()>
  43db28:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  43db2c:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
  43db30:	be 01 00 00 00       	mov    $0x1,%esi
  43db35:	48 89 c7             	mov    %rax,%rdi
  43db38:	e8 87 1c 00 00       	callq  43f7c4 <__gnu_cxx::__normal_iterator<x666::LexError*, std::vector<x666::LexError, std::allocator<x666::LexError> > >::operator-(long) const>
  43db3d:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  43db41:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
  43db45:	48 89 c7             	mov    %rax,%rdi
  43db48:	e8 af 56 ff ff       	callq  4331fc <__gnu_cxx::__normal_iterator<x666::LexError*, std::vector<x666::LexError, std::allocator<x666::LexError> > >::operator*() const>
      }
  43db4d:	c9                   	leaveq 
  43db4e:	c3                   	retq   
  43db4f:	90                   	nop

000000000043db50 <std::deque<x666::LineInfo, std::allocator<x666::LineInfo> >::empty() const>:
      empty() const _GLIBCXX_NOEXCEPT
  43db50:	55                   	push   %rbp
  43db51:	48 89 e5             	mov    %rsp,%rbp
  43db54:	48 83 ec 10          	sub    $0x10,%rsp
  43db58:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return this->_M_impl._M_finish == this->_M_impl._M_start; }
  43db5c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43db60:	48 8d 50 10          	lea    0x10(%rax),%rdx
  43db64:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43db68:	48 83 c0 30          	add    $0x30,%rax
  43db6c:	48 89 d6             	mov    %rdx,%rsi
  43db6f:	48 89 c7             	mov    %rax,%rdi
  43db72:	e8 99 1c 00 00       	callq  43f810 <bool std::operator==<x666::LineInfo, x666::LineInfo&, x666::LineInfo*>(std::_Deque_iterator<x666::LineInfo, x666::LineInfo&, x666::LineInfo*> const&, std::_Deque_iterator<x666::LineInfo, x666::LineInfo&, x666::LineInfo*> const&)>
  43db77:	c9                   	leaveq 
  43db78:	c3                   	retq   

000000000043db79 <x666::LexError const& std::forward<x666::LexError const&>(std::remove_reference<x666::LexError const&>::type&)>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
  43db79:	55                   	push   %rbp
  43db7a:	48 89 e5             	mov    %rsp,%rbp
  43db7d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<_Tp&&>(__t); }
  43db81:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43db85:	5d                   	pop    %rbp
  43db86:	c3                   	retq   

000000000043db87 <void std::allocator_traits<std::allocator<x666::LexError> >::construct<x666::LexError, x666::LexError const&>(std::allocator<x666::LexError>&, x666::LexError*, x666::LexError const&)>:
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
  43db87:	55                   	push   %rbp
  43db88:	48 89 e5             	mov    %rsp,%rbp
  43db8b:	48 83 ec 20          	sub    $0x20,%rsp
  43db8f:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  43db93:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  43db97:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
  43db9b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  43db9f:	48 89 c7             	mov    %rax,%rdi
  43dba2:	e8 d2 ff ff ff       	callq  43db79 <x666::LexError const& std::forward<x666::LexError const&>(std::remove_reference<x666::LexError const&>::type&)>
  43dba7:	48 89 c2             	mov    %rax,%rdx
  43dbaa:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  43dbae:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43dbb2:	48 89 ce             	mov    %rcx,%rsi
  43dbb5:	48 89 c7             	mov    %rax,%rdi
  43dbb8:	e8 75 1c 00 00       	callq  43f832 <void __gnu_cxx::new_allocator<x666::LexError>::construct<x666::LexError, x666::LexError const&>(x666::LexError*, x666::LexError const&)>
  43dbbd:	90                   	nop
  43dbbe:	c9                   	leaveq 
  43dbbf:	c3                   	retq   

000000000043dbc0 <void std::vector<x666::LexError, std::allocator<x666::LexError> >::_M_realloc_insert<x666::LexError const&>(__gnu_cxx::__normal_iterator<x666::LexError*, std::vector<x666::LexError, std::allocator<x666::LexError> > >, x666::LexError const&)>:
      vector<_Tp, _Alloc>::
  43dbc0:	55                   	push   %rbp
  43dbc1:	48 89 e5             	mov    %rsp,%rbp
  43dbc4:	41 54                	push   %r12
  43dbc6:	53                   	push   %rbx
  43dbc7:	48 83 ec 50          	sub    $0x50,%rsp
  43dbcb:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
  43dbcf:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
  43dbd3:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
      const size_type __len =
  43dbd7:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  43dbdb:	ba 64 47 44 00       	mov    $0x444764,%edx
  43dbe0:	be 01 00 00 00       	mov    $0x1,%esi
  43dbe5:	48 89 c7             	mov    %rax,%rdi
  43dbe8:	e8 e7 19 00 00       	callq  43f5d4 <std::vector<x666::LexError, std::allocator<x666::LexError> >::_M_check_len(unsigned long, char const*) const>
  43dbed:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
      const size_type __elems_before = __position - begin();
  43dbf1:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  43dbf5:	48 89 c7             	mov    %rax,%rdi
  43dbf8:	e8 53 55 ff ff       	callq  433150 <std::vector<x666::LexError, std::allocator<x666::LexError> >::begin()>
  43dbfd:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  43dc01:	48 8d 55 c8          	lea    -0x38(%rbp),%rdx
  43dc05:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
  43dc09:	48 89 d6             	mov    %rdx,%rsi
  43dc0c:	48 89 c7             	mov    %rax,%rdi
  43dc0f:	e8 89 1a 00 00       	callq  43f69d <__gnu_cxx::__normal_iterator<x666::LexError*, std::vector<x666::LexError, std::allocator<x666::LexError> > >::difference_type __gnu_cxx::operator-<x666::LexError*, std::vector<x666::LexError, std::allocator<x666::LexError> > >(__gnu_cxx::__normal_iterator<x666::LexError*, std::vector<x666::LexError, std::allocator<x666::LexError> > > const&, __gnu_cxx::__normal_iterator<x666::LexError*, std::vector<x666::LexError, std::allocator<x666::LexError> > > const&)>
  43dc14:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
      pointer __new_start(this->_M_allocate(__len));
  43dc18:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  43dc1c:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  43dc20:	48 89 d6             	mov    %rdx,%rsi
  43dc23:	48 89 c7             	mov    %rax,%rdi
  43dc26:	e8 c7 1a 00 00       	callq  43f6f2 <std::_Vector_base<x666::LexError, std::allocator<x666::LexError> >::_M_allocate(unsigned long)>
  43dc2b:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
      pointer __new_finish(__new_start);
  43dc2f:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  43dc33:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	  _Alloc_traits::construct(this->_M_impl,
  43dc37:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  43dc3b:	48 89 c7             	mov    %rax,%rdi
  43dc3e:	e8 36 ff ff ff       	callq  43db79 <x666::LexError const& std::forward<x666::LexError const&>(std::remove_reference<x666::LexError const&>::type&)>
  43dc43:	48 89 c6             	mov    %rax,%rsi
				   __new_start + __elems_before,
  43dc46:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  43dc4a:	48 89 d0             	mov    %rdx,%rax
  43dc4d:	48 c1 e0 02          	shl    $0x2,%rax
  43dc51:	48 01 d0             	add    %rdx,%rax
  43dc54:	48 c1 e0 03          	shl    $0x3,%rax
  43dc58:	48 89 c2             	mov    %rax,%rdx
	  _Alloc_traits::construct(this->_M_impl,
  43dc5b:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  43dc5f:	48 8d 0c 02          	lea    (%rdx,%rax,1),%rcx
  43dc63:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  43dc67:	48 89 f2             	mov    %rsi,%rdx
  43dc6a:	48 89 ce             	mov    %rcx,%rsi
  43dc6d:	48 89 c7             	mov    %rax,%rdi
  43dc70:	e8 12 ff ff ff       	callq  43db87 <void std::allocator_traits<std::allocator<x666::LexError> >::construct<x666::LexError, x666::LexError const&>(std::allocator<x666::LexError>&, x666::LexError*, x666::LexError const&)>
	  __new_finish = pointer();
  43dc75:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  43dc7c:	00 
	     __new_start, _M_get_Tp_allocator());
  43dc7d:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  43dc81:	48 89 c7             	mov    %rax,%rdi
  43dc84:	e8 5f 5a ff ff       	callq  4336e8 <std::_Vector_base<x666::LexError, std::allocator<x666::LexError> >::_M_get_Tp_allocator()>
  43dc89:	48 89 c3             	mov    %rax,%rbx
	    (this->_M_impl._M_start, __position.base(),
  43dc8c:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
  43dc90:	48 89 c7             	mov    %rax,%rdi
  43dc93:	e8 8a 5b ff ff       	callq  433822 <__gnu_cxx::__normal_iterator<x666::LexError*, std::vector<x666::LexError, std::allocator<x666::LexError> > >::base() const>
  43dc98:	48 8b 30             	mov    (%rax),%rsi
  43dc9b:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  43dc9f:	48 8b 00             	mov    (%rax),%rax
	  __new_finish
  43dca2:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  43dca6:	48 89 d9             	mov    %rbx,%rcx
  43dca9:	48 89 c7             	mov    %rax,%rdi
  43dcac:	e8 99 1a 00 00       	callq  43f74a <x666::LexError* std::__uninitialized_move_if_noexcept_a<x666::LexError*, x666::LexError*, std::allocator<x666::LexError> >(x666::LexError*, x666::LexError*, x666::LexError*, std::allocator<x666::LexError>&)>
  43dcb1:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	  ++__new_finish;
  43dcb5:	48 83 45 e8 28       	addq   $0x28,-0x18(%rbp)
	     __new_finish, _M_get_Tp_allocator());
  43dcba:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  43dcbe:	48 89 c7             	mov    %rax,%rdi
  43dcc1:	e8 22 5a ff ff       	callq  4336e8 <std::_Vector_base<x666::LexError, std::allocator<x666::LexError> >::_M_get_Tp_allocator()>
  43dcc6:	49 89 c4             	mov    %rax,%r12
	    (__position.base(), this->_M_impl._M_finish,
  43dcc9:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  43dccd:	48 8b 58 08          	mov    0x8(%rax),%rbx
  43dcd1:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
  43dcd5:	48 89 c7             	mov    %rax,%rdi
  43dcd8:	e8 45 5b ff ff       	callq  433822 <__gnu_cxx::__normal_iterator<x666::LexError*, std::vector<x666::LexError, std::allocator<x666::LexError> > >::base() const>
  43dcdd:	48 8b 00             	mov    (%rax),%rax
	  __new_finish
  43dce0:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  43dce4:	4c 89 e1             	mov    %r12,%rcx
  43dce7:	48 89 de             	mov    %rbx,%rsi
  43dcea:	48 89 c7             	mov    %rax,%rdi
  43dced:	e8 58 1a 00 00       	callq  43f74a <x666::LexError* std::__uninitialized_move_if_noexcept_a<x666::LexError*, x666::LexError*, std::allocator<x666::LexError> >(x666::LexError*, x666::LexError*, x666::LexError*, std::allocator<x666::LexError>&)>
  43dcf2:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
		    _M_get_Tp_allocator());
  43dcf6:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  43dcfa:	48 89 c7             	mov    %rax,%rdi
  43dcfd:	e8 e6 59 ff ff       	callq  4336e8 <std::_Vector_base<x666::LexError, std::allocator<x666::LexError> >::_M_get_Tp_allocator()>
  43dd02:	48 89 c2             	mov    %rax,%rdx
      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
  43dd05:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  43dd09:	48 8b 48 08          	mov    0x8(%rax),%rcx
  43dd0d:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  43dd11:	48 8b 00             	mov    (%rax),%rax
  43dd14:	48 89 ce             	mov    %rcx,%rsi
  43dd17:	48 89 c7             	mov    %rax,%rdi
  43dd1a:	e8 d7 59 ff ff       	callq  4336f6 <void std::_Destroy<x666::LexError*, x666::LexError>(x666::LexError*, x666::LexError*, std::allocator<x666::LexError>&)>
      _M_deallocate(this->_M_impl._M_start,
  43dd1f:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
		    this->_M_impl._M_end_of_storage - this->_M_impl._M_start);
  43dd23:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  43dd27:	48 8b 52 10          	mov    0x10(%rdx),%rdx
  43dd2b:	48 89 d1             	mov    %rdx,%rcx
  43dd2e:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  43dd32:	48 8b 12             	mov    (%rdx),%rdx
  43dd35:	48 29 d1             	sub    %rdx,%rcx
  43dd38:	48 89 ca             	mov    %rcx,%rdx
  43dd3b:	48 89 d1             	mov    %rdx,%rcx
  43dd3e:	48 c1 f9 03          	sar    $0x3,%rcx
  43dd42:	48 ba cd cc cc cc cc 	movabs $0xcccccccccccccccd,%rdx
  43dd49:	cc cc cc 
  43dd4c:	48 0f af d1          	imul   %rcx,%rdx
      _M_deallocate(this->_M_impl._M_start,
  43dd50:	48 89 d6             	mov    %rdx,%rsi
  43dd53:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  43dd57:	48 8b 0a             	mov    (%rdx),%rcx
  43dd5a:	48 89 f2             	mov    %rsi,%rdx
  43dd5d:	48 89 ce             	mov    %rcx,%rsi
  43dd60:	48 89 c7             	mov    %rax,%rdi
  43dd63:	e8 7e 5f ff ff       	callq  433ce6 <std::_Vector_base<x666::LexError, std::allocator<x666::LexError> >::_M_deallocate(x666::LexError*, unsigned long)>
      this->_M_impl._M_start = __new_start;
  43dd68:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  43dd6c:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  43dd70:	48 89 10             	mov    %rdx,(%rax)
      this->_M_impl._M_finish = __new_finish;
  43dd73:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  43dd77:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  43dd7b:	48 89 50 08          	mov    %rdx,0x8(%rax)
      this->_M_impl._M_end_of_storage = __new_start + __len;
  43dd7f:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  43dd83:	48 89 d0             	mov    %rdx,%rax
  43dd86:	48 c1 e0 02          	shl    $0x2,%rax
  43dd8a:	48 01 d0             	add    %rdx,%rax
  43dd8d:	48 c1 e0 03          	shl    $0x3,%rax
  43dd91:	48 89 c2             	mov    %rax,%rdx
  43dd94:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  43dd98:	48 01 c2             	add    %rax,%rdx
  43dd9b:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  43dd9f:	48 89 50 10          	mov    %rdx,0x10(%rax)
    }
  43dda3:	e9 8d 00 00 00       	jmpq   43de35 <void std::vector<x666::LexError, std::allocator<x666::LexError> >::_M_realloc_insert<x666::LexError const&>(__gnu_cxx::__normal_iterator<x666::LexError*, std::vector<x666::LexError, std::allocator<x666::LexError> > >, x666::LexError const&)+0x275>
      __catch(...)
  43dda8:	48 89 c7             	mov    %rax,%rdi
  43ddab:	e8 30 49 ff ff       	callq  4326e0 <__cxa_begin_catch@plt>
	  if (!__new_finish)
  43ddb0:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  43ddb5:	75 2d                	jne    43dde4 <void std::vector<x666::LexError, std::allocator<x666::LexError> >::_M_realloc_insert<x666::LexError const&>(__gnu_cxx::__normal_iterator<x666::LexError*, std::vector<x666::LexError, std::allocator<x666::LexError> > >, x666::LexError const&)+0x224>
				   __new_start + __elems_before);
  43ddb7:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  43ddbb:	48 89 d0             	mov    %rdx,%rax
  43ddbe:	48 c1 e0 02          	shl    $0x2,%rax
  43ddc2:	48 01 d0             	add    %rdx,%rax
  43ddc5:	48 c1 e0 03          	shl    $0x3,%rax
  43ddc9:	48 89 c2             	mov    %rax,%rdx
	    _Alloc_traits::destroy(this->_M_impl,
  43ddcc:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  43ddd0:	48 01 c2             	add    %rax,%rdx
  43ddd3:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  43ddd7:	48 89 d6             	mov    %rdx,%rsi
  43ddda:	48 89 c7             	mov    %rax,%rdi
  43dddd:	e8 bc 19 00 00       	callq  43f79e <void std::allocator_traits<std::allocator<x666::LexError> >::destroy<x666::LexError>(std::allocator<x666::LexError>&, x666::LexError*)>
  43dde2:	eb 22                	jmp    43de06 <void std::vector<x666::LexError, std::allocator<x666::LexError> >::_M_realloc_insert<x666::LexError const&>(__gnu_cxx::__normal_iterator<x666::LexError*, std::vector<x666::LexError, std::allocator<x666::LexError> > >, x666::LexError const&)+0x246>
	    std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator());
  43dde4:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  43dde8:	48 89 c7             	mov    %rax,%rdi
  43ddeb:	e8 f8 58 ff ff       	callq  4336e8 <std::_Vector_base<x666::LexError, std::allocator<x666::LexError> >::_M_get_Tp_allocator()>
  43ddf0:	48 89 c2             	mov    %rax,%rdx
  43ddf3:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  43ddf7:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  43ddfb:	48 89 ce             	mov    %rcx,%rsi
  43ddfe:	48 89 c7             	mov    %rax,%rdi
  43de01:	e8 f0 58 ff ff       	callq  4336f6 <void std::_Destroy<x666::LexError*, x666::LexError>(x666::LexError*, x666::LexError*, std::allocator<x666::LexError>&)>
	  _M_deallocate(__new_start, __len);
  43de06:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  43de0a:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  43de0e:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
  43de12:	48 89 ce             	mov    %rcx,%rsi
  43de15:	48 89 c7             	mov    %rax,%rdi
  43de18:	e8 c9 5e ff ff       	callq  433ce6 <std::_Vector_base<x666::LexError, std::allocator<x666::LexError> >::_M_deallocate(x666::LexError*, unsigned long)>
	  __throw_exception_again;
  43de1d:	e8 5e 4a ff ff       	callq  432880 <__cxa_rethrow@plt>
  43de22:	48 89 c3             	mov    %rax,%rbx
      __catch(...)
  43de25:	e8 96 4a ff ff       	callq  4328c0 <__cxa_end_catch@plt>
  43de2a:	48 89 d8             	mov    %rbx,%rax
  43de2d:	48 89 c7             	mov    %rax,%rdi
  43de30:	e8 db 4a ff ff       	callq  432910 <_Unwind_Resume@plt>
    }
  43de35:	48 83 c4 50          	add    $0x50,%rsp
  43de39:	5b                   	pop    %rbx
  43de3a:	41 5c                	pop    %r12
  43de3c:	5d                   	pop    %rbp
  43de3d:	c3                   	retq   

000000000043de3e <void std::allocator_traits<std::allocator<x666::LexError> >::construct<x666::LexError, x666::LexErrorCode, x666::LineInfo&>(std::allocator<x666::LexError>&, x666::LexError*, x666::LexErrorCode&&, x666::LineInfo&)>:
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
  43de3e:	55                   	push   %rbp
  43de3f:	48 89 e5             	mov    %rsp,%rbp
  43de42:	53                   	push   %rbx
  43de43:	48 83 ec 28          	sub    $0x28,%rsp
  43de47:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  43de4b:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  43de4f:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  43de53:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
  43de57:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  43de5b:	48 89 c7             	mov    %rax,%rdi
  43de5e:	e8 ae e6 ff ff       	callq  43c511 <x666::LineInfo& std::forward<x666::LineInfo&>(std::remove_reference<x666::LineInfo&>::type&)>
  43de63:	48 89 c3             	mov    %rax,%rbx
  43de66:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  43de6a:	48 89 c7             	mov    %rax,%rdi
  43de6d:	e8 21 e5 ff ff       	callq  43c393 <x666::LexErrorCode&& std::forward<x666::LexErrorCode>(std::remove_reference<x666::LexErrorCode>::type&)>
  43de72:	48 89 c2             	mov    %rax,%rdx
  43de75:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
  43de79:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  43de7d:	48 89 d9             	mov    %rbx,%rcx
  43de80:	48 89 c7             	mov    %rax,%rdi
  43de83:	e8 10 1a 00 00       	callq  43f898 <void __gnu_cxx::new_allocator<x666::LexError>::construct<x666::LexError, x666::LexErrorCode, x666::LineInfo&>(x666::LexError*, x666::LexErrorCode&&, x666::LineInfo&)>
  43de88:	90                   	nop
  43de89:	48 83 c4 28          	add    $0x28,%rsp
  43de8d:	5b                   	pop    %rbx
  43de8e:	5d                   	pop    %rbp
  43de8f:	c3                   	retq   

000000000043de90 <void std::vector<x666::LexError, std::allocator<x666::LexError> >::_M_realloc_insert<x666::LexErrorCode, x666::LineInfo&>(__gnu_cxx::__normal_iterator<x666::LexError*, std::vector<x666::LexError, std::allocator<x666::LexError> > >, x666::LexErrorCode&&, x666::LineInfo&)>:
      vector<_Tp, _Alloc>::
  43de90:	55                   	push   %rbp
  43de91:	48 89 e5             	mov    %rsp,%rbp
  43de94:	41 54                	push   %r12
  43de96:	53                   	push   %rbx
  43de97:	48 83 ec 50          	sub    $0x50,%rsp
  43de9b:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
  43de9f:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
  43dea3:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
  43dea7:	48 89 4d a0          	mov    %rcx,-0x60(%rbp)
      const size_type __len =
  43deab:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  43deaf:	ba 64 47 44 00       	mov    $0x444764,%edx
  43deb4:	be 01 00 00 00       	mov    $0x1,%esi
  43deb9:	48 89 c7             	mov    %rax,%rdi
  43debc:	e8 13 17 00 00       	callq  43f5d4 <std::vector<x666::LexError, std::allocator<x666::LexError> >::_M_check_len(unsigned long, char const*) const>
  43dec1:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
      const size_type __elems_before = __position - begin();
  43dec5:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  43dec9:	48 89 c7             	mov    %rax,%rdi
  43decc:	e8 7f 52 ff ff       	callq  433150 <std::vector<x666::LexError, std::allocator<x666::LexError> >::begin()>
  43ded1:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  43ded5:	48 8d 55 c8          	lea    -0x38(%rbp),%rdx
  43ded9:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
  43dedd:	48 89 d6             	mov    %rdx,%rsi
  43dee0:	48 89 c7             	mov    %rax,%rdi
  43dee3:	e8 b5 17 00 00       	callq  43f69d <__gnu_cxx::__normal_iterator<x666::LexError*, std::vector<x666::LexError, std::allocator<x666::LexError> > >::difference_type __gnu_cxx::operator-<x666::LexError*, std::vector<x666::LexError, std::allocator<x666::LexError> > >(__gnu_cxx::__normal_iterator<x666::LexError*, std::vector<x666::LexError, std::allocator<x666::LexError> > > const&, __gnu_cxx::__normal_iterator<x666::LexError*, std::vector<x666::LexError, std::allocator<x666::LexError> > > const&)>
  43dee8:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
      pointer __new_start(this->_M_allocate(__len));
  43deec:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  43def0:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  43def4:	48 89 d6             	mov    %rdx,%rsi
  43def7:	48 89 c7             	mov    %rax,%rdi
  43defa:	e8 f3 17 00 00       	callq  43f6f2 <std::_Vector_base<x666::LexError, std::allocator<x666::LexError> >::_M_allocate(unsigned long)>
  43deff:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
      pointer __new_finish(__new_start);
  43df03:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  43df07:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	  _Alloc_traits::construct(this->_M_impl,
  43df0b:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  43df0f:	48 89 c7             	mov    %rax,%rdi
  43df12:	e8 fa e5 ff ff       	callq  43c511 <x666::LineInfo& std::forward<x666::LineInfo&>(std::remove_reference<x666::LineInfo&>::type&)>
  43df17:	48 89 c3             	mov    %rax,%rbx
  43df1a:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  43df1e:	48 89 c7             	mov    %rax,%rdi
  43df21:	e8 6d e4 ff ff       	callq  43c393 <x666::LexErrorCode&& std::forward<x666::LexErrorCode>(std::remove_reference<x666::LexErrorCode>::type&)>
  43df26:	48 89 c7             	mov    %rax,%rdi
				   __new_start + __elems_before,
  43df29:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  43df2d:	48 89 d0             	mov    %rdx,%rax
  43df30:	48 c1 e0 02          	shl    $0x2,%rax
  43df34:	48 01 d0             	add    %rdx,%rax
  43df37:	48 c1 e0 03          	shl    $0x3,%rax
  43df3b:	48 89 c2             	mov    %rax,%rdx
	  _Alloc_traits::construct(this->_M_impl,
  43df3e:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  43df42:	48 8d 34 02          	lea    (%rdx,%rax,1),%rsi
  43df46:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  43df4a:	48 89 d9             	mov    %rbx,%rcx
  43df4d:	48 89 fa             	mov    %rdi,%rdx
  43df50:	48 89 c7             	mov    %rax,%rdi
  43df53:	e8 e6 fe ff ff       	callq  43de3e <void std::allocator_traits<std::allocator<x666::LexError> >::construct<x666::LexError, x666::LexErrorCode, x666::LineInfo&>(std::allocator<x666::LexError>&, x666::LexError*, x666::LexErrorCode&&, x666::LineInfo&)>
	  __new_finish = pointer();
  43df58:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  43df5f:	00 
	     __new_start, _M_get_Tp_allocator());
  43df60:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  43df64:	48 89 c7             	mov    %rax,%rdi
  43df67:	e8 7c 57 ff ff       	callq  4336e8 <std::_Vector_base<x666::LexError, std::allocator<x666::LexError> >::_M_get_Tp_allocator()>
  43df6c:	48 89 c3             	mov    %rax,%rbx
	    (this->_M_impl._M_start, __position.base(),
  43df6f:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
  43df73:	48 89 c7             	mov    %rax,%rdi
  43df76:	e8 a7 58 ff ff       	callq  433822 <__gnu_cxx::__normal_iterator<x666::LexError*, std::vector<x666::LexError, std::allocator<x666::LexError> > >::base() const>
  43df7b:	48 8b 30             	mov    (%rax),%rsi
  43df7e:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  43df82:	48 8b 00             	mov    (%rax),%rax
	  __new_finish
  43df85:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  43df89:	48 89 d9             	mov    %rbx,%rcx
  43df8c:	48 89 c7             	mov    %rax,%rdi
  43df8f:	e8 b6 17 00 00       	callq  43f74a <x666::LexError* std::__uninitialized_move_if_noexcept_a<x666::LexError*, x666::LexError*, std::allocator<x666::LexError> >(x666::LexError*, x666::LexError*, x666::LexError*, std::allocator<x666::LexError>&)>
  43df94:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	  ++__new_finish;
  43df98:	48 83 45 e8 28       	addq   $0x28,-0x18(%rbp)
	     __new_finish, _M_get_Tp_allocator());
  43df9d:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  43dfa1:	48 89 c7             	mov    %rax,%rdi
  43dfa4:	e8 3f 57 ff ff       	callq  4336e8 <std::_Vector_base<x666::LexError, std::allocator<x666::LexError> >::_M_get_Tp_allocator()>
  43dfa9:	49 89 c4             	mov    %rax,%r12
	    (__position.base(), this->_M_impl._M_finish,
  43dfac:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  43dfb0:	48 8b 58 08          	mov    0x8(%rax),%rbx
  43dfb4:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
  43dfb8:	48 89 c7             	mov    %rax,%rdi
  43dfbb:	e8 62 58 ff ff       	callq  433822 <__gnu_cxx::__normal_iterator<x666::LexError*, std::vector<x666::LexError, std::allocator<x666::LexError> > >::base() const>
  43dfc0:	48 8b 00             	mov    (%rax),%rax
	  __new_finish
  43dfc3:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  43dfc7:	4c 89 e1             	mov    %r12,%rcx
  43dfca:	48 89 de             	mov    %rbx,%rsi
  43dfcd:	48 89 c7             	mov    %rax,%rdi
  43dfd0:	e8 75 17 00 00       	callq  43f74a <x666::LexError* std::__uninitialized_move_if_noexcept_a<x666::LexError*, x666::LexError*, std::allocator<x666::LexError> >(x666::LexError*, x666::LexError*, x666::LexError*, std::allocator<x666::LexError>&)>
  43dfd5:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
		    _M_get_Tp_allocator());
  43dfd9:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  43dfdd:	48 89 c7             	mov    %rax,%rdi
  43dfe0:	e8 03 57 ff ff       	callq  4336e8 <std::_Vector_base<x666::LexError, std::allocator<x666::LexError> >::_M_get_Tp_allocator()>
  43dfe5:	48 89 c2             	mov    %rax,%rdx
      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
  43dfe8:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  43dfec:	48 8b 48 08          	mov    0x8(%rax),%rcx
  43dff0:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  43dff4:	48 8b 00             	mov    (%rax),%rax
  43dff7:	48 89 ce             	mov    %rcx,%rsi
  43dffa:	48 89 c7             	mov    %rax,%rdi
  43dffd:	e8 f4 56 ff ff       	callq  4336f6 <void std::_Destroy<x666::LexError*, x666::LexError>(x666::LexError*, x666::LexError*, std::allocator<x666::LexError>&)>
      _M_deallocate(this->_M_impl._M_start,
  43e002:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
		    this->_M_impl._M_end_of_storage - this->_M_impl._M_start);
  43e006:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  43e00a:	48 8b 52 10          	mov    0x10(%rdx),%rdx
  43e00e:	48 89 d1             	mov    %rdx,%rcx
  43e011:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  43e015:	48 8b 12             	mov    (%rdx),%rdx
  43e018:	48 29 d1             	sub    %rdx,%rcx
  43e01b:	48 89 ca             	mov    %rcx,%rdx
  43e01e:	48 89 d1             	mov    %rdx,%rcx
  43e021:	48 c1 f9 03          	sar    $0x3,%rcx
  43e025:	48 ba cd cc cc cc cc 	movabs $0xcccccccccccccccd,%rdx
  43e02c:	cc cc cc 
  43e02f:	48 0f af d1          	imul   %rcx,%rdx
      _M_deallocate(this->_M_impl._M_start,
  43e033:	48 89 d6             	mov    %rdx,%rsi
  43e036:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  43e03a:	48 8b 0a             	mov    (%rdx),%rcx
  43e03d:	48 89 f2             	mov    %rsi,%rdx
  43e040:	48 89 ce             	mov    %rcx,%rsi
  43e043:	48 89 c7             	mov    %rax,%rdi
  43e046:	e8 9b 5c ff ff       	callq  433ce6 <std::_Vector_base<x666::LexError, std::allocator<x666::LexError> >::_M_deallocate(x666::LexError*, unsigned long)>
      this->_M_impl._M_start = __new_start;
  43e04b:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  43e04f:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  43e053:	48 89 10             	mov    %rdx,(%rax)
      this->_M_impl._M_finish = __new_finish;
  43e056:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  43e05a:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  43e05e:	48 89 50 08          	mov    %rdx,0x8(%rax)
      this->_M_impl._M_end_of_storage = __new_start + __len;
  43e062:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  43e066:	48 89 d0             	mov    %rdx,%rax
  43e069:	48 c1 e0 02          	shl    $0x2,%rax
  43e06d:	48 01 d0             	add    %rdx,%rax
  43e070:	48 c1 e0 03          	shl    $0x3,%rax
  43e074:	48 89 c2             	mov    %rax,%rdx
  43e077:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  43e07b:	48 01 c2             	add    %rax,%rdx
  43e07e:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  43e082:	48 89 50 10          	mov    %rdx,0x10(%rax)
    }
  43e086:	e9 8d 00 00 00       	jmpq   43e118 <void std::vector<x666::LexError, std::allocator<x666::LexError> >::_M_realloc_insert<x666::LexErrorCode, x666::LineInfo&>(__gnu_cxx::__normal_iterator<x666::LexError*, std::vector<x666::LexError, std::allocator<x666::LexError> > >, x666::LexErrorCode&&, x666::LineInfo&)+0x288>
      __catch(...)
  43e08b:	48 89 c7             	mov    %rax,%rdi
  43e08e:	e8 4d 46 ff ff       	callq  4326e0 <__cxa_begin_catch@plt>
	  if (!__new_finish)
  43e093:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  43e098:	75 2d                	jne    43e0c7 <void std::vector<x666::LexError, std::allocator<x666::LexError> >::_M_realloc_insert<x666::LexErrorCode, x666::LineInfo&>(__gnu_cxx::__normal_iterator<x666::LexError*, std::vector<x666::LexError, std::allocator<x666::LexError> > >, x666::LexErrorCode&&, x666::LineInfo&)+0x237>
				   __new_start + __elems_before);
  43e09a:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  43e09e:	48 89 d0             	mov    %rdx,%rax
  43e0a1:	48 c1 e0 02          	shl    $0x2,%rax
  43e0a5:	48 01 d0             	add    %rdx,%rax
  43e0a8:	48 c1 e0 03          	shl    $0x3,%rax
  43e0ac:	48 89 c2             	mov    %rax,%rdx
	    _Alloc_traits::destroy(this->_M_impl,
  43e0af:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  43e0b3:	48 01 c2             	add    %rax,%rdx
  43e0b6:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  43e0ba:	48 89 d6             	mov    %rdx,%rsi
  43e0bd:	48 89 c7             	mov    %rax,%rdi
  43e0c0:	e8 d9 16 00 00       	callq  43f79e <void std::allocator_traits<std::allocator<x666::LexError> >::destroy<x666::LexError>(std::allocator<x666::LexError>&, x666::LexError*)>
  43e0c5:	eb 22                	jmp    43e0e9 <void std::vector<x666::LexError, std::allocator<x666::LexError> >::_M_realloc_insert<x666::LexErrorCode, x666::LineInfo&>(__gnu_cxx::__normal_iterator<x666::LexError*, std::vector<x666::LexError, std::allocator<x666::LexError> > >, x666::LexErrorCode&&, x666::LineInfo&)+0x259>
	    std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator());
  43e0c7:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  43e0cb:	48 89 c7             	mov    %rax,%rdi
  43e0ce:	e8 15 56 ff ff       	callq  4336e8 <std::_Vector_base<x666::LexError, std::allocator<x666::LexError> >::_M_get_Tp_allocator()>
  43e0d3:	48 89 c2             	mov    %rax,%rdx
  43e0d6:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  43e0da:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  43e0de:	48 89 ce             	mov    %rcx,%rsi
  43e0e1:	48 89 c7             	mov    %rax,%rdi
  43e0e4:	e8 0d 56 ff ff       	callq  4336f6 <void std::_Destroy<x666::LexError*, x666::LexError>(x666::LexError*, x666::LexError*, std::allocator<x666::LexError>&)>
	  _M_deallocate(__new_start, __len);
  43e0e9:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  43e0ed:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  43e0f1:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
  43e0f5:	48 89 ce             	mov    %rcx,%rsi
  43e0f8:	48 89 c7             	mov    %rax,%rdi
  43e0fb:	e8 e6 5b ff ff       	callq  433ce6 <std::_Vector_base<x666::LexError, std::allocator<x666::LexError> >::_M_deallocate(x666::LexError*, unsigned long)>
	  __throw_exception_again;
  43e100:	e8 7b 47 ff ff       	callq  432880 <__cxa_rethrow@plt>
  43e105:	48 89 c3             	mov    %rax,%rbx
      __catch(...)
  43e108:	e8 b3 47 ff ff       	callq  4328c0 <__cxa_end_catch@plt>
  43e10d:	48 89 d8             	mov    %rbx,%rax
  43e110:	48 89 c7             	mov    %rax,%rdi
  43e113:	e8 f8 47 ff ff       	callq  432910 <_Unwind_Resume@plt>
    }
  43e118:	48 83 c4 50          	add    $0x50,%rsp
  43e11c:	5b                   	pop    %rbx
  43e11d:	41 5c                	pop    %r12
  43e11f:	5d                   	pop    %rbp
  43e120:	c3                   	retq   
  43e121:	90                   	nop

000000000043e122 <std::deque<x666::LineInfo, std::allocator<x666::LineInfo> >::back()>:
      back() _GLIBCXX_NOEXCEPT
  43e122:	55                   	push   %rbp
  43e123:	48 89 e5             	mov    %rsp,%rbp
  43e126:	48 83 ec 30          	sub    $0x30,%rsp
  43e12a:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
	iterator __tmp = end();
  43e12e:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  43e132:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  43e136:	48 89 d6             	mov    %rdx,%rsi
  43e139:	48 89 c7             	mov    %rax,%rdi
  43e13c:	e8 cf 53 ff ff       	callq  433510 <std::deque<x666::LineInfo, std::allocator<x666::LineInfo> >::end()>
	--__tmp;
  43e141:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  43e145:	48 89 c7             	mov    %rax,%rdi
  43e148:	e8 ab 17 00 00       	callq  43f8f8 <std::_Deque_iterator<x666::LineInfo, x666::LineInfo&, x666::LineInfo*>::operator--()>
	return *__tmp;
  43e14d:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  43e151:	48 89 c7             	mov    %rax,%rdi
  43e154:	e8 01 18 00 00       	callq  43f95a <std::_Deque_iterator<x666::LineInfo, x666::LineInfo&, x666::LineInfo*>::operator*() const>
      }
  43e159:	c9                   	leaveq 
  43e15a:	c3                   	retq   
  43e15b:	90                   	nop

000000000043e15c <std::deque<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > >::size() const>:
      size() const _GLIBCXX_NOEXCEPT
  43e15c:	55                   	push   %rbp
  43e15d:	48 89 e5             	mov    %rsp,%rbp
  43e160:	48 83 ec 10          	sub    $0x10,%rsp
  43e164:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return this->_M_impl._M_finish - this->_M_impl._M_start; }
  43e168:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43e16c:	48 8d 50 10          	lea    0x10(%rax),%rdx
  43e170:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43e174:	48 83 c0 30          	add    $0x30,%rax
  43e178:	48 89 d6             	mov    %rdx,%rsi
  43e17b:	48 89 c7             	mov    %rax,%rdi
  43e17e:	e8 e8 17 00 00       	callq  43f96b <std::_Deque_iterator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*>::difference_type std::operator-<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*>(std::_Deque_iterator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*> const&, std::_Deque_iterator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*> const&)>
  43e183:	c9                   	leaveq 
  43e184:	c3                   	retq   
  43e185:	90                   	nop

000000000043e186 <std::deque<x666::Parser::BracketEntry, std::allocator<x666::Parser::BracketEntry> >::push_back(x666::Parser::BracketEntry&&)>:
      push_back(value_type&& __x)
  43e186:	55                   	push   %rbp
  43e187:	48 89 e5             	mov    %rsp,%rbp
  43e18a:	48 83 ec 10          	sub    $0x10,%rsp
  43e18e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  43e192:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      { emplace_back(std::move(__x)); }
  43e196:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  43e19a:	48 89 c7             	mov    %rax,%rdi
  43e19d:	e8 7e e4 ff ff       	callq  43c620 <std::remove_reference<x666::Parser::BracketEntry&>::type&& std::move<x666::Parser::BracketEntry&>(x666::Parser::BracketEntry&)>
  43e1a2:	48 89 c2             	mov    %rax,%rdx
  43e1a5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43e1a9:	48 89 d6             	mov    %rdx,%rsi
  43e1ac:	48 89 c7             	mov    %rax,%rdi
  43e1af:	e8 42 18 00 00       	callq  43f9f6 <x666::Parser::BracketEntry& std::deque<x666::Parser::BracketEntry, std::allocator<x666::Parser::BracketEntry> >::emplace_back<x666::Parser::BracketEntry>(x666::Parser::BracketEntry&&)>
  43e1b4:	90                   	nop
  43e1b5:	c9                   	leaveq 
  43e1b6:	c3                   	retq   
  43e1b7:	90                   	nop

000000000043e1b8 <std::deque<x666::Parser::BracketEntry, std::allocator<x666::Parser::BracketEntry> >::empty() const>:
      empty() const _GLIBCXX_NOEXCEPT
  43e1b8:	55                   	push   %rbp
  43e1b9:	48 89 e5             	mov    %rsp,%rbp
  43e1bc:	48 83 ec 10          	sub    $0x10,%rsp
  43e1c0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return this->_M_impl._M_finish == this->_M_impl._M_start; }
  43e1c4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43e1c8:	48 8d 50 10          	lea    0x10(%rax),%rdx
  43e1cc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43e1d0:	48 83 c0 30          	add    $0x30,%rax
  43e1d4:	48 89 d6             	mov    %rdx,%rsi
  43e1d7:	48 89 c7             	mov    %rax,%rdi
  43e1da:	e8 a8 18 00 00       	callq  43fa87 <bool std::operator==<x666::Parser::BracketEntry, x666::Parser::BracketEntry&, x666::Parser::BracketEntry*>(std::_Deque_iterator<x666::Parser::BracketEntry, x666::Parser::BracketEntry&, x666::Parser::BracketEntry*> const&, std::_Deque_iterator<x666::Parser::BracketEntry, x666::Parser::BracketEntry&, x666::Parser::BracketEntry*> const&)>
  43e1df:	c9                   	leaveq 
  43e1e0:	c3                   	retq   
  43e1e1:	90                   	nop

000000000043e1e2 <std::deque<x666::Parser::BracketEntry, std::allocator<x666::Parser::BracketEntry> >::back()>:
      back() _GLIBCXX_NOEXCEPT
  43e1e2:	55                   	push   %rbp
  43e1e3:	48 89 e5             	mov    %rsp,%rbp
  43e1e6:	48 83 ec 30          	sub    $0x30,%rsp
  43e1ea:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
	iterator __tmp = end();
  43e1ee:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  43e1f2:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  43e1f6:	48 89 d6             	mov    %rdx,%rsi
  43e1f9:	48 89 c7             	mov    %rax,%rdi
  43e1fc:	e8 15 54 ff ff       	callq  433616 <std::deque<x666::Parser::BracketEntry, std::allocator<x666::Parser::BracketEntry> >::end()>
	--__tmp;
  43e201:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  43e205:	48 89 c7             	mov    %rax,%rdi
  43e208:	e8 9d 18 00 00       	callq  43faaa <std::_Deque_iterator<x666::Parser::BracketEntry, x666::Parser::BracketEntry&, x666::Parser::BracketEntry*>::operator--()>
	return *__tmp;
  43e20d:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  43e211:	48 89 c7             	mov    %rax,%rdi
  43e214:	e8 f3 18 00 00       	callq  43fb0c <std::_Deque_iterator<x666::Parser::BracketEntry, x666::Parser::BracketEntry&, x666::Parser::BracketEntry*>::operator*() const>
      }
  43e219:	c9                   	leaveq 
  43e21a:	c3                   	retq   
  43e21b:	90                   	nop

000000000043e21c <std::deque<x666::Parser::BracketEntry, std::allocator<x666::Parser::BracketEntry> >::pop_back()>:
      pop_back() _GLIBCXX_NOEXCEPT
  43e21c:	55                   	push   %rbp
  43e21d:	48 89 e5             	mov    %rsp,%rbp
  43e220:	48 83 ec 10          	sub    $0x10,%rsp
  43e224:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	if (this->_M_impl._M_finish._M_cur
  43e228:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43e22c:	48 8b 50 30          	mov    0x30(%rax),%rdx
	    != this->_M_impl._M_finish._M_first)
  43e230:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43e234:	48 8b 40 38          	mov    0x38(%rax),%rax
	if (this->_M_impl._M_finish._M_cur
  43e238:	48 39 c2             	cmp    %rax,%rdx
  43e23b:	74 2d                	je     43e26a <std::deque<x666::Parser::BracketEntry, std::allocator<x666::Parser::BracketEntry> >::pop_back()+0x4e>
	    --this->_M_impl._M_finish._M_cur;
  43e23d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43e241:	48 8b 40 30          	mov    0x30(%rax),%rax
  43e245:	48 8d 50 f0          	lea    -0x10(%rax),%rdx
  43e249:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43e24d:	48 89 50 30          	mov    %rdx,0x30(%rax)
	    _Alloc_traits::destroy(this->_M_impl,
  43e251:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43e255:	48 8b 50 30          	mov    0x30(%rax),%rdx
  43e259:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43e25d:	48 89 d6             	mov    %rdx,%rsi
  43e260:	48 89 c7             	mov    %rax,%rdi
  43e263:	e8 b5 18 00 00       	callq  43fb1d <void std::allocator_traits<std::allocator<x666::Parser::BracketEntry> >::destroy<x666::Parser::BracketEntry>(std::allocator<x666::Parser::BracketEntry>&, x666::Parser::BracketEntry*)>
      }
  43e268:	eb 0c                	jmp    43e276 <std::deque<x666::Parser::BracketEntry, std::allocator<x666::Parser::BracketEntry> >::pop_back()+0x5a>
	  _M_pop_back_aux();
  43e26a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43e26e:	48 89 c7             	mov    %rax,%rdi
  43e271:	e8 ce 18 00 00       	callq  43fb44 <std::deque<x666::Parser::BracketEntry, std::allocator<x666::Parser::BracketEntry> >::_M_pop_back_aux()>
      }
  43e276:	90                   	nop
  43e277:	c9                   	leaveq 
  43e278:	c3                   	retq   
  43e279:	90                   	nop

000000000043e27a <std::unique_ptr<x666::Bracket, std::default_delete<x666::Bracket> >::unique_ptr<std::default_delete<x666::Bracket>, void>(x666::Bracket*)>:
	unique_ptr(pointer __p) noexcept
  43e27a:	55                   	push   %rbp
  43e27b:	48 89 e5             	mov    %rsp,%rbp
  43e27e:	48 83 ec 10          	sub    $0x10,%rsp
  43e282:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  43e286:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	: _M_t(__p)
  43e28a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43e28e:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  43e292:	48 89 d6             	mov    %rdx,%rsi
  43e295:	48 89 c7             	mov    %rax,%rdi
  43e298:	e8 25 19 00 00       	callq  43fbc2 <std::__uniq_ptr_impl<x666::Bracket, std::default_delete<x666::Bracket> >::__uniq_ptr_impl(x666::Bracket*)>
        { }
  43e29d:	90                   	nop
  43e29e:	c9                   	leaveq 
  43e29f:	c3                   	retq   

000000000043e2a0 <std::__uniq_ptr_impl<x666::Bracket, std::default_delete<x666::Bracket> >::_M_ptr()>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
  43e2a0:	55                   	push   %rbp
  43e2a1:	48 89 e5             	mov    %rsp,%rbp
  43e2a4:	48 83 ec 10          	sub    $0x10,%rsp
  43e2a8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  43e2ac:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43e2b0:	48 89 c7             	mov    %rax,%rdi
  43e2b3:	e8 42 19 00 00       	callq  43fbfa <std::tuple_element<0ul, std::tuple<x666::Bracket*, std::default_delete<x666::Bracket> > >::type& std::get<0ul, x666::Bracket*, std::default_delete<x666::Bracket> >(std::tuple<x666::Bracket*, std::default_delete<x666::Bracket> >&)>
  43e2b8:	c9                   	leaveq 
  43e2b9:	c3                   	retq   

000000000043e2ba <std::unique_ptr<x666::Bracket, std::default_delete<x666::Bracket> >::get_deleter()>:
      get_deleter() noexcept
  43e2ba:	55                   	push   %rbp
  43e2bb:	48 89 e5             	mov    %rsp,%rbp
  43e2be:	48 83 ec 10          	sub    $0x10,%rsp
  43e2c2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_t._M_deleter(); }
  43e2c6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43e2ca:	48 89 c7             	mov    %rax,%rdi
  43e2cd:	e8 42 19 00 00       	callq  43fc14 <std::__uniq_ptr_impl<x666::Bracket, std::default_delete<x666::Bracket> >::_M_deleter()>
  43e2d2:	c9                   	leaveq 
  43e2d3:	c3                   	retq   

000000000043e2d4 <x666::Bracket::~Bracket()>:
  class Bracket : public Expression {
  43e2d4:	55                   	push   %rbp
  43e2d5:	48 89 e5             	mov    %rsp,%rbp
  43e2d8:	48 83 ec 10          	sub    $0x10,%rsp
  43e2dc:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  43e2e0:	ba c8 49 44 00       	mov    $0x4449c8,%edx
  43e2e5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43e2e9:	48 89 10             	mov    %rdx,(%rax)
  43e2ec:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43e2f0:	48 83 c0 08          	add    $0x8,%rax
  43e2f4:	48 89 c7             	mov    %rax,%rdi
  43e2f7:	e8 10 4b ff ff       	callq  432e0c <std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >::~unique_ptr()>
  43e2fc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43e300:	48 89 c7             	mov    %rax,%rdi
  43e303:	e8 cc a5 ff ff       	callq  4388d4 <x666::Expression::~Expression()>
  43e308:	90                   	nop
  43e309:	c9                   	leaveq 
  43e30a:	c3                   	retq   
  43e30b:	90                   	nop

000000000043e30c <x666::Bracket::~Bracket()>:
  43e30c:	55                   	push   %rbp
  43e30d:	48 89 e5             	mov    %rsp,%rbp
  43e310:	48 83 ec 10          	sub    $0x10,%rsp
  43e314:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  43e318:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43e31c:	48 89 c7             	mov    %rax,%rdi
  43e31f:	e8 b0 ff ff ff       	callq  43e2d4 <x666::Bracket::~Bracket()>
  43e324:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43e328:	be 18 00 00 00       	mov    $0x18,%esi
  43e32d:	48 89 c7             	mov    %rax,%rdi
  43e330:	e8 cb 44 ff ff       	callq  432800 <operator delete(void*, unsigned long)@plt>
  43e335:	c9                   	leaveq 
  43e336:	c3                   	retq   
  43e337:	90                   	nop

000000000043e338 <std::default_delete<x666::Bracket>::operator()(x666::Bracket*) const>:
      operator()(_Tp* __ptr) const
  43e338:	55                   	push   %rbp
  43e339:	48 89 e5             	mov    %rsp,%rbp
  43e33c:	48 83 ec 10          	sub    $0x10,%rsp
  43e340:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  43e344:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	delete __ptr;
  43e348:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
  43e34d:	74 17                	je     43e366 <std::default_delete<x666::Bracket>::operator()(x666::Bracket*) const+0x2e>
  43e34f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  43e353:	48 8b 00             	mov    (%rax),%rax
  43e356:	48 83 c0 08          	add    $0x8,%rax
  43e35a:	48 8b 00             	mov    (%rax),%rax
  43e35d:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  43e361:	48 89 d7             	mov    %rdx,%rdi
  43e364:	ff d0                	callq  *%rax
      }
  43e366:	90                   	nop
  43e367:	c9                   	leaveq 
  43e368:	c3                   	retq   
  43e369:	90                   	nop

000000000043e36a <std::unique_ptr<x666::Bracket, std::default_delete<x666::Bracket> >::release()>:
      release() noexcept
  43e36a:	55                   	push   %rbp
  43e36b:	48 89 e5             	mov    %rsp,%rbp
  43e36e:	48 83 ec 20          	sub    $0x20,%rsp
  43e372:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
	pointer __p = get();
  43e376:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  43e37a:	48 89 c7             	mov    %rax,%rdi
  43e37d:	e8 ac 18 00 00       	callq  43fc2e <std::unique_ptr<x666::Bracket, std::default_delete<x666::Bracket> >::get() const>
  43e382:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	_M_t._M_ptr() = pointer();
  43e386:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  43e38a:	48 89 c7             	mov    %rax,%rdi
  43e38d:	e8 0e ff ff ff       	callq  43e2a0 <std::__uniq_ptr_impl<x666::Bracket, std::default_delete<x666::Bracket> >::_M_ptr()>
  43e392:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
	return __p;
  43e399:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
      }
  43e39d:	c9                   	leaveq 
  43e39e:	c3                   	retq   

000000000043e39f <std::default_delete<x666::Bracket>&& std::forward<std::default_delete<x666::Bracket> >(std::remove_reference<std::default_delete<x666::Bracket> >::type&)>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
  43e39f:	55                   	push   %rbp
  43e3a0:	48 89 e5             	mov    %rsp,%rbp
  43e3a3:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<_Tp&&>(__t); }
  43e3a7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43e3ab:	5d                   	pop    %rbp
  43e3ac:	c3                   	retq   
  43e3ad:	90                   	nop

000000000043e3ae <std::__uniq_ptr_impl<x666::Expression, std::default_delete<x666::Expression> >::__uniq_ptr_impl<std::default_delete<x666::Bracket> >(x666::Expression*, std::default_delete<x666::Bracket>&&)>:
      __uniq_ptr_impl(pointer __p, _Del&& __d)
  43e3ae:	55                   	push   %rbp
  43e3af:	48 89 e5             	mov    %rsp,%rbp
  43e3b2:	53                   	push   %rbx
  43e3b3:	48 83 ec 28          	sub    $0x28,%rsp
  43e3b7:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  43e3bb:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  43e3bf:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
	: _M_t(__p, std::forward<_Del>(__d)) { }
  43e3c3:	48 8b 5d e8          	mov    -0x18(%rbp),%rbx
  43e3c7:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  43e3cb:	48 89 c7             	mov    %rax,%rdi
  43e3ce:	e8 cc ff ff ff       	callq  43e39f <std::default_delete<x666::Bracket>&& std::forward<std::default_delete<x666::Bracket> >(std::remove_reference<std::default_delete<x666::Bracket> >::type&)>
  43e3d3:	48 89 c2             	mov    %rax,%rdx
  43e3d6:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  43e3da:	48 89 c6             	mov    %rax,%rsi
  43e3dd:	48 89 df             	mov    %rbx,%rdi
  43e3e0:	e8 63 18 00 00       	callq  43fc48 <std::tuple<x666::Expression*, std::default_delete<x666::Expression> >::tuple<x666::Expression*&, std::default_delete<x666::Bracket>, true>(x666::Expression*&, std::default_delete<x666::Bracket>&&)>
  43e3e5:	90                   	nop
  43e3e6:	48 83 c4 28          	add    $0x28,%rsp
  43e3ea:	5b                   	pop    %rbx
  43e3eb:	5d                   	pop    %rbp
  43e3ec:	c3                   	retq   
  43e3ed:	90                   	nop

000000000043e3ee <std::tuple<x666::Expression*, std::default_delete<x666::Expression> >::tuple<x666::Expression*, std::default_delete<x666::Expression>, true>()>:
      constexpr tuple()
  43e3ee:	55                   	push   %rbp
  43e3ef:	48 89 e5             	mov    %rsp,%rbp
  43e3f2:	48 83 ec 10          	sub    $0x10,%rsp
  43e3f6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      : _Inherited() { }
  43e3fa:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43e3fe:	48 89 c7             	mov    %rax,%rdi
  43e401:	e8 90 18 00 00       	callq  43fc96 <std::_Tuple_impl<0ul, x666::Expression*, std::default_delete<x666::Expression> >::_Tuple_impl()>
  43e406:	90                   	nop
  43e407:	c9                   	leaveq 
  43e408:	c3                   	retq   
  43e409:	90                   	nop

000000000043e40a <std::__uniq_ptr_impl<x666::Expression, std::default_delete<x666::Expression> >::__uniq_ptr_impl()>:
      __uniq_ptr_impl() = default;
  43e40a:	55                   	push   %rbp
  43e40b:	48 89 e5             	mov    %rsp,%rbp
  43e40e:	48 83 ec 10          	sub    $0x10,%rsp
  43e412:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  43e416:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43e41a:	48 89 c7             	mov    %rax,%rdi
  43e41d:	e8 cc ff ff ff       	callq  43e3ee <std::tuple<x666::Expression*, std::default_delete<x666::Expression> >::tuple<x666::Expression*, std::default_delete<x666::Expression>, true>()>
  43e422:	90                   	nop
  43e423:	c9                   	leaveq 
  43e424:	c3                   	retq   
  43e425:	90                   	nop

000000000043e426 <std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >::unique_ptr<std::default_delete<x666::Expression>, void>()>:
	constexpr unique_ptr() noexcept
  43e426:	55                   	push   %rbp
  43e427:	48 89 e5             	mov    %rsp,%rbp
  43e42a:	48 83 ec 10          	sub    $0x10,%rsp
  43e42e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	: _M_t()
  43e432:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43e436:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  43e43d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43e441:	48 89 c7             	mov    %rax,%rdi
  43e444:	e8 c1 ff ff ff       	callq  43e40a <std::__uniq_ptr_impl<x666::Expression, std::default_delete<x666::Expression> >::__uniq_ptr_impl()>
        { }
  43e449:	90                   	nop
  43e44a:	c9                   	leaveq 
  43e44b:	c3                   	retq   

000000000043e44c <std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >::unique_ptr<std::default_delete<x666::Expression>, void>(decltype(nullptr))>:
	constexpr unique_ptr(nullptr_t) noexcept : unique_ptr() { }
  43e44c:	55                   	push   %rbp
  43e44d:	48 89 e5             	mov    %rsp,%rbp
  43e450:	48 83 ec 10          	sub    $0x10,%rsp
  43e454:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  43e458:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  43e45c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43e460:	48 89 c7             	mov    %rax,%rdi
  43e463:	e8 be ff ff ff       	callq  43e426 <std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >::unique_ptr<std::default_delete<x666::Expression>, void>()>
  43e468:	90                   	nop
  43e469:	c9                   	leaveq 
  43e46a:	c3                   	retq   
  43e46b:	90                   	nop

000000000043e46c <std::_Vector_base<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > >::_Vector_base()>:
      _Vector_base()
  43e46c:	55                   	push   %rbp
  43e46d:	48 89 e5             	mov    %rsp,%rbp
  43e470:	48 83 ec 10          	sub    $0x10,%rsp
  43e474:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      : _M_impl() { }
  43e478:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43e47c:	48 89 c7             	mov    %rax,%rdi
  43e47f:	e8 3a 18 00 00       	callq  43fcbe <std::_Vector_base<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > >::_Vector_impl::_Vector_impl()>
  43e484:	90                   	nop
  43e485:	c9                   	leaveq 
  43e486:	c3                   	retq   
  43e487:	90                   	nop

000000000043e488 <std::deque<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > >::deque()>:
      deque() : _Base() { }
  43e488:	55                   	push   %rbp
  43e489:	48 89 e5             	mov    %rsp,%rbp
  43e48c:	48 83 ec 10          	sub    $0x10,%rsp
  43e490:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  43e494:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43e498:	48 89 c7             	mov    %rax,%rdi
  43e49b:	e8 5c 18 00 00       	callq  43fcfc <std::_Deque_base<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > >::_Deque_base()>
  43e4a0:	90                   	nop
  43e4a1:	c9                   	leaveq 
  43e4a2:	c3                   	retq   
  43e4a3:	90                   	nop

000000000043e4a4 <std::deque<x666::LineInfo, std::allocator<x666::LineInfo> >::deque()>:
  43e4a4:	55                   	push   %rbp
  43e4a5:	48 89 e5             	mov    %rsp,%rbp
  43e4a8:	48 83 ec 10          	sub    $0x10,%rsp
  43e4ac:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  43e4b0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43e4b4:	48 89 c7             	mov    %rax,%rdi
  43e4b7:	e8 8e 18 00 00       	callq  43fd4a <std::_Deque_base<x666::LineInfo, std::allocator<x666::LineInfo> >::_Deque_base()>
  43e4bc:	90                   	nop
  43e4bd:	c9                   	leaveq 
  43e4be:	c3                   	retq   
  43e4bf:	90                   	nop

000000000043e4c0 <std::deque<x666::Parser::BracketEntry, std::allocator<x666::Parser::BracketEntry> >::deque()>:
  43e4c0:	55                   	push   %rbp
  43e4c1:	48 89 e5             	mov    %rsp,%rbp
  43e4c4:	48 83 ec 10          	sub    $0x10,%rsp
  43e4c8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  43e4cc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43e4d0:	48 89 c7             	mov    %rax,%rdi
  43e4d3:	e8 c0 18 00 00       	callq  43fd98 <std::_Deque_base<x666::Parser::BracketEntry, std::allocator<x666::Parser::BracketEntry> >::_Deque_base()>
  43e4d8:	90                   	nop
  43e4d9:	c9                   	leaveq 
  43e4da:	c3                   	retq   
  43e4db:	90                   	nop

000000000043e4dc <std::_Vector_base<x666::LexError, std::allocator<x666::LexError> >::_Vector_base()>:
      _Vector_base()
  43e4dc:	55                   	push   %rbp
  43e4dd:	48 89 e5             	mov    %rsp,%rbp
  43e4e0:	48 83 ec 10          	sub    $0x10,%rsp
  43e4e4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      : _M_impl() { }
  43e4e8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43e4ec:	48 89 c7             	mov    %rax,%rdi
  43e4ef:	e8 f2 18 00 00       	callq  43fde6 <std::_Vector_base<x666::LexError, std::allocator<x666::LexError> >::_Vector_impl::_Vector_impl()>
  43e4f4:	90                   	nop
  43e4f5:	c9                   	leaveq 
  43e4f6:	c3                   	retq   
  43e4f7:	90                   	nop

000000000043e4f8 <std::__detail::__variant::_Variant_storage<false, x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>::_M_reset()>:
      void _M_reset()
  43e4f8:	55                   	push   %rbp
  43e4f9:	48 89 e5             	mov    %rsp,%rbp
  43e4fc:	48 83 ec 10          	sub    $0x10,%rsp
  43e500:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	_M_reset_impl(std::index_sequence_for<_Types...>{});
  43e504:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43e508:	48 83 ec 08          	sub    $0x8,%rsp
  43e50c:	52                   	push   %rdx
  43e50d:	48 89 c7             	mov    %rax,%rdi
  43e510:	e8 0f 19 00 00       	callq  43fe24 <void std::__detail::__variant::_Variant_storage<false, x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>::_M_reset_impl<0ul, 1ul, 2ul, 3ul, 4ul, 5ul, 6ul>(std::integer_sequence<unsigned long, 0ul, 1ul, 2ul, 3ul, 4ul, 5ul, 6ul>)>
  43e515:	48 83 c4 10          	add    $0x10,%rsp
	_M_index = variant_npos;
  43e519:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43e51d:	c6 40 28 ff          	movb   $0xff,0x28(%rax)
      }
  43e521:	90                   	nop
  43e522:	c9                   	leaveq 
  43e523:	c3                   	retq   

000000000043e524 <__gnu_cxx::__aligned_membuf<x666::LexError>::_M_ptr()>:
      const void*
      _M_addr() const noexcept
      { return static_cast<const void*>(&_M_storage); }

      _Tp*
      _M_ptr() noexcept
  43e524:	55                   	push   %rbp
  43e525:	48 89 e5             	mov    %rsp,%rbp
  43e528:	48 83 ec 10          	sub    $0x10,%rsp
  43e52c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return static_cast<_Tp*>(_M_addr()); }
  43e530:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43e534:	48 89 c7             	mov    %rax,%rdi
  43e537:	e8 22 19 00 00       	callq  43fe5e <__gnu_cxx::__aligned_membuf<x666::LexError>::_M_addr()>
  43e53c:	c9                   	leaveq 
  43e53d:	c3                   	retq   

000000000043e53e <__gnu_cxx::__aligned_membuf<x666::Identifier>::_M_ptr()>:
      _M_ptr() noexcept
  43e53e:	55                   	push   %rbp
  43e53f:	48 89 e5             	mov    %rsp,%rbp
  43e542:	48 83 ec 10          	sub    $0x10,%rsp
  43e546:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return static_cast<_Tp*>(_M_addr()); }
  43e54a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43e54e:	48 89 c7             	mov    %rax,%rdi
  43e551:	e8 16 19 00 00       	callq  43fe6c <__gnu_cxx::__aligned_membuf<x666::Identifier>::_M_addr()>
  43e556:	c9                   	leaveq 
  43e557:	c3                   	retq   

000000000043e558 <bool std::__invoke_impl<bool, x666::ParserVisitor, x666::Identifier>(std::__invoke_other, x666::ParserVisitor&&, x666::Identifier&&)>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
  43e558:	55                   	push   %rbp
  43e559:	48 89 e5             	mov    %rsp,%rbp
  43e55c:	53                   	push   %rbx
  43e55d:	48 83 ec 18          	sub    $0x18,%rsp
  43e561:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  43e565:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
  43e569:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  43e56d:	48 89 c7             	mov    %rax,%rdi
  43e570:	e8 5e c8 ff ff       	callq  43add3 <x666::ParserVisitor&& std::forward<x666::ParserVisitor>(std::remove_reference<x666::ParserVisitor>::type&)>
  43e575:	48 89 c3             	mov    %rax,%rbx
  43e578:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  43e57c:	48 89 c7             	mov    %rax,%rdi
  43e57f:	e8 f3 7f ff ff       	callq  436577 <x666::Identifier&& std::forward<x666::Identifier>(std::remove_reference<x666::Identifier>::type&)>
  43e584:	48 89 c6             	mov    %rax,%rsi
  43e587:	48 89 df             	mov    %rbx,%rdi
  43e58a:	e8 67 b5 ff ff       	callq  439af6 <x666::ParserVisitor::operator()(x666::Identifier&&)>
  43e58f:	48 83 c4 18          	add    $0x18,%rsp
  43e593:	5b                   	pop    %rbx
  43e594:	5d                   	pop    %rbp
  43e595:	c3                   	retq   

000000000043e596 <__gnu_cxx::__aligned_membuf<x666::StringLiteral>::_M_ptr()>:
      _M_ptr() noexcept
  43e596:	55                   	push   %rbp
  43e597:	48 89 e5             	mov    %rsp,%rbp
  43e59a:	48 83 ec 10          	sub    $0x10,%rsp
  43e59e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return static_cast<_Tp*>(_M_addr()); }
  43e5a2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43e5a6:	48 89 c7             	mov    %rax,%rdi
  43e5a9:	e8 cc 18 00 00       	callq  43fe7a <__gnu_cxx::__aligned_membuf<x666::StringLiteral>::_M_addr()>
  43e5ae:	c9                   	leaveq 
  43e5af:	c3                   	retq   

000000000043e5b0 <bool std::__invoke_impl<bool, x666::ParserVisitor, x666::StringLiteral>(std::__invoke_other, x666::ParserVisitor&&, x666::StringLiteral&&)>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
  43e5b0:	55                   	push   %rbp
  43e5b1:	48 89 e5             	mov    %rsp,%rbp
  43e5b4:	53                   	push   %rbx
  43e5b5:	48 83 ec 18          	sub    $0x18,%rsp
  43e5b9:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  43e5bd:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
  43e5c1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  43e5c5:	48 89 c7             	mov    %rax,%rdi
  43e5c8:	e8 06 c8 ff ff       	callq  43add3 <x666::ParserVisitor&& std::forward<x666::ParserVisitor>(std::remove_reference<x666::ParserVisitor>::type&)>
  43e5cd:	48 89 c3             	mov    %rax,%rbx
  43e5d0:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  43e5d4:	48 89 c7             	mov    %rax,%rdi
  43e5d7:	e8 45 80 ff ff       	callq  436621 <x666::StringLiteral&& std::forward<x666::StringLiteral>(std::remove_reference<x666::StringLiteral>::type&)>
  43e5dc:	48 89 c6             	mov    %rax,%rsi
  43e5df:	48 89 df             	mov    %rbx,%rdi
  43e5e2:	e8 e3 b5 ff ff       	callq  439bca <x666::ParserVisitor::operator()(x666::StringLiteral&&)>
  43e5e7:	48 83 c4 18          	add    $0x18,%rsp
  43e5eb:	5b                   	pop    %rbx
  43e5ec:	5d                   	pop    %rbp
  43e5ed:	c3                   	retq   

000000000043e5ee <__gnu_cxx::__aligned_membuf<x666::IntLiteral>::_M_ptr()>:
      _M_ptr() noexcept
  43e5ee:	55                   	push   %rbp
  43e5ef:	48 89 e5             	mov    %rsp,%rbp
  43e5f2:	48 83 ec 10          	sub    $0x10,%rsp
  43e5f6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return static_cast<_Tp*>(_M_addr()); }
  43e5fa:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43e5fe:	48 89 c7             	mov    %rax,%rdi
  43e601:	e8 82 18 00 00       	callq  43fe88 <__gnu_cxx::__aligned_membuf<x666::IntLiteral>::_M_addr()>
  43e606:	c9                   	leaveq 
  43e607:	c3                   	retq   

000000000043e608 <bool std::__invoke_impl<bool, x666::ParserVisitor, x666::IntLiteral>(std::__invoke_other, x666::ParserVisitor&&, x666::IntLiteral&&)>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
  43e608:	55                   	push   %rbp
  43e609:	48 89 e5             	mov    %rsp,%rbp
  43e60c:	53                   	push   %rbx
  43e60d:	48 83 ec 18          	sub    $0x18,%rsp
  43e611:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  43e615:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
  43e619:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  43e61d:	48 89 c7             	mov    %rax,%rdi
  43e620:	e8 ae c7 ff ff       	callq  43add3 <x666::ParserVisitor&& std::forward<x666::ParserVisitor>(std::remove_reference<x666::ParserVisitor>::type&)>
  43e625:	48 89 c3             	mov    %rax,%rbx
  43e628:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  43e62c:	48 89 c7             	mov    %rax,%rdi
  43e62f:	e8 99 7e ff ff       	callq  4364cd <x666::IntLiteral&& std::forward<x666::IntLiteral>(std::remove_reference<x666::IntLiteral>::type&)>
  43e634:	48 89 c6             	mov    %rax,%rsi
  43e637:	48 89 df             	mov    %rbx,%rdi
  43e63a:	e8 5f b6 ff ff       	callq  439c9e <x666::ParserVisitor::operator()(x666::IntLiteral&&)>
  43e63f:	48 83 c4 18          	add    $0x18,%rsp
  43e643:	5b                   	pop    %rbx
  43e644:	5d                   	pop    %rbp
  43e645:	c3                   	retq   

000000000043e646 <std::remove_reference<x666::Operator&>::type&& std::move<x666::Operator&>(x666::Operator&)>:
    move(_Tp&& __t) noexcept
  43e646:	55                   	push   %rbp
  43e647:	48 89 e5             	mov    %rsp,%rbp
  43e64a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
  43e64e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43e652:	5d                   	pop    %rbp
  43e653:	c3                   	retq   

000000000043e654 <bool std::__invoke_impl<bool, x666::ParserVisitor, x666::Operator>(std::__invoke_other, x666::ParserVisitor&&, x666::Operator&&)>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
  43e654:	55                   	push   %rbp
  43e655:	48 89 e5             	mov    %rsp,%rbp
  43e658:	53                   	push   %rbx
  43e659:	48 83 ec 18          	sub    $0x18,%rsp
  43e65d:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  43e661:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
  43e665:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  43e669:	48 89 c7             	mov    %rax,%rdi
  43e66c:	e8 62 c7 ff ff       	callq  43add3 <x666::ParserVisitor&& std::forward<x666::ParserVisitor>(std::remove_reference<x666::ParserVisitor>::type&)>
  43e671:	48 89 c3             	mov    %rax,%rbx
  43e674:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  43e678:	48 89 c7             	mov    %rax,%rdi
  43e67b:	e8 f9 7c ff ff       	callq  436379 <x666::Operator&& std::forward<x666::Operator>(std::remove_reference<x666::Operator>::type&)>
  43e680:	48 89 c6             	mov    %rax,%rsi
  43e683:	48 89 df             	mov    %rbx,%rdi
  43e686:	e8 81 bd ff ff       	callq  43a40c <x666::ParserVisitor::operator()(x666::Operator&&)>
  43e68b:	48 83 c4 18          	add    $0x18,%rsp
  43e68f:	5b                   	pop    %rbx
  43e690:	5d                   	pop    %rbp
  43e691:	c3                   	retq   

000000000043e692 <std::remove_reference<x666::Newline&>::type&& std::move<x666::Newline&>(x666::Newline&)>:
    move(_Tp&& __t) noexcept
  43e692:	55                   	push   %rbp
  43e693:	48 89 e5             	mov    %rsp,%rbp
  43e696:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
  43e69a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43e69e:	5d                   	pop    %rbp
  43e69f:	c3                   	retq   

000000000043e6a0 <bool std::__invoke_impl<bool, x666::ParserVisitor, x666::Newline>(std::__invoke_other, x666::ParserVisitor&&, x666::Newline&&)>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
  43e6a0:	55                   	push   %rbp
  43e6a1:	48 89 e5             	mov    %rsp,%rbp
  43e6a4:	53                   	push   %rbx
  43e6a5:	48 83 ec 18          	sub    $0x18,%rsp
  43e6a9:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  43e6ad:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
  43e6b1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  43e6b5:	48 89 c7             	mov    %rax,%rdi
  43e6b8:	e8 16 c7 ff ff       	callq  43add3 <x666::ParserVisitor&& std::forward<x666::ParserVisitor>(std::remove_reference<x666::ParserVisitor>::type&)>
  43e6bd:	48 89 c3             	mov    %rax,%rbx
  43e6c0:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  43e6c4:	48 89 c7             	mov    %rax,%rdi
  43e6c7:	e8 47 7b ff ff       	callq  436213 <x666::Newline&& std::forward<x666::Newline>(std::remove_reference<x666::Newline>::type&)>
  43e6cc:	48 89 c6             	mov    %rax,%rsi
  43e6cf:	48 89 df             	mov    %rbx,%rdi
  43e6d2:	e8 0d b8 ff ff       	callq  439ee4 <x666::ParserVisitor::operator()(x666::Newline&&)>
  43e6d7:	48 83 c4 18          	add    $0x18,%rsp
  43e6db:	5b                   	pop    %rbx
  43e6dc:	5d                   	pop    %rbp
  43e6dd:	c3                   	retq   

000000000043e6de <std::remove_reference<x666::EndOfFile&>::type&& std::move<x666::EndOfFile&>(x666::EndOfFile&)>:
    move(_Tp&& __t) noexcept
  43e6de:	55                   	push   %rbp
  43e6df:	48 89 e5             	mov    %rsp,%rbp
  43e6e2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
  43e6e6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43e6ea:	5d                   	pop    %rbp
  43e6eb:	c3                   	retq   

000000000043e6ec <bool std::__invoke_impl<bool, x666::ParserVisitor, x666::EndOfFile>(std::__invoke_other, x666::ParserVisitor&&, x666::EndOfFile&&)>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
  43e6ec:	55                   	push   %rbp
  43e6ed:	48 89 e5             	mov    %rsp,%rbp
  43e6f0:	53                   	push   %rbx
  43e6f1:	48 83 ec 18          	sub    $0x18,%rsp
  43e6f5:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  43e6f9:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
  43e6fd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  43e701:	48 89 c7             	mov    %rax,%rdi
  43e704:	e8 ca c6 ff ff       	callq  43add3 <x666::ParserVisitor&& std::forward<x666::ParserVisitor>(std::remove_reference<x666::ParserVisitor>::type&)>
  43e709:	48 89 c3             	mov    %rax,%rbx
  43e70c:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  43e710:	48 89 c7             	mov    %rax,%rdi
  43e713:	e8 b7 7b ff ff       	callq  4362cf <x666::EndOfFile&& std::forward<x666::EndOfFile>(std::remove_reference<x666::EndOfFile>::type&)>
  43e718:	48 89 c6             	mov    %rax,%rsi
  43e71b:	48 89 df             	mov    %rbx,%rdi
  43e71e:	e8 e5 b7 ff ff       	callq  439f08 <x666::ParserVisitor::operator()(x666::EndOfFile&&)>
  43e723:	48 83 c4 18          	add    $0x18,%rsp
  43e727:	5b                   	pop    %rbx
  43e728:	5d                   	pop    %rbp
  43e729:	c3                   	retq   

000000000043e72a <std::remove_reference<x666::LexError&>::type&& std::move<x666::LexError&>(x666::LexError&)>:
    move(_Tp&& __t) noexcept
  43e72a:	55                   	push   %rbp
  43e72b:	48 89 e5             	mov    %rsp,%rbp
  43e72e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
  43e732:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43e736:	5d                   	pop    %rbp
  43e737:	c3                   	retq   

000000000043e738 <bool std::__invoke_impl<bool, x666::ParserVisitor, x666::LexError>(std::__invoke_other, x666::ParserVisitor&&, x666::LexError&&)>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
  43e738:	55                   	push   %rbp
  43e739:	48 89 e5             	mov    %rsp,%rbp
  43e73c:	53                   	push   %rbx
  43e73d:	48 83 ec 18          	sub    $0x18,%rsp
  43e741:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  43e745:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
  43e749:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  43e74d:	48 89 c7             	mov    %rax,%rdi
  43e750:	e8 7e c6 ff ff       	callq  43add3 <x666::ParserVisitor&& std::forward<x666::ParserVisitor>(std::remove_reference<x666::ParserVisitor>::type&)>
  43e755:	48 89 c3             	mov    %rax,%rbx
  43e758:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  43e75c:	48 89 c7             	mov    %rax,%rdi
  43e75f:	e8 bf 7c ff ff       	callq  436423 <x666::LexError&& std::forward<x666::LexError>(std::remove_reference<x666::LexError>::type&)>
  43e764:	48 89 c6             	mov    %rax,%rsi
  43e767:	48 89 df             	mov    %rbx,%rdi
  43e76a:	e8 bd b7 ff ff       	callq  439f2c <x666::ParserVisitor::operator()(x666::LexError&&)>
  43e76f:	48 83 c4 18          	add    $0x18,%rsp
  43e773:	5b                   	pop    %rbx
  43e774:	5d                   	pop    %rbp
  43e775:	c3                   	retq   

000000000043e776 <std::deque<x666::Parser::BracketEntry, std::allocator<x666::Parser::BracketEntry> >::size() const>:
      size() const _GLIBCXX_NOEXCEPT
  43e776:	55                   	push   %rbp
  43e777:	48 89 e5             	mov    %rsp,%rbp
  43e77a:	48 83 ec 10          	sub    $0x10,%rsp
  43e77e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return this->_M_impl._M_finish - this->_M_impl._M_start; }
  43e782:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43e786:	48 8d 50 10          	lea    0x10(%rax),%rdx
  43e78a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43e78e:	48 83 c0 30          	add    $0x30,%rax
  43e792:	48 89 d6             	mov    %rdx,%rsi
  43e795:	48 89 c7             	mov    %rax,%rdi
  43e798:	e8 f9 16 00 00       	callq  43fe96 <std::_Deque_iterator<x666::Parser::BracketEntry, x666::Parser::BracketEntry&, x666::Parser::BracketEntry*>::difference_type std::operator-<x666::Parser::BracketEntry, x666::Parser::BracketEntry&, x666::Parser::BracketEntry*>(std::_Deque_iterator<x666::Parser::BracketEntry, x666::Parser::BracketEntry&, x666::Parser::BracketEntry*> const&, std::_Deque_iterator<x666::Parser::BracketEntry, x666::Parser::BracketEntry&, x666::Parser::BracketEntry*> const&)>
  43e79d:	c9                   	leaveq 
  43e79e:	c3                   	retq   
  43e79f:	90                   	nop

000000000043e7a0 <std::deque<x666::LineInfo, std::allocator<x666::LineInfo> >::size() const>:
      size() const _GLIBCXX_NOEXCEPT
  43e7a0:	55                   	push   %rbp
  43e7a1:	48 89 e5             	mov    %rsp,%rbp
  43e7a4:	48 83 ec 10          	sub    $0x10,%rsp
  43e7a8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return this->_M_impl._M_finish - this->_M_impl._M_start; }
  43e7ac:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43e7b0:	48 8d 50 10          	lea    0x10(%rax),%rdx
  43e7b4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43e7b8:	48 83 c0 30          	add    $0x30,%rax
  43e7bc:	48 89 d6             	mov    %rdx,%rsi
  43e7bf:	48 89 c7             	mov    %rax,%rdi
  43e7c2:	e8 4c 17 00 00       	callq  43ff13 <std::_Deque_iterator<x666::LineInfo, x666::LineInfo&, x666::LineInfo*>::difference_type std::operator-<x666::LineInfo, x666::LineInfo&, x666::LineInfo*>(std::_Deque_iterator<x666::LineInfo, x666::LineInfo&, x666::LineInfo*> const&, std::_Deque_iterator<x666::LineInfo, x666::LineInfo&, x666::LineInfo*> const&)>
  43e7c7:	c9                   	leaveq 
  43e7c8:	c3                   	retq   
  43e7c9:	90                   	nop

000000000043e7ca <std::deque<x666::LineInfo, std::allocator<x666::LineInfo> >::back() const>:
      back() const _GLIBCXX_NOEXCEPT
  43e7ca:	55                   	push   %rbp
  43e7cb:	48 89 e5             	mov    %rsp,%rbp
  43e7ce:	48 83 ec 30          	sub    $0x30,%rsp
  43e7d2:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
	const_iterator __tmp = end();
  43e7d6:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  43e7da:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  43e7de:	48 89 d6             	mov    %rdx,%rsi
  43e7e1:	48 89 c7             	mov    %rax,%rdi
  43e7e4:	e8 a7 17 00 00       	callq  43ff90 <std::deque<x666::LineInfo, std::allocator<x666::LineInfo> >::end() const>
	--__tmp;
  43e7e9:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  43e7ed:	48 89 c7             	mov    %rax,%rdi
  43e7f0:	e8 c9 17 00 00       	callq  43ffbe <std::_Deque_iterator<x666::LineInfo, x666::LineInfo const&, x666::LineInfo const*>::operator--()>
	return *__tmp;
  43e7f5:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  43e7f9:	48 89 c7             	mov    %rax,%rdi
  43e7fc:	e8 1f 18 00 00       	callq  440020 <std::_Deque_iterator<x666::LineInfo, x666::LineInfo const&, x666::LineInfo const*>::operator*() const>
      }
  43e801:	c9                   	leaveq 
  43e802:	c3                   	retq   
  43e803:	90                   	nop

000000000043e804 <std::__detail::__variant::_Variadic_union<x666::IntLiteral, x666::StringLiteral>::_Variadic_union()>:
      constexpr _Variadic_union() : _M_rest() { }
  43e804:	55                   	push   %rbp
  43e805:	48 89 e5             	mov    %rsp,%rbp
  43e808:	48 83 ec 10          	sub    $0x10,%rsp
  43e80c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  43e810:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43e814:	48 89 c7             	mov    %rax,%rdi
  43e817:	e8 16 18 00 00       	callq  440032 <std::__detail::__variant::_Variadic_union<x666::StringLiteral>::_Variadic_union()>
  43e81c:	90                   	nop
  43e81d:	c9                   	leaveq 
  43e81e:	c3                   	retq   

000000000043e81f <x666::Identifier&& std::__detail::__variant::__ref_cast<x666::Identifier&&>(void*)>:
    _Ref __ref_cast(void* __ptr)
  43e81f:	55                   	push   %rbp
  43e820:	48 89 e5             	mov    %rsp,%rbp
  43e823:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      return static_cast<_Ref>(*static_cast<remove_reference_t<_Ref>*>(__ptr));
  43e827:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    }
  43e82b:	5d                   	pop    %rbp
  43e82c:	c3                   	retq   

000000000043e82d <x666::IntLiteral&& std::__detail::__variant::__ref_cast<x666::IntLiteral&&>(void*)>:
    _Ref __ref_cast(void* __ptr)
  43e82d:	55                   	push   %rbp
  43e82e:	48 89 e5             	mov    %rsp,%rbp
  43e831:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      return static_cast<_Ref>(*static_cast<remove_reference_t<_Ref>*>(__ptr));
  43e835:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    }
  43e839:	5d                   	pop    %rbp
  43e83a:	c3                   	retq   

000000000043e83b <x666::StringLiteral&& std::__detail::__variant::__ref_cast<x666::StringLiteral&&>(void*)>:
    _Ref __ref_cast(void* __ptr)
  43e83b:	55                   	push   %rbp
  43e83c:	48 89 e5             	mov    %rsp,%rbp
  43e83f:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      return static_cast<_Ref>(*static_cast<remove_reference_t<_Ref>*>(__ptr));
  43e843:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    }
  43e847:	5d                   	pop    %rbp
  43e848:	c3                   	retq   

000000000043e849 <std::__detail::__variant::_Variadic_union<x666::Identifier, x666::IntLiteral, x666::StringLiteral> const* std::addressof<std::__detail::__variant::_Variadic_union<x666::Identifier, x666::IntLiteral, x666::StringLiteral> const>(std::__detail::__variant::_Variadic_union<x666::Identifier, x666::IntLiteral, x666::StringLiteral> const&)>:
    addressof(_Tp& __r) noexcept
  43e849:	55                   	push   %rbp
  43e84a:	48 89 e5             	mov    %rsp,%rbp
  43e84d:	48 83 ec 10          	sub    $0x10,%rsp
  43e851:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return std::__addressof(__r); }
  43e855:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43e859:	48 89 c7             	mov    %rax,%rdi
  43e85c:	e8 dc 17 00 00       	callq  44003d <std::__detail::__variant::_Variadic_union<x666::Identifier, x666::IntLiteral, x666::StringLiteral> const* std::__addressof<std::__detail::__variant::_Variadic_union<x666::Identifier, x666::IntLiteral, x666::StringLiteral> const>(std::__detail::__variant::_Variadic_union<x666::Identifier, x666::IntLiteral, x666::StringLiteral> const&)>
  43e861:	c9                   	leaveq 
  43e862:	c3                   	retq   
  43e863:	90                   	nop

000000000043e864 <void std::__detail::__variant::_Variant_storage<false, x666::Identifier, x666::IntLiteral, x666::StringLiteral>::_M_reset_impl<0ul, 1ul, 2ul>(std::integer_sequence<unsigned long, 0ul, 1ul, 2ul>)>:
	constexpr void _M_reset_impl(std::index_sequence<__indices...>)
  43e864:	55                   	push   %rbp
  43e865:	48 89 e5             	mov    %rsp,%rbp
  43e868:	48 83 ec 10          	sub    $0x10,%rsp
  43e86c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	  if (_M_index != __index_type(variant_npos))
  43e870:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43e874:	0f b6 40 20          	movzbl 0x20(%rax),%eax
  43e878:	3c ff                	cmp    $0xff,%al
  43e87a:	74 1e                	je     43e89a <void std::__detail::__variant::_Variant_storage<false, x666::Identifier, x666::IntLiteral, x666::StringLiteral>::_M_reset_impl<0ul, 1ul, 2ul>(std::integer_sequence<unsigned long, 0ul, 1ul, 2ul>)+0x36>
	    _S_vtable<__indices...>[_M_index](*this);
  43e87c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43e880:	0f b6 40 20          	movzbl 0x20(%rax),%eax
  43e884:	0f b6 c0             	movzbl %al,%eax
  43e887:	48 98                	cltq   
  43e889:	48 8b 04 c5 60 49 44 	mov    0x444960(,%rax,8),%rax
  43e890:	00 
  43e891:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  43e895:	48 89 d7             	mov    %rdx,%rdi
  43e898:	ff d0                	callq  *%rax
	}
  43e89a:	90                   	nop
  43e89b:	c9                   	leaveq 
  43e89c:	c3                   	retq   

000000000043e89d <x666::Expression*& std::forward<x666::Expression*&>(std::remove_reference<x666::Expression*&>::type&)>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
  43e89d:	55                   	push   %rbp
  43e89e:	48 89 e5             	mov    %rsp,%rbp
  43e8a1:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<_Tp&&>(__t); }
  43e8a5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43e8a9:	5d                   	pop    %rbp
  43e8aa:	c3                   	retq   
  43e8ab:	90                   	nop

000000000043e8ac <std::tuple<x666::Expression*, std::default_delete<x666::Expression> >::tuple<x666::Expression*&, std::default_delete<x666::Expression>, true>(x666::Expression*&, std::default_delete<x666::Expression>&&)>:
        constexpr tuple(_U1&& __a1, _U2&& __a2)
  43e8ac:	55                   	push   %rbp
  43e8ad:	48 89 e5             	mov    %rsp,%rbp
  43e8b0:	41 54                	push   %r12
  43e8b2:	53                   	push   %rbx
  43e8b3:	48 83 ec 20          	sub    $0x20,%rsp
  43e8b7:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  43e8bb:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  43e8bf:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
	: _Inherited(std::forward<_U1>(__a1), std::forward<_U2>(__a2)) { }
  43e8c3:	48 8b 5d e8          	mov    -0x18(%rbp),%rbx
  43e8c7:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  43e8cb:	48 89 c7             	mov    %rax,%rdi
  43e8ce:	e8 bc e5 ff ff       	callq  43ce8f <std::default_delete<x666::Expression>&& std::forward<std::default_delete<x666::Expression> >(std::remove_reference<std::default_delete<x666::Expression> >::type&)>
  43e8d3:	49 89 c4             	mov    %rax,%r12
  43e8d6:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  43e8da:	48 89 c7             	mov    %rax,%rdi
  43e8dd:	e8 bb ff ff ff       	callq  43e89d <x666::Expression*& std::forward<x666::Expression*&>(std::remove_reference<x666::Expression*&>::type&)>
  43e8e2:	4c 89 e2             	mov    %r12,%rdx
  43e8e5:	48 89 c6             	mov    %rax,%rsi
  43e8e8:	48 89 df             	mov    %rbx,%rdi
  43e8eb:	e8 a4 18 00 00       	callq  440194 <std::_Tuple_impl<0ul, x666::Expression*, std::default_delete<x666::Expression> >::_Tuple_impl<x666::Expression*&, std::default_delete<x666::Expression>, void>(x666::Expression*&, std::default_delete<x666::Expression>&&)>
  43e8f0:	90                   	nop
  43e8f1:	48 83 c4 20          	add    $0x20,%rsp
  43e8f5:	5b                   	pop    %rbx
  43e8f6:	41 5c                	pop    %r12
  43e8f8:	5d                   	pop    %rbp
  43e8f9:	c3                   	retq   

000000000043e8fa <std::__uniq_ptr_impl<x666::BinaryOp, std::default_delete<x666::BinaryOp> >::__uniq_ptr_impl(x666::BinaryOp*)>:
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
  43e8fa:	55                   	push   %rbp
  43e8fb:	48 89 e5             	mov    %rsp,%rbp
  43e8fe:	53                   	push   %rbx
  43e8ff:	48 83 ec 18          	sub    $0x18,%rsp
  43e903:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  43e907:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  43e90b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  43e90f:	48 89 c7             	mov    %rax,%rdi
  43e912:	e8 d3 18 00 00       	callq  4401ea <std::tuple<x666::BinaryOp*, std::default_delete<x666::BinaryOp> >::tuple<x666::BinaryOp*, std::default_delete<x666::BinaryOp>, true>()>
  43e917:	48 8b 5d e0          	mov    -0x20(%rbp),%rbx
  43e91b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  43e91f:	48 89 c7             	mov    %rax,%rdi
  43e922:	e8 dd e5 ff ff       	callq  43cf04 <std::__uniq_ptr_impl<x666::BinaryOp, std::default_delete<x666::BinaryOp> >::_M_ptr()>
  43e927:	48 89 18             	mov    %rbx,(%rax)
  43e92a:	90                   	nop
  43e92b:	48 83 c4 18          	add    $0x18,%rsp
  43e92f:	5b                   	pop    %rbx
  43e930:	5d                   	pop    %rbp
  43e931:	c3                   	retq   

000000000043e932 <std::tuple_element<0ul, std::tuple<x666::BinaryOp*, std::default_delete<x666::BinaryOp> > >::type& std::get<0ul, x666::BinaryOp*, std::default_delete<x666::BinaryOp> >(std::tuple<x666::BinaryOp*, std::default_delete<x666::BinaryOp> >&)>:
    get(tuple<_Elements...>& __t) noexcept
  43e932:	55                   	push   %rbp
  43e933:	48 89 e5             	mov    %rsp,%rbp
  43e936:	48 83 ec 10          	sub    $0x10,%rsp
  43e93a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return std::__get_helper<__i>(__t); }
  43e93e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43e942:	48 89 c7             	mov    %rax,%rdi
  43e945:	e8 bb 18 00 00       	callq  440205 <x666::BinaryOp*& std::__get_helper<0ul, x666::BinaryOp*, std::default_delete<x666::BinaryOp> >(std::_Tuple_impl<0ul, x666::BinaryOp*, std::default_delete<x666::BinaryOp> >&)>
  43e94a:	c9                   	leaveq 
  43e94b:	c3                   	retq   

000000000043e94c <std::__uniq_ptr_impl<x666::BinaryOp, std::default_delete<x666::BinaryOp> >::_M_deleter()>:
      _Dp&       _M_deleter() { return std::get<1>(_M_t); }
  43e94c:	55                   	push   %rbp
  43e94d:	48 89 e5             	mov    %rsp,%rbp
  43e950:	48 83 ec 10          	sub    $0x10,%rsp
  43e954:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  43e958:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43e95c:	48 89 c7             	mov    %rax,%rdi
  43e95f:	e8 bb 18 00 00       	callq  44021f <std::tuple_element<1ul, std::tuple<x666::BinaryOp*, std::default_delete<x666::BinaryOp> > >::type& std::get<1ul, x666::BinaryOp*, std::default_delete<x666::BinaryOp> >(std::tuple<x666::BinaryOp*, std::default_delete<x666::BinaryOp> >&)>
  43e964:	c9                   	leaveq 
  43e965:	c3                   	retq   

000000000043e966 <std::unique_ptr<x666::BinaryOp, std::default_delete<x666::BinaryOp> >::get() const>:
      get() const noexcept
  43e966:	55                   	push   %rbp
  43e967:	48 89 e5             	mov    %rsp,%rbp
  43e96a:	48 83 ec 10          	sub    $0x10,%rsp
  43e96e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_t._M_ptr(); }
  43e972:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43e976:	48 89 c7             	mov    %rax,%rdi
  43e979:	e8 bc 18 00 00       	callq  44023a <std::__uniq_ptr_impl<x666::BinaryOp, std::default_delete<x666::BinaryOp> >::_M_ptr() const>
  43e97e:	c9                   	leaveq 
  43e97f:	c3                   	retq   

000000000043e980 <std::tuple<x666::Expression*, std::default_delete<x666::Expression> >::tuple<x666::Expression*&, std::default_delete<x666::BinaryOp>, true>(x666::Expression*&, std::default_delete<x666::BinaryOp>&&)>:
        constexpr tuple(_U1&& __a1, _U2&& __a2)
  43e980:	55                   	push   %rbp
  43e981:	48 89 e5             	mov    %rsp,%rbp
  43e984:	41 54                	push   %r12
  43e986:	53                   	push   %rbx
  43e987:	48 83 ec 20          	sub    $0x20,%rsp
  43e98b:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  43e98f:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  43e993:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
	: _Inherited(std::forward<_U1>(__a1), std::forward<_U2>(__a2)) { }
  43e997:	48 8b 5d e8          	mov    -0x18(%rbp),%rbx
  43e99b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  43e99f:	48 89 c7             	mov    %rax,%rdi
  43e9a2:	e8 6c e6 ff ff       	callq  43d013 <std::default_delete<x666::BinaryOp>&& std::forward<std::default_delete<x666::BinaryOp> >(std::remove_reference<std::default_delete<x666::BinaryOp> >::type&)>
  43e9a7:	49 89 c4             	mov    %rax,%r12
  43e9aa:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  43e9ae:	48 89 c7             	mov    %rax,%rdi
  43e9b1:	e8 e7 fe ff ff       	callq  43e89d <x666::Expression*& std::forward<x666::Expression*&>(std::remove_reference<x666::Expression*&>::type&)>
  43e9b6:	4c 89 e2             	mov    %r12,%rdx
  43e9b9:	48 89 c6             	mov    %rax,%rsi
  43e9bc:	48 89 df             	mov    %rbx,%rdi
  43e9bf:	e8 94 18 00 00       	callq  440258 <std::_Tuple_impl<0ul, x666::Expression*, std::default_delete<x666::Expression> >::_Tuple_impl<x666::Expression*&, std::default_delete<x666::BinaryOp>, void>(x666::Expression*&, std::default_delete<x666::BinaryOp>&&)>
  43e9c4:	90                   	nop
  43e9c5:	48 83 c4 20          	add    $0x20,%rsp
  43e9c9:	5b                   	pop    %rbx
  43e9ca:	41 5c                	pop    %r12
  43e9cc:	5d                   	pop    %rbp
  43e9cd:	c3                   	retq   

000000000043e9ce <std::__uniq_ptr_impl<x666::UnaryOp, std::default_delete<x666::UnaryOp> >::__uniq_ptr_impl(x666::UnaryOp*)>:
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
  43e9ce:	55                   	push   %rbp
  43e9cf:	48 89 e5             	mov    %rsp,%rbp
  43e9d2:	53                   	push   %rbx
  43e9d3:	48 83 ec 18          	sub    $0x18,%rsp
  43e9d7:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  43e9db:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  43e9df:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  43e9e3:	48 89 c7             	mov    %rax,%rdi
  43e9e6:	e8 c3 18 00 00       	callq  4402ae <std::tuple<x666::UnaryOp*, std::default_delete<x666::UnaryOp> >::tuple<x666::UnaryOp*, std::default_delete<x666::UnaryOp>, true>()>
  43e9eb:	48 8b 5d e0          	mov    -0x20(%rbp),%rbx
  43e9ef:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  43e9f3:	48 89 c7             	mov    %rax,%rdi
  43e9f6:	e8 8d e6 ff ff       	callq  43d088 <std::__uniq_ptr_impl<x666::UnaryOp, std::default_delete<x666::UnaryOp> >::_M_ptr()>
  43e9fb:	48 89 18             	mov    %rbx,(%rax)
  43e9fe:	90                   	nop
  43e9ff:	48 83 c4 18          	add    $0x18,%rsp
  43ea03:	5b                   	pop    %rbx
  43ea04:	5d                   	pop    %rbp
  43ea05:	c3                   	retq   

000000000043ea06 <std::tuple_element<0ul, std::tuple<x666::UnaryOp*, std::default_delete<x666::UnaryOp> > >::type& std::get<0ul, x666::UnaryOp*, std::default_delete<x666::UnaryOp> >(std::tuple<x666::UnaryOp*, std::default_delete<x666::UnaryOp> >&)>:
    get(tuple<_Elements...>& __t) noexcept
  43ea06:	55                   	push   %rbp
  43ea07:	48 89 e5             	mov    %rsp,%rbp
  43ea0a:	48 83 ec 10          	sub    $0x10,%rsp
  43ea0e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return std::__get_helper<__i>(__t); }
  43ea12:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43ea16:	48 89 c7             	mov    %rax,%rdi
  43ea19:	e8 ab 18 00 00       	callq  4402c9 <x666::UnaryOp*& std::__get_helper<0ul, x666::UnaryOp*, std::default_delete<x666::UnaryOp> >(std::_Tuple_impl<0ul, x666::UnaryOp*, std::default_delete<x666::UnaryOp> >&)>
  43ea1e:	c9                   	leaveq 
  43ea1f:	c3                   	retq   

000000000043ea20 <std::__uniq_ptr_impl<x666::UnaryOp, std::default_delete<x666::UnaryOp> >::_M_deleter()>:
      _Dp&       _M_deleter() { return std::get<1>(_M_t); }
  43ea20:	55                   	push   %rbp
  43ea21:	48 89 e5             	mov    %rsp,%rbp
  43ea24:	48 83 ec 10          	sub    $0x10,%rsp
  43ea28:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  43ea2c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43ea30:	48 89 c7             	mov    %rax,%rdi
  43ea33:	e8 ab 18 00 00       	callq  4402e3 <std::tuple_element<1ul, std::tuple<x666::UnaryOp*, std::default_delete<x666::UnaryOp> > >::type& std::get<1ul, x666::UnaryOp*, std::default_delete<x666::UnaryOp> >(std::tuple<x666::UnaryOp*, std::default_delete<x666::UnaryOp> >&)>
  43ea38:	c9                   	leaveq 
  43ea39:	c3                   	retq   

000000000043ea3a <std::unique_ptr<x666::UnaryOp, std::default_delete<x666::UnaryOp> >::get() const>:
      get() const noexcept
  43ea3a:	55                   	push   %rbp
  43ea3b:	48 89 e5             	mov    %rsp,%rbp
  43ea3e:	48 83 ec 10          	sub    $0x10,%rsp
  43ea42:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_t._M_ptr(); }
  43ea46:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43ea4a:	48 89 c7             	mov    %rax,%rdi
  43ea4d:	e8 ac 18 00 00       	callq  4402fe <std::__uniq_ptr_impl<x666::UnaryOp, std::default_delete<x666::UnaryOp> >::_M_ptr() const>
  43ea52:	c9                   	leaveq 
  43ea53:	c3                   	retq   

000000000043ea54 <std::tuple<x666::Expression*, std::default_delete<x666::Expression> >::tuple<x666::Expression*&, std::default_delete<x666::UnaryOp>, true>(x666::Expression*&, std::default_delete<x666::UnaryOp>&&)>:
        constexpr tuple(_U1&& __a1, _U2&& __a2)
  43ea54:	55                   	push   %rbp
  43ea55:	48 89 e5             	mov    %rsp,%rbp
  43ea58:	41 54                	push   %r12
  43ea5a:	53                   	push   %rbx
  43ea5b:	48 83 ec 20          	sub    $0x20,%rsp
  43ea5f:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  43ea63:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  43ea67:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
	: _Inherited(std::forward<_U1>(__a1), std::forward<_U2>(__a2)) { }
  43ea6b:	48 8b 5d e8          	mov    -0x18(%rbp),%rbx
  43ea6f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  43ea73:	48 89 c7             	mov    %rax,%rdi
  43ea76:	e8 0c e7 ff ff       	callq  43d187 <std::default_delete<x666::UnaryOp>&& std::forward<std::default_delete<x666::UnaryOp> >(std::remove_reference<std::default_delete<x666::UnaryOp> >::type&)>
  43ea7b:	49 89 c4             	mov    %rax,%r12
  43ea7e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  43ea82:	48 89 c7             	mov    %rax,%rdi
  43ea85:	e8 13 fe ff ff       	callq  43e89d <x666::Expression*& std::forward<x666::Expression*&>(std::remove_reference<x666::Expression*&>::type&)>
  43ea8a:	4c 89 e2             	mov    %r12,%rdx
  43ea8d:	48 89 c6             	mov    %rax,%rsi
  43ea90:	48 89 df             	mov    %rbx,%rdi
  43ea93:	e8 84 18 00 00       	callq  44031c <std::_Tuple_impl<0ul, x666::Expression*, std::default_delete<x666::Expression> >::_Tuple_impl<x666::Expression*&, std::default_delete<x666::UnaryOp>, void>(x666::Expression*&, std::default_delete<x666::UnaryOp>&&)>
  43ea98:	90                   	nop
  43ea99:	48 83 c4 20          	add    $0x20,%rsp
  43ea9d:	5b                   	pop    %rbx
  43ea9e:	41 5c                	pop    %r12
  43eaa0:	5d                   	pop    %rbp
  43eaa1:	c3                   	retq   

000000000043eaa2 <std::remove_reference<x666::Expression*&>::type&& std::move<x666::Expression*&>(x666::Expression*&)>:
    move(_Tp&& __t) noexcept
  43eaa2:	55                   	push   %rbp
  43eaa3:	48 89 e5             	mov    %rsp,%rbp
  43eaa6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
  43eaaa:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43eaae:	5d                   	pop    %rbp
  43eaaf:	c3                   	retq   

000000000043eab0 <std::enable_if<std::__and_<std::__not_<std::__is_tuple_like<x666::Expression*> >, std::is_move_constructible<x666::Expression*>, std::is_move_assignable<x666::Expression*> >::value, void>::type std::swap<x666::Expression*>(x666::Expression*&, x666::Expression*&)>:
    inline
#if __cplusplus >= 201103L
    typename enable_if<__and_<__not_<__is_tuple_like<_Tp>>,
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
    swap(_Tp& __a, _Tp& __b)
  43eab0:	55                   	push   %rbp
  43eab1:	48 89 e5             	mov    %rsp,%rbp
  43eab4:	48 83 ec 20          	sub    $0x20,%rsp
  43eab8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  43eabc:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
  43eac0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  43eac4:	48 89 c7             	mov    %rax,%rdi
  43eac7:	e8 d6 ff ff ff       	callq  43eaa2 <std::remove_reference<x666::Expression*&>::type&& std::move<x666::Expression*&>(x666::Expression*&)>
  43eacc:	48 8b 00             	mov    (%rax),%rax
  43eacf:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
      __a = _GLIBCXX_MOVE(__b);
  43ead3:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  43ead7:	48 89 c7             	mov    %rax,%rdi
  43eada:	e8 c3 ff ff ff       	callq  43eaa2 <std::remove_reference<x666::Expression*&>::type&& std::move<x666::Expression*&>(x666::Expression*&)>
  43eadf:	48 8b 10             	mov    (%rax),%rdx
  43eae2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  43eae6:	48 89 10             	mov    %rdx,(%rax)
      __b = _GLIBCXX_MOVE(__tmp);
  43eae9:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
  43eaed:	48 89 c7             	mov    %rax,%rdi
  43eaf0:	e8 ad ff ff ff       	callq  43eaa2 <std::remove_reference<x666::Expression*&>::type&& std::move<x666::Expression*&>(x666::Expression*&)>
  43eaf5:	48 8b 10             	mov    (%rax),%rdx
  43eaf8:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  43eafc:	48 89 10             	mov    %rdx,(%rax)
    }
  43eaff:	90                   	nop
  43eb00:	c9                   	leaveq 
  43eb01:	c3                   	retq   

000000000043eb02 <__gnu_cxx::__aligned_membuf<x666::Identifier>::_M_ptr() const>:

      const _Tp*
      _M_ptr() const noexcept
  43eb02:	55                   	push   %rbp
  43eb03:	48 89 e5             	mov    %rsp,%rbp
  43eb06:	48 83 ec 10          	sub    $0x10,%rsp
  43eb0a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return static_cast<const _Tp*>(_M_addr()); }
  43eb0e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43eb12:	48 89 c7             	mov    %rax,%rdi
  43eb15:	e8 58 18 00 00       	callq  440372 <__gnu_cxx::__aligned_membuf<x666::Identifier>::_M_addr() const>
  43eb1a:	c9                   	leaveq 
  43eb1b:	c3                   	retq   

000000000043eb1c <__gnu_cxx::__aligned_membuf<x666::IntLiteral>::_M_ptr() const>:
      _M_ptr() const noexcept
  43eb1c:	55                   	push   %rbp
  43eb1d:	48 89 e5             	mov    %rsp,%rbp
  43eb20:	48 83 ec 10          	sub    $0x10,%rsp
  43eb24:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return static_cast<const _Tp*>(_M_addr()); }
  43eb28:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43eb2c:	48 89 c7             	mov    %rax,%rdi
  43eb2f:	e8 4c 18 00 00       	callq  440380 <__gnu_cxx::__aligned_membuf<x666::IntLiteral>::_M_addr() const>
  43eb34:	c9                   	leaveq 
  43eb35:	c3                   	retq   

000000000043eb36 <__gnu_cxx::__aligned_membuf<x666::StringLiteral>::_M_ptr() const>:
      _M_ptr() const noexcept
  43eb36:	55                   	push   %rbp
  43eb37:	48 89 e5             	mov    %rsp,%rbp
  43eb3a:	48 83 ec 10          	sub    $0x10,%rsp
  43eb3e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return static_cast<const _Tp*>(_M_addr()); }
  43eb42:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43eb46:	48 89 c7             	mov    %rax,%rdi
  43eb49:	e8 40 18 00 00       	callq  44038e <__gnu_cxx::__aligned_membuf<x666::StringLiteral>::_M_addr() const>
  43eb4e:	c9                   	leaveq 
  43eb4f:	c3                   	retq   

000000000043eb50 <std::__detail::__variant::_Copy_ctor_base<false, x666::Identifier, x666::IntLiteral, x666::StringLiteral>::_Variant_storage<0ul, x666::Identifier>(std::in_place_index_t<0ul>, x666::Identifier&&)>:
      using _Base::_Base;
  43eb50:	55                   	push   %rbp
  43eb51:	48 89 e5             	mov    %rsp,%rbp
  43eb54:	48 83 ec 10          	sub    $0x10,%rsp
  43eb58:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  43eb5c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  43eb60:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43eb64:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  43eb68:	48 83 ec 08          	sub    $0x8,%rsp
  43eb6c:	0f b6 4d 10          	movzbl 0x10(%rbp),%ecx
  43eb70:	51                   	push   %rcx
  43eb71:	48 89 d6             	mov    %rdx,%rsi
  43eb74:	48 89 c7             	mov    %rax,%rdi
  43eb77:	e8 62 18 00 00       	callq  4403de <std::__detail::__variant::_Variant_storage<false, x666::Identifier, x666::IntLiteral, x666::StringLiteral>::_Variant_storage<0ul, x666::Identifier>(std::in_place_index_t<0ul>, x666::Identifier&&)>
  43eb7c:	48 83 c4 10          	add    $0x10,%rsp
  43eb80:	90                   	nop
  43eb81:	c9                   	leaveq 
  43eb82:	c3                   	retq   
  43eb83:	90                   	nop

000000000043eb84 <std::__detail::__variant::_Move_ctor_base<false, x666::Identifier, x666::IntLiteral, x666::StringLiteral>::_Variant_storage<0ul, x666::Identifier>(std::in_place_index_t<0ul>, x666::Identifier&&)>:
      using _Base::_Base;
  43eb84:	55                   	push   %rbp
  43eb85:	48 89 e5             	mov    %rsp,%rbp
  43eb88:	48 83 ec 10          	sub    $0x10,%rsp
  43eb8c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  43eb90:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  43eb94:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43eb98:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  43eb9c:	48 83 ec 08          	sub    $0x8,%rsp
  43eba0:	0f b6 4d 10          	movzbl 0x10(%rbp),%ecx
  43eba4:	51                   	push   %rcx
  43eba5:	48 89 d6             	mov    %rdx,%rsi
  43eba8:	48 89 c7             	mov    %rax,%rdi
  43ebab:	e8 a0 ff ff ff       	callq  43eb50 <std::__detail::__variant::_Copy_ctor_base<false, x666::Identifier, x666::IntLiteral, x666::StringLiteral>::_Variant_storage<0ul, x666::Identifier>(std::in_place_index_t<0ul>, x666::Identifier&&)>
  43ebb0:	48 83 c4 10          	add    $0x10,%rsp
  43ebb4:	90                   	nop
  43ebb5:	c9                   	leaveq 
  43ebb6:	c3                   	retq   
  43ebb7:	90                   	nop

000000000043ebb8 <std::__detail::__variant::_Copy_assign_base<false, x666::Identifier, x666::IntLiteral, x666::StringLiteral>::_Variant_storage<0ul, x666::Identifier>(std::in_place_index_t<0ul>, x666::Identifier&&)>:
      using _Base::_Base;
  43ebb8:	55                   	push   %rbp
  43ebb9:	48 89 e5             	mov    %rsp,%rbp
  43ebbc:	48 83 ec 10          	sub    $0x10,%rsp
  43ebc0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  43ebc4:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  43ebc8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43ebcc:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  43ebd0:	48 83 ec 08          	sub    $0x8,%rsp
  43ebd4:	0f b6 4d 10          	movzbl 0x10(%rbp),%ecx
  43ebd8:	51                   	push   %rcx
  43ebd9:	48 89 d6             	mov    %rdx,%rsi
  43ebdc:	48 89 c7             	mov    %rax,%rdi
  43ebdf:	e8 a0 ff ff ff       	callq  43eb84 <std::__detail::__variant::_Move_ctor_base<false, x666::Identifier, x666::IntLiteral, x666::StringLiteral>::_Variant_storage<0ul, x666::Identifier>(std::in_place_index_t<0ul>, x666::Identifier&&)>
  43ebe4:	48 83 c4 10          	add    $0x10,%rsp
  43ebe8:	90                   	nop
  43ebe9:	c9                   	leaveq 
  43ebea:	c3                   	retq   
  43ebeb:	90                   	nop

000000000043ebec <std::__detail::__variant::_Move_assign_base<false, x666::Identifier, x666::IntLiteral, x666::StringLiteral>::_Variant_storage<0ul, x666::Identifier>(std::in_place_index_t<0ul>, x666::Identifier&&)>:
      using _Base::_Base;
  43ebec:	55                   	push   %rbp
  43ebed:	48 89 e5             	mov    %rsp,%rbp
  43ebf0:	48 83 ec 10          	sub    $0x10,%rsp
  43ebf4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  43ebf8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  43ebfc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43ec00:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  43ec04:	48 83 ec 08          	sub    $0x8,%rsp
  43ec08:	0f b6 4d 10          	movzbl 0x10(%rbp),%ecx
  43ec0c:	51                   	push   %rcx
  43ec0d:	48 89 d6             	mov    %rdx,%rsi
  43ec10:	48 89 c7             	mov    %rax,%rdi
  43ec13:	e8 a0 ff ff ff       	callq  43ebb8 <std::__detail::__variant::_Copy_assign_base<false, x666::Identifier, x666::IntLiteral, x666::StringLiteral>::_Variant_storage<0ul, x666::Identifier>(std::in_place_index_t<0ul>, x666::Identifier&&)>
  43ec18:	48 83 c4 10          	add    $0x10,%rsp
  43ec1c:	90                   	nop
  43ec1d:	c9                   	leaveq 
  43ec1e:	c3                   	retq   
  43ec1f:	90                   	nop

000000000043ec20 <std::__detail::__variant::_Variant_base<x666::Identifier, x666::IntLiteral, x666::StringLiteral>::_Variant_base<0ul, x666::Identifier>(std::in_place_index_t<0ul>, x666::Identifier&&)>:
	_Variant_base(in_place_index_t<_Np> __i, _Args&&... __args)
  43ec20:	55                   	push   %rbp
  43ec21:	48 89 e5             	mov    %rsp,%rbp
  43ec24:	41 54                	push   %r12
  43ec26:	53                   	push   %rbx
  43ec27:	48 83 ec 10          	sub    $0x10,%rsp
  43ec2b:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  43ec2f:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	: _Base(__i, std::forward<_Args>(__args)...)
  43ec33:	48 8b 5d e8          	mov    -0x18(%rbp),%rbx
  43ec37:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  43ec3b:	48 89 c7             	mov    %rax,%rdi
  43ec3e:	e8 34 79 ff ff       	callq  436577 <x666::Identifier&& std::forward<x666::Identifier>(std::remove_reference<x666::Identifier>::type&)>
  43ec43:	48 83 ec 08          	sub    $0x8,%rsp
  43ec47:	41 54                	push   %r12
  43ec49:	48 89 c6             	mov    %rax,%rsi
  43ec4c:	48 89 df             	mov    %rbx,%rdi
  43ec4f:	e8 98 ff ff ff       	callq  43ebec <std::__detail::__variant::_Move_assign_base<false, x666::Identifier, x666::IntLiteral, x666::StringLiteral>::_Variant_storage<0ul, x666::Identifier>(std::in_place_index_t<0ul>, x666::Identifier&&)>
  43ec54:	48 83 c4 10          	add    $0x10,%rsp
	{ }
  43ec58:	90                   	nop
  43ec59:	48 8d 65 f0          	lea    -0x10(%rbp),%rsp
  43ec5d:	5b                   	pop    %rbx
  43ec5e:	41 5c                	pop    %r12
  43ec60:	5d                   	pop    %rbp
  43ec61:	c3                   	retq   

000000000043ec62 <std::_Enable_default_constructor<false, std::variant<x666::Identifier, x666::IntLiteral, x666::StringLiteral> >::_Enable_default_constructor(std::_Enable_default_constructor_tag)>:
  43ec62:	55                   	push   %rbp
  43ec63:	48 89 e5             	mov    %rsp,%rbp
  43ec66:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  43ec6a:	90                   	nop
  43ec6b:	5d                   	pop    %rbp
  43ec6c:	c3                   	retq   
  43ec6d:	90                   	nop

000000000043ec6e <std::__uniq_ptr_impl<x666::Literal, std::default_delete<x666::Literal> >::__uniq_ptr_impl(x666::Literal*)>:
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
  43ec6e:	55                   	push   %rbp
  43ec6f:	48 89 e5             	mov    %rsp,%rbp
  43ec72:	53                   	push   %rbx
  43ec73:	48 83 ec 18          	sub    $0x18,%rsp
  43ec77:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  43ec7b:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  43ec7f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  43ec83:	48 89 c7             	mov    %rax,%rdi
  43ec86:	e8 9d 17 00 00       	callq  440428 <std::tuple<x666::Literal*, std::default_delete<x666::Literal> >::tuple<x666::Literal*, std::default_delete<x666::Literal>, true>()>
  43ec8b:	48 8b 5d e0          	mov    -0x20(%rbp),%rbx
  43ec8f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  43ec93:	48 89 c7             	mov    %rax,%rdi
  43ec96:	e8 a3 e6 ff ff       	callq  43d33e <std::__uniq_ptr_impl<x666::Literal, std::default_delete<x666::Literal> >::_M_ptr()>
  43ec9b:	48 89 18             	mov    %rbx,(%rax)
  43ec9e:	90                   	nop
  43ec9f:	48 83 c4 18          	add    $0x18,%rsp
  43eca3:	5b                   	pop    %rbx
  43eca4:	5d                   	pop    %rbp
  43eca5:	c3                   	retq   

000000000043eca6 <std::tuple_element<0ul, std::tuple<x666::Literal*, std::default_delete<x666::Literal> > >::type& std::get<0ul, x666::Literal*, std::default_delete<x666::Literal> >(std::tuple<x666::Literal*, std::default_delete<x666::Literal> >&)>:
    get(tuple<_Elements...>& __t) noexcept
  43eca6:	55                   	push   %rbp
  43eca7:	48 89 e5             	mov    %rsp,%rbp
  43ecaa:	48 83 ec 10          	sub    $0x10,%rsp
  43ecae:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return std::__get_helper<__i>(__t); }
  43ecb2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43ecb6:	48 89 c7             	mov    %rax,%rdi
  43ecb9:	e8 85 17 00 00       	callq  440443 <x666::Literal*& std::__get_helper<0ul, x666::Literal*, std::default_delete<x666::Literal> >(std::_Tuple_impl<0ul, x666::Literal*, std::default_delete<x666::Literal> >&)>
  43ecbe:	c9                   	leaveq 
  43ecbf:	c3                   	retq   

000000000043ecc0 <std::__uniq_ptr_impl<x666::Literal, std::default_delete<x666::Literal> >::_M_deleter()>:
      _Dp&       _M_deleter() { return std::get<1>(_M_t); }
  43ecc0:	55                   	push   %rbp
  43ecc1:	48 89 e5             	mov    %rsp,%rbp
  43ecc4:	48 83 ec 10          	sub    $0x10,%rsp
  43ecc8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  43eccc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43ecd0:	48 89 c7             	mov    %rax,%rdi
  43ecd3:	e8 85 17 00 00       	callq  44045d <std::tuple_element<1ul, std::tuple<x666::Literal*, std::default_delete<x666::Literal> > >::type& std::get<1ul, x666::Literal*, std::default_delete<x666::Literal> >(std::tuple<x666::Literal*, std::default_delete<x666::Literal> >&)>
  43ecd8:	c9                   	leaveq 
  43ecd9:	c3                   	retq   

000000000043ecda <std::unique_ptr<x666::Literal, std::default_delete<x666::Literal> >::get() const>:
      get() const noexcept
  43ecda:	55                   	push   %rbp
  43ecdb:	48 89 e5             	mov    %rsp,%rbp
  43ecde:	48 83 ec 10          	sub    $0x10,%rsp
  43ece2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_t._M_ptr(); }
  43ece6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43ecea:	48 89 c7             	mov    %rax,%rdi
  43eced:	e8 86 17 00 00       	callq  440478 <std::__uniq_ptr_impl<x666::Literal, std::default_delete<x666::Literal> >::_M_ptr() const>
  43ecf2:	c9                   	leaveq 
  43ecf3:	c3                   	retq   

000000000043ecf4 <std::tuple<x666::Expression*, std::default_delete<x666::Expression> >::tuple<x666::Expression*&, std::default_delete<x666::Literal>, true>(x666::Expression*&, std::default_delete<x666::Literal>&&)>:
        constexpr tuple(_U1&& __a1, _U2&& __a2)
  43ecf4:	55                   	push   %rbp
  43ecf5:	48 89 e5             	mov    %rsp,%rbp
  43ecf8:	41 54                	push   %r12
  43ecfa:	53                   	push   %rbx
  43ecfb:	48 83 ec 20          	sub    $0x20,%rsp
  43ecff:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  43ed03:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  43ed07:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
	: _Inherited(std::forward<_U1>(__a1), std::forward<_U2>(__a2)) { }
  43ed0b:	48 8b 5d e8          	mov    -0x18(%rbp),%rbx
  43ed0f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  43ed13:	48 89 c7             	mov    %rax,%rdi
  43ed16:	e8 22 e7 ff ff       	callq  43d43d <std::default_delete<x666::Literal>&& std::forward<std::default_delete<x666::Literal> >(std::remove_reference<std::default_delete<x666::Literal> >::type&)>
  43ed1b:	49 89 c4             	mov    %rax,%r12
  43ed1e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  43ed22:	48 89 c7             	mov    %rax,%rdi
  43ed25:	e8 73 fb ff ff       	callq  43e89d <x666::Expression*& std::forward<x666::Expression*&>(std::remove_reference<x666::Expression*&>::type&)>
  43ed2a:	4c 89 e2             	mov    %r12,%rdx
  43ed2d:	48 89 c6             	mov    %rax,%rsi
  43ed30:	48 89 df             	mov    %rbx,%rdi
  43ed33:	e8 5e 17 00 00       	callq  440496 <std::_Tuple_impl<0ul, x666::Expression*, std::default_delete<x666::Expression> >::_Tuple_impl<x666::Expression*&, std::default_delete<x666::Literal>, void>(x666::Expression*&, std::default_delete<x666::Literal>&&)>
  43ed38:	90                   	nop
  43ed39:	48 83 c4 20          	add    $0x20,%rsp
  43ed3d:	5b                   	pop    %rbx
  43ed3e:	41 5c                	pop    %r12
  43ed40:	5d                   	pop    %rbp
  43ed41:	c3                   	retq   

000000000043ed42 <std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >& std::deque<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > >::emplace_back<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > >(std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&&)>:
      deque<_Tp, _Alloc>::
  43ed42:	55                   	push   %rbp
  43ed43:	48 89 e5             	mov    %rsp,%rbp
  43ed46:	48 83 ec 10          	sub    $0x10,%rsp
  43ed4a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  43ed4e:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	if (this->_M_impl._M_finish._M_cur
  43ed52:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43ed56:	48 8b 50 30          	mov    0x30(%rax),%rdx
	    != this->_M_impl._M_finish._M_last - 1)
  43ed5a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43ed5e:	48 8b 40 40          	mov    0x40(%rax),%rax
  43ed62:	48 83 e8 08          	sub    $0x8,%rax
	if (this->_M_impl._M_finish._M_cur
  43ed66:	48 39 c2             	cmp    %rax,%rdx
  43ed69:	74 3c                	je     43eda7 <std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >& std::deque<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > >::emplace_back<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > >(std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&&)+0x65>
	    _Alloc_traits::construct(this->_M_impl,
  43ed6b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  43ed6f:	48 89 c7             	mov    %rax,%rdi
  43ed72:	e8 cf cc ff ff       	callq  43ba46 <std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&& std::forward<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > >(std::remove_reference<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > >::type&)>
  43ed77:	48 89 c2             	mov    %rax,%rdx
  43ed7a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43ed7e:	48 8b 48 30          	mov    0x30(%rax),%rcx
  43ed82:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43ed86:	48 89 ce             	mov    %rcx,%rsi
  43ed89:	48 89 c7             	mov    %rax,%rdi
  43ed8c:	e8 17 05 00 00       	callq  43f2a8 <void std::allocator_traits<std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > >::construct<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > >(std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > >&, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&&)>
	    ++this->_M_impl._M_finish._M_cur;
  43ed91:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43ed95:	48 8b 40 30          	mov    0x30(%rax),%rax
  43ed99:	48 8d 50 08          	lea    0x8(%rax),%rdx
  43ed9d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43eda1:	48 89 50 30          	mov    %rdx,0x30(%rax)
  43eda5:	eb 1e                	jmp    43edc5 <std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >& std::deque<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > >::emplace_back<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > >(std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&&)+0x83>
	  _M_push_back_aux(std::forward<_Args>(__args)...);
  43eda7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  43edab:	48 89 c7             	mov    %rax,%rdi
  43edae:	e8 93 cc ff ff       	callq  43ba46 <std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&& std::forward<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > >(std::remove_reference<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > >::type&)>
  43edb3:	48 89 c2             	mov    %rax,%rdx
  43edb6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43edba:	48 89 d6             	mov    %rdx,%rsi
  43edbd:	48 89 c7             	mov    %rax,%rdi
  43edc0:	e8 27 17 00 00       	callq  4404ec <void std::deque<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > >::_M_push_back_aux<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > >(std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&&)>
	return back();
  43edc5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43edc9:	48 89 c7             	mov    %rax,%rdi
  43edcc:	e8 bf e8 ff ff       	callq  43d690 <std::deque<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > >::back()>
      }
  43edd1:	c9                   	leaveq 
  43edd2:	c3                   	retq   

000000000043edd3 <void std::allocator_traits<std::allocator<x666::LineInfo> >::construct<x666::LineInfo, x666::LineInfo const&>(std::allocator<x666::LineInfo>&, x666::LineInfo*, x666::LineInfo const&)>:
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
  43edd3:	55                   	push   %rbp
  43edd4:	48 89 e5             	mov    %rsp,%rbp
  43edd7:	48 83 ec 20          	sub    $0x20,%rsp
  43eddb:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  43eddf:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  43ede3:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
  43ede7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  43edeb:	48 89 c7             	mov    %rax,%rdi
  43edee:	e8 ae d5 ff ff       	callq  43c3a1 <x666::LineInfo const& std::forward<x666::LineInfo const&>(std::remove_reference<x666::LineInfo const&>::type&)>
  43edf3:	48 89 c2             	mov    %rax,%rdx
  43edf6:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  43edfa:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43edfe:	48 89 ce             	mov    %rcx,%rsi
  43ee01:	48 89 c7             	mov    %rax,%rdi
  43ee04:	e8 7d 17 00 00       	callq  440586 <void __gnu_cxx::new_allocator<x666::LineInfo>::construct<x666::LineInfo, x666::LineInfo const&>(x666::LineInfo*, x666::LineInfo const&)>
  43ee09:	90                   	nop
  43ee0a:	c9                   	leaveq 
  43ee0b:	c3                   	retq   

000000000043ee0c <void std::deque<x666::LineInfo, std::allocator<x666::LineInfo> >::_M_push_back_aux<x666::LineInfo const&>(x666::LineInfo const&)>:
      deque<_Tp, _Alloc>::
  43ee0c:	55                   	push   %rbp
  43ee0d:	48 89 e5             	mov    %rsp,%rbp
  43ee10:	53                   	push   %rbx
  43ee11:	48 83 ec 18          	sub    $0x18,%rsp
  43ee15:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  43ee19:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	_M_reserve_map_at_back();
  43ee1d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  43ee21:	be 01 00 00 00       	mov    $0x1,%esi
  43ee26:	48 89 c7             	mov    %rax,%rdi
  43ee29:	e8 b6 17 00 00       	callq  4405e4 <std::deque<x666::LineInfo, std::allocator<x666::LineInfo> >::_M_reserve_map_at_back(unsigned long)>
	*(this->_M_impl._M_finish._M_node + 1) = this->_M_allocate_node();
  43ee2e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  43ee32:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  43ee36:	48 8b 52 48          	mov    0x48(%rdx),%rdx
  43ee3a:	48 8d 5a 08          	lea    0x8(%rdx),%rbx
  43ee3e:	48 89 c7             	mov    %rax,%rdi
  43ee41:	e8 00 18 00 00       	callq  440646 <std::_Deque_base<x666::LineInfo, std::allocator<x666::LineInfo> >::_M_allocate_node()>
  43ee46:	48 89 03             	mov    %rax,(%rbx)
	    _Alloc_traits::construct(this->_M_impl,
  43ee49:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  43ee4d:	48 89 c7             	mov    %rax,%rdi
  43ee50:	e8 4c d5 ff ff       	callq  43c3a1 <x666::LineInfo const& std::forward<x666::LineInfo const&>(std::remove_reference<x666::LineInfo const&>::type&)>
  43ee55:	48 89 c2             	mov    %rax,%rdx
  43ee58:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  43ee5c:	48 8b 48 30          	mov    0x30(%rax),%rcx
  43ee60:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  43ee64:	48 89 ce             	mov    %rcx,%rsi
  43ee67:	48 89 c7             	mov    %rax,%rdi
  43ee6a:	e8 64 ff ff ff       	callq  43edd3 <void std::allocator_traits<std::allocator<x666::LineInfo> >::construct<x666::LineInfo, x666::LineInfo const&>(std::allocator<x666::LineInfo>&, x666::LineInfo*, x666::LineInfo const&)>
	    this->_M_impl._M_finish._M_set_node(this->_M_impl._M_finish._M_node
  43ee6f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  43ee73:	48 83 c0 30          	add    $0x30,%rax
  43ee77:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  43ee7b:	48 8b 52 48          	mov    0x48(%rdx),%rdx
  43ee7f:	48 83 c2 08          	add    $0x8,%rdx
  43ee83:	48 89 d6             	mov    %rdx,%rsi
  43ee86:	48 89 c7             	mov    %rax,%rdi
  43ee89:	e8 e2 17 00 00       	callq  440670 <std::_Deque_iterator<x666::LineInfo, x666::LineInfo&, x666::LineInfo*>::_M_set_node(x666::LineInfo**)>
	    this->_M_impl._M_finish._M_cur = this->_M_impl._M_finish._M_first;
  43ee8e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  43ee92:	48 8b 50 38          	mov    0x38(%rax),%rdx
  43ee96:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  43ee9a:	48 89 50 30          	mov    %rdx,0x30(%rax)
      }
  43ee9e:	90                   	nop
  43ee9f:	48 83 c4 18          	add    $0x18,%rsp
  43eea3:	5b                   	pop    %rbx
  43eea4:	5d                   	pop    %rbp
  43eea5:	c3                   	retq   

000000000043eea6 <std::__detail::__variant::_Copy_ctor_base<false, x666::Identifier, x666::IntLiteral, x666::StringLiteral>::_Variant_storage<2ul, x666::StringLiteral>(std::in_place_index_t<2ul>, x666::StringLiteral&&)>:
      using _Base::_Base;
  43eea6:	55                   	push   %rbp
  43eea7:	48 89 e5             	mov    %rsp,%rbp
  43eeaa:	48 83 ec 10          	sub    $0x10,%rsp
  43eeae:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  43eeb2:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  43eeb6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43eeba:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  43eebe:	48 83 ec 08          	sub    $0x8,%rsp
  43eec2:	0f b6 4d 10          	movzbl 0x10(%rbp),%ecx
  43eec6:	51                   	push   %rcx
  43eec7:	48 89 d6             	mov    %rdx,%rsi
  43eeca:	48 89 c7             	mov    %rax,%rdi
  43eecd:	e8 b6 18 00 00       	callq  440788 <std::__detail::__variant::_Variant_storage<false, x666::Identifier, x666::IntLiteral, x666::StringLiteral>::_Variant_storage<2ul, x666::StringLiteral>(std::in_place_index_t<2ul>, x666::StringLiteral&&)>
  43eed2:	48 83 c4 10          	add    $0x10,%rsp
  43eed6:	90                   	nop
  43eed7:	c9                   	leaveq 
  43eed8:	c3                   	retq   
  43eed9:	90                   	nop

000000000043eeda <std::__detail::__variant::_Move_ctor_base<false, x666::Identifier, x666::IntLiteral, x666::StringLiteral>::_Variant_storage<2ul, x666::StringLiteral>(std::in_place_index_t<2ul>, x666::StringLiteral&&)>:
      using _Base::_Base;
  43eeda:	55                   	push   %rbp
  43eedb:	48 89 e5             	mov    %rsp,%rbp
  43eede:	48 83 ec 10          	sub    $0x10,%rsp
  43eee2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  43eee6:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  43eeea:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43eeee:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  43eef2:	48 83 ec 08          	sub    $0x8,%rsp
  43eef6:	0f b6 4d 10          	movzbl 0x10(%rbp),%ecx
  43eefa:	51                   	push   %rcx
  43eefb:	48 89 d6             	mov    %rdx,%rsi
  43eefe:	48 89 c7             	mov    %rax,%rdi
  43ef01:	e8 a0 ff ff ff       	callq  43eea6 <std::__detail::__variant::_Copy_ctor_base<false, x666::Identifier, x666::IntLiteral, x666::StringLiteral>::_Variant_storage<2ul, x666::StringLiteral>(std::in_place_index_t<2ul>, x666::StringLiteral&&)>
  43ef06:	48 83 c4 10          	add    $0x10,%rsp
  43ef0a:	90                   	nop
  43ef0b:	c9                   	leaveq 
  43ef0c:	c3                   	retq   
  43ef0d:	90                   	nop

000000000043ef0e <std::__detail::__variant::_Copy_assign_base<false, x666::Identifier, x666::IntLiteral, x666::StringLiteral>::_Variant_storage<2ul, x666::StringLiteral>(std::in_place_index_t<2ul>, x666::StringLiteral&&)>:
      using _Base::_Base;
  43ef0e:	55                   	push   %rbp
  43ef0f:	48 89 e5             	mov    %rsp,%rbp
  43ef12:	48 83 ec 10          	sub    $0x10,%rsp
  43ef16:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  43ef1a:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  43ef1e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43ef22:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  43ef26:	48 83 ec 08          	sub    $0x8,%rsp
  43ef2a:	0f b6 4d 10          	movzbl 0x10(%rbp),%ecx
  43ef2e:	51                   	push   %rcx
  43ef2f:	48 89 d6             	mov    %rdx,%rsi
  43ef32:	48 89 c7             	mov    %rax,%rdi
  43ef35:	e8 a0 ff ff ff       	callq  43eeda <std::__detail::__variant::_Move_ctor_base<false, x666::Identifier, x666::IntLiteral, x666::StringLiteral>::_Variant_storage<2ul, x666::StringLiteral>(std::in_place_index_t<2ul>, x666::StringLiteral&&)>
  43ef3a:	48 83 c4 10          	add    $0x10,%rsp
  43ef3e:	90                   	nop
  43ef3f:	c9                   	leaveq 
  43ef40:	c3                   	retq   
  43ef41:	90                   	nop

000000000043ef42 <std::__detail::__variant::_Move_assign_base<false, x666::Identifier, x666::IntLiteral, x666::StringLiteral>::_Variant_storage<2ul, x666::StringLiteral>(std::in_place_index_t<2ul>, x666::StringLiteral&&)>:
      using _Base::_Base;
  43ef42:	55                   	push   %rbp
  43ef43:	48 89 e5             	mov    %rsp,%rbp
  43ef46:	48 83 ec 10          	sub    $0x10,%rsp
  43ef4a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  43ef4e:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  43ef52:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43ef56:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  43ef5a:	48 83 ec 08          	sub    $0x8,%rsp
  43ef5e:	0f b6 4d 10          	movzbl 0x10(%rbp),%ecx
  43ef62:	51                   	push   %rcx
  43ef63:	48 89 d6             	mov    %rdx,%rsi
  43ef66:	48 89 c7             	mov    %rax,%rdi
  43ef69:	e8 a0 ff ff ff       	callq  43ef0e <std::__detail::__variant::_Copy_assign_base<false, x666::Identifier, x666::IntLiteral, x666::StringLiteral>::_Variant_storage<2ul, x666::StringLiteral>(std::in_place_index_t<2ul>, x666::StringLiteral&&)>
  43ef6e:	48 83 c4 10          	add    $0x10,%rsp
  43ef72:	90                   	nop
  43ef73:	c9                   	leaveq 
  43ef74:	c3                   	retq   
  43ef75:	90                   	nop

000000000043ef76 <std::__detail::__variant::_Variant_base<x666::Identifier, x666::IntLiteral, x666::StringLiteral>::_Variant_base<2ul, x666::StringLiteral>(std::in_place_index_t<2ul>, x666::StringLiteral&&)>:
	_Variant_base(in_place_index_t<_Np> __i, _Args&&... __args)
  43ef76:	55                   	push   %rbp
  43ef77:	48 89 e5             	mov    %rsp,%rbp
  43ef7a:	41 54                	push   %r12
  43ef7c:	53                   	push   %rbx
  43ef7d:	48 83 ec 10          	sub    $0x10,%rsp
  43ef81:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  43ef85:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	: _Base(__i, std::forward<_Args>(__args)...)
  43ef89:	48 8b 5d e8          	mov    -0x18(%rbp),%rbx
  43ef8d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  43ef91:	48 89 c7             	mov    %rax,%rdi
  43ef94:	e8 88 76 ff ff       	callq  436621 <x666::StringLiteral&& std::forward<x666::StringLiteral>(std::remove_reference<x666::StringLiteral>::type&)>
  43ef99:	48 83 ec 08          	sub    $0x8,%rsp
  43ef9d:	41 54                	push   %r12
  43ef9f:	48 89 c6             	mov    %rax,%rsi
  43efa2:	48 89 df             	mov    %rbx,%rdi
  43efa5:	e8 98 ff ff ff       	callq  43ef42 <std::__detail::__variant::_Move_assign_base<false, x666::Identifier, x666::IntLiteral, x666::StringLiteral>::_Variant_storage<2ul, x666::StringLiteral>(std::in_place_index_t<2ul>, x666::StringLiteral&&)>
  43efaa:	48 83 c4 10          	add    $0x10,%rsp
	{ }
  43efae:	90                   	nop
  43efaf:	48 8d 65 f0          	lea    -0x10(%rbp),%rsp
  43efb3:	5b                   	pop    %rbx
  43efb4:	41 5c                	pop    %r12
  43efb6:	5d                   	pop    %rbp
  43efb7:	c3                   	retq   

000000000043efb8 <std::__detail::__variant::_Copy_ctor_base<false, x666::Identifier, x666::IntLiteral, x666::StringLiteral>::_Variant_storage<1ul, x666::IntLiteral>(std::in_place_index_t<1ul>, x666::IntLiteral&&)>:
      using _Base::_Base;
  43efb8:	55                   	push   %rbp
  43efb9:	48 89 e5             	mov    %rsp,%rbp
  43efbc:	48 83 ec 10          	sub    $0x10,%rsp
  43efc0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  43efc4:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  43efc8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43efcc:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  43efd0:	48 83 ec 08          	sub    $0x8,%rsp
  43efd4:	0f b6 4d 10          	movzbl 0x10(%rbp),%ecx
  43efd8:	51                   	push   %rcx
  43efd9:	48 89 d6             	mov    %rdx,%rsi
  43efdc:	48 89 c7             	mov    %rax,%rdi
  43efdf:	e8 72 18 00 00       	callq  440856 <std::__detail::__variant::_Variant_storage<false, x666::Identifier, x666::IntLiteral, x666::StringLiteral>::_Variant_storage<1ul, x666::IntLiteral>(std::in_place_index_t<1ul>, x666::IntLiteral&&)>
  43efe4:	48 83 c4 10          	add    $0x10,%rsp
  43efe8:	90                   	nop
  43efe9:	c9                   	leaveq 
  43efea:	c3                   	retq   
  43efeb:	90                   	nop

000000000043efec <std::__detail::__variant::_Move_ctor_base<false, x666::Identifier, x666::IntLiteral, x666::StringLiteral>::_Variant_storage<1ul, x666::IntLiteral>(std::in_place_index_t<1ul>, x666::IntLiteral&&)>:
      using _Base::_Base;
  43efec:	55                   	push   %rbp
  43efed:	48 89 e5             	mov    %rsp,%rbp
  43eff0:	48 83 ec 10          	sub    $0x10,%rsp
  43eff4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  43eff8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  43effc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43f000:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  43f004:	48 83 ec 08          	sub    $0x8,%rsp
  43f008:	0f b6 4d 10          	movzbl 0x10(%rbp),%ecx
  43f00c:	51                   	push   %rcx
  43f00d:	48 89 d6             	mov    %rdx,%rsi
  43f010:	48 89 c7             	mov    %rax,%rdi
  43f013:	e8 a0 ff ff ff       	callq  43efb8 <std::__detail::__variant::_Copy_ctor_base<false, x666::Identifier, x666::IntLiteral, x666::StringLiteral>::_Variant_storage<1ul, x666::IntLiteral>(std::in_place_index_t<1ul>, x666::IntLiteral&&)>
  43f018:	48 83 c4 10          	add    $0x10,%rsp
  43f01c:	90                   	nop
  43f01d:	c9                   	leaveq 
  43f01e:	c3                   	retq   
  43f01f:	90                   	nop

000000000043f020 <std::__detail::__variant::_Copy_assign_base<false, x666::Identifier, x666::IntLiteral, x666::StringLiteral>::_Variant_storage<1ul, x666::IntLiteral>(std::in_place_index_t<1ul>, x666::IntLiteral&&)>:
      using _Base::_Base;
  43f020:	55                   	push   %rbp
  43f021:	48 89 e5             	mov    %rsp,%rbp
  43f024:	48 83 ec 10          	sub    $0x10,%rsp
  43f028:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  43f02c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  43f030:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43f034:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  43f038:	48 83 ec 08          	sub    $0x8,%rsp
  43f03c:	0f b6 4d 10          	movzbl 0x10(%rbp),%ecx
  43f040:	51                   	push   %rcx
  43f041:	48 89 d6             	mov    %rdx,%rsi
  43f044:	48 89 c7             	mov    %rax,%rdi
  43f047:	e8 a0 ff ff ff       	callq  43efec <std::__detail::__variant::_Move_ctor_base<false, x666::Identifier, x666::IntLiteral, x666::StringLiteral>::_Variant_storage<1ul, x666::IntLiteral>(std::in_place_index_t<1ul>, x666::IntLiteral&&)>
  43f04c:	48 83 c4 10          	add    $0x10,%rsp
  43f050:	90                   	nop
  43f051:	c9                   	leaveq 
  43f052:	c3                   	retq   
  43f053:	90                   	nop

000000000043f054 <std::__detail::__variant::_Move_assign_base<false, x666::Identifier, x666::IntLiteral, x666::StringLiteral>::_Variant_storage<1ul, x666::IntLiteral>(std::in_place_index_t<1ul>, x666::IntLiteral&&)>:
      using _Base::_Base;
  43f054:	55                   	push   %rbp
  43f055:	48 89 e5             	mov    %rsp,%rbp
  43f058:	48 83 ec 10          	sub    $0x10,%rsp
  43f05c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  43f060:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  43f064:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43f068:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  43f06c:	48 83 ec 08          	sub    $0x8,%rsp
  43f070:	0f b6 4d 10          	movzbl 0x10(%rbp),%ecx
  43f074:	51                   	push   %rcx
  43f075:	48 89 d6             	mov    %rdx,%rsi
  43f078:	48 89 c7             	mov    %rax,%rdi
  43f07b:	e8 a0 ff ff ff       	callq  43f020 <std::__detail::__variant::_Copy_assign_base<false, x666::Identifier, x666::IntLiteral, x666::StringLiteral>::_Variant_storage<1ul, x666::IntLiteral>(std::in_place_index_t<1ul>, x666::IntLiteral&&)>
  43f080:	48 83 c4 10          	add    $0x10,%rsp
  43f084:	90                   	nop
  43f085:	c9                   	leaveq 
  43f086:	c3                   	retq   
  43f087:	90                   	nop

000000000043f088 <std::__detail::__variant::_Variant_base<x666::Identifier, x666::IntLiteral, x666::StringLiteral>::_Variant_base<1ul, x666::IntLiteral>(std::in_place_index_t<1ul>, x666::IntLiteral&&)>:
	_Variant_base(in_place_index_t<_Np> __i, _Args&&... __args)
  43f088:	55                   	push   %rbp
  43f089:	48 89 e5             	mov    %rsp,%rbp
  43f08c:	41 54                	push   %r12
  43f08e:	53                   	push   %rbx
  43f08f:	48 83 ec 10          	sub    $0x10,%rsp
  43f093:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  43f097:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	: _Base(__i, std::forward<_Args>(__args)...)
  43f09b:	48 8b 5d e8          	mov    -0x18(%rbp),%rbx
  43f09f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  43f0a3:	48 89 c7             	mov    %rax,%rdi
  43f0a6:	e8 22 74 ff ff       	callq  4364cd <x666::IntLiteral&& std::forward<x666::IntLiteral>(std::remove_reference<x666::IntLiteral>::type&)>
  43f0ab:	48 83 ec 08          	sub    $0x8,%rsp
  43f0af:	41 54                	push   %r12
  43f0b1:	48 89 c6             	mov    %rax,%rsi
  43f0b4:	48 89 df             	mov    %rbx,%rdi
  43f0b7:	e8 98 ff ff ff       	callq  43f054 <std::__detail::__variant::_Move_assign_base<false, x666::Identifier, x666::IntLiteral, x666::StringLiteral>::_Variant_storage<1ul, x666::IntLiteral>(std::in_place_index_t<1ul>, x666::IntLiteral&&)>
  43f0bc:	48 83 c4 10          	add    $0x10,%rsp
	{ }
  43f0c0:	90                   	nop
  43f0c1:	48 8d 65 f0          	lea    -0x10(%rbp),%rsp
  43f0c5:	5b                   	pop    %rbx
  43f0c6:	41 5c                	pop    %r12
  43f0c8:	5d                   	pop    %rbp
  43f0c9:	c3                   	retq   

000000000043f0ca <bool std::operator==<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*>(std::_Deque_iterator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*> const&, std::_Deque_iterator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*> const&)>:
    operator==(const _Deque_iterator<_Tp, _Ref, _Ptr>& __x,
  43f0ca:	55                   	push   %rbp
  43f0cb:	48 89 e5             	mov    %rsp,%rbp
  43f0ce:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  43f0d2:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    { return __x._M_cur == __y._M_cur; }
  43f0d6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43f0da:	48 8b 10             	mov    (%rax),%rdx
  43f0dd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  43f0e1:	48 8b 00             	mov    (%rax),%rax
  43f0e4:	48 39 c2             	cmp    %rax,%rdx
  43f0e7:	0f 94 c0             	sete   %al
  43f0ea:	5d                   	pop    %rbp
  43f0eb:	c3                   	retq   

000000000043f0ec <std::_Deque_iterator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*>::operator--()>:
      operator--() _GLIBCXX_NOEXCEPT
  43f0ec:	55                   	push   %rbp
  43f0ed:	48 89 e5             	mov    %rsp,%rbp
  43f0f0:	48 83 ec 10          	sub    $0x10,%rsp
  43f0f4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	if (_M_cur == _M_first)
  43f0f8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43f0fc:	48 8b 10             	mov    (%rax),%rdx
  43f0ff:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43f103:	48 8b 40 08          	mov    0x8(%rax),%rax
  43f107:	48 39 c2             	cmp    %rax,%rdx
  43f10a:	75 2a                	jne    43f136 <std::_Deque_iterator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*>::operator--()+0x4a>
	    _M_set_node(_M_node - 1);
  43f10c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43f110:	48 8b 40 18          	mov    0x18(%rax),%rax
  43f114:	48 8d 50 f8          	lea    -0x8(%rax),%rdx
  43f118:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43f11c:	48 89 d6             	mov    %rdx,%rsi
  43f11f:	48 89 c7             	mov    %rax,%rdi
  43f122:	e8 79 17 00 00       	callq  4408a0 <std::_Deque_iterator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*>::_M_set_node(std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >**)>
	    _M_cur = _M_last;
  43f127:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43f12b:	48 8b 50 10          	mov    0x10(%rax),%rdx
  43f12f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43f133:	48 89 10             	mov    %rdx,(%rax)
	--_M_cur;
  43f136:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43f13a:	48 8b 00             	mov    (%rax),%rax
  43f13d:	48 8d 50 f8          	lea    -0x8(%rax),%rdx
  43f141:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43f145:	48 89 10             	mov    %rdx,(%rax)
	return *this;
  43f148:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
      }
  43f14c:	c9                   	leaveq 
  43f14d:	c3                   	retq   

000000000043f14e <std::_Deque_iterator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*>::operator*() const>:
      operator*() const _GLIBCXX_NOEXCEPT
  43f14e:	55                   	push   %rbp
  43f14f:	48 89 e5             	mov    %rsp,%rbp
  43f152:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return *_M_cur; }
  43f156:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43f15a:	48 8b 00             	mov    (%rax),%rax
  43f15d:	5d                   	pop    %rbp
  43f15e:	c3                   	retq   

000000000043f15f <void std::allocator_traits<std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > >::destroy<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > >(std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > >&, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*)>:
	destroy(allocator_type& __a, _Up* __p)
  43f15f:	55                   	push   %rbp
  43f160:	48 89 e5             	mov    %rsp,%rbp
  43f163:	48 83 ec 10          	sub    $0x10,%rsp
  43f167:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  43f16b:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	{ __a.destroy(__p); }
  43f16f:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  43f173:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43f177:	48 89 d6             	mov    %rdx,%rsi
  43f17a:	48 89 c7             	mov    %rax,%rdi
  43f17d:	e8 70 17 00 00       	callq  4408f2 <void __gnu_cxx::new_allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > >::destroy<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > >(std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*)>
  43f182:	90                   	nop
  43f183:	c9                   	leaveq 
  43f184:	c3                   	retq   
  43f185:	90                   	nop

000000000043f186 <std::deque<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > >::_M_pop_back_aux()>:
    void deque<_Tp, _Alloc>::
  43f186:	55                   	push   %rbp
  43f187:	48 89 e5             	mov    %rsp,%rbp
  43f18a:	53                   	push   %rbx
  43f18b:	48 83 ec 18          	sub    $0x18,%rsp
  43f18f:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
      _M_deallocate_node(this->_M_impl._M_finish._M_first);
  43f193:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  43f197:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  43f19b:	48 8b 52 38          	mov    0x38(%rdx),%rdx
  43f19f:	48 89 d6             	mov    %rdx,%rsi
  43f1a2:	48 89 c7             	mov    %rax,%rdi
  43f1a5:	e8 96 4c ff ff       	callq  433e40 <std::_Deque_base<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > >::_M_deallocate_node(std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*)>
      this->_M_impl._M_finish._M_set_node(this->_M_impl._M_finish._M_node - 1);
  43f1aa:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  43f1ae:	48 83 c0 30          	add    $0x30,%rax
  43f1b2:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  43f1b6:	48 8b 52 48          	mov    0x48(%rdx),%rdx
  43f1ba:	48 83 ea 08          	sub    $0x8,%rdx
  43f1be:	48 89 d6             	mov    %rdx,%rsi
  43f1c1:	48 89 c7             	mov    %rax,%rdi
  43f1c4:	e8 d7 16 00 00       	callq  4408a0 <std::_Deque_iterator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*>::_M_set_node(std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >**)>
      this->_M_impl._M_finish._M_cur = this->_M_impl._M_finish._M_last - 1;
  43f1c9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  43f1cd:	48 8b 40 40          	mov    0x40(%rax),%rax
  43f1d1:	48 8d 50 f8          	lea    -0x8(%rax),%rdx
  43f1d5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  43f1d9:	48 89 50 30          	mov    %rdx,0x30(%rax)
      _Alloc_traits::destroy(_M_get_Tp_allocator(),
  43f1dd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  43f1e1:	48 8b 58 30          	mov    0x30(%rax),%rbx
  43f1e5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  43f1e9:	48 89 c7             	mov    %rax,%rdi
  43f1ec:	e8 07 42 ff ff       	callq  4333f8 <std::_Deque_base<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > >::_M_get_Tp_allocator()>
  43f1f1:	48 89 de             	mov    %rbx,%rsi
  43f1f4:	48 89 c7             	mov    %rax,%rdi
  43f1f7:	e8 63 ff ff ff       	callq  43f15f <void std::allocator_traits<std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > >::destroy<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > >(std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > >&, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*)>
    }
  43f1fc:	90                   	nop
  43f1fd:	48 83 c4 18          	add    $0x18,%rsp
  43f201:	5b                   	pop    %rbx
  43f202:	5d                   	pop    %rbp
  43f203:	c3                   	retq   

000000000043f204 <void std::allocator_traits<std::allocator<x666::LineInfo> >::destroy<x666::LineInfo>(std::allocator<x666::LineInfo>&, x666::LineInfo*)>:
	destroy(allocator_type& __a, _Up* __p)
  43f204:	55                   	push   %rbp
  43f205:	48 89 e5             	mov    %rsp,%rbp
  43f208:	48 83 ec 10          	sub    $0x10,%rsp
  43f20c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  43f210:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	{ __a.destroy(__p); }
  43f214:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  43f218:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43f21c:	48 89 d6             	mov    %rdx,%rsi
  43f21f:	48 89 c7             	mov    %rax,%rdi
  43f222:	e8 eb 16 00 00       	callq  440912 <void __gnu_cxx::new_allocator<x666::LineInfo>::destroy<x666::LineInfo>(x666::LineInfo*)>
  43f227:	90                   	nop
  43f228:	c9                   	leaveq 
  43f229:	c3                   	retq   

000000000043f22a <std::deque<x666::LineInfo, std::allocator<x666::LineInfo> >::_M_pop_back_aux()>:
    void deque<_Tp, _Alloc>::
  43f22a:	55                   	push   %rbp
  43f22b:	48 89 e5             	mov    %rsp,%rbp
  43f22e:	53                   	push   %rbx
  43f22f:	48 83 ec 18          	sub    $0x18,%rsp
  43f233:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
      _M_deallocate_node(this->_M_impl._M_finish._M_first);
  43f237:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  43f23b:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  43f23f:	48 8b 52 38          	mov    0x38(%rdx),%rdx
  43f243:	48 89 d6             	mov    %rdx,%rsi
  43f246:	48 89 c7             	mov    %rax,%rdi
  43f249:	e8 c0 4c ff ff       	callq  433f0e <std::_Deque_base<x666::LineInfo, std::allocator<x666::LineInfo> >::_M_deallocate_node(x666::LineInfo*)>
      this->_M_impl._M_finish._M_set_node(this->_M_impl._M_finish._M_node - 1);
  43f24e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  43f252:	48 83 c0 30          	add    $0x30,%rax
  43f256:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  43f25a:	48 8b 52 48          	mov    0x48(%rdx),%rdx
  43f25e:	48 83 ea 08          	sub    $0x8,%rdx
  43f262:	48 89 d6             	mov    %rdx,%rsi
  43f265:	48 89 c7             	mov    %rax,%rdi
  43f268:	e8 03 14 00 00       	callq  440670 <std::_Deque_iterator<x666::LineInfo, x666::LineInfo&, x666::LineInfo*>::_M_set_node(x666::LineInfo**)>
      this->_M_impl._M_finish._M_cur = this->_M_impl._M_finish._M_last - 1;
  43f26d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  43f271:	48 8b 40 40          	mov    0x40(%rax),%rax
  43f275:	48 8d 50 e0          	lea    -0x20(%rax),%rdx
  43f279:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  43f27d:	48 89 50 30          	mov    %rdx,0x30(%rax)
      _Alloc_traits::destroy(_M_get_Tp_allocator(),
  43f281:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  43f285:	48 8b 58 30          	mov    0x30(%rax),%rbx
  43f289:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  43f28d:	48 89 c7             	mov    %rax,%rdi
  43f290:	e8 a9 42 ff ff       	callq  43353e <std::_Deque_base<x666::LineInfo, std::allocator<x666::LineInfo> >::_M_get_Tp_allocator()>
  43f295:	48 89 de             	mov    %rbx,%rsi
  43f298:	48 89 c7             	mov    %rax,%rdi
  43f29b:	e8 64 ff ff ff       	callq  43f204 <void std::allocator_traits<std::allocator<x666::LineInfo> >::destroy<x666::LineInfo>(std::allocator<x666::LineInfo>&, x666::LineInfo*)>
    }
  43f2a0:	90                   	nop
  43f2a1:	48 83 c4 18          	add    $0x18,%rsp
  43f2a5:	5b                   	pop    %rbx
  43f2a6:	5d                   	pop    %rbp
  43f2a7:	c3                   	retq   

000000000043f2a8 <void std::allocator_traits<std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > >::construct<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > >(std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > >&, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&&)>:
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
  43f2a8:	55                   	push   %rbp
  43f2a9:	48 89 e5             	mov    %rsp,%rbp
  43f2ac:	48 83 ec 20          	sub    $0x20,%rsp
  43f2b0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  43f2b4:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  43f2b8:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
  43f2bc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  43f2c0:	48 89 c7             	mov    %rax,%rdi
  43f2c3:	e8 7e c7 ff ff       	callq  43ba46 <std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&& std::forward<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > >(std::remove_reference<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > >::type&)>
  43f2c8:	48 89 c2             	mov    %rax,%rdx
  43f2cb:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  43f2cf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43f2d3:	48 89 ce             	mov    %rcx,%rsi
  43f2d6:	48 89 c7             	mov    %rax,%rdi
  43f2d9:	e8 44 16 00 00       	callq  440922 <void __gnu_cxx::new_allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > >::construct<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > >(std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&&)>
  43f2de:	90                   	nop
  43f2df:	c9                   	leaveq 
  43f2e0:	c3                   	retq   
  43f2e1:	90                   	nop

000000000043f2e2 <void std::vector<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > >::_M_realloc_insert<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > >(__gnu_cxx::__normal_iterator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*, std::vector<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > > >, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&&)>:
      vector<_Tp, _Alloc>::
  43f2e2:	55                   	push   %rbp
  43f2e3:	48 89 e5             	mov    %rsp,%rbp
  43f2e6:	41 54                	push   %r12
  43f2e8:	53                   	push   %rbx
  43f2e9:	48 83 ec 50          	sub    $0x50,%rsp
  43f2ed:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
  43f2f1:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
  43f2f5:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
      const size_type __len =
  43f2f9:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  43f2fd:	ba 64 47 44 00       	mov    $0x444764,%edx
  43f302:	be 01 00 00 00       	mov    $0x1,%esi
  43f307:	48 89 c7             	mov    %rax,%rdi
  43f30a:	e8 5b 16 00 00       	callq  44096a <std::vector<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > >::_M_check_len(unsigned long, char const*) const>
  43f30f:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
      const size_type __elems_before = __position - begin();
  43f313:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  43f317:	48 89 c7             	mov    %rax,%rdi
  43f31a:	e8 59 3d ff ff       	callq  433078 <std::vector<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > >::begin()>
  43f31f:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  43f323:	48 8d 55 c8          	lea    -0x38(%rbp),%rdx
  43f327:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
  43f32b:	48 89 d6             	mov    %rdx,%rsi
  43f32e:	48 89 c7             	mov    %rax,%rdi
  43f331:	e8 fd 16 00 00       	callq  440a33 <__gnu_cxx::__normal_iterator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*, std::vector<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > > >::difference_type __gnu_cxx::operator-<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*, std::vector<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > > >(__gnu_cxx::__normal_iterator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*, std::vector<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > > > const&, __gnu_cxx::__normal_iterator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*, std::vector<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > > > const&)>
  43f336:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
      pointer __new_start(this->_M_allocate(__len));
  43f33a:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  43f33e:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  43f342:	48 89 d6             	mov    %rdx,%rsi
  43f345:	48 89 c7             	mov    %rax,%rdi
  43f348:	e8 29 17 00 00       	callq  440a76 <std::_Vector_base<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > >::_M_allocate(unsigned long)>
  43f34d:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
      pointer __new_finish(__new_start);
  43f351:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  43f355:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	  _Alloc_traits::construct(this->_M_impl,
  43f359:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  43f35d:	48 89 c7             	mov    %rax,%rdi
  43f360:	e8 e1 c6 ff ff       	callq  43ba46 <std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&& std::forward<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > >(std::remove_reference<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > >::type&)>
  43f365:	48 89 c6             	mov    %rax,%rsi
				   __new_start + __elems_before,
  43f368:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  43f36c:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  43f373:	00 
	  _Alloc_traits::construct(this->_M_impl,
  43f374:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  43f378:	48 8d 0c 02          	lea    (%rdx,%rax,1),%rcx
  43f37c:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  43f380:	48 89 f2             	mov    %rsi,%rdx
  43f383:	48 89 ce             	mov    %rcx,%rsi
  43f386:	48 89 c7             	mov    %rax,%rdi
  43f389:	e8 1a ff ff ff       	callq  43f2a8 <void std::allocator_traits<std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > >::construct<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > >(std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > >&, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&&)>
	  __new_finish = pointer();
  43f38e:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  43f395:	00 
	     __new_start, _M_get_Tp_allocator());
  43f396:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  43f39a:	48 89 c7             	mov    %rax,%rdi
  43f39d:	e8 3e 3f ff ff       	callq  4332e0 <std::_Vector_base<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > >::_M_get_Tp_allocator()>
  43f3a2:	48 89 c3             	mov    %rax,%rbx
	    (this->_M_impl._M_start, __position.base(),
  43f3a5:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
  43f3a9:	48 89 c7             	mov    %rax,%rdi
  43f3ac:	e8 2b 44 ff ff       	callq  4337dc <__gnu_cxx::__normal_iterator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*, std::vector<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > > >::base() const>
  43f3b1:	48 8b 30             	mov    (%rax),%rsi
  43f3b4:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  43f3b8:	48 8b 00             	mov    (%rax),%rax
	  __new_finish
  43f3bb:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  43f3bf:	48 89 d9             	mov    %rbx,%rcx
  43f3c2:	48 89 c7             	mov    %rax,%rdi
  43f3c5:	e8 04 17 00 00       	callq  440ace <std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >* std::__uninitialized_move_if_noexcept_a<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*, std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > >(std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*, std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > >&)>
  43f3ca:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	  ++__new_finish;
  43f3ce:	48 83 45 e8 08       	addq   $0x8,-0x18(%rbp)
	     __new_finish, _M_get_Tp_allocator());
  43f3d3:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  43f3d7:	48 89 c7             	mov    %rax,%rdi
  43f3da:	e8 01 3f ff ff       	callq  4332e0 <std::_Vector_base<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > >::_M_get_Tp_allocator()>
  43f3df:	49 89 c4             	mov    %rax,%r12
	    (__position.base(), this->_M_impl._M_finish,
  43f3e2:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  43f3e6:	48 8b 58 08          	mov    0x8(%rax),%rbx
  43f3ea:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
  43f3ee:	48 89 c7             	mov    %rax,%rdi
  43f3f1:	e8 e6 43 ff ff       	callq  4337dc <__gnu_cxx::__normal_iterator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*, std::vector<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > > >::base() const>
  43f3f6:	48 8b 00             	mov    (%rax),%rax
	  __new_finish
  43f3f9:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  43f3fd:	4c 89 e1             	mov    %r12,%rcx
  43f400:	48 89 de             	mov    %rbx,%rsi
  43f403:	48 89 c7             	mov    %rax,%rdi
  43f406:	e8 c3 16 00 00       	callq  440ace <std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >* std::__uninitialized_move_if_noexcept_a<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*, std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > >(std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*, std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > >&)>
  43f40b:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
		    _M_get_Tp_allocator());
  43f40f:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  43f413:	48 89 c7             	mov    %rax,%rdi
  43f416:	e8 c5 3e ff ff       	callq  4332e0 <std::_Vector_base<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > >::_M_get_Tp_allocator()>
  43f41b:	48 89 c2             	mov    %rax,%rdx
      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
  43f41e:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  43f422:	48 8b 48 08          	mov    0x8(%rax),%rcx
  43f426:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  43f42a:	48 8b 00             	mov    (%rax),%rax
  43f42d:	48 89 ce             	mov    %rcx,%rsi
  43f430:	48 89 c7             	mov    %rax,%rdi
  43f433:	e8 b6 3e ff ff       	callq  4332ee <void std::_Destroy<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > >(std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*, std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > >&)>
      _M_deallocate(this->_M_impl._M_start,
  43f438:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
		    this->_M_impl._M_end_of_storage - this->_M_impl._M_start);
  43f43c:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  43f440:	48 8b 52 10          	mov    0x10(%rdx),%rdx
  43f444:	48 89 d1             	mov    %rdx,%rcx
  43f447:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  43f44b:	48 8b 12             	mov    (%rdx),%rdx
  43f44e:	48 29 d1             	sub    %rdx,%rcx
  43f451:	48 89 ca             	mov    %rcx,%rdx
  43f454:	48 c1 fa 03          	sar    $0x3,%rdx
      _M_deallocate(this->_M_impl._M_start,
  43f458:	48 89 d6             	mov    %rdx,%rsi
  43f45b:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  43f45f:	48 8b 0a             	mov    (%rdx),%rcx
  43f462:	48 89 f2             	mov    %rsi,%rdx
  43f465:	48 89 ce             	mov    %rcx,%rsi
  43f468:	48 89 c7             	mov    %rax,%rdi
  43f46b:	e8 10 44 ff ff       	callq  433880 <std::_Vector_base<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > >::_M_deallocate(std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*, unsigned long)>
      this->_M_impl._M_start = __new_start;
  43f470:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  43f474:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  43f478:	48 89 10             	mov    %rdx,(%rax)
      this->_M_impl._M_finish = __new_finish;
  43f47b:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  43f47f:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  43f483:	48 89 50 08          	mov    %rdx,0x8(%rax)
      this->_M_impl._M_end_of_storage = __new_start + __len;
  43f487:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  43f48b:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  43f492:	00 
  43f493:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  43f497:	48 01 c2             	add    %rax,%rdx
  43f49a:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  43f49e:	48 89 50 10          	mov    %rdx,0x10(%rax)
    }
  43f4a2:	e9 84 00 00 00       	jmpq   43f52b <void std::vector<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > >::_M_realloc_insert<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > >(__gnu_cxx::__normal_iterator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*, std::vector<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > > >, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&&)+0x249>
      __catch(...)
  43f4a7:	48 89 c7             	mov    %rax,%rdi
  43f4aa:	e8 31 32 ff ff       	callq  4326e0 <__cxa_begin_catch@plt>
	  if (!__new_finish)
  43f4af:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  43f4b4:	75 24                	jne    43f4da <void std::vector<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > >::_M_realloc_insert<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > >(__gnu_cxx::__normal_iterator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*, std::vector<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > > >, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&&)+0x1f8>
				   __new_start + __elems_before);
  43f4b6:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  43f4ba:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  43f4c1:	00 
	    _Alloc_traits::destroy(this->_M_impl,
  43f4c2:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  43f4c6:	48 01 c2             	add    %rax,%rdx
  43f4c9:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  43f4cd:	48 89 d6             	mov    %rdx,%rsi
  43f4d0:	48 89 c7             	mov    %rax,%rdi
  43f4d3:	e8 87 fc ff ff       	callq  43f15f <void std::allocator_traits<std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > >::destroy<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > >(std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > >&, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*)>
  43f4d8:	eb 22                	jmp    43f4fc <void std::vector<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > >::_M_realloc_insert<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > >(__gnu_cxx::__normal_iterator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*, std::vector<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > > >, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&&)+0x21a>
	    std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator());
  43f4da:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  43f4de:	48 89 c7             	mov    %rax,%rdi
  43f4e1:	e8 fa 3d ff ff       	callq  4332e0 <std::_Vector_base<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > >::_M_get_Tp_allocator()>
  43f4e6:	48 89 c2             	mov    %rax,%rdx
  43f4e9:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  43f4ed:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  43f4f1:	48 89 ce             	mov    %rcx,%rsi
  43f4f4:	48 89 c7             	mov    %rax,%rdi
  43f4f7:	e8 f2 3d ff ff       	callq  4332ee <void std::_Destroy<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > >(std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*, std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > >&)>
	  _M_deallocate(__new_start, __len);
  43f4fc:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  43f500:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  43f504:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
  43f508:	48 89 ce             	mov    %rcx,%rsi
  43f50b:	48 89 c7             	mov    %rax,%rdi
  43f50e:	e8 6d 43 ff ff       	callq  433880 <std::_Vector_base<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > >::_M_deallocate(std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*, unsigned long)>
	  __throw_exception_again;
  43f513:	e8 68 33 ff ff       	callq  432880 <__cxa_rethrow@plt>
  43f518:	48 89 c3             	mov    %rax,%rbx
      __catch(...)
  43f51b:	e8 a0 33 ff ff       	callq  4328c0 <__cxa_end_catch@plt>
  43f520:	48 89 d8             	mov    %rbx,%rax
  43f523:	48 89 c7             	mov    %rax,%rdi
  43f526:	e8 e5 33 ff ff       	callq  432910 <_Unwind_Resume@plt>
    }
  43f52b:	48 83 c4 50          	add    $0x50,%rsp
  43f52f:	5b                   	pop    %rbx
  43f530:	41 5c                	pop    %r12
  43f532:	5d                   	pop    %rbp
  43f533:	c3                   	retq   

000000000043f534 <std::vector<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > >::back()>:
      back() _GLIBCXX_NOEXCEPT
  43f534:	55                   	push   %rbp
  43f535:	48 89 e5             	mov    %rsp,%rbp
  43f538:	48 83 ec 20          	sub    $0x20,%rsp
  43f53c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
	return *(end() - 1);
  43f540:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  43f544:	48 89 c7             	mov    %rax,%rdi
  43f547:	e8 52 3b ff ff       	callq  43309e <std::vector<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > >::end()>
  43f54c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  43f550:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
  43f554:	be 01 00 00 00       	mov    $0x1,%esi
  43f559:	48 89 c7             	mov    %rax,%rdi
  43f55c:	e8 c1 15 00 00       	callq  440b22 <__gnu_cxx::__normal_iterator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*, std::vector<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > > >::operator-(long) const>
  43f561:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  43f565:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
  43f569:	48 89 c7             	mov    %rax,%rdi
  43f56c:	e8 b3 3b ff ff       	callq  433124 <__gnu_cxx::__normal_iterator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*, std::vector<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > > >::operator*() const>
      }
  43f571:	c9                   	leaveq 
  43f572:	c3                   	retq   
  43f573:	90                   	nop

000000000043f574 <void __gnu_cxx::new_allocator<x666::LexError>::construct<x666::LexError, x666::LexErrorCode, x666::LineInfo const&>(x666::LexError*, x666::LexErrorCode&&, x666::LineInfo const&)>:

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
  43f574:	55                   	push   %rbp
  43f575:	48 89 e5             	mov    %rsp,%rbp
  43f578:	41 54                	push   %r12
  43f57a:	53                   	push   %rbx
  43f57b:	48 83 ec 20          	sub    $0x20,%rsp
  43f57f:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  43f583:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  43f587:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  43f58b:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
  43f58f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  43f593:	48 89 c7             	mov    %rax,%rdi
  43f596:	e8 f8 cd ff ff       	callq  43c393 <x666::LexErrorCode&& std::forward<x666::LexErrorCode>(std::remove_reference<x666::LexErrorCode>::type&)>
  43f59b:	8b 18                	mov    (%rax),%ebx
  43f59d:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  43f5a1:	48 89 c7             	mov    %rax,%rdi
  43f5a4:	e8 f8 cd ff ff       	callq  43c3a1 <x666::LineInfo const& std::forward<x666::LineInfo const&>(std::remove_reference<x666::LineInfo const&>::type&)>
  43f5a9:	49 89 c4             	mov    %rax,%r12
  43f5ac:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  43f5b0:	48 89 c6             	mov    %rax,%rsi
  43f5b3:	bf 28 00 00 00       	mov    $0x28,%edi
  43f5b8:	e8 cf 65 ff ff       	callq  435b8c <operator new(unsigned long, void*)>
  43f5bd:	4c 89 e2             	mov    %r12,%rdx
  43f5c0:	89 de                	mov    %ebx,%esi
  43f5c2:	48 89 c7             	mov    %rax,%rdi
  43f5c5:	e8 ac 66 ff ff       	callq  435c76 <x666::LexError::LexError(x666::LexErrorCode, x666::LineInfo const&)>
  43f5ca:	90                   	nop
  43f5cb:	48 83 c4 20          	add    $0x20,%rsp
  43f5cf:	5b                   	pop    %rbx
  43f5d0:	41 5c                	pop    %r12
  43f5d2:	5d                   	pop    %rbp
  43f5d3:	c3                   	retq   

000000000043f5d4 <std::vector<x666::LexError, std::allocator<x666::LexError> >::_M_check_len(unsigned long, char const*) const>:
      { return _M_insert_rval(__position, std::move(__v)); }
#endif

      // Called by _M_fill_insert, _M_insert_aux etc.
      size_type
      _M_check_len(size_type __n, const char* __s) const
  43f5d4:	55                   	push   %rbp
  43f5d5:	48 89 e5             	mov    %rsp,%rbp
  43f5d8:	53                   	push   %rbx
  43f5d9:	48 83 ec 38          	sub    $0x38,%rsp
  43f5dd:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  43f5e1:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  43f5e5:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
      {
	if (max_size() - size() < __n)
  43f5e9:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  43f5ed:	48 89 c7             	mov    %rax,%rdi
  43f5f0:	e8 6f 15 00 00       	callq  440b64 <std::vector<x666::LexError, std::allocator<x666::LexError> >::max_size() const>
  43f5f5:	48 89 c3             	mov    %rax,%rbx
  43f5f8:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  43f5fc:	48 89 c7             	mov    %rax,%rdi
  43f5ff:	e8 82 15 00 00       	callq  440b86 <std::vector<x666::LexError, std::allocator<x666::LexError> >::size() const>
  43f604:	48 29 c3             	sub    %rax,%rbx
  43f607:	48 89 da             	mov    %rbx,%rdx
  43f60a:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  43f60e:	48 39 c2             	cmp    %rax,%rdx
  43f611:	0f 92 c0             	setb   %al
  43f614:	84 c0                	test   %al,%al
  43f616:	74 0c                	je     43f624 <std::vector<x666::LexError, std::allocator<x666::LexError> >::_M_check_len(unsigned long, char const*) const+0x50>
	  __throw_length_error(__N(__s));
  43f618:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  43f61c:	48 89 c7             	mov    %rax,%rdi
  43f61f:	e8 ec 30 ff ff       	callq  432710 <std::__throw_length_error(char const*)@plt>

	const size_type __len = size() + std::max(size(), __n);
  43f624:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  43f628:	48 89 c7             	mov    %rax,%rdi
  43f62b:	e8 56 15 00 00       	callq  440b86 <std::vector<x666::LexError, std::allocator<x666::LexError> >::size() const>
  43f630:	48 89 c3             	mov    %rax,%rbx
  43f633:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  43f637:	48 89 c7             	mov    %rax,%rdi
  43f63a:	e8 47 15 00 00       	callq  440b86 <std::vector<x666::LexError, std::allocator<x666::LexError> >::size() const>
  43f63f:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  43f643:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
  43f647:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  43f64b:	48 89 d6             	mov    %rdx,%rsi
  43f64e:	48 89 c7             	mov    %rax,%rdi
  43f651:	e8 67 15 00 00       	callq  440bbd <unsigned long const& std::max<unsigned long>(unsigned long const&, unsigned long const&)>
  43f656:	48 8b 00             	mov    (%rax),%rax
  43f659:	48 01 d8             	add    %rbx,%rax
  43f65c:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	return (__len < size() || __len > max_size()) ? max_size() : __len;
  43f660:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  43f664:	48 89 c7             	mov    %rax,%rdi
  43f667:	e8 1a 15 00 00       	callq  440b86 <std::vector<x666::LexError, std::allocator<x666::LexError> >::size() const>
  43f66c:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
  43f670:	72 12                	jb     43f684 <std::vector<x666::LexError, std::allocator<x666::LexError> >::_M_check_len(unsigned long, char const*) const+0xb0>
  43f672:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  43f676:	48 89 c7             	mov    %rax,%rdi
  43f679:	e8 e6 14 00 00       	callq  440b64 <std::vector<x666::LexError, std::allocator<x666::LexError> >::max_size() const>
  43f67e:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
  43f682:	76 0e                	jbe    43f692 <std::vector<x666::LexError, std::allocator<x666::LexError> >::_M_check_len(unsigned long, char const*) const+0xbe>
  43f684:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  43f688:	48 89 c7             	mov    %rax,%rdi
  43f68b:	e8 d4 14 00 00       	callq  440b64 <std::vector<x666::LexError, std::allocator<x666::LexError> >::max_size() const>
  43f690:	eb 04                	jmp    43f696 <std::vector<x666::LexError, std::allocator<x666::LexError> >::_M_check_len(unsigned long, char const*) const+0xc2>
  43f692:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
      }
  43f696:	48 83 c4 38          	add    $0x38,%rsp
  43f69a:	5b                   	pop    %rbx
  43f69b:	5d                   	pop    %rbp
  43f69c:	c3                   	retq   

000000000043f69d <__gnu_cxx::__normal_iterator<x666::LexError*, std::vector<x666::LexError, std::allocator<x666::LexError> > >::difference_type __gnu_cxx::operator-<x666::LexError*, std::vector<x666::LexError, std::allocator<x666::LexError> > >(__gnu_cxx::__normal_iterator<x666::LexError*, std::vector<x666::LexError, std::allocator<x666::LexError> > > const&, __gnu_cxx::__normal_iterator<x666::LexError*, std::vector<x666::LexError, std::allocator<x666::LexError> > > const&)>:
#endif
    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
  43f69d:	55                   	push   %rbp
  43f69e:	48 89 e5             	mov    %rsp,%rbp
  43f6a1:	53                   	push   %rbx
  43f6a2:	48 83 ec 18          	sub    $0x18,%rsp
  43f6a6:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  43f6aa:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
  43f6ae:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  43f6b2:	48 89 c7             	mov    %rax,%rdi
  43f6b5:	e8 68 41 ff ff       	callq  433822 <__gnu_cxx::__normal_iterator<x666::LexError*, std::vector<x666::LexError, std::allocator<x666::LexError> > >::base() const>
  43f6ba:	48 8b 00             	mov    (%rax),%rax
  43f6bd:	48 89 c3             	mov    %rax,%rbx
  43f6c0:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  43f6c4:	48 89 c7             	mov    %rax,%rdi
  43f6c7:	e8 56 41 ff ff       	callq  433822 <__gnu_cxx::__normal_iterator<x666::LexError*, std::vector<x666::LexError, std::allocator<x666::LexError> > >::base() const>
  43f6cc:	48 8b 00             	mov    (%rax),%rax
  43f6cf:	48 29 c3             	sub    %rax,%rbx
  43f6d2:	48 89 d8             	mov    %rbx,%rax
  43f6d5:	48 c1 f8 03          	sar    $0x3,%rax
  43f6d9:	48 89 c2             	mov    %rax,%rdx
  43f6dc:	48 b8 cd cc cc cc cc 	movabs $0xcccccccccccccccd,%rax
  43f6e3:	cc cc cc 
  43f6e6:	48 0f af c2          	imul   %rdx,%rax
  43f6ea:	48 83 c4 18          	add    $0x18,%rsp
  43f6ee:	5b                   	pop    %rbx
  43f6ef:	5d                   	pop    %rbp
  43f6f0:	c3                   	retq   
  43f6f1:	90                   	nop

000000000043f6f2 <std::_Vector_base<x666::LexError, std::allocator<x666::LexError> >::_M_allocate(unsigned long)>:
      _M_allocate(size_t __n)
  43f6f2:	55                   	push   %rbp
  43f6f3:	48 89 e5             	mov    %rsp,%rbp
  43f6f6:	48 83 ec 10          	sub    $0x10,%rsp
  43f6fa:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  43f6fe:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
  43f702:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
  43f707:	74 15                	je     43f71e <std::_Vector_base<x666::LexError, std::allocator<x666::LexError> >::_M_allocate(unsigned long)+0x2c>
  43f709:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43f70d:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  43f711:	48 89 d6             	mov    %rdx,%rsi
  43f714:	48 89 c7             	mov    %rax,%rdi
  43f717:	e8 cc 14 00 00       	callq  440be8 <std::allocator_traits<std::allocator<x666::LexError> >::allocate(std::allocator<x666::LexError>&, unsigned long)>
  43f71c:	eb 05                	jmp    43f723 <std::_Vector_base<x666::LexError, std::allocator<x666::LexError> >::_M_allocate(unsigned long)+0x31>
  43f71e:	b8 00 00 00 00       	mov    $0x0,%eax
      }
  43f723:	c9                   	leaveq 
  43f724:	c3                   	retq   

000000000043f725 <std::move_iterator<x666::LexError*> std::__make_move_if_noexcept_iterator<x666::LexError, std::move_iterator<x666::LexError*> >(x666::LexError*)>:
  // returning a constant iterator when we don't want to move.
  template<typename _Tp, typename _ReturnType
    = typename conditional<__move_if_noexcept_cond<_Tp>::value,
			   const _Tp*, move_iterator<_Tp*>>::type>
    inline _GLIBCXX17_CONSTEXPR _ReturnType
    __make_move_if_noexcept_iterator(_Tp* __i)
  43f725:	55                   	push   %rbp
  43f726:	48 89 e5             	mov    %rsp,%rbp
  43f729:	48 83 ec 20          	sub    $0x20,%rsp
  43f72d:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    { return _ReturnType(__i); }
  43f731:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  43f735:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
  43f739:	48 89 d6             	mov    %rdx,%rsi
  43f73c:	48 89 c7             	mov    %rax,%rdi
  43f73f:	e8 ce 14 00 00       	callq  440c12 <std::move_iterator<x666::LexError*>::move_iterator(x666::LexError*)>
  43f744:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43f748:	c9                   	leaveq 
  43f749:	c3                   	retq   

000000000043f74a <x666::LexError* std::__uninitialized_move_if_noexcept_a<x666::LexError*, x666::LexError*, std::allocator<x666::LexError> >(x666::LexError*, x666::LexError*, x666::LexError*, std::allocator<x666::LexError>&)>:
    }

  template<typename _InputIterator, typename _ForwardIterator,
	   typename _Allocator>
    inline _ForwardIterator
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
  43f74a:	55                   	push   %rbp
  43f74b:	48 89 e5             	mov    %rsp,%rbp
  43f74e:	53                   	push   %rbx
  43f74f:	48 83 ec 28          	sub    $0x28,%rsp
  43f753:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  43f757:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  43f75b:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  43f75f:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
				       _InputIterator __last,
				       _ForwardIterator __result,
				       _Allocator& __alloc)
    {
      return std::__uninitialized_copy_a
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
  43f763:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  43f767:	48 89 c7             	mov    %rax,%rdi
  43f76a:	e8 b6 ff ff ff       	callq  43f725 <std::move_iterator<x666::LexError*> std::__make_move_if_noexcept_iterator<x666::LexError, std::move_iterator<x666::LexError*> >(x666::LexError*)>
  43f76f:	48 89 c3             	mov    %rax,%rbx
  43f772:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  43f776:	48 89 c7             	mov    %rax,%rdi
  43f779:	e8 a7 ff ff ff       	callq  43f725 <std::move_iterator<x666::LexError*> std::__make_move_if_noexcept_iterator<x666::LexError, std::move_iterator<x666::LexError*> >(x666::LexError*)>
  43f77e:	48 89 c7             	mov    %rax,%rdi
	 _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__last), __result, __alloc);
  43f781:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  43f785:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  43f789:	48 89 d1             	mov    %rdx,%rcx
  43f78c:	48 89 c2             	mov    %rax,%rdx
  43f78f:	48 89 de             	mov    %rbx,%rsi
  43f792:	e8 95 14 00 00       	callq  440c2c <x666::LexError* std::__uninitialized_copy_a<std::move_iterator<x666::LexError*>, x666::LexError*, x666::LexError>(std::move_iterator<x666::LexError*>, std::move_iterator<x666::LexError*>, x666::LexError*, std::allocator<x666::LexError>&)>
    }
  43f797:	48 83 c4 28          	add    $0x28,%rsp
  43f79b:	5b                   	pop    %rbx
  43f79c:	5d                   	pop    %rbp
  43f79d:	c3                   	retq   

000000000043f79e <void std::allocator_traits<std::allocator<x666::LexError> >::destroy<x666::LexError>(std::allocator<x666::LexError>&, x666::LexError*)>:
	destroy(allocator_type& __a, _Up* __p)
  43f79e:	55                   	push   %rbp
  43f79f:	48 89 e5             	mov    %rsp,%rbp
  43f7a2:	48 83 ec 10          	sub    $0x10,%rsp
  43f7a6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  43f7aa:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	{ __a.destroy(__p); }
  43f7ae:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  43f7b2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43f7b6:	48 89 d6             	mov    %rdx,%rsi
  43f7b9:	48 89 c7             	mov    %rax,%rdi
  43f7bc:	e8 9d 14 00 00       	callq  440c5e <void __gnu_cxx::new_allocator<x666::LexError>::destroy<x666::LexError>(x666::LexError*)>
  43f7c1:	90                   	nop
  43f7c2:	c9                   	leaveq 
  43f7c3:	c3                   	retq   

000000000043f7c4 <__gnu_cxx::__normal_iterator<x666::LexError*, std::vector<x666::LexError, std::allocator<x666::LexError> > >::operator-(long) const>:
      operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
  43f7c4:	55                   	push   %rbp
  43f7c5:	48 89 e5             	mov    %rsp,%rbp
  43f7c8:	48 83 ec 20          	sub    $0x20,%rsp
  43f7cc:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  43f7d0:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
      { return __normal_iterator(_M_current - __n); }
  43f7d4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  43f7d8:	48 8b 08             	mov    (%rax),%rcx
  43f7db:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  43f7df:	48 89 d0             	mov    %rdx,%rax
  43f7e2:	48 c1 e0 02          	shl    $0x2,%rax
  43f7e6:	48 01 d0             	add    %rdx,%rax
  43f7e9:	48 c1 e0 03          	shl    $0x3,%rax
  43f7ed:	48 f7 d8             	neg    %rax
  43f7f0:	48 01 c8             	add    %rcx,%rax
  43f7f3:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  43f7f7:	48 8d 55 f8          	lea    -0x8(%rbp),%rdx
  43f7fb:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
  43f7ff:	48 89 d6             	mov    %rdx,%rsi
  43f802:	48 89 c7             	mov    %rax,%rdi
  43f805:	e8 fa 3f ff ff       	callq  433804 <__gnu_cxx::__normal_iterator<x666::LexError*, std::vector<x666::LexError, std::allocator<x666::LexError> > >::__normal_iterator(x666::LexError* const&)>
  43f80a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  43f80e:	c9                   	leaveq 
  43f80f:	c3                   	retq   

000000000043f810 <bool std::operator==<x666::LineInfo, x666::LineInfo&, x666::LineInfo*>(std::_Deque_iterator<x666::LineInfo, x666::LineInfo&, x666::LineInfo*> const&, std::_Deque_iterator<x666::LineInfo, x666::LineInfo&, x666::LineInfo*> const&)>:
    operator==(const _Deque_iterator<_Tp, _Ref, _Ptr>& __x,
  43f810:	55                   	push   %rbp
  43f811:	48 89 e5             	mov    %rsp,%rbp
  43f814:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  43f818:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    { return __x._M_cur == __y._M_cur; }
  43f81c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43f820:	48 8b 10             	mov    (%rax),%rdx
  43f823:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  43f827:	48 8b 00             	mov    (%rax),%rax
  43f82a:	48 39 c2             	cmp    %rax,%rdx
  43f82d:	0f 94 c0             	sete   %al
  43f830:	5d                   	pop    %rbp
  43f831:	c3                   	retq   

000000000043f832 <void __gnu_cxx::new_allocator<x666::LexError>::construct<x666::LexError, x666::LexError const&>(x666::LexError*, x666::LexError const&)>:
	construct(_Up* __p, _Args&&... __args)
  43f832:	55                   	push   %rbp
  43f833:	48 89 e5             	mov    %rsp,%rbp
  43f836:	53                   	push   %rbx
  43f837:	48 83 ec 28          	sub    $0x28,%rsp
  43f83b:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  43f83f:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  43f843:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
  43f847:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  43f84b:	48 89 c7             	mov    %rax,%rdi
  43f84e:	e8 26 e3 ff ff       	callq  43db79 <x666::LexError const& std::forward<x666::LexError const&>(std::remove_reference<x666::LexError const&>::type&)>
  43f853:	48 89 c3             	mov    %rax,%rbx
  43f856:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  43f85a:	48 89 c6             	mov    %rax,%rsi
  43f85d:	bf 28 00 00 00       	mov    $0x28,%edi
  43f862:	e8 25 63 ff ff       	callq  435b8c <operator new(unsigned long, void*)>
  43f867:	48 89 c1             	mov    %rax,%rcx
  43f86a:	48 8b 03             	mov    (%rbx),%rax
  43f86d:	48 8b 53 08          	mov    0x8(%rbx),%rdx
  43f871:	48 89 01             	mov    %rax,(%rcx)
  43f874:	48 89 51 08          	mov    %rdx,0x8(%rcx)
  43f878:	48 8b 43 10          	mov    0x10(%rbx),%rax
  43f87c:	48 8b 53 18          	mov    0x18(%rbx),%rdx
  43f880:	48 89 41 10          	mov    %rax,0x10(%rcx)
  43f884:	48 89 51 18          	mov    %rdx,0x18(%rcx)
  43f888:	48 8b 43 20          	mov    0x20(%rbx),%rax
  43f88c:	48 89 41 20          	mov    %rax,0x20(%rcx)
  43f890:	90                   	nop
  43f891:	48 83 c4 28          	add    $0x28,%rsp
  43f895:	5b                   	pop    %rbx
  43f896:	5d                   	pop    %rbp
  43f897:	c3                   	retq   

000000000043f898 <void __gnu_cxx::new_allocator<x666::LexError>::construct<x666::LexError, x666::LexErrorCode, x666::LineInfo&>(x666::LexError*, x666::LexErrorCode&&, x666::LineInfo&)>:
	construct(_Up* __p, _Args&&... __args)
  43f898:	55                   	push   %rbp
  43f899:	48 89 e5             	mov    %rsp,%rbp
  43f89c:	41 54                	push   %r12
  43f89e:	53                   	push   %rbx
  43f89f:	48 83 ec 20          	sub    $0x20,%rsp
  43f8a3:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  43f8a7:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  43f8ab:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  43f8af:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
  43f8b3:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  43f8b7:	48 89 c7             	mov    %rax,%rdi
  43f8ba:	e8 d4 ca ff ff       	callq  43c393 <x666::LexErrorCode&& std::forward<x666::LexErrorCode>(std::remove_reference<x666::LexErrorCode>::type&)>
  43f8bf:	8b 18                	mov    (%rax),%ebx
  43f8c1:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  43f8c5:	48 89 c7             	mov    %rax,%rdi
  43f8c8:	e8 44 cc ff ff       	callq  43c511 <x666::LineInfo& std::forward<x666::LineInfo&>(std::remove_reference<x666::LineInfo&>::type&)>
  43f8cd:	49 89 c4             	mov    %rax,%r12
  43f8d0:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  43f8d4:	48 89 c6             	mov    %rax,%rsi
  43f8d7:	bf 28 00 00 00       	mov    $0x28,%edi
  43f8dc:	e8 ab 62 ff ff       	callq  435b8c <operator new(unsigned long, void*)>
  43f8e1:	4c 89 e2             	mov    %r12,%rdx
  43f8e4:	89 de                	mov    %ebx,%esi
  43f8e6:	48 89 c7             	mov    %rax,%rdi
  43f8e9:	e8 88 63 ff ff       	callq  435c76 <x666::LexError::LexError(x666::LexErrorCode, x666::LineInfo const&)>
  43f8ee:	90                   	nop
  43f8ef:	48 83 c4 20          	add    $0x20,%rsp
  43f8f3:	5b                   	pop    %rbx
  43f8f4:	41 5c                	pop    %r12
  43f8f6:	5d                   	pop    %rbp
  43f8f7:	c3                   	retq   

000000000043f8f8 <std::_Deque_iterator<x666::LineInfo, x666::LineInfo&, x666::LineInfo*>::operator--()>:
      operator--() _GLIBCXX_NOEXCEPT
  43f8f8:	55                   	push   %rbp
  43f8f9:	48 89 e5             	mov    %rsp,%rbp
  43f8fc:	48 83 ec 10          	sub    $0x10,%rsp
  43f900:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	if (_M_cur == _M_first)
  43f904:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43f908:	48 8b 10             	mov    (%rax),%rdx
  43f90b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43f90f:	48 8b 40 08          	mov    0x8(%rax),%rax
  43f913:	48 39 c2             	cmp    %rax,%rdx
  43f916:	75 2a                	jne    43f942 <std::_Deque_iterator<x666::LineInfo, x666::LineInfo&, x666::LineInfo*>::operator--()+0x4a>
	    _M_set_node(_M_node - 1);
  43f918:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43f91c:	48 8b 40 18          	mov    0x18(%rax),%rax
  43f920:	48 8d 50 f8          	lea    -0x8(%rax),%rdx
  43f924:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43f928:	48 89 d6             	mov    %rdx,%rsi
  43f92b:	48 89 c7             	mov    %rax,%rdi
  43f92e:	e8 3d 0d 00 00       	callq  440670 <std::_Deque_iterator<x666::LineInfo, x666::LineInfo&, x666::LineInfo*>::_M_set_node(x666::LineInfo**)>
	    _M_cur = _M_last;
  43f933:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43f937:	48 8b 50 10          	mov    0x10(%rax),%rdx
  43f93b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43f93f:	48 89 10             	mov    %rdx,(%rax)
	--_M_cur;
  43f942:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43f946:	48 8b 00             	mov    (%rax),%rax
  43f949:	48 8d 50 e0          	lea    -0x20(%rax),%rdx
  43f94d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43f951:	48 89 10             	mov    %rdx,(%rax)
	return *this;
  43f954:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
      }
  43f958:	c9                   	leaveq 
  43f959:	c3                   	retq   

000000000043f95a <std::_Deque_iterator<x666::LineInfo, x666::LineInfo&, x666::LineInfo*>::operator*() const>:
      operator*() const _GLIBCXX_NOEXCEPT
  43f95a:	55                   	push   %rbp
  43f95b:	48 89 e5             	mov    %rsp,%rbp
  43f95e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return *_M_cur; }
  43f962:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43f966:	48 8b 00             	mov    (%rax),%rax
  43f969:	5d                   	pop    %rbp
  43f96a:	c3                   	retq   

000000000043f96b <std::_Deque_iterator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*>::difference_type std::operator-<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*>(std::_Deque_iterator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*> const&, std::_Deque_iterator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*> const&)>:
    operator-(const _Deque_iterator<_Tp, _Ref, _Ptr>& __x,
  43f96b:	55                   	push   %rbp
  43f96c:	48 89 e5             	mov    %rsp,%rbp
  43f96f:	48 83 ec 10          	sub    $0x10,%rsp
  43f973:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  43f977:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	(_Deque_iterator<_Tp, _Ref, _Ptr>::_S_buffer_size())
  43f97b:	e8 ed 12 00 00       	callq  440c6d <std::_Deque_iterator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*>::_S_buffer_size()>
  43f980:	48 89 c2             	mov    %rax,%rdx
	* (__x._M_node - __y._M_node - 1) + (__x._M_cur - __x._M_first)
  43f983:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43f987:	48 8b 40 18          	mov    0x18(%rax),%rax
  43f98b:	48 89 c1             	mov    %rax,%rcx
  43f98e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  43f992:	48 8b 40 18          	mov    0x18(%rax),%rax
  43f996:	48 29 c1             	sub    %rax,%rcx
  43f999:	48 89 c8             	mov    %rcx,%rax
  43f99c:	48 c1 f8 03          	sar    $0x3,%rax
  43f9a0:	48 83 e8 01          	sub    $0x1,%rax
  43f9a4:	48 0f af c2          	imul   %rdx,%rax
  43f9a8:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  43f9ac:	48 8b 12             	mov    (%rdx),%rdx
  43f9af:	48 89 d1             	mov    %rdx,%rcx
  43f9b2:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  43f9b6:	48 8b 52 08          	mov    0x8(%rdx),%rdx
  43f9ba:	48 29 d1             	sub    %rdx,%rcx
  43f9bd:	48 89 ca             	mov    %rcx,%rdx
  43f9c0:	48 c1 fa 03          	sar    $0x3,%rdx
  43f9c4:	48 01 c2             	add    %rax,%rdx
	+ (__y._M_last - __y._M_cur);
  43f9c7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  43f9cb:	48 8b 40 10          	mov    0x10(%rax),%rax
  43f9cf:	48 89 c1             	mov    %rax,%rcx
  43f9d2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  43f9d6:	48 8b 00             	mov    (%rax),%rax
  43f9d9:	48 29 c1             	sub    %rax,%rcx
  43f9dc:	48 89 c8             	mov    %rcx,%rax
  43f9df:	48 c1 f8 03          	sar    $0x3,%rax
  43f9e3:	48 01 d0             	add    %rdx,%rax
    }
  43f9e6:	c9                   	leaveq 
  43f9e7:	c3                   	retq   

000000000043f9e8 <x666::Parser::BracketEntry&& std::forward<x666::Parser::BracketEntry>(std::remove_reference<x666::Parser::BracketEntry>::type&)>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
  43f9e8:	55                   	push   %rbp
  43f9e9:	48 89 e5             	mov    %rsp,%rbp
  43f9ec:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<_Tp&&>(__t); }
  43f9f0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43f9f4:	5d                   	pop    %rbp
  43f9f5:	c3                   	retq   

000000000043f9f6 <x666::Parser::BracketEntry& std::deque<x666::Parser::BracketEntry, std::allocator<x666::Parser::BracketEntry> >::emplace_back<x666::Parser::BracketEntry>(x666::Parser::BracketEntry&&)>:
      deque<_Tp, _Alloc>::
  43f9f6:	55                   	push   %rbp
  43f9f7:	48 89 e5             	mov    %rsp,%rbp
  43f9fa:	48 83 ec 10          	sub    $0x10,%rsp
  43f9fe:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  43fa02:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	if (this->_M_impl._M_finish._M_cur
  43fa06:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43fa0a:	48 8b 50 30          	mov    0x30(%rax),%rdx
	    != this->_M_impl._M_finish._M_last - 1)
  43fa0e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43fa12:	48 8b 40 40          	mov    0x40(%rax),%rax
  43fa16:	48 83 e8 10          	sub    $0x10,%rax
	if (this->_M_impl._M_finish._M_cur
  43fa1a:	48 39 c2             	cmp    %rax,%rdx
  43fa1d:	74 3c                	je     43fa5b <x666::Parser::BracketEntry& std::deque<x666::Parser::BracketEntry, std::allocator<x666::Parser::BracketEntry> >::emplace_back<x666::Parser::BracketEntry>(x666::Parser::BracketEntry&&)+0x65>
	    _Alloc_traits::construct(this->_M_impl,
  43fa1f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  43fa23:	48 89 c7             	mov    %rax,%rdi
  43fa26:	e8 bd ff ff ff       	callq  43f9e8 <x666::Parser::BracketEntry&& std::forward<x666::Parser::BracketEntry>(std::remove_reference<x666::Parser::BracketEntry>::type&)>
  43fa2b:	48 89 c2             	mov    %rax,%rdx
  43fa2e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43fa32:	48 8b 48 30          	mov    0x30(%rax),%rcx
  43fa36:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43fa3a:	48 89 ce             	mov    %rcx,%rsi
  43fa3d:	48 89 c7             	mov    %rax,%rdi
  43fa40:	e8 38 12 00 00       	callq  440c7d <void std::allocator_traits<std::allocator<x666::Parser::BracketEntry> >::construct<x666::Parser::BracketEntry, x666::Parser::BracketEntry>(std::allocator<x666::Parser::BracketEntry>&, x666::Parser::BracketEntry*, x666::Parser::BracketEntry&&)>
	    ++this->_M_impl._M_finish._M_cur;
  43fa45:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43fa49:	48 8b 40 30          	mov    0x30(%rax),%rax
  43fa4d:	48 8d 50 10          	lea    0x10(%rax),%rdx
  43fa51:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43fa55:	48 89 50 30          	mov    %rdx,0x30(%rax)
  43fa59:	eb 1e                	jmp    43fa79 <x666::Parser::BracketEntry& std::deque<x666::Parser::BracketEntry, std::allocator<x666::Parser::BracketEntry> >::emplace_back<x666::Parser::BracketEntry>(x666::Parser::BracketEntry&&)+0x83>
	  _M_push_back_aux(std::forward<_Args>(__args)...);
  43fa5b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  43fa5f:	48 89 c7             	mov    %rax,%rdi
  43fa62:	e8 81 ff ff ff       	callq  43f9e8 <x666::Parser::BracketEntry&& std::forward<x666::Parser::BracketEntry>(std::remove_reference<x666::Parser::BracketEntry>::type&)>
  43fa67:	48 89 c2             	mov    %rax,%rdx
  43fa6a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43fa6e:	48 89 d6             	mov    %rdx,%rsi
  43fa71:	48 89 c7             	mov    %rax,%rdi
  43fa74:	e8 3d 12 00 00       	callq  440cb6 <void std::deque<x666::Parser::BracketEntry, std::allocator<x666::Parser::BracketEntry> >::_M_push_back_aux<x666::Parser::BracketEntry>(x666::Parser::BracketEntry&&)>
	return back();
  43fa79:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43fa7d:	48 89 c7             	mov    %rax,%rdi
  43fa80:	e8 5d e7 ff ff       	callq  43e1e2 <std::deque<x666::Parser::BracketEntry, std::allocator<x666::Parser::BracketEntry> >::back()>
      }
  43fa85:	c9                   	leaveq 
  43fa86:	c3                   	retq   

000000000043fa87 <bool std::operator==<x666::Parser::BracketEntry, x666::Parser::BracketEntry&, x666::Parser::BracketEntry*>(std::_Deque_iterator<x666::Parser::BracketEntry, x666::Parser::BracketEntry&, x666::Parser::BracketEntry*> const&, std::_Deque_iterator<x666::Parser::BracketEntry, x666::Parser::BracketEntry&, x666::Parser::BracketEntry*> const&)>:
    operator==(const _Deque_iterator<_Tp, _Ref, _Ptr>& __x,
  43fa87:	55                   	push   %rbp
  43fa88:	48 89 e5             	mov    %rsp,%rbp
  43fa8b:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  43fa8f:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    { return __x._M_cur == __y._M_cur; }
  43fa93:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43fa97:	48 8b 10             	mov    (%rax),%rdx
  43fa9a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  43fa9e:	48 8b 00             	mov    (%rax),%rax
  43faa1:	48 39 c2             	cmp    %rax,%rdx
  43faa4:	0f 94 c0             	sete   %al
  43faa7:	5d                   	pop    %rbp
  43faa8:	c3                   	retq   
  43faa9:	90                   	nop

000000000043faaa <std::_Deque_iterator<x666::Parser::BracketEntry, x666::Parser::BracketEntry&, x666::Parser::BracketEntry*>::operator--()>:
      operator--() _GLIBCXX_NOEXCEPT
  43faaa:	55                   	push   %rbp
  43faab:	48 89 e5             	mov    %rsp,%rbp
  43faae:	48 83 ec 10          	sub    $0x10,%rsp
  43fab2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	if (_M_cur == _M_first)
  43fab6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43faba:	48 8b 10             	mov    (%rax),%rdx
  43fabd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43fac1:	48 8b 40 08          	mov    0x8(%rax),%rax
  43fac5:	48 39 c2             	cmp    %rax,%rdx
  43fac8:	75 2a                	jne    43faf4 <std::_Deque_iterator<x666::Parser::BracketEntry, x666::Parser::BracketEntry&, x666::Parser::BracketEntry*>::operator--()+0x4a>
	    _M_set_node(_M_node - 1);
  43faca:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43face:	48 8b 40 18          	mov    0x18(%rax),%rax
  43fad2:	48 8d 50 f8          	lea    -0x8(%rax),%rdx
  43fad6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43fada:	48 89 d6             	mov    %rdx,%rsi
  43fadd:	48 89 c7             	mov    %rax,%rdi
  43fae0:	e8 6b 12 00 00       	callq  440d50 <std::_Deque_iterator<x666::Parser::BracketEntry, x666::Parser::BracketEntry&, x666::Parser::BracketEntry*>::_M_set_node(x666::Parser::BracketEntry**)>
	    _M_cur = _M_last;
  43fae5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43fae9:	48 8b 50 10          	mov    0x10(%rax),%rdx
  43faed:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43faf1:	48 89 10             	mov    %rdx,(%rax)
	--_M_cur;
  43faf4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43faf8:	48 8b 00             	mov    (%rax),%rax
  43fafb:	48 8d 50 f0          	lea    -0x10(%rax),%rdx
  43faff:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43fb03:	48 89 10             	mov    %rdx,(%rax)
	return *this;
  43fb06:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
      }
  43fb0a:	c9                   	leaveq 
  43fb0b:	c3                   	retq   

000000000043fb0c <std::_Deque_iterator<x666::Parser::BracketEntry, x666::Parser::BracketEntry&, x666::Parser::BracketEntry*>::operator*() const>:
      operator*() const _GLIBCXX_NOEXCEPT
  43fb0c:	55                   	push   %rbp
  43fb0d:	48 89 e5             	mov    %rsp,%rbp
  43fb10:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return *_M_cur; }
  43fb14:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43fb18:	48 8b 00             	mov    (%rax),%rax
  43fb1b:	5d                   	pop    %rbp
  43fb1c:	c3                   	retq   

000000000043fb1d <void std::allocator_traits<std::allocator<x666::Parser::BracketEntry> >::destroy<x666::Parser::BracketEntry>(std::allocator<x666::Parser::BracketEntry>&, x666::Parser::BracketEntry*)>:
	destroy(allocator_type& __a, _Up* __p)
  43fb1d:	55                   	push   %rbp
  43fb1e:	48 89 e5             	mov    %rsp,%rbp
  43fb21:	48 83 ec 10          	sub    $0x10,%rsp
  43fb25:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  43fb29:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	{ __a.destroy(__p); }
  43fb2d:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  43fb31:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43fb35:	48 89 d6             	mov    %rdx,%rsi
  43fb38:	48 89 c7             	mov    %rax,%rdi
  43fb3b:	e8 62 12 00 00       	callq  440da2 <void __gnu_cxx::new_allocator<x666::Parser::BracketEntry>::destroy<x666::Parser::BracketEntry>(x666::Parser::BracketEntry*)>
  43fb40:	90                   	nop
  43fb41:	c9                   	leaveq 
  43fb42:	c3                   	retq   
  43fb43:	90                   	nop

000000000043fb44 <std::deque<x666::Parser::BracketEntry, std::allocator<x666::Parser::BracketEntry> >::_M_pop_back_aux()>:
    void deque<_Tp, _Alloc>::
  43fb44:	55                   	push   %rbp
  43fb45:	48 89 e5             	mov    %rsp,%rbp
  43fb48:	53                   	push   %rbx
  43fb49:	48 83 ec 18          	sub    $0x18,%rsp
  43fb4d:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
      _M_deallocate_node(this->_M_impl._M_finish._M_first);
  43fb51:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  43fb55:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  43fb59:	48 8b 52 38          	mov    0x38(%rdx),%rdx
  43fb5d:	48 89 d6             	mov    %rdx,%rsi
  43fb60:	48 89 c7             	mov    %rax,%rdi
  43fb63:	e8 64 44 ff ff       	callq  433fcc <std::_Deque_base<x666::Parser::BracketEntry, std::allocator<x666::Parser::BracketEntry> >::_M_deallocate_node(x666::Parser::BracketEntry*)>
      this->_M_impl._M_finish._M_set_node(this->_M_impl._M_finish._M_node - 1);
  43fb68:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  43fb6c:	48 83 c0 30          	add    $0x30,%rax
  43fb70:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  43fb74:	48 8b 52 48          	mov    0x48(%rdx),%rdx
  43fb78:	48 83 ea 08          	sub    $0x8,%rdx
  43fb7c:	48 89 d6             	mov    %rdx,%rsi
  43fb7f:	48 89 c7             	mov    %rax,%rdi
  43fb82:	e8 c9 11 00 00       	callq  440d50 <std::_Deque_iterator<x666::Parser::BracketEntry, x666::Parser::BracketEntry&, x666::Parser::BracketEntry*>::_M_set_node(x666::Parser::BracketEntry**)>
      this->_M_impl._M_finish._M_cur = this->_M_impl._M_finish._M_last - 1;
  43fb87:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  43fb8b:	48 8b 40 40          	mov    0x40(%rax),%rax
  43fb8f:	48 8d 50 f0          	lea    -0x10(%rax),%rdx
  43fb93:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  43fb97:	48 89 50 30          	mov    %rdx,0x30(%rax)
      _Alloc_traits::destroy(_M_get_Tp_allocator(),
  43fb9b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  43fb9f:	48 8b 58 30          	mov    0x30(%rax),%rbx
  43fba3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  43fba7:	48 89 c7             	mov    %rax,%rdi
  43fbaa:	e8 95 3a ff ff       	callq  433644 <std::_Deque_base<x666::Parser::BracketEntry, std::allocator<x666::Parser::BracketEntry> >::_M_get_Tp_allocator()>
  43fbaf:	48 89 de             	mov    %rbx,%rsi
  43fbb2:	48 89 c7             	mov    %rax,%rdi
  43fbb5:	e8 63 ff ff ff       	callq  43fb1d <void std::allocator_traits<std::allocator<x666::Parser::BracketEntry> >::destroy<x666::Parser::BracketEntry>(std::allocator<x666::Parser::BracketEntry>&, x666::Parser::BracketEntry*)>
    }
  43fbba:	90                   	nop
  43fbbb:	48 83 c4 18          	add    $0x18,%rsp
  43fbbf:	5b                   	pop    %rbx
  43fbc0:	5d                   	pop    %rbp
  43fbc1:	c3                   	retq   

000000000043fbc2 <std::__uniq_ptr_impl<x666::Bracket, std::default_delete<x666::Bracket> >::__uniq_ptr_impl(x666::Bracket*)>:
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
  43fbc2:	55                   	push   %rbp
  43fbc3:	48 89 e5             	mov    %rsp,%rbp
  43fbc6:	53                   	push   %rbx
  43fbc7:	48 83 ec 18          	sub    $0x18,%rsp
  43fbcb:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  43fbcf:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  43fbd3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  43fbd7:	48 89 c7             	mov    %rax,%rdi
  43fbda:	e8 d3 11 00 00       	callq  440db2 <std::tuple<x666::Bracket*, std::default_delete<x666::Bracket> >::tuple<x666::Bracket*, std::default_delete<x666::Bracket>, true>()>
  43fbdf:	48 8b 5d e0          	mov    -0x20(%rbp),%rbx
  43fbe3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  43fbe7:	48 89 c7             	mov    %rax,%rdi
  43fbea:	e8 b1 e6 ff ff       	callq  43e2a0 <std::__uniq_ptr_impl<x666::Bracket, std::default_delete<x666::Bracket> >::_M_ptr()>
  43fbef:	48 89 18             	mov    %rbx,(%rax)
  43fbf2:	90                   	nop
  43fbf3:	48 83 c4 18          	add    $0x18,%rsp
  43fbf7:	5b                   	pop    %rbx
  43fbf8:	5d                   	pop    %rbp
  43fbf9:	c3                   	retq   

000000000043fbfa <std::tuple_element<0ul, std::tuple<x666::Bracket*, std::default_delete<x666::Bracket> > >::type& std::get<0ul, x666::Bracket*, std::default_delete<x666::Bracket> >(std::tuple<x666::Bracket*, std::default_delete<x666::Bracket> >&)>:
    get(tuple<_Elements...>& __t) noexcept
  43fbfa:	55                   	push   %rbp
  43fbfb:	48 89 e5             	mov    %rsp,%rbp
  43fbfe:	48 83 ec 10          	sub    $0x10,%rsp
  43fc02:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return std::__get_helper<__i>(__t); }
  43fc06:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43fc0a:	48 89 c7             	mov    %rax,%rdi
  43fc0d:	e8 bb 11 00 00       	callq  440dcd <x666::Bracket*& std::__get_helper<0ul, x666::Bracket*, std::default_delete<x666::Bracket> >(std::_Tuple_impl<0ul, x666::Bracket*, std::default_delete<x666::Bracket> >&)>
  43fc12:	c9                   	leaveq 
  43fc13:	c3                   	retq   

000000000043fc14 <std::__uniq_ptr_impl<x666::Bracket, std::default_delete<x666::Bracket> >::_M_deleter()>:
      _Dp&       _M_deleter() { return std::get<1>(_M_t); }
  43fc14:	55                   	push   %rbp
  43fc15:	48 89 e5             	mov    %rsp,%rbp
  43fc18:	48 83 ec 10          	sub    $0x10,%rsp
  43fc1c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  43fc20:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43fc24:	48 89 c7             	mov    %rax,%rdi
  43fc27:	e8 bb 11 00 00       	callq  440de7 <std::tuple_element<1ul, std::tuple<x666::Bracket*, std::default_delete<x666::Bracket> > >::type& std::get<1ul, x666::Bracket*, std::default_delete<x666::Bracket> >(std::tuple<x666::Bracket*, std::default_delete<x666::Bracket> >&)>
  43fc2c:	c9                   	leaveq 
  43fc2d:	c3                   	retq   

000000000043fc2e <std::unique_ptr<x666::Bracket, std::default_delete<x666::Bracket> >::get() const>:
      get() const noexcept
  43fc2e:	55                   	push   %rbp
  43fc2f:	48 89 e5             	mov    %rsp,%rbp
  43fc32:	48 83 ec 10          	sub    $0x10,%rsp
  43fc36:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_t._M_ptr(); }
  43fc3a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43fc3e:	48 89 c7             	mov    %rax,%rdi
  43fc41:	e8 bc 11 00 00       	callq  440e02 <std::__uniq_ptr_impl<x666::Bracket, std::default_delete<x666::Bracket> >::_M_ptr() const>
  43fc46:	c9                   	leaveq 
  43fc47:	c3                   	retq   

000000000043fc48 <std::tuple<x666::Expression*, std::default_delete<x666::Expression> >::tuple<x666::Expression*&, std::default_delete<x666::Bracket>, true>(x666::Expression*&, std::default_delete<x666::Bracket>&&)>:
        constexpr tuple(_U1&& __a1, _U2&& __a2)
  43fc48:	55                   	push   %rbp
  43fc49:	48 89 e5             	mov    %rsp,%rbp
  43fc4c:	41 54                	push   %r12
  43fc4e:	53                   	push   %rbx
  43fc4f:	48 83 ec 20          	sub    $0x20,%rsp
  43fc53:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  43fc57:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  43fc5b:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
	: _Inherited(std::forward<_U1>(__a1), std::forward<_U2>(__a2)) { }
  43fc5f:	48 8b 5d e8          	mov    -0x18(%rbp),%rbx
  43fc63:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  43fc67:	48 89 c7             	mov    %rax,%rdi
  43fc6a:	e8 30 e7 ff ff       	callq  43e39f <std::default_delete<x666::Bracket>&& std::forward<std::default_delete<x666::Bracket> >(std::remove_reference<std::default_delete<x666::Bracket> >::type&)>
  43fc6f:	49 89 c4             	mov    %rax,%r12
  43fc72:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  43fc76:	48 89 c7             	mov    %rax,%rdi
  43fc79:	e8 1f ec ff ff       	callq  43e89d <x666::Expression*& std::forward<x666::Expression*&>(std::remove_reference<x666::Expression*&>::type&)>
  43fc7e:	4c 89 e2             	mov    %r12,%rdx
  43fc81:	48 89 c6             	mov    %rax,%rsi
  43fc84:	48 89 df             	mov    %rbx,%rdi
  43fc87:	e8 94 11 00 00       	callq  440e20 <std::_Tuple_impl<0ul, x666::Expression*, std::default_delete<x666::Expression> >::_Tuple_impl<x666::Expression*&, std::default_delete<x666::Bracket>, void>(x666::Expression*&, std::default_delete<x666::Bracket>&&)>
  43fc8c:	90                   	nop
  43fc8d:	48 83 c4 20          	add    $0x20,%rsp
  43fc91:	5b                   	pop    %rbx
  43fc92:	41 5c                	pop    %r12
  43fc94:	5d                   	pop    %rbp
  43fc95:	c3                   	retq   

000000000043fc96 <std::_Tuple_impl<0ul, x666::Expression*, std::default_delete<x666::Expression> >::_Tuple_impl()>:
      constexpr _Tuple_impl()
  43fc96:	55                   	push   %rbp
  43fc97:	48 89 e5             	mov    %rsp,%rbp
  43fc9a:	48 83 ec 10          	sub    $0x10,%rsp
  43fc9e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      : _Inherited(), _Base() { }
  43fca2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43fca6:	48 89 c7             	mov    %rax,%rdi
  43fca9:	e8 c8 11 00 00       	callq  440e76 <std::_Tuple_impl<1ul, std::default_delete<x666::Expression> >::_Tuple_impl()>
  43fcae:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43fcb2:	48 89 c7             	mov    %rax,%rdi
  43fcb5:	e8 d8 11 00 00       	callq  440e92 <std::_Head_base<0ul, x666::Expression*, false>::_Head_base()>
  43fcba:	90                   	nop
  43fcbb:	c9                   	leaveq 
  43fcbc:	c3                   	retq   
  43fcbd:	90                   	nop

000000000043fcbe <std::_Vector_base<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > >::_Vector_impl::_Vector_impl()>:
	_Vector_impl()
  43fcbe:	55                   	push   %rbp
  43fcbf:	48 89 e5             	mov    %rsp,%rbp
  43fcc2:	48 83 ec 10          	sub    $0x10,%rsp
  43fcc6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	: _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
  43fcca:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43fcce:	48 89 c7             	mov    %rax,%rdi
  43fcd1:	e8 d2 11 00 00       	callq  440ea8 <std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > >::allocator()>
  43fcd6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43fcda:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  43fce1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43fce5:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
  43fcec:	00 
  43fced:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43fcf1:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)
  43fcf8:	00 
	{ }
  43fcf9:	90                   	nop
  43fcfa:	c9                   	leaveq 
  43fcfb:	c3                   	retq   

000000000043fcfc <std::_Deque_base<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > >::_Deque_base()>:
      _Deque_base()
  43fcfc:	55                   	push   %rbp
  43fcfd:	48 89 e5             	mov    %rsp,%rbp
  43fd00:	53                   	push   %rbx
  43fd01:	48 83 ec 18          	sub    $0x18,%rsp
  43fd05:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
      : _M_impl()
  43fd09:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  43fd0d:	48 89 c7             	mov    %rax,%rdi
  43fd10:	e8 af 11 00 00       	callq  440ec4 <std::_Deque_base<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > >::_Deque_impl::_Deque_impl()>
      { _M_initialize_map(0); }
  43fd15:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  43fd19:	be 00 00 00 00       	mov    $0x0,%esi
  43fd1e:	48 89 c7             	mov    %rax,%rdi
  43fd21:	e8 f0 11 00 00       	callq  440f16 <std::_Deque_base<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > >::_M_initialize_map(unsigned long)>
  43fd26:	eb 1a                	jmp    43fd42 <std::_Deque_base<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > >::_Deque_base()+0x46>
  43fd28:	48 89 c3             	mov    %rax,%rbx
      : _M_impl()
  43fd2b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  43fd2f:	48 89 c7             	mov    %rax,%rdi
  43fd32:	e8 e1 35 ff ff       	callq  433318 <std::_Deque_base<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > >::_Deque_impl::~_Deque_impl()>
  43fd37:	48 89 d8             	mov    %rbx,%rax
  43fd3a:	48 89 c7             	mov    %rax,%rdi
  43fd3d:	e8 ce 2b ff ff       	callq  432910 <_Unwind_Resume@plt>
      { _M_initialize_map(0); }
  43fd42:	48 83 c4 18          	add    $0x18,%rsp
  43fd46:	5b                   	pop    %rbx
  43fd47:	5d                   	pop    %rbp
  43fd48:	c3                   	retq   
  43fd49:	90                   	nop

000000000043fd4a <std::_Deque_base<x666::LineInfo, std::allocator<x666::LineInfo> >::_Deque_base()>:
      _Deque_base()
  43fd4a:	55                   	push   %rbp
  43fd4b:	48 89 e5             	mov    %rsp,%rbp
  43fd4e:	53                   	push   %rbx
  43fd4f:	48 83 ec 18          	sub    $0x18,%rsp
  43fd53:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
      : _M_impl()
  43fd57:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  43fd5b:	48 89 c7             	mov    %rax,%rdi
  43fd5e:	e8 5b 13 00 00       	callq  4410be <std::_Deque_base<x666::LineInfo, std::allocator<x666::LineInfo> >::_Deque_impl::_Deque_impl()>
      { _M_initialize_map(0); }
  43fd63:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  43fd67:	be 00 00 00 00       	mov    $0x0,%esi
  43fd6c:	48 89 c7             	mov    %rax,%rdi
  43fd6f:	e8 9c 13 00 00       	callq  441110 <std::_Deque_base<x666::LineInfo, std::allocator<x666::LineInfo> >::_M_initialize_map(unsigned long)>
  43fd74:	eb 1a                	jmp    43fd90 <std::_Deque_base<x666::LineInfo, std::allocator<x666::LineInfo> >::_Deque_base()+0x46>
  43fd76:	48 89 c3             	mov    %rax,%rbx
      : _M_impl()
  43fd79:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  43fd7d:	48 89 c7             	mov    %rax,%rdi
  43fd80:	e8 d9 36 ff ff       	callq  43345e <std::_Deque_base<x666::LineInfo, std::allocator<x666::LineInfo> >::_Deque_impl::~_Deque_impl()>
  43fd85:	48 89 d8             	mov    %rbx,%rax
  43fd88:	48 89 c7             	mov    %rax,%rdi
  43fd8b:	e8 80 2b ff ff       	callq  432910 <_Unwind_Resume@plt>
      { _M_initialize_map(0); }
  43fd90:	48 83 c4 18          	add    $0x18,%rsp
  43fd94:	5b                   	pop    %rbx
  43fd95:	5d                   	pop    %rbp
  43fd96:	c3                   	retq   
  43fd97:	90                   	nop

000000000043fd98 <std::_Deque_base<x666::Parser::BracketEntry, std::allocator<x666::Parser::BracketEntry> >::_Deque_base()>:
      _Deque_base()
  43fd98:	55                   	push   %rbp
  43fd99:	48 89 e5             	mov    %rsp,%rbp
  43fd9c:	53                   	push   %rbx
  43fd9d:	48 83 ec 18          	sub    $0x18,%rsp
  43fda1:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
      : _M_impl()
  43fda5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  43fda9:	48 89 c7             	mov    %rax,%rdi
  43fdac:	e8 07 15 00 00       	callq  4412b8 <std::_Deque_base<x666::Parser::BracketEntry, std::allocator<x666::Parser::BracketEntry> >::_Deque_impl::_Deque_impl()>
      { _M_initialize_map(0); }
  43fdb1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  43fdb5:	be 00 00 00 00       	mov    $0x0,%esi
  43fdba:	48 89 c7             	mov    %rax,%rdi
  43fdbd:	e8 48 15 00 00       	callq  44130a <std::_Deque_base<x666::Parser::BracketEntry, std::allocator<x666::Parser::BracketEntry> >::_M_initialize_map(unsigned long)>
  43fdc2:	eb 1a                	jmp    43fdde <std::_Deque_base<x666::Parser::BracketEntry, std::allocator<x666::Parser::BracketEntry> >::_Deque_base()+0x46>
  43fdc4:	48 89 c3             	mov    %rax,%rbx
      : _M_impl()
  43fdc7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  43fdcb:	48 89 c7             	mov    %rax,%rdi
  43fdce:	e8 91 37 ff ff       	callq  433564 <std::_Deque_base<x666::Parser::BracketEntry, std::allocator<x666::Parser::BracketEntry> >::_Deque_impl::~_Deque_impl()>
  43fdd3:	48 89 d8             	mov    %rbx,%rax
  43fdd6:	48 89 c7             	mov    %rax,%rdi
  43fdd9:	e8 32 2b ff ff       	callq  432910 <_Unwind_Resume@plt>
      { _M_initialize_map(0); }
  43fdde:	48 83 c4 18          	add    $0x18,%rsp
  43fde2:	5b                   	pop    %rbx
  43fde3:	5d                   	pop    %rbp
  43fde4:	c3                   	retq   
  43fde5:	90                   	nop

000000000043fde6 <std::_Vector_base<x666::LexError, std::allocator<x666::LexError> >::_Vector_impl::_Vector_impl()>:
	_Vector_impl()
  43fde6:	55                   	push   %rbp
  43fde7:	48 89 e5             	mov    %rsp,%rbp
  43fdea:	48 83 ec 10          	sub    $0x10,%rsp
  43fdee:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	: _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
  43fdf2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43fdf6:	48 89 c7             	mov    %rax,%rdi
  43fdf9:	e8 b4 16 00 00       	callq  4414b2 <std::allocator<x666::LexError>::allocator()>
  43fdfe:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43fe02:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  43fe09:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43fe0d:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
  43fe14:	00 
  43fe15:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43fe19:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)
  43fe20:	00 
	{ }
  43fe21:	90                   	nop
  43fe22:	c9                   	leaveq 
  43fe23:	c3                   	retq   

000000000043fe24 <void std::__detail::__variant::_Variant_storage<false, x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>::_M_reset_impl<0ul, 1ul, 2ul, 3ul, 4ul, 5ul, 6ul>(std::integer_sequence<unsigned long, 0ul, 1ul, 2ul, 3ul, 4ul, 5ul, 6ul>)>:
	constexpr void _M_reset_impl(std::index_sequence<__indices...>)
  43fe24:	55                   	push   %rbp
  43fe25:	48 89 e5             	mov    %rsp,%rbp
  43fe28:	48 83 ec 10          	sub    $0x10,%rsp
  43fe2c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	  if (_M_index != __index_type(variant_npos))
  43fe30:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43fe34:	0f b6 40 28          	movzbl 0x28(%rax),%eax
  43fe38:	3c ff                	cmp    $0xff,%al
  43fe3a:	74 1e                	je     43fe5a <void std::__detail::__variant::_Variant_storage<false, x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError>::_M_reset_impl<0ul, 1ul, 2ul, 3ul, 4ul, 5ul, 6ul>(std::integer_sequence<unsigned long, 0ul, 1ul, 2ul, 3ul, 4ul, 5ul, 6ul>)+0x36>
	    _S_vtable<__indices...>[_M_index](*this);
  43fe3c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43fe40:	0f b6 40 28          	movzbl 0x28(%rax),%eax
  43fe44:	0f b6 c0             	movzbl %al,%eax
  43fe47:	48 98                	cltq   
  43fe49:	48 8b 04 c5 80 49 44 	mov    0x444980(,%rax,8),%rax
  43fe50:	00 
  43fe51:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  43fe55:	48 89 d7             	mov    %rdx,%rdi
  43fe58:	ff d0                	callq  *%rax
	}
  43fe5a:	90                   	nop
  43fe5b:	c9                   	leaveq 
  43fe5c:	c3                   	retq   
  43fe5d:	90                   	nop

000000000043fe5e <__gnu_cxx::__aligned_membuf<x666::LexError>::_M_addr()>:
      _M_addr() noexcept
  43fe5e:	55                   	push   %rbp
  43fe5f:	48 89 e5             	mov    %rsp,%rbp
  43fe62:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return static_cast<void*>(&_M_storage); }
  43fe66:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43fe6a:	5d                   	pop    %rbp
  43fe6b:	c3                   	retq   

000000000043fe6c <__gnu_cxx::__aligned_membuf<x666::Identifier>::_M_addr()>:
      _M_addr() noexcept
  43fe6c:	55                   	push   %rbp
  43fe6d:	48 89 e5             	mov    %rsp,%rbp
  43fe70:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return static_cast<void*>(&_M_storage); }
  43fe74:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43fe78:	5d                   	pop    %rbp
  43fe79:	c3                   	retq   

000000000043fe7a <__gnu_cxx::__aligned_membuf<x666::StringLiteral>::_M_addr()>:
      _M_addr() noexcept
  43fe7a:	55                   	push   %rbp
  43fe7b:	48 89 e5             	mov    %rsp,%rbp
  43fe7e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return static_cast<void*>(&_M_storage); }
  43fe82:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43fe86:	5d                   	pop    %rbp
  43fe87:	c3                   	retq   

000000000043fe88 <__gnu_cxx::__aligned_membuf<x666::IntLiteral>::_M_addr()>:
      _M_addr() noexcept
  43fe88:	55                   	push   %rbp
  43fe89:	48 89 e5             	mov    %rsp,%rbp
  43fe8c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return static_cast<void*>(&_M_storage); }
  43fe90:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43fe94:	5d                   	pop    %rbp
  43fe95:	c3                   	retq   

000000000043fe96 <std::_Deque_iterator<x666::Parser::BracketEntry, x666::Parser::BracketEntry&, x666::Parser::BracketEntry*>::difference_type std::operator-<x666::Parser::BracketEntry, x666::Parser::BracketEntry&, x666::Parser::BracketEntry*>(std::_Deque_iterator<x666::Parser::BracketEntry, x666::Parser::BracketEntry&, x666::Parser::BracketEntry*> const&, std::_Deque_iterator<x666::Parser::BracketEntry, x666::Parser::BracketEntry&, x666::Parser::BracketEntry*> const&)>:
    operator-(const _Deque_iterator<_Tp, _Ref, _Ptr>& __x,
  43fe96:	55                   	push   %rbp
  43fe97:	48 89 e5             	mov    %rsp,%rbp
  43fe9a:	48 83 ec 10          	sub    $0x10,%rsp
  43fe9e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  43fea2:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	(_Deque_iterator<_Tp, _Ref, _Ptr>::_S_buffer_size())
  43fea6:	e8 51 1e 00 00       	callq  441cfc <std::_Deque_iterator<x666::Parser::BracketEntry, x666::Parser::BracketEntry&, x666::Parser::BracketEntry*>::_S_buffer_size()>
  43feab:	48 89 c2             	mov    %rax,%rdx
	* (__x._M_node - __y._M_node - 1) + (__x._M_cur - __x._M_first)
  43feae:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43feb2:	48 8b 40 18          	mov    0x18(%rax),%rax
  43feb6:	48 89 c1             	mov    %rax,%rcx
  43feb9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  43febd:	48 8b 40 18          	mov    0x18(%rax),%rax
  43fec1:	48 29 c1             	sub    %rax,%rcx
  43fec4:	48 89 c8             	mov    %rcx,%rax
  43fec7:	48 c1 f8 03          	sar    $0x3,%rax
  43fecb:	48 83 e8 01          	sub    $0x1,%rax
  43fecf:	48 0f af c2          	imul   %rdx,%rax
  43fed3:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  43fed7:	48 8b 12             	mov    (%rdx),%rdx
  43feda:	48 89 d1             	mov    %rdx,%rcx
  43fedd:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  43fee1:	48 8b 52 08          	mov    0x8(%rdx),%rdx
  43fee5:	48 29 d1             	sub    %rdx,%rcx
  43fee8:	48 89 ca             	mov    %rcx,%rdx
  43feeb:	48 c1 fa 04          	sar    $0x4,%rdx
  43feef:	48 01 c2             	add    %rax,%rdx
	+ (__y._M_last - __y._M_cur);
  43fef2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  43fef6:	48 8b 40 10          	mov    0x10(%rax),%rax
  43fefa:	48 89 c1             	mov    %rax,%rcx
  43fefd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  43ff01:	48 8b 00             	mov    (%rax),%rax
  43ff04:	48 29 c1             	sub    %rax,%rcx
  43ff07:	48 89 c8             	mov    %rcx,%rax
  43ff0a:	48 c1 f8 04          	sar    $0x4,%rax
  43ff0e:	48 01 d0             	add    %rdx,%rax
    }
  43ff11:	c9                   	leaveq 
  43ff12:	c3                   	retq   

000000000043ff13 <std::_Deque_iterator<x666::LineInfo, x666::LineInfo&, x666::LineInfo*>::difference_type std::operator-<x666::LineInfo, x666::LineInfo&, x666::LineInfo*>(std::_Deque_iterator<x666::LineInfo, x666::LineInfo&, x666::LineInfo*> const&, std::_Deque_iterator<x666::LineInfo, x666::LineInfo&, x666::LineInfo*> const&)>:
    operator-(const _Deque_iterator<_Tp, _Ref, _Ptr>& __x,
  43ff13:	55                   	push   %rbp
  43ff14:	48 89 e5             	mov    %rsp,%rbp
  43ff17:	48 83 ec 10          	sub    $0x10,%rsp
  43ff1b:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  43ff1f:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	(_Deque_iterator<_Tp, _Ref, _Ptr>::_S_buffer_size())
  43ff23:	e8 e4 1d 00 00       	callq  441d0c <std::_Deque_iterator<x666::LineInfo, x666::LineInfo&, x666::LineInfo*>::_S_buffer_size()>
  43ff28:	48 89 c2             	mov    %rax,%rdx
	* (__x._M_node - __y._M_node - 1) + (__x._M_cur - __x._M_first)
  43ff2b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43ff2f:	48 8b 40 18          	mov    0x18(%rax),%rax
  43ff33:	48 89 c1             	mov    %rax,%rcx
  43ff36:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  43ff3a:	48 8b 40 18          	mov    0x18(%rax),%rax
  43ff3e:	48 29 c1             	sub    %rax,%rcx
  43ff41:	48 89 c8             	mov    %rcx,%rax
  43ff44:	48 c1 f8 03          	sar    $0x3,%rax
  43ff48:	48 83 e8 01          	sub    $0x1,%rax
  43ff4c:	48 0f af c2          	imul   %rdx,%rax
  43ff50:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  43ff54:	48 8b 12             	mov    (%rdx),%rdx
  43ff57:	48 89 d1             	mov    %rdx,%rcx
  43ff5a:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  43ff5e:	48 8b 52 08          	mov    0x8(%rdx),%rdx
  43ff62:	48 29 d1             	sub    %rdx,%rcx
  43ff65:	48 89 ca             	mov    %rcx,%rdx
  43ff68:	48 c1 fa 05          	sar    $0x5,%rdx
  43ff6c:	48 01 c2             	add    %rax,%rdx
	+ (__y._M_last - __y._M_cur);
  43ff6f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  43ff73:	48 8b 40 10          	mov    0x10(%rax),%rax
  43ff77:	48 89 c1             	mov    %rax,%rcx
  43ff7a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  43ff7e:	48 8b 00             	mov    (%rax),%rax
  43ff81:	48 29 c1             	sub    %rax,%rcx
  43ff84:	48 89 c8             	mov    %rcx,%rax
  43ff87:	48 c1 f8 05          	sar    $0x5,%rax
  43ff8b:	48 01 d0             	add    %rdx,%rax
    }
  43ff8e:	c9                   	leaveq 
  43ff8f:	c3                   	retq   

000000000043ff90 <std::deque<x666::LineInfo, std::allocator<x666::LineInfo> >::end() const>:
      end() const _GLIBCXX_NOEXCEPT
  43ff90:	55                   	push   %rbp
  43ff91:	48 89 e5             	mov    %rsp,%rbp
  43ff94:	48 83 ec 10          	sub    $0x10,%rsp
  43ff98:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  43ff9c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      { return this->_M_impl._M_finish; }
  43ffa0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  43ffa4:	48 8d 50 30          	lea    0x30(%rax),%rdx
  43ffa8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43ffac:	48 89 d6             	mov    %rdx,%rsi
  43ffaf:	48 89 c7             	mov    %rax,%rdi
  43ffb2:	e8 65 1d 00 00       	callq  441d1c <std::_Deque_iterator<x666::LineInfo, x666::LineInfo const&, x666::LineInfo const*>::_Deque_iterator(std::_Deque_iterator<x666::LineInfo, x666::LineInfo&, x666::LineInfo*> const&)>
  43ffb7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43ffbb:	c9                   	leaveq 
  43ffbc:	c3                   	retq   
  43ffbd:	90                   	nop

000000000043ffbe <std::_Deque_iterator<x666::LineInfo, x666::LineInfo const&, x666::LineInfo const*>::operator--()>:
      operator--() _GLIBCXX_NOEXCEPT
  43ffbe:	55                   	push   %rbp
  43ffbf:	48 89 e5             	mov    %rsp,%rbp
  43ffc2:	48 83 ec 10          	sub    $0x10,%rsp
  43ffc6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	if (_M_cur == _M_first)
  43ffca:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43ffce:	48 8b 10             	mov    (%rax),%rdx
  43ffd1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43ffd5:	48 8b 40 08          	mov    0x8(%rax),%rax
  43ffd9:	48 39 c2             	cmp    %rax,%rdx
  43ffdc:	75 2a                	jne    440008 <std::_Deque_iterator<x666::LineInfo, x666::LineInfo const&, x666::LineInfo const*>::operator--()+0x4a>
	    _M_set_node(_M_node - 1);
  43ffde:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43ffe2:	48 8b 40 18          	mov    0x18(%rax),%rax
  43ffe6:	48 8d 50 f8          	lea    -0x8(%rax),%rdx
  43ffea:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43ffee:	48 89 d6             	mov    %rdx,%rsi
  43fff1:	48 89 c7             	mov    %rax,%rdi
  43fff4:	e8 71 1d 00 00       	callq  441d6a <std::_Deque_iterator<x666::LineInfo, x666::LineInfo const&, x666::LineInfo const*>::_M_set_node(x666::LineInfo**)>
	    _M_cur = _M_last;
  43fff9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43fffd:	48 8b 50 10          	mov    0x10(%rax),%rdx
  440001:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  440005:	48 89 10             	mov    %rdx,(%rax)
	--_M_cur;
  440008:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  44000c:	48 8b 00             	mov    (%rax),%rax
  44000f:	48 8d 50 e0          	lea    -0x20(%rax),%rdx
  440013:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  440017:	48 89 10             	mov    %rdx,(%rax)
	return *this;
  44001a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
      }
  44001e:	c9                   	leaveq 
  44001f:	c3                   	retq   

0000000000440020 <std::_Deque_iterator<x666::LineInfo, x666::LineInfo const&, x666::LineInfo const*>::operator*() const>:
      operator*() const _GLIBCXX_NOEXCEPT
  440020:	55                   	push   %rbp
  440021:	48 89 e5             	mov    %rsp,%rbp
  440024:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return *_M_cur; }
  440028:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  44002c:	48 8b 00             	mov    (%rax),%rax
  44002f:	5d                   	pop    %rbp
  440030:	c3                   	retq   
  440031:	90                   	nop

0000000000440032 <std::__detail::__variant::_Variadic_union<x666::StringLiteral>::_Variadic_union()>:
      constexpr _Variadic_union() : _M_rest() { }
  440032:	55                   	push   %rbp
  440033:	48 89 e5             	mov    %rsp,%rbp
  440036:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  44003a:	90                   	nop
  44003b:	5d                   	pop    %rbp
  44003c:	c3                   	retq   

000000000044003d <std::__detail::__variant::_Variadic_union<x666::Identifier, x666::IntLiteral, x666::StringLiteral> const* std::__addressof<std::__detail::__variant::_Variadic_union<x666::Identifier, x666::IntLiteral, x666::StringLiteral> const>(std::__detail::__variant::_Variadic_union<x666::Identifier, x666::IntLiteral, x666::StringLiteral> const&)>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
  44003d:	55                   	push   %rbp
  44003e:	48 89 e5             	mov    %rsp,%rbp
  440041:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return __builtin_addressof(__r); }
  440045:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  440049:	5d                   	pop    %rbp
  44004a:	c3                   	retq   

000000000044004b <std::__detail::__variant::_Variant_storage<false, x666::Identifier, x666::IntLiteral, x666::StringLiteral> const& std::forward<std::__detail::__variant::_Variant_storage<false, x666::Identifier, x666::IntLiteral, x666::StringLiteral> const&>(std::remove_reference<std::__detail::__variant::_Variant_storage<false, x666::Identifier, x666::IntLiteral, x666::StringLiteral> const&>::type&)>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
  44004b:	55                   	push   %rbp
  44004c:	48 89 e5             	mov    %rsp,%rbp
  44004f:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<_Tp&&>(__t); }
  440053:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  440057:	5d                   	pop    %rbp
  440058:	c3                   	retq   

0000000000440059 <decltype(auto) std::__detail::__variant::__get<0ul, std::__detail::__variant::_Variant_storage<false, x666::Identifier, x666::IntLiteral, x666::StringLiteral> const&>(std::__detail::__variant::_Variant_storage<false, x666::Identifier, x666::IntLiteral, x666::StringLiteral> const&)>:
    constexpr decltype(auto) __get(_Variant&& __v)
  440059:	55                   	push   %rbp
  44005a:	48 89 e5             	mov    %rsp,%rbp
  44005d:	53                   	push   %rbx
  44005e:	48 83 ec 18          	sub    $0x18,%rsp
  440062:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
      return __get(std::in_place_index<_Np>, std::forward<_Variant>(__v)._M_u);
  440066:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  44006a:	48 89 c7             	mov    %rax,%rdi
  44006d:	e8 d9 ff ff ff       	callq  44004b <std::__detail::__variant::_Variant_storage<false, x666::Identifier, x666::IntLiteral, x666::StringLiteral> const& std::forward<std::__detail::__variant::_Variant_storage<false, x666::Identifier, x666::IntLiteral, x666::StringLiteral> const&>(std::remove_reference<std::__detail::__variant::_Variant_storage<false, x666::Identifier, x666::IntLiteral, x666::StringLiteral> const&>::type&)>
  440072:	48 83 ec 08          	sub    $0x8,%rsp
  440076:	53                   	push   %rbx
  440077:	48 89 c7             	mov    %rax,%rdi
  44007a:	e8 6d bd ff ff       	callq  43bdec <decltype(auto) std::__detail::__variant::__get<std::__detail::__variant::_Variadic_union<x666::Identifier, x666::IntLiteral, x666::StringLiteral> const&>(std::in_place_index_t<0ul>, std::__detail::__variant::_Variadic_union<x666::Identifier, x666::IntLiteral, x666::StringLiteral> const&)>
  44007f:	48 83 c4 10          	add    $0x10,%rsp
    }
  440083:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  440087:	c9                   	leaveq 
  440088:	c3                   	retq   

0000000000440089 <x666::Identifier const* std::__addressof<x666::Identifier const>(x666::Identifier const&)>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
  440089:	55                   	push   %rbp
  44008a:	48 89 e5             	mov    %rsp,%rbp
  44008d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return __builtin_addressof(__r); }
  440091:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  440095:	5d                   	pop    %rbp
  440096:	c3                   	retq   

0000000000440097 <void std::__detail::__variant::__erased_dtor<std::__detail::__variant::_Variant_storage<false, x666::Identifier, x666::IntLiteral, x666::StringLiteral> const&, 0ul>(std::__detail::__variant::_Variant_storage<false, x666::Identifier, x666::IntLiteral, x666::StringLiteral> const&)>:
    __erased_dtor(_Variant&& __v)
  440097:	55                   	push   %rbp
  440098:	48 89 e5             	mov    %rsp,%rbp
  44009b:	48 83 ec 10          	sub    $0x10,%rsp
  44009f:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { std::_Destroy(std::__addressof(__get<_Np>(__v))); }
  4400a3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4400a7:	48 89 c7             	mov    %rax,%rdi
  4400aa:	e8 aa ff ff ff       	callq  440059 <decltype(auto) std::__detail::__variant::__get<0ul, std::__detail::__variant::_Variant_storage<false, x666::Identifier, x666::IntLiteral, x666::StringLiteral> const&>(std::__detail::__variant::_Variant_storage<false, x666::Identifier, x666::IntLiteral, x666::StringLiteral> const&)>
  4400af:	48 89 c7             	mov    %rax,%rdi
  4400b2:	e8 d2 ff ff ff       	callq  440089 <x666::Identifier const* std::__addressof<x666::Identifier const>(x666::Identifier const&)>
  4400b7:	48 89 c7             	mov    %rax,%rdi
  4400ba:	e8 fc 1c 00 00       	callq  441dbb <void std::_Destroy<x666::Identifier const>(x666::Identifier const*)>
  4400bf:	90                   	nop
  4400c0:	c9                   	leaveq 
  4400c1:	c3                   	retq   

00000000004400c2 <decltype(auto) std::__detail::__variant::__get<1ul, std::__detail::__variant::_Variant_storage<false, x666::Identifier, x666::IntLiteral, x666::StringLiteral> const&>(std::__detail::__variant::_Variant_storage<false, x666::Identifier, x666::IntLiteral, x666::StringLiteral> const&)>:
    constexpr decltype(auto) __get(_Variant&& __v)
  4400c2:	55                   	push   %rbp
  4400c3:	48 89 e5             	mov    %rsp,%rbp
  4400c6:	53                   	push   %rbx
  4400c7:	48 83 ec 18          	sub    $0x18,%rsp
  4400cb:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
      return __get(std::in_place_index<_Np>, std::forward<_Variant>(__v)._M_u);
  4400cf:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4400d3:	48 89 c7             	mov    %rax,%rdi
  4400d6:	e8 70 ff ff ff       	callq  44004b <std::__detail::__variant::_Variant_storage<false, x666::Identifier, x666::IntLiteral, x666::StringLiteral> const& std::forward<std::__detail::__variant::_Variant_storage<false, x666::Identifier, x666::IntLiteral, x666::StringLiteral> const&>(std::remove_reference<std::__detail::__variant::_Variant_storage<false, x666::Identifier, x666::IntLiteral, x666::StringLiteral> const&>::type&)>
  4400db:	48 83 ec 08          	sub    $0x8,%rsp
  4400df:	53                   	push   %rbx
  4400e0:	48 89 c7             	mov    %rax,%rdi
  4400e3:	e8 c0 bd ff ff       	callq  43bea8 <decltype(auto) std::__detail::__variant::__get<1ul, std::__detail::__variant::_Variadic_union<x666::Identifier, x666::IntLiteral, x666::StringLiteral> const&>(std::in_place_index_t<1ul>, std::__detail::__variant::_Variadic_union<x666::Identifier, x666::IntLiteral, x666::StringLiteral> const&)>
  4400e8:	48 83 c4 10          	add    $0x10,%rsp
    }
  4400ec:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  4400f0:	c9                   	leaveq 
  4400f1:	c3                   	retq   

00000000004400f2 <x666::IntLiteral const* std::__addressof<x666::IntLiteral const>(x666::IntLiteral const&)>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
  4400f2:	55                   	push   %rbp
  4400f3:	48 89 e5             	mov    %rsp,%rbp
  4400f6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return __builtin_addressof(__r); }
  4400fa:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4400fe:	5d                   	pop    %rbp
  4400ff:	c3                   	retq   

0000000000440100 <void std::__detail::__variant::__erased_dtor<std::__detail::__variant::_Variant_storage<false, x666::Identifier, x666::IntLiteral, x666::StringLiteral> const&, 1ul>(std::__detail::__variant::_Variant_storage<false, x666::Identifier, x666::IntLiteral, x666::StringLiteral> const&)>:
    __erased_dtor(_Variant&& __v)
  440100:	55                   	push   %rbp
  440101:	48 89 e5             	mov    %rsp,%rbp
  440104:	48 83 ec 10          	sub    $0x10,%rsp
  440108:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { std::_Destroy(std::__addressof(__get<_Np>(__v))); }
  44010c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  440110:	48 89 c7             	mov    %rax,%rdi
  440113:	e8 aa ff ff ff       	callq  4400c2 <decltype(auto) std::__detail::__variant::__get<1ul, std::__detail::__variant::_Variant_storage<false, x666::Identifier, x666::IntLiteral, x666::StringLiteral> const&>(std::__detail::__variant::_Variant_storage<false, x666::Identifier, x666::IntLiteral, x666::StringLiteral> const&)>
  440118:	48 89 c7             	mov    %rax,%rdi
  44011b:	e8 d2 ff ff ff       	callq  4400f2 <x666::IntLiteral const* std::__addressof<x666::IntLiteral const>(x666::IntLiteral const&)>
  440120:	48 89 c7             	mov    %rax,%rdi
  440123:	e8 ae 1c 00 00       	callq  441dd6 <void std::_Destroy<x666::IntLiteral const>(x666::IntLiteral const*)>
  440128:	90                   	nop
  440129:	c9                   	leaveq 
  44012a:	c3                   	retq   

000000000044012b <decltype(auto) std::__detail::__variant::__get<2ul, std::__detail::__variant::_Variant_storage<false, x666::Identifier, x666::IntLiteral, x666::StringLiteral> const&>(std::__detail::__variant::_Variant_storage<false, x666::Identifier, x666::IntLiteral, x666::StringLiteral> const&)>:
    constexpr decltype(auto) __get(_Variant&& __v)
  44012b:	55                   	push   %rbp
  44012c:	48 89 e5             	mov    %rsp,%rbp
  44012f:	53                   	push   %rbx
  440130:	48 83 ec 18          	sub    $0x18,%rsp
  440134:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
      return __get(std::in_place_index<_Np>, std::forward<_Variant>(__v)._M_u);
  440138:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  44013c:	48 89 c7             	mov    %rax,%rdi
  44013f:	e8 07 ff ff ff       	callq  44004b <std::__detail::__variant::_Variant_storage<false, x666::Identifier, x666::IntLiteral, x666::StringLiteral> const& std::forward<std::__detail::__variant::_Variant_storage<false, x666::Identifier, x666::IntLiteral, x666::StringLiteral> const&>(std::remove_reference<std::__detail::__variant::_Variant_storage<false, x666::Identifier, x666::IntLiteral, x666::StringLiteral> const&>::type&)>
  440144:	48 83 ec 08          	sub    $0x8,%rsp
  440148:	53                   	push   %rbx
  440149:	48 89 c7             	mov    %rax,%rdi
  44014c:	e8 52 be ff ff       	callq  43bfa3 <decltype(auto) std::__detail::__variant::__get<2ul, std::__detail::__variant::_Variadic_union<x666::Identifier, x666::IntLiteral, x666::StringLiteral> const&>(std::in_place_index_t<2ul>, std::__detail::__variant::_Variadic_union<x666::Identifier, x666::IntLiteral, x666::StringLiteral> const&)>
  440151:	48 83 c4 10          	add    $0x10,%rsp
    }
  440155:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  440159:	c9                   	leaveq 
  44015a:	c3                   	retq   

000000000044015b <x666::StringLiteral const* std::__addressof<x666::StringLiteral const>(x666::StringLiteral const&)>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
  44015b:	55                   	push   %rbp
  44015c:	48 89 e5             	mov    %rsp,%rbp
  44015f:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return __builtin_addressof(__r); }
  440163:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  440167:	5d                   	pop    %rbp
  440168:	c3                   	retq   

0000000000440169 <void std::__detail::__variant::__erased_dtor<std::__detail::__variant::_Variant_storage<false, x666::Identifier, x666::IntLiteral, x666::StringLiteral> const&, 2ul>(std::__detail::__variant::_Variant_storage<false, x666::Identifier, x666::IntLiteral, x666::StringLiteral> const&)>:
    __erased_dtor(_Variant&& __v)
  440169:	55                   	push   %rbp
  44016a:	48 89 e5             	mov    %rsp,%rbp
  44016d:	48 83 ec 10          	sub    $0x10,%rsp
  440171:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { std::_Destroy(std::__addressof(__get<_Np>(__v))); }
  440175:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  440179:	48 89 c7             	mov    %rax,%rdi
  44017c:	e8 aa ff ff ff       	callq  44012b <decltype(auto) std::__detail::__variant::__get<2ul, std::__detail::__variant::_Variant_storage<false, x666::Identifier, x666::IntLiteral, x666::StringLiteral> const&>(std::__detail::__variant::_Variant_storage<false, x666::Identifier, x666::IntLiteral, x666::StringLiteral> const&)>
  440181:	48 89 c7             	mov    %rax,%rdi
  440184:	e8 d2 ff ff ff       	callq  44015b <x666::StringLiteral const* std::__addressof<x666::StringLiteral const>(x666::StringLiteral const&)>
  440189:	48 89 c7             	mov    %rax,%rdi
  44018c:	e8 50 1c 00 00       	callq  441de1 <void std::_Destroy<x666::StringLiteral const>(x666::StringLiteral const*)>
  440191:	90                   	nop
  440192:	c9                   	leaveq 
  440193:	c3                   	retq   

0000000000440194 <std::_Tuple_impl<0ul, x666::Expression*, std::default_delete<x666::Expression> >::_Tuple_impl<x666::Expression*&, std::default_delete<x666::Expression>, void>(x666::Expression*&, std::default_delete<x666::Expression>&&)>:
        constexpr _Tuple_impl(_UHead&& __head, _UTail&&... __tail)
  440194:	55                   	push   %rbp
  440195:	48 89 e5             	mov    %rsp,%rbp
  440198:	53                   	push   %rbx
  440199:	48 83 ec 28          	sub    $0x28,%rsp
  44019d:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  4401a1:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  4401a5:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
	  _Base(std::forward<_UHead>(__head)) { }
  4401a9:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4401ad:	48 89 c7             	mov    %rax,%rdi
  4401b0:	e8 da cc ff ff       	callq  43ce8f <std::default_delete<x666::Expression>&& std::forward<std::default_delete<x666::Expression> >(std::remove_reference<std::default_delete<x666::Expression> >::type&)>
  4401b5:	48 89 c2             	mov    %rax,%rdx
  4401b8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4401bc:	48 89 d6             	mov    %rdx,%rsi
  4401bf:	48 89 c7             	mov    %rax,%rdi
  4401c2:	e8 35 1c 00 00       	callq  441dfc <std::_Tuple_impl<1ul, std::default_delete<x666::Expression> >::_Tuple_impl<std::default_delete<x666::Expression> >(std::default_delete<x666::Expression>&&)>
  4401c7:	48 8b 5d e8          	mov    -0x18(%rbp),%rbx
  4401cb:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4401cf:	48 89 c7             	mov    %rax,%rdi
  4401d2:	e8 c6 e6 ff ff       	callq  43e89d <x666::Expression*& std::forward<x666::Expression*&>(std::remove_reference<x666::Expression*&>::type&)>
  4401d7:	48 89 c6             	mov    %rax,%rsi
  4401da:	48 89 df             	mov    %rbx,%rdi
  4401dd:	e8 4c 1c 00 00       	callq  441e2e <std::_Head_base<0ul, x666::Expression*, false>::_Head_base<x666::Expression*&>(x666::Expression*&)>
  4401e2:	90                   	nop
  4401e3:	48 83 c4 28          	add    $0x28,%rsp
  4401e7:	5b                   	pop    %rbx
  4401e8:	5d                   	pop    %rbp
  4401e9:	c3                   	retq   

00000000004401ea <std::tuple<x666::BinaryOp*, std::default_delete<x666::BinaryOp> >::tuple<x666::BinaryOp*, std::default_delete<x666::BinaryOp>, true>()>:
      constexpr tuple()
  4401ea:	55                   	push   %rbp
  4401eb:	48 89 e5             	mov    %rsp,%rbp
  4401ee:	48 83 ec 10          	sub    $0x10,%rsp
  4401f2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      : _Inherited() { }
  4401f6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4401fa:	48 89 c7             	mov    %rax,%rdi
  4401fd:	e8 56 1c 00 00       	callq  441e58 <std::_Tuple_impl<0ul, x666::BinaryOp*, std::default_delete<x666::BinaryOp> >::_Tuple_impl()>
  440202:	90                   	nop
  440203:	c9                   	leaveq 
  440204:	c3                   	retq   

0000000000440205 <x666::BinaryOp*& std::__get_helper<0ul, x666::BinaryOp*, std::default_delete<x666::BinaryOp> >(std::_Tuple_impl<0ul, x666::BinaryOp*, std::default_delete<x666::BinaryOp> >&)>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
  440205:	55                   	push   %rbp
  440206:	48 89 e5             	mov    %rsp,%rbp
  440209:	48 83 ec 10          	sub    $0x10,%rsp
  44020d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
  440211:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  440215:	48 89 c7             	mov    %rax,%rdi
  440218:	e8 62 1c 00 00       	callq  441e7f <std::_Tuple_impl<0ul, x666::BinaryOp*, std::default_delete<x666::BinaryOp> >::_M_head(std::_Tuple_impl<0ul, x666::BinaryOp*, std::default_delete<x666::BinaryOp> >&)>
  44021d:	c9                   	leaveq 
  44021e:	c3                   	retq   

000000000044021f <std::tuple_element<1ul, std::tuple<x666::BinaryOp*, std::default_delete<x666::BinaryOp> > >::type& std::get<1ul, x666::BinaryOp*, std::default_delete<x666::BinaryOp> >(std::tuple<x666::BinaryOp*, std::default_delete<x666::BinaryOp> >&)>:
    get(tuple<_Elements...>& __t) noexcept
  44021f:	55                   	push   %rbp
  440220:	48 89 e5             	mov    %rsp,%rbp
  440223:	48 83 ec 10          	sub    $0x10,%rsp
  440227:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return std::__get_helper<__i>(__t); }
  44022b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  44022f:	48 89 c7             	mov    %rax,%rdi
  440232:	e8 62 1c 00 00       	callq  441e99 <std::default_delete<x666::BinaryOp>& std::__get_helper<1ul, std::default_delete<x666::BinaryOp>>(std::_Tuple_impl<1ul, std::default_delete<x666::BinaryOp>>&)>
  440237:	c9                   	leaveq 
  440238:	c3                   	retq   
  440239:	90                   	nop

000000000044023a <std::__uniq_ptr_impl<x666::BinaryOp, std::default_delete<x666::BinaryOp> >::_M_ptr() const>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
  44023a:	55                   	push   %rbp
  44023b:	48 89 e5             	mov    %rsp,%rbp
  44023e:	48 83 ec 10          	sub    $0x10,%rsp
  440242:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  440246:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  44024a:	48 89 c7             	mov    %rax,%rdi
  44024d:	e8 61 1c 00 00       	callq  441eb3 <std::tuple_element<0ul, std::tuple<x666::BinaryOp*, std::default_delete<x666::BinaryOp> > >::type const& std::get<0ul, x666::BinaryOp*, std::default_delete<x666::BinaryOp> >(std::tuple<x666::BinaryOp*, std::default_delete<x666::BinaryOp> > const&)>
  440252:	48 8b 00             	mov    (%rax),%rax
  440255:	c9                   	leaveq 
  440256:	c3                   	retq   
  440257:	90                   	nop

0000000000440258 <std::_Tuple_impl<0ul, x666::Expression*, std::default_delete<x666::Expression> >::_Tuple_impl<x666::Expression*&, std::default_delete<x666::BinaryOp>, void>(x666::Expression*&, std::default_delete<x666::BinaryOp>&&)>:
        constexpr _Tuple_impl(_UHead&& __head, _UTail&&... __tail)
  440258:	55                   	push   %rbp
  440259:	48 89 e5             	mov    %rsp,%rbp
  44025c:	53                   	push   %rbx
  44025d:	48 83 ec 28          	sub    $0x28,%rsp
  440261:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  440265:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  440269:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
	  _Base(std::forward<_UHead>(__head)) { }
  44026d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  440271:	48 89 c7             	mov    %rax,%rdi
  440274:	e8 9a cd ff ff       	callq  43d013 <std::default_delete<x666::BinaryOp>&& std::forward<std::default_delete<x666::BinaryOp> >(std::remove_reference<std::default_delete<x666::BinaryOp> >::type&)>
  440279:	48 89 c2             	mov    %rax,%rdx
  44027c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  440280:	48 89 d6             	mov    %rdx,%rsi
  440283:	48 89 c7             	mov    %rax,%rdi
  440286:	e8 43 1c 00 00       	callq  441ece <std::_Tuple_impl<1ul, std::default_delete<x666::Expression> >::_Tuple_impl<std::default_delete<x666::BinaryOp> >(std::default_delete<x666::BinaryOp>&&)>
  44028b:	48 8b 5d e8          	mov    -0x18(%rbp),%rbx
  44028f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  440293:	48 89 c7             	mov    %rax,%rdi
  440296:	e8 02 e6 ff ff       	callq  43e89d <x666::Expression*& std::forward<x666::Expression*&>(std::remove_reference<x666::Expression*&>::type&)>
  44029b:	48 89 c6             	mov    %rax,%rsi
  44029e:	48 89 df             	mov    %rbx,%rdi
  4402a1:	e8 88 1b 00 00       	callq  441e2e <std::_Head_base<0ul, x666::Expression*, false>::_Head_base<x666::Expression*&>(x666::Expression*&)>
  4402a6:	90                   	nop
  4402a7:	48 83 c4 28          	add    $0x28,%rsp
  4402ab:	5b                   	pop    %rbx
  4402ac:	5d                   	pop    %rbp
  4402ad:	c3                   	retq   

00000000004402ae <std::tuple<x666::UnaryOp*, std::default_delete<x666::UnaryOp> >::tuple<x666::UnaryOp*, std::default_delete<x666::UnaryOp>, true>()>:
      constexpr tuple()
  4402ae:	55                   	push   %rbp
  4402af:	48 89 e5             	mov    %rsp,%rbp
  4402b2:	48 83 ec 10          	sub    $0x10,%rsp
  4402b6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      : _Inherited() { }
  4402ba:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4402be:	48 89 c7             	mov    %rax,%rdi
  4402c1:	e8 3a 1c 00 00       	callq  441f00 <std::_Tuple_impl<0ul, x666::UnaryOp*, std::default_delete<x666::UnaryOp> >::_Tuple_impl()>
  4402c6:	90                   	nop
  4402c7:	c9                   	leaveq 
  4402c8:	c3                   	retq   

00000000004402c9 <x666::UnaryOp*& std::__get_helper<0ul, x666::UnaryOp*, std::default_delete<x666::UnaryOp> >(std::_Tuple_impl<0ul, x666::UnaryOp*, std::default_delete<x666::UnaryOp> >&)>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
  4402c9:	55                   	push   %rbp
  4402ca:	48 89 e5             	mov    %rsp,%rbp
  4402cd:	48 83 ec 10          	sub    $0x10,%rsp
  4402d1:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
  4402d5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4402d9:	48 89 c7             	mov    %rax,%rdi
  4402dc:	e8 46 1c 00 00       	callq  441f27 <std::_Tuple_impl<0ul, x666::UnaryOp*, std::default_delete<x666::UnaryOp> >::_M_head(std::_Tuple_impl<0ul, x666::UnaryOp*, std::default_delete<x666::UnaryOp> >&)>
  4402e1:	c9                   	leaveq 
  4402e2:	c3                   	retq   

00000000004402e3 <std::tuple_element<1ul, std::tuple<x666::UnaryOp*, std::default_delete<x666::UnaryOp> > >::type& std::get<1ul, x666::UnaryOp*, std::default_delete<x666::UnaryOp> >(std::tuple<x666::UnaryOp*, std::default_delete<x666::UnaryOp> >&)>:
    get(tuple<_Elements...>& __t) noexcept
  4402e3:	55                   	push   %rbp
  4402e4:	48 89 e5             	mov    %rsp,%rbp
  4402e7:	48 83 ec 10          	sub    $0x10,%rsp
  4402eb:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return std::__get_helper<__i>(__t); }
  4402ef:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4402f3:	48 89 c7             	mov    %rax,%rdi
  4402f6:	e8 46 1c 00 00       	callq  441f41 <std::default_delete<x666::UnaryOp>& std::__get_helper<1ul, std::default_delete<x666::UnaryOp>>(std::_Tuple_impl<1ul, std::default_delete<x666::UnaryOp>>&)>
  4402fb:	c9                   	leaveq 
  4402fc:	c3                   	retq   
  4402fd:	90                   	nop

00000000004402fe <std::__uniq_ptr_impl<x666::UnaryOp, std::default_delete<x666::UnaryOp> >::_M_ptr() const>:
  4402fe:	55                   	push   %rbp
  4402ff:	48 89 e5             	mov    %rsp,%rbp
  440302:	48 83 ec 10          	sub    $0x10,%rsp
  440306:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  44030a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  44030e:	48 89 c7             	mov    %rax,%rdi
  440311:	e8 45 1c 00 00       	callq  441f5b <std::tuple_element<0ul, std::tuple<x666::UnaryOp*, std::default_delete<x666::UnaryOp> > >::type const& std::get<0ul, x666::UnaryOp*, std::default_delete<x666::UnaryOp> >(std::tuple<x666::UnaryOp*, std::default_delete<x666::UnaryOp> > const&)>
  440316:	48 8b 00             	mov    (%rax),%rax
  440319:	c9                   	leaveq 
  44031a:	c3                   	retq   
  44031b:	90                   	nop

000000000044031c <std::_Tuple_impl<0ul, x666::Expression*, std::default_delete<x666::Expression> >::_Tuple_impl<x666::Expression*&, std::default_delete<x666::UnaryOp>, void>(x666::Expression*&, std::default_delete<x666::UnaryOp>&&)>:
        constexpr _Tuple_impl(_UHead&& __head, _UTail&&... __tail)
  44031c:	55                   	push   %rbp
  44031d:	48 89 e5             	mov    %rsp,%rbp
  440320:	53                   	push   %rbx
  440321:	48 83 ec 28          	sub    $0x28,%rsp
  440325:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  440329:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  44032d:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
	  _Base(std::forward<_UHead>(__head)) { }
  440331:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  440335:	48 89 c7             	mov    %rax,%rdi
  440338:	e8 4a ce ff ff       	callq  43d187 <std::default_delete<x666::UnaryOp>&& std::forward<std::default_delete<x666::UnaryOp> >(std::remove_reference<std::default_delete<x666::UnaryOp> >::type&)>
  44033d:	48 89 c2             	mov    %rax,%rdx
  440340:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  440344:	48 89 d6             	mov    %rdx,%rsi
  440347:	48 89 c7             	mov    %rax,%rdi
  44034a:	e8 27 1c 00 00       	callq  441f76 <std::_Tuple_impl<1ul, std::default_delete<x666::Expression> >::_Tuple_impl<std::default_delete<x666::UnaryOp> >(std::default_delete<x666::UnaryOp>&&)>
  44034f:	48 8b 5d e8          	mov    -0x18(%rbp),%rbx
  440353:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  440357:	48 89 c7             	mov    %rax,%rdi
  44035a:	e8 3e e5 ff ff       	callq  43e89d <x666::Expression*& std::forward<x666::Expression*&>(std::remove_reference<x666::Expression*&>::type&)>
  44035f:	48 89 c6             	mov    %rax,%rsi
  440362:	48 89 df             	mov    %rbx,%rdi
  440365:	e8 c4 1a 00 00       	callq  441e2e <std::_Head_base<0ul, x666::Expression*, false>::_Head_base<x666::Expression*&>(x666::Expression*&)>
  44036a:	90                   	nop
  44036b:	48 83 c4 28          	add    $0x28,%rsp
  44036f:	5b                   	pop    %rbx
  440370:	5d                   	pop    %rbp
  440371:	c3                   	retq   

0000000000440372 <__gnu_cxx::__aligned_membuf<x666::Identifier>::_M_addr() const>:
      _M_addr() const noexcept
  440372:	55                   	push   %rbp
  440373:	48 89 e5             	mov    %rsp,%rbp
  440376:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return static_cast<const void*>(&_M_storage); }
  44037a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  44037e:	5d                   	pop    %rbp
  44037f:	c3                   	retq   

0000000000440380 <__gnu_cxx::__aligned_membuf<x666::IntLiteral>::_M_addr() const>:
      _M_addr() const noexcept
  440380:	55                   	push   %rbp
  440381:	48 89 e5             	mov    %rsp,%rbp
  440384:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return static_cast<const void*>(&_M_storage); }
  440388:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  44038c:	5d                   	pop    %rbp
  44038d:	c3                   	retq   

000000000044038e <__gnu_cxx::__aligned_membuf<x666::StringLiteral>::_M_addr() const>:
      _M_addr() const noexcept
  44038e:	55                   	push   %rbp
  44038f:	48 89 e5             	mov    %rsp,%rbp
  440392:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return static_cast<const void*>(&_M_storage); }
  440396:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  44039a:	5d                   	pop    %rbp
  44039b:	c3                   	retq   

000000000044039c <std::__detail::__variant::_Variadic_union<x666::Identifier, x666::IntLiteral, x666::StringLiteral>::_Variadic_union<x666::Identifier>(std::in_place_index_t<0ul>, x666::Identifier&&)>:
	constexpr _Variadic_union(in_place_index_t<0>, _Args&&... __args)
  44039c:	55                   	push   %rbp
  44039d:	48 89 e5             	mov    %rsp,%rbp
  4403a0:	41 54                	push   %r12
  4403a2:	53                   	push   %rbx
  4403a3:	48 83 ec 10          	sub    $0x10,%rsp
  4403a7:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  4403ab:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	: _M_first(in_place_index<0>, std::forward<_Args>(__args)...)
  4403af:	48 8b 5d e8          	mov    -0x18(%rbp),%rbx
  4403b3:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4403b7:	48 89 c7             	mov    %rax,%rdi
  4403ba:	e8 b8 61 ff ff       	callq  436577 <x666::Identifier&& std::forward<x666::Identifier>(std::remove_reference<x666::Identifier>::type&)>
  4403bf:	48 83 ec 08          	sub    $0x8,%rsp
  4403c3:	41 54                	push   %r12
  4403c5:	48 89 c6             	mov    %rax,%rsi
  4403c8:	48 89 df             	mov    %rbx,%rdi
  4403cb:	e8 04 7d ff ff       	callq  4380d4 <std::__detail::__variant::_Uninitialized<x666::Identifier, false>::_Uninitialized<x666::Identifier>(std::in_place_index_t<0ul>, x666::Identifier&&)>
  4403d0:	48 83 c4 10          	add    $0x10,%rsp
	{ }
  4403d4:	90                   	nop
  4403d5:	48 8d 65 f0          	lea    -0x10(%rbp),%rsp
  4403d9:	5b                   	pop    %rbx
  4403da:	41 5c                	pop    %r12
  4403dc:	5d                   	pop    %rbp
  4403dd:	c3                   	retq   

00000000004403de <std::__detail::__variant::_Variant_storage<false, x666::Identifier, x666::IntLiteral, x666::StringLiteral>::_Variant_storage<0ul, x666::Identifier>(std::in_place_index_t<0ul>, x666::Identifier&&)>:
	constexpr _Variant_storage(in_place_index_t<_Np>, _Args&&... __args)
  4403de:	55                   	push   %rbp
  4403df:	48 89 e5             	mov    %rsp,%rbp
  4403e2:	41 54                	push   %r12
  4403e4:	53                   	push   %rbx
  4403e5:	48 83 ec 10          	sub    $0x10,%rsp
  4403e9:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  4403ed:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	_M_index(_Np)
  4403f1:	48 8b 5d e8          	mov    -0x18(%rbp),%rbx
  4403f5:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4403f9:	48 89 c7             	mov    %rax,%rdi
  4403fc:	e8 76 61 ff ff       	callq  436577 <x666::Identifier&& std::forward<x666::Identifier>(std::remove_reference<x666::Identifier>::type&)>
  440401:	48 83 ec 08          	sub    $0x8,%rsp
  440405:	41 54                	push   %r12
  440407:	48 89 c6             	mov    %rax,%rsi
  44040a:	48 89 df             	mov    %rbx,%rdi
  44040d:	e8 8a ff ff ff       	callq  44039c <std::__detail::__variant::_Variadic_union<x666::Identifier, x666::IntLiteral, x666::StringLiteral>::_Variadic_union<x666::Identifier>(std::in_place_index_t<0ul>, x666::Identifier&&)>
  440412:	48 83 c4 10          	add    $0x10,%rsp
  440416:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  44041a:	c6 40 20 00          	movb   $0x0,0x20(%rax)
	{ }
  44041e:	90                   	nop
  44041f:	48 8d 65 f0          	lea    -0x10(%rbp),%rsp
  440423:	5b                   	pop    %rbx
  440424:	41 5c                	pop    %r12
  440426:	5d                   	pop    %rbp
  440427:	c3                   	retq   

0000000000440428 <std::tuple<x666::Literal*, std::default_delete<x666::Literal> >::tuple<x666::Literal*, std::default_delete<x666::Literal>, true>()>:
      constexpr tuple()
  440428:	55                   	push   %rbp
  440429:	48 89 e5             	mov    %rsp,%rbp
  44042c:	48 83 ec 10          	sub    $0x10,%rsp
  440430:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      : _Inherited() { }
  440434:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  440438:	48 89 c7             	mov    %rax,%rdi
  44043b:	e8 68 1b 00 00       	callq  441fa8 <std::_Tuple_impl<0ul, x666::Literal*, std::default_delete<x666::Literal> >::_Tuple_impl()>
  440440:	90                   	nop
  440441:	c9                   	leaveq 
  440442:	c3                   	retq   

0000000000440443 <x666::Literal*& std::__get_helper<0ul, x666::Literal*, std::default_delete<x666::Literal> >(std::_Tuple_impl<0ul, x666::Literal*, std::default_delete<x666::Literal> >&)>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
  440443:	55                   	push   %rbp
  440444:	48 89 e5             	mov    %rsp,%rbp
  440447:	48 83 ec 10          	sub    $0x10,%rsp
  44044b:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
  44044f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  440453:	48 89 c7             	mov    %rax,%rdi
  440456:	e8 74 1b 00 00       	callq  441fcf <std::_Tuple_impl<0ul, x666::Literal*, std::default_delete<x666::Literal> >::_M_head(std::_Tuple_impl<0ul, x666::Literal*, std::default_delete<x666::Literal> >&)>
  44045b:	c9                   	leaveq 
  44045c:	c3                   	retq   

000000000044045d <std::tuple_element<1ul, std::tuple<x666::Literal*, std::default_delete<x666::Literal> > >::type& std::get<1ul, x666::Literal*, std::default_delete<x666::Literal> >(std::tuple<x666::Literal*, std::default_delete<x666::Literal> >&)>:
    get(tuple<_Elements...>& __t) noexcept
  44045d:	55                   	push   %rbp
  44045e:	48 89 e5             	mov    %rsp,%rbp
  440461:	48 83 ec 10          	sub    $0x10,%rsp
  440465:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return std::__get_helper<__i>(__t); }
  440469:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  44046d:	48 89 c7             	mov    %rax,%rdi
  440470:	e8 74 1b 00 00       	callq  441fe9 <std::default_delete<x666::Literal>& std::__get_helper<1ul, std::default_delete<x666::Literal>>(std::_Tuple_impl<1ul, std::default_delete<x666::Literal>>&)>
  440475:	c9                   	leaveq 
  440476:	c3                   	retq   
  440477:	90                   	nop

0000000000440478 <std::__uniq_ptr_impl<x666::Literal, std::default_delete<x666::Literal> >::_M_ptr() const>:
  440478:	55                   	push   %rbp
  440479:	48 89 e5             	mov    %rsp,%rbp
  44047c:	48 83 ec 10          	sub    $0x10,%rsp
  440480:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  440484:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  440488:	48 89 c7             	mov    %rax,%rdi
  44048b:	e8 73 1b 00 00       	callq  442003 <std::tuple_element<0ul, std::tuple<x666::Literal*, std::default_delete<x666::Literal> > >::type const& std::get<0ul, x666::Literal*, std::default_delete<x666::Literal> >(std::tuple<x666::Literal*, std::default_delete<x666::Literal> > const&)>
  440490:	48 8b 00             	mov    (%rax),%rax
  440493:	c9                   	leaveq 
  440494:	c3                   	retq   
  440495:	90                   	nop

0000000000440496 <std::_Tuple_impl<0ul, x666::Expression*, std::default_delete<x666::Expression> >::_Tuple_impl<x666::Expression*&, std::default_delete<x666::Literal>, void>(x666::Expression*&, std::default_delete<x666::Literal>&&)>:
        constexpr _Tuple_impl(_UHead&& __head, _UTail&&... __tail)
  440496:	55                   	push   %rbp
  440497:	48 89 e5             	mov    %rsp,%rbp
  44049a:	53                   	push   %rbx
  44049b:	48 83 ec 28          	sub    $0x28,%rsp
  44049f:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  4404a3:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  4404a7:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
	  _Base(std::forward<_UHead>(__head)) { }
  4404ab:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4404af:	48 89 c7             	mov    %rax,%rdi
  4404b2:	e8 86 cf ff ff       	callq  43d43d <std::default_delete<x666::Literal>&& std::forward<std::default_delete<x666::Literal> >(std::remove_reference<std::default_delete<x666::Literal> >::type&)>
  4404b7:	48 89 c2             	mov    %rax,%rdx
  4404ba:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4404be:	48 89 d6             	mov    %rdx,%rsi
  4404c1:	48 89 c7             	mov    %rax,%rdi
  4404c4:	e8 55 1b 00 00       	callq  44201e <std::_Tuple_impl<1ul, std::default_delete<x666::Expression> >::_Tuple_impl<std::default_delete<x666::Literal> >(std::default_delete<x666::Literal>&&)>
  4404c9:	48 8b 5d e8          	mov    -0x18(%rbp),%rbx
  4404cd:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4404d1:	48 89 c7             	mov    %rax,%rdi
  4404d4:	e8 c4 e3 ff ff       	callq  43e89d <x666::Expression*& std::forward<x666::Expression*&>(std::remove_reference<x666::Expression*&>::type&)>
  4404d9:	48 89 c6             	mov    %rax,%rsi
  4404dc:	48 89 df             	mov    %rbx,%rdi
  4404df:	e8 4a 19 00 00       	callq  441e2e <std::_Head_base<0ul, x666::Expression*, false>::_Head_base<x666::Expression*&>(x666::Expression*&)>
  4404e4:	90                   	nop
  4404e5:	48 83 c4 28          	add    $0x28,%rsp
  4404e9:	5b                   	pop    %rbx
  4404ea:	5d                   	pop    %rbp
  4404eb:	c3                   	retq   

00000000004404ec <void std::deque<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > >::_M_push_back_aux<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > >(std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&&)>:
      deque<_Tp, _Alloc>::
  4404ec:	55                   	push   %rbp
  4404ed:	48 89 e5             	mov    %rsp,%rbp
  4404f0:	53                   	push   %rbx
  4404f1:	48 83 ec 18          	sub    $0x18,%rsp
  4404f5:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  4404f9:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	_M_reserve_map_at_back();
  4404fd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  440501:	be 01 00 00 00       	mov    $0x1,%esi
  440506:	48 89 c7             	mov    %rax,%rdi
  440509:	e8 42 1b 00 00       	callq  442050 <std::deque<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > >::_M_reserve_map_at_back(unsigned long)>
	*(this->_M_impl._M_finish._M_node + 1) = this->_M_allocate_node();
  44050e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  440512:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  440516:	48 8b 52 48          	mov    0x48(%rdx),%rdx
  44051a:	48 8d 5a 08          	lea    0x8(%rdx),%rbx
  44051e:	48 89 c7             	mov    %rax,%rdi
  440521:	e8 8c 1b 00 00       	callq  4420b2 <std::_Deque_base<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > >::_M_allocate_node()>
  440526:	48 89 03             	mov    %rax,(%rbx)
	    _Alloc_traits::construct(this->_M_impl,
  440529:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  44052d:	48 89 c7             	mov    %rax,%rdi
  440530:	e8 11 b5 ff ff       	callq  43ba46 <std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&& std::forward<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > >(std::remove_reference<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > >::type&)>
  440535:	48 89 c2             	mov    %rax,%rdx
  440538:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  44053c:	48 8b 48 30          	mov    0x30(%rax),%rcx
  440540:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  440544:	48 89 ce             	mov    %rcx,%rsi
  440547:	48 89 c7             	mov    %rax,%rdi
  44054a:	e8 59 ed ff ff       	callq  43f2a8 <void std::allocator_traits<std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > >::construct<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > >(std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > >&, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&&)>
	    this->_M_impl._M_finish._M_set_node(this->_M_impl._M_finish._M_node
  44054f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  440553:	48 83 c0 30          	add    $0x30,%rax
  440557:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  44055b:	48 8b 52 48          	mov    0x48(%rdx),%rdx
  44055f:	48 83 c2 08          	add    $0x8,%rdx
  440563:	48 89 d6             	mov    %rdx,%rsi
  440566:	48 89 c7             	mov    %rax,%rdi
  440569:	e8 32 03 00 00       	callq  4408a0 <std::_Deque_iterator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*>::_M_set_node(std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >**)>
	    this->_M_impl._M_finish._M_cur = this->_M_impl._M_finish._M_first;
  44056e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  440572:	48 8b 50 38          	mov    0x38(%rax),%rdx
  440576:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  44057a:	48 89 50 30          	mov    %rdx,0x30(%rax)
      }
  44057e:	90                   	nop
  44057f:	48 83 c4 18          	add    $0x18,%rsp
  440583:	5b                   	pop    %rbx
  440584:	5d                   	pop    %rbp
  440585:	c3                   	retq   

0000000000440586 <void __gnu_cxx::new_allocator<x666::LineInfo>::construct<x666::LineInfo, x666::LineInfo const&>(x666::LineInfo*, x666::LineInfo const&)>:
	construct(_Up* __p, _Args&&... __args)
  440586:	55                   	push   %rbp
  440587:	48 89 e5             	mov    %rsp,%rbp
  44058a:	53                   	push   %rbx
  44058b:	48 83 ec 28          	sub    $0x28,%rsp
  44058f:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  440593:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  440597:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
  44059b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  44059f:	48 89 c7             	mov    %rax,%rdi
  4405a2:	e8 fa bd ff ff       	callq  43c3a1 <x666::LineInfo const& std::forward<x666::LineInfo const&>(std::remove_reference<x666::LineInfo const&>::type&)>
  4405a7:	48 89 c3             	mov    %rax,%rbx
  4405aa:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4405ae:	48 89 c6             	mov    %rax,%rsi
  4405b1:	bf 20 00 00 00       	mov    $0x20,%edi
  4405b6:	e8 d1 55 ff ff       	callq  435b8c <operator new(unsigned long, void*)>
  4405bb:	48 89 c1             	mov    %rax,%rcx
  4405be:	48 8b 03             	mov    (%rbx),%rax
  4405c1:	48 8b 53 08          	mov    0x8(%rbx),%rdx
  4405c5:	48 89 01             	mov    %rax,(%rcx)
  4405c8:	48 89 51 08          	mov    %rdx,0x8(%rcx)
  4405cc:	48 8b 43 10          	mov    0x10(%rbx),%rax
  4405d0:	48 8b 53 18          	mov    0x18(%rbx),%rdx
  4405d4:	48 89 41 10          	mov    %rax,0x10(%rcx)
  4405d8:	48 89 51 18          	mov    %rdx,0x18(%rcx)
  4405dc:	90                   	nop
  4405dd:	48 83 c4 28          	add    $0x28,%rsp
  4405e1:	5b                   	pop    %rbx
  4405e2:	5d                   	pop    %rbp
  4405e3:	c3                   	retq   

00000000004405e4 <std::deque<x666::LineInfo, std::allocator<x666::LineInfo> >::_M_reserve_map_at_back(unsigned long)>:
       *  Makes sure the _M_map has space for new nodes.  Does not
       *  actually add the nodes.  Can invalidate _M_map pointers.
       *  (And consequently, %deque iterators.)
       */
      void
      _M_reserve_map_at_back(size_type __nodes_to_add = 1)
  4405e4:	55                   	push   %rbp
  4405e5:	48 89 e5             	mov    %rsp,%rbp
  4405e8:	48 83 ec 10          	sub    $0x10,%rsp
  4405ec:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4405f0:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      {
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
  4405f4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4405f8:	48 8d 50 01          	lea    0x1(%rax),%rdx
  4405fc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  440600:	48 8b 48 08          	mov    0x8(%rax),%rcx
	    - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))
  440604:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  440608:	48 8b 40 48          	mov    0x48(%rax),%rax
  44060c:	48 89 c6             	mov    %rax,%rsi
  44060f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  440613:	48 8b 00             	mov    (%rax),%rax
  440616:	48 29 c6             	sub    %rax,%rsi
  440619:	48 89 f0             	mov    %rsi,%rax
  44061c:	48 c1 f8 03          	sar    $0x3,%rax
  440620:	48 29 c1             	sub    %rax,%rcx
  440623:	48 89 c8             	mov    %rcx,%rax
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
  440626:	48 39 c2             	cmp    %rax,%rdx
  440629:	76 18                	jbe    440643 <std::deque<x666::LineInfo, std::allocator<x666::LineInfo> >::_M_reserve_map_at_back(unsigned long)+0x5f>
	  _M_reallocate_map(__nodes_to_add, false);
  44062b:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  44062f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  440633:	ba 00 00 00 00       	mov    $0x0,%edx
  440638:	48 89 ce             	mov    %rcx,%rsi
  44063b:	48 89 c7             	mov    %rax,%rdi
  44063e:	e8 99 1a 00 00       	callq  4420dc <std::deque<x666::LineInfo, std::allocator<x666::LineInfo> >::_M_reallocate_map(unsigned long, bool)>
      }
  440643:	90                   	nop
  440644:	c9                   	leaveq 
  440645:	c3                   	retq   

0000000000440646 <std::_Deque_base<x666::LineInfo, std::allocator<x666::LineInfo> >::_M_allocate_node()>:
      _M_allocate_node()
  440646:	55                   	push   %rbp
  440647:	48 89 e5             	mov    %rsp,%rbp
  44064a:	48 83 ec 10          	sub    $0x10,%rsp
  44064e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	return _Traits::allocate(_M_impl, __deque_buf_size(sizeof(_Tp)));
  440652:	bf 20 00 00 00       	mov    $0x20,%edi
  440657:	e8 d2 26 ff ff       	callq  432d2e <std::__deque_buf_size(unsigned long)>
  44065c:	48 89 c2             	mov    %rax,%rdx
  44065f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  440663:	48 89 d6             	mov    %rdx,%rsi
  440666:	48 89 c7             	mov    %rax,%rdi
  440669:	e8 91 1c 00 00       	callq  4422ff <std::allocator_traits<std::allocator<x666::LineInfo> >::allocate(std::allocator<x666::LineInfo>&, unsigned long)>
      }
  44066e:	c9                   	leaveq 
  44066f:	c3                   	retq   

0000000000440670 <std::_Deque_iterator<x666::LineInfo, x666::LineInfo&, x666::LineInfo*>::_M_set_node(x666::LineInfo**)>:
      _M_set_node(_Map_pointer __new_node) _GLIBCXX_NOEXCEPT
  440670:	55                   	push   %rbp
  440671:	48 89 e5             	mov    %rsp,%rbp
  440674:	53                   	push   %rbx
  440675:	48 83 ec 18          	sub    $0x18,%rsp
  440679:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  44067d:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	_M_node = __new_node;
  440681:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  440685:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  440689:	48 89 50 18          	mov    %rdx,0x18(%rax)
	_M_first = *__new_node;
  44068d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  440691:	48 8b 10             	mov    (%rax),%rdx
  440694:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  440698:	48 89 50 08          	mov    %rdx,0x8(%rax)
	_M_last = _M_first + difference_type(_S_buffer_size());
  44069c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4406a0:	48 8b 58 08          	mov    0x8(%rax),%rbx
  4406a4:	e8 63 16 00 00       	callq  441d0c <std::_Deque_iterator<x666::LineInfo, x666::LineInfo&, x666::LineInfo*>::_S_buffer_size()>
  4406a9:	48 c1 e0 05          	shl    $0x5,%rax
  4406ad:	48 8d 14 03          	lea    (%rbx,%rax,1),%rdx
  4406b1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4406b5:	48 89 50 10          	mov    %rdx,0x10(%rax)
      }
  4406b9:	90                   	nop
  4406ba:	48 83 c4 18          	add    $0x18,%rsp
  4406be:	5b                   	pop    %rbx
  4406bf:	5d                   	pop    %rbp
  4406c0:	c3                   	retq   
  4406c1:	90                   	nop

00000000004406c2 <std::__detail::__variant::_Variadic_union<x666::StringLiteral>::_Variadic_union<x666::StringLiteral>(std::in_place_index_t<0ul>, x666::StringLiteral&&)>:
	constexpr _Variadic_union(in_place_index_t<0>, _Args&&... __args)
  4406c2:	55                   	push   %rbp
  4406c3:	48 89 e5             	mov    %rsp,%rbp
  4406c6:	41 54                	push   %r12
  4406c8:	53                   	push   %rbx
  4406c9:	48 83 ec 10          	sub    $0x10,%rsp
  4406cd:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  4406d1:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	: _M_first(in_place_index<0>, std::forward<_Args>(__args)...)
  4406d5:	48 8b 5d e8          	mov    -0x18(%rbp),%rbx
  4406d9:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4406dd:	48 89 c7             	mov    %rax,%rdi
  4406e0:	e8 3c 5f ff ff       	callq  436621 <x666::StringLiteral&& std::forward<x666::StringLiteral>(std::remove_reference<x666::StringLiteral>::type&)>
  4406e5:	48 83 ec 08          	sub    $0x8,%rsp
  4406e9:	41 54                	push   %r12
  4406eb:	48 89 c6             	mov    %rax,%rsi
  4406ee:	48 89 df             	mov    %rbx,%rdi
  4406f1:	e8 d4 7a ff ff       	callq  4381ca <std::__detail::__variant::_Uninitialized<x666::StringLiteral, false>::_Uninitialized<x666::StringLiteral>(std::in_place_index_t<0ul>, x666::StringLiteral&&)>
  4406f6:	48 83 c4 10          	add    $0x10,%rsp
	{ }
  4406fa:	90                   	nop
  4406fb:	48 8d 65 f0          	lea    -0x10(%rbp),%rsp
  4406ff:	5b                   	pop    %rbx
  440700:	41 5c                	pop    %r12
  440702:	5d                   	pop    %rbp
  440703:	c3                   	retq   

0000000000440704 <std::__detail::__variant::_Variadic_union<x666::IntLiteral, x666::StringLiteral>::_Variadic_union<1ul, x666::StringLiteral>(std::in_place_index_t<1ul>, x666::StringLiteral&&)>:
	constexpr _Variadic_union(in_place_index_t<_Np>, _Args&&... __args)
  440704:	55                   	push   %rbp
  440705:	48 89 e5             	mov    %rsp,%rbp
  440708:	41 54                	push   %r12
  44070a:	53                   	push   %rbx
  44070b:	48 83 ec 10          	sub    $0x10,%rsp
  44070f:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  440713:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	: _M_rest(in_place_index<_Np-1>, std::forward<_Args>(__args)...)
  440717:	48 8b 5d e8          	mov    -0x18(%rbp),%rbx
  44071b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  44071f:	48 89 c7             	mov    %rax,%rdi
  440722:	e8 fa 5e ff ff       	callq  436621 <x666::StringLiteral&& std::forward<x666::StringLiteral>(std::remove_reference<x666::StringLiteral>::type&)>
  440727:	48 83 ec 08          	sub    $0x8,%rsp
  44072b:	41 54                	push   %r12
  44072d:	48 89 c6             	mov    %rax,%rsi
  440730:	48 89 df             	mov    %rbx,%rdi
  440733:	e8 8a ff ff ff       	callq  4406c2 <std::__detail::__variant::_Variadic_union<x666::StringLiteral>::_Variadic_union<x666::StringLiteral>(std::in_place_index_t<0ul>, x666::StringLiteral&&)>
  440738:	48 83 c4 10          	add    $0x10,%rsp
	{ }
  44073c:	90                   	nop
  44073d:	48 8d 65 f0          	lea    -0x10(%rbp),%rsp
  440741:	5b                   	pop    %rbx
  440742:	41 5c                	pop    %r12
  440744:	5d                   	pop    %rbp
  440745:	c3                   	retq   

0000000000440746 <std::__detail::__variant::_Variadic_union<x666::Identifier, x666::IntLiteral, x666::StringLiteral>::_Variadic_union<2ul, x666::StringLiteral>(std::in_place_index_t<2ul>, x666::StringLiteral&&)>:
	constexpr _Variadic_union(in_place_index_t<_Np>, _Args&&... __args)
  440746:	55                   	push   %rbp
  440747:	48 89 e5             	mov    %rsp,%rbp
  44074a:	41 54                	push   %r12
  44074c:	53                   	push   %rbx
  44074d:	48 83 ec 10          	sub    $0x10,%rsp
  440751:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  440755:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	: _M_rest(in_place_index<_Np-1>, std::forward<_Args>(__args)...)
  440759:	48 8b 5d e8          	mov    -0x18(%rbp),%rbx
  44075d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  440761:	48 89 c7             	mov    %rax,%rdi
  440764:	e8 b8 5e ff ff       	callq  436621 <x666::StringLiteral&& std::forward<x666::StringLiteral>(std::remove_reference<x666::StringLiteral>::type&)>
  440769:	48 83 ec 08          	sub    $0x8,%rsp
  44076d:	41 54                	push   %r12
  44076f:	48 89 c6             	mov    %rax,%rsi
  440772:	48 89 df             	mov    %rbx,%rdi
  440775:	e8 8a ff ff ff       	callq  440704 <std::__detail::__variant::_Variadic_union<x666::IntLiteral, x666::StringLiteral>::_Variadic_union<1ul, x666::StringLiteral>(std::in_place_index_t<1ul>, x666::StringLiteral&&)>
  44077a:	48 83 c4 10          	add    $0x10,%rsp
	{ }
  44077e:	90                   	nop
  44077f:	48 8d 65 f0          	lea    -0x10(%rbp),%rsp
  440783:	5b                   	pop    %rbx
  440784:	41 5c                	pop    %r12
  440786:	5d                   	pop    %rbp
  440787:	c3                   	retq   

0000000000440788 <std::__detail::__variant::_Variant_storage<false, x666::Identifier, x666::IntLiteral, x666::StringLiteral>::_Variant_storage<2ul, x666::StringLiteral>(std::in_place_index_t<2ul>, x666::StringLiteral&&)>:
	constexpr _Variant_storage(in_place_index_t<_Np>, _Args&&... __args)
  440788:	55                   	push   %rbp
  440789:	48 89 e5             	mov    %rsp,%rbp
  44078c:	41 54                	push   %r12
  44078e:	53                   	push   %rbx
  44078f:	48 83 ec 10          	sub    $0x10,%rsp
  440793:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  440797:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	_M_index(_Np)
  44079b:	48 8b 5d e8          	mov    -0x18(%rbp),%rbx
  44079f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4407a3:	48 89 c7             	mov    %rax,%rdi
  4407a6:	e8 76 5e ff ff       	callq  436621 <x666::StringLiteral&& std::forward<x666::StringLiteral>(std::remove_reference<x666::StringLiteral>::type&)>
  4407ab:	48 83 ec 08          	sub    $0x8,%rsp
  4407af:	41 54                	push   %r12
  4407b1:	48 89 c6             	mov    %rax,%rsi
  4407b4:	48 89 df             	mov    %rbx,%rdi
  4407b7:	e8 8a ff ff ff       	callq  440746 <std::__detail::__variant::_Variadic_union<x666::Identifier, x666::IntLiteral, x666::StringLiteral>::_Variadic_union<2ul, x666::StringLiteral>(std::in_place_index_t<2ul>, x666::StringLiteral&&)>
  4407bc:	48 83 c4 10          	add    $0x10,%rsp
  4407c0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4407c4:	c6 40 20 02          	movb   $0x2,0x20(%rax)
	{ }
  4407c8:	90                   	nop
  4407c9:	48 8d 65 f0          	lea    -0x10(%rbp),%rsp
  4407cd:	5b                   	pop    %rbx
  4407ce:	41 5c                	pop    %r12
  4407d0:	5d                   	pop    %rbp
  4407d1:	c3                   	retq   

00000000004407d2 <std::__detail::__variant::_Variadic_union<x666::IntLiteral, x666::StringLiteral>::_Variadic_union<x666::IntLiteral>(std::in_place_index_t<0ul>, x666::IntLiteral&&)>:
	constexpr _Variadic_union(in_place_index_t<0>, _Args&&... __args)
  4407d2:	55                   	push   %rbp
  4407d3:	48 89 e5             	mov    %rsp,%rbp
  4407d6:	41 54                	push   %r12
  4407d8:	53                   	push   %rbx
  4407d9:	48 83 ec 10          	sub    $0x10,%rsp
  4407dd:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  4407e1:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	: _M_first(in_place_index<0>, std::forward<_Args>(__args)...)
  4407e5:	48 8b 5d e8          	mov    -0x18(%rbp),%rbx
  4407e9:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4407ed:	48 89 c7             	mov    %rax,%rdi
  4407f0:	e8 d8 5c ff ff       	callq  4364cd <x666::IntLiteral&& std::forward<x666::IntLiteral>(std::remove_reference<x666::IntLiteral>::type&)>
  4407f5:	48 83 ec 08          	sub    $0x8,%rsp
  4407f9:	41 54                	push   %r12
  4407fb:	48 89 c6             	mov    %rax,%rsi
  4407fe:	48 89 df             	mov    %rbx,%rdi
  440801:	e8 56 77 ff ff       	callq  437f5c <std::__detail::__variant::_Uninitialized<x666::IntLiteral, false>::_Uninitialized<x666::IntLiteral>(std::in_place_index_t<0ul>, x666::IntLiteral&&)>
  440806:	48 83 c4 10          	add    $0x10,%rsp
	{ }
  44080a:	90                   	nop
  44080b:	48 8d 65 f0          	lea    -0x10(%rbp),%rsp
  44080f:	5b                   	pop    %rbx
  440810:	41 5c                	pop    %r12
  440812:	5d                   	pop    %rbp
  440813:	c3                   	retq   

0000000000440814 <std::__detail::__variant::_Variadic_union<x666::Identifier, x666::IntLiteral, x666::StringLiteral>::_Variadic_union<1ul, x666::IntLiteral>(std::in_place_index_t<1ul>, x666::IntLiteral&&)>:
	constexpr _Variadic_union(in_place_index_t<_Np>, _Args&&... __args)
  440814:	55                   	push   %rbp
  440815:	48 89 e5             	mov    %rsp,%rbp
  440818:	41 54                	push   %r12
  44081a:	53                   	push   %rbx
  44081b:	48 83 ec 10          	sub    $0x10,%rsp
  44081f:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  440823:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	: _M_rest(in_place_index<_Np-1>, std::forward<_Args>(__args)...)
  440827:	48 8b 5d e8          	mov    -0x18(%rbp),%rbx
  44082b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  44082f:	48 89 c7             	mov    %rax,%rdi
  440832:	e8 96 5c ff ff       	callq  4364cd <x666::IntLiteral&& std::forward<x666::IntLiteral>(std::remove_reference<x666::IntLiteral>::type&)>
  440837:	48 83 ec 08          	sub    $0x8,%rsp
  44083b:	41 54                	push   %r12
  44083d:	48 89 c6             	mov    %rax,%rsi
  440840:	48 89 df             	mov    %rbx,%rdi
  440843:	e8 8a ff ff ff       	callq  4407d2 <std::__detail::__variant::_Variadic_union<x666::IntLiteral, x666::StringLiteral>::_Variadic_union<x666::IntLiteral>(std::in_place_index_t<0ul>, x666::IntLiteral&&)>
  440848:	48 83 c4 10          	add    $0x10,%rsp
	{ }
  44084c:	90                   	nop
  44084d:	48 8d 65 f0          	lea    -0x10(%rbp),%rsp
  440851:	5b                   	pop    %rbx
  440852:	41 5c                	pop    %r12
  440854:	5d                   	pop    %rbp
  440855:	c3                   	retq   

0000000000440856 <std::__detail::__variant::_Variant_storage<false, x666::Identifier, x666::IntLiteral, x666::StringLiteral>::_Variant_storage<1ul, x666::IntLiteral>(std::in_place_index_t<1ul>, x666::IntLiteral&&)>:
	constexpr _Variant_storage(in_place_index_t<_Np>, _Args&&... __args)
  440856:	55                   	push   %rbp
  440857:	48 89 e5             	mov    %rsp,%rbp
  44085a:	41 54                	push   %r12
  44085c:	53                   	push   %rbx
  44085d:	48 83 ec 10          	sub    $0x10,%rsp
  440861:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  440865:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	_M_index(_Np)
  440869:	48 8b 5d e8          	mov    -0x18(%rbp),%rbx
  44086d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  440871:	48 89 c7             	mov    %rax,%rdi
  440874:	e8 54 5c ff ff       	callq  4364cd <x666::IntLiteral&& std::forward<x666::IntLiteral>(std::remove_reference<x666::IntLiteral>::type&)>
  440879:	48 83 ec 08          	sub    $0x8,%rsp
  44087d:	41 54                	push   %r12
  44087f:	48 89 c6             	mov    %rax,%rsi
  440882:	48 89 df             	mov    %rbx,%rdi
  440885:	e8 8a ff ff ff       	callq  440814 <std::__detail::__variant::_Variadic_union<x666::Identifier, x666::IntLiteral, x666::StringLiteral>::_Variadic_union<1ul, x666::IntLiteral>(std::in_place_index_t<1ul>, x666::IntLiteral&&)>
  44088a:	48 83 c4 10          	add    $0x10,%rsp
  44088e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  440892:	c6 40 20 01          	movb   $0x1,0x20(%rax)
	{ }
  440896:	90                   	nop
  440897:	48 8d 65 f0          	lea    -0x10(%rbp),%rsp
  44089b:	5b                   	pop    %rbx
  44089c:	41 5c                	pop    %r12
  44089e:	5d                   	pop    %rbp
  44089f:	c3                   	retq   

00000000004408a0 <std::_Deque_iterator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*>::_M_set_node(std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >**)>:
      _M_set_node(_Map_pointer __new_node) _GLIBCXX_NOEXCEPT
  4408a0:	55                   	push   %rbp
  4408a1:	48 89 e5             	mov    %rsp,%rbp
  4408a4:	53                   	push   %rbx
  4408a5:	48 83 ec 18          	sub    $0x18,%rsp
  4408a9:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  4408ad:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	_M_node = __new_node;
  4408b1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4408b5:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  4408b9:	48 89 50 18          	mov    %rdx,0x18(%rax)
	_M_first = *__new_node;
  4408bd:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4408c1:	48 8b 10             	mov    (%rax),%rdx
  4408c4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4408c8:	48 89 50 08          	mov    %rdx,0x8(%rax)
	_M_last = _M_first + difference_type(_S_buffer_size());
  4408cc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4408d0:	48 8b 58 08          	mov    0x8(%rax),%rbx
  4408d4:	e8 94 03 00 00       	callq  440c6d <std::_Deque_iterator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*>::_S_buffer_size()>
  4408d9:	48 c1 e0 03          	shl    $0x3,%rax
  4408dd:	48 8d 14 03          	lea    (%rbx,%rax,1),%rdx
  4408e1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4408e5:	48 89 50 10          	mov    %rdx,0x10(%rax)
      }
  4408e9:	90                   	nop
  4408ea:	48 83 c4 18          	add    $0x18,%rsp
  4408ee:	5b                   	pop    %rbx
  4408ef:	5d                   	pop    %rbp
  4408f0:	c3                   	retq   
  4408f1:	90                   	nop

00000000004408f2 <void __gnu_cxx::new_allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > >::destroy<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > >(std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*)>:

      template<typename _Up>
	void
	destroy(_Up* __p) { __p->~_Up(); }
  4408f2:	55                   	push   %rbp
  4408f3:	48 89 e5             	mov    %rsp,%rbp
  4408f6:	48 83 ec 10          	sub    $0x10,%rsp
  4408fa:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4408fe:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  440902:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  440906:	48 89 c7             	mov    %rax,%rdi
  440909:	e8 fe 24 ff ff       	callq  432e0c <std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >::~unique_ptr()>
  44090e:	90                   	nop
  44090f:	c9                   	leaveq 
  440910:	c3                   	retq   
  440911:	90                   	nop

0000000000440912 <void __gnu_cxx::new_allocator<x666::LineInfo>::destroy<x666::LineInfo>(x666::LineInfo*)>:
  440912:	55                   	push   %rbp
  440913:	48 89 e5             	mov    %rsp,%rbp
  440916:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  44091a:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  44091e:	90                   	nop
  44091f:	5d                   	pop    %rbp
  440920:	c3                   	retq   
  440921:	90                   	nop

0000000000440922 <void __gnu_cxx::new_allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > >::construct<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > >(std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&&)>:
	construct(_Up* __p, _Args&&... __args)
  440922:	55                   	push   %rbp
  440923:	48 89 e5             	mov    %rsp,%rbp
  440926:	53                   	push   %rbx
  440927:	48 83 ec 28          	sub    $0x28,%rsp
  44092b:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  44092f:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  440933:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
  440937:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  44093b:	48 89 c7             	mov    %rax,%rdi
  44093e:	e8 03 b1 ff ff       	callq  43ba46 <std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&& std::forward<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > >(std::remove_reference<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > >::type&)>
  440943:	48 89 c3             	mov    %rax,%rbx
  440946:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  44094a:	48 89 c6             	mov    %rax,%rsi
  44094d:	bf 08 00 00 00       	mov    $0x8,%edi
  440952:	e8 35 52 ff ff       	callq  435b8c <operator new(unsigned long, void*)>
  440957:	48 89 de             	mov    %rbx,%rsi
  44095a:	48 89 c7             	mov    %rax,%rdi
  44095d:	e8 92 b0 ff ff       	callq  43b9f4 <std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >::unique_ptr(std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&&)>
  440962:	90                   	nop
  440963:	48 83 c4 28          	add    $0x28,%rsp
  440967:	5b                   	pop    %rbx
  440968:	5d                   	pop    %rbp
  440969:	c3                   	retq   

000000000044096a <std::vector<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > >::_M_check_len(unsigned long, char const*) const>:
      _M_check_len(size_type __n, const char* __s) const
  44096a:	55                   	push   %rbp
  44096b:	48 89 e5             	mov    %rsp,%rbp
  44096e:	53                   	push   %rbx
  44096f:	48 83 ec 38          	sub    $0x38,%rsp
  440973:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  440977:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  44097b:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
	if (max_size() - size() < __n)
  44097f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  440983:	48 89 c7             	mov    %rax,%rdi
  440986:	e8 9f 19 00 00       	callq  44232a <std::vector<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > >::max_size() const>
  44098b:	48 89 c3             	mov    %rax,%rbx
  44098e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  440992:	48 89 c7             	mov    %rax,%rdi
  440995:	e8 b2 19 00 00       	callq  44234c <std::vector<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > >::size() const>
  44099a:	48 29 c3             	sub    %rax,%rbx
  44099d:	48 89 da             	mov    %rbx,%rdx
  4409a0:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  4409a4:	48 39 c2             	cmp    %rax,%rdx
  4409a7:	0f 92 c0             	setb   %al
  4409aa:	84 c0                	test   %al,%al
  4409ac:	74 0c                	je     4409ba <std::vector<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > >::_M_check_len(unsigned long, char const*) const+0x50>
	  __throw_length_error(__N(__s));
  4409ae:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  4409b2:	48 89 c7             	mov    %rax,%rdi
  4409b5:	e8 56 1d ff ff       	callq  432710 <std::__throw_length_error(char const*)@plt>
	const size_type __len = size() + std::max(size(), __n);
  4409ba:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4409be:	48 89 c7             	mov    %rax,%rdi
  4409c1:	e8 86 19 00 00       	callq  44234c <std::vector<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > >::size() const>
  4409c6:	48 89 c3             	mov    %rax,%rbx
  4409c9:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4409cd:	48 89 c7             	mov    %rax,%rdi
  4409d0:	e8 77 19 00 00       	callq  44234c <std::vector<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > >::size() const>
  4409d5:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  4409d9:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
  4409dd:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  4409e1:	48 89 d6             	mov    %rdx,%rsi
  4409e4:	48 89 c7             	mov    %rax,%rdi
  4409e7:	e8 d1 01 00 00       	callq  440bbd <unsigned long const& std::max<unsigned long>(unsigned long const&, unsigned long const&)>
  4409ec:	48 8b 00             	mov    (%rax),%rax
  4409ef:	48 01 d8             	add    %rbx,%rax
  4409f2:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	return (__len < size() || __len > max_size()) ? max_size() : __len;
  4409f6:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4409fa:	48 89 c7             	mov    %rax,%rdi
  4409fd:	e8 4a 19 00 00       	callq  44234c <std::vector<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > >::size() const>
  440a02:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
  440a06:	72 12                	jb     440a1a <std::vector<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > >::_M_check_len(unsigned long, char const*) const+0xb0>
  440a08:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  440a0c:	48 89 c7             	mov    %rax,%rdi
  440a0f:	e8 16 19 00 00       	callq  44232a <std::vector<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > >::max_size() const>
  440a14:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
  440a18:	76 0e                	jbe    440a28 <std::vector<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > >::_M_check_len(unsigned long, char const*) const+0xbe>
  440a1a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  440a1e:	48 89 c7             	mov    %rax,%rdi
  440a21:	e8 04 19 00 00       	callq  44232a <std::vector<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > >::max_size() const>
  440a26:	eb 04                	jmp    440a2c <std::vector<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > >::_M_check_len(unsigned long, char const*) const+0xc2>
  440a28:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
      }
  440a2c:	48 83 c4 38          	add    $0x38,%rsp
  440a30:	5b                   	pop    %rbx
  440a31:	5d                   	pop    %rbp
  440a32:	c3                   	retq   

0000000000440a33 <__gnu_cxx::__normal_iterator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*, std::vector<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > > >::difference_type __gnu_cxx::operator-<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*, std::vector<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > > >(__gnu_cxx::__normal_iterator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*, std::vector<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > > > const&, __gnu_cxx::__normal_iterator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*, std::vector<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > > > const&)>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
  440a33:	55                   	push   %rbp
  440a34:	48 89 e5             	mov    %rsp,%rbp
  440a37:	53                   	push   %rbx
  440a38:	48 83 ec 18          	sub    $0x18,%rsp
  440a3c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  440a40:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    { return __lhs.base() - __rhs.base(); }
  440a44:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  440a48:	48 89 c7             	mov    %rax,%rdi
  440a4b:	e8 8c 2d ff ff       	callq  4337dc <__gnu_cxx::__normal_iterator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*, std::vector<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > > >::base() const>
  440a50:	48 8b 00             	mov    (%rax),%rax
  440a53:	48 89 c3             	mov    %rax,%rbx
  440a56:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  440a5a:	48 89 c7             	mov    %rax,%rdi
  440a5d:	e8 7a 2d ff ff       	callq  4337dc <__gnu_cxx::__normal_iterator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*, std::vector<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > > >::base() const>
  440a62:	48 8b 00             	mov    (%rax),%rax
  440a65:	48 29 c3             	sub    %rax,%rbx
  440a68:	48 89 d8             	mov    %rbx,%rax
  440a6b:	48 c1 f8 03          	sar    $0x3,%rax
  440a6f:	48 83 c4 18          	add    $0x18,%rsp
  440a73:	5b                   	pop    %rbx
  440a74:	5d                   	pop    %rbp
  440a75:	c3                   	retq   

0000000000440a76 <std::_Vector_base<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > >::_M_allocate(unsigned long)>:
      _M_allocate(size_t __n)
  440a76:	55                   	push   %rbp
  440a77:	48 89 e5             	mov    %rsp,%rbp
  440a7a:	48 83 ec 10          	sub    $0x10,%rsp
  440a7e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  440a82:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
  440a86:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
  440a8b:	74 15                	je     440aa2 <std::_Vector_base<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > >::_M_allocate(unsigned long)+0x2c>
  440a8d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  440a91:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  440a95:	48 89 d6             	mov    %rdx,%rsi
  440a98:	48 89 c7             	mov    %rax,%rdi
  440a9b:	e8 d2 18 00 00       	callq  442372 <std::allocator_traits<std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > >::allocate(std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > >&, unsigned long)>
  440aa0:	eb 05                	jmp    440aa7 <std::_Vector_base<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > >::_M_allocate(unsigned long)+0x31>
  440aa2:	b8 00 00 00 00       	mov    $0x0,%eax
      }
  440aa7:	c9                   	leaveq 
  440aa8:	c3                   	retq   

0000000000440aa9 <std::move_iterator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*> std::__make_move_if_noexcept_iterator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::move_iterator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*> >(std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*)>:
    __make_move_if_noexcept_iterator(_Tp* __i)
  440aa9:	55                   	push   %rbp
  440aaa:	48 89 e5             	mov    %rsp,%rbp
  440aad:	48 83 ec 20          	sub    $0x20,%rsp
  440ab1:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    { return _ReturnType(__i); }
  440ab5:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  440ab9:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
  440abd:	48 89 d6             	mov    %rdx,%rsi
  440ac0:	48 89 c7             	mov    %rax,%rdi
  440ac3:	e8 d4 18 00 00       	callq  44239c <std::move_iterator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*>::move_iterator(std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*)>
  440ac8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  440acc:	c9                   	leaveq 
  440acd:	c3                   	retq   

0000000000440ace <std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >* std::__uninitialized_move_if_noexcept_a<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*, std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > >(std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*, std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > >&)>:
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
  440ace:	55                   	push   %rbp
  440acf:	48 89 e5             	mov    %rsp,%rbp
  440ad2:	53                   	push   %rbx
  440ad3:	48 83 ec 28          	sub    $0x28,%rsp
  440ad7:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  440adb:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  440adf:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  440ae3:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
  440ae7:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  440aeb:	48 89 c7             	mov    %rax,%rdi
  440aee:	e8 b6 ff ff ff       	callq  440aa9 <std::move_iterator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*> std::__make_move_if_noexcept_iterator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::move_iterator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*> >(std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*)>
  440af3:	48 89 c3             	mov    %rax,%rbx
  440af6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  440afa:	48 89 c7             	mov    %rax,%rdi
  440afd:	e8 a7 ff ff ff       	callq  440aa9 <std::move_iterator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*> std::__make_move_if_noexcept_iterator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::move_iterator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*> >(std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*)>
  440b02:	48 89 c7             	mov    %rax,%rdi
	 _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__last), __result, __alloc);
  440b05:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  440b09:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  440b0d:	48 89 d1             	mov    %rdx,%rcx
  440b10:	48 89 c2             	mov    %rax,%rdx
  440b13:	48 89 de             	mov    %rbx,%rsi
  440b16:	e8 9b 18 00 00       	callq  4423b6 <std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >* std::__uninitialized_copy_a<std::move_iterator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*>, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > >(std::move_iterator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*>, std::move_iterator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*>, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*, std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > >&)>
    }
  440b1b:	48 83 c4 28          	add    $0x28,%rsp
  440b1f:	5b                   	pop    %rbx
  440b20:	5d                   	pop    %rbp
  440b21:	c3                   	retq   

0000000000440b22 <__gnu_cxx::__normal_iterator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*, std::vector<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > > >::operator-(long) const>:
      operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
  440b22:	55                   	push   %rbp
  440b23:	48 89 e5             	mov    %rsp,%rbp
  440b26:	48 83 ec 20          	sub    $0x20,%rsp
  440b2a:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  440b2e:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
      { return __normal_iterator(_M_current - __n); }
  440b32:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  440b36:	48 8b 10             	mov    (%rax),%rdx
  440b39:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  440b3d:	48 c1 e0 03          	shl    $0x3,%rax
  440b41:	48 f7 d8             	neg    %rax
  440b44:	48 01 d0             	add    %rdx,%rax
  440b47:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  440b4b:	48 8d 55 f8          	lea    -0x8(%rbp),%rdx
  440b4f:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
  440b53:	48 89 d6             	mov    %rdx,%rsi
  440b56:	48 89 c7             	mov    %rax,%rdi
  440b59:	e8 60 2c ff ff       	callq  4337be <__gnu_cxx::__normal_iterator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*, std::vector<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > > >::__normal_iterator(std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >* const&)>
  440b5e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  440b62:	c9                   	leaveq 
  440b63:	c3                   	retq   

0000000000440b64 <std::vector<x666::LexError, std::allocator<x666::LexError> >::max_size() const>:
      max_size() const _GLIBCXX_NOEXCEPT
  440b64:	55                   	push   %rbp
  440b65:	48 89 e5             	mov    %rsp,%rbp
  440b68:	48 83 ec 10          	sub    $0x10,%rsp
  440b6c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _Alloc_traits::max_size(_M_get_Tp_allocator()); }
  440b70:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  440b74:	48 89 c7             	mov    %rax,%rdi
  440b77:	e8 86 18 00 00       	callq  442402 <std::_Vector_base<x666::LexError, std::allocator<x666::LexError> >::_M_get_Tp_allocator() const>
  440b7c:	48 89 c7             	mov    %rax,%rdi
  440b7f:	e8 63 18 00 00       	callq  4423e7 <std::allocator_traits<std::allocator<x666::LexError> >::max_size(std::allocator<x666::LexError> const&)>
  440b84:	c9                   	leaveq 
  440b85:	c3                   	retq   

0000000000440b86 <std::vector<x666::LexError, std::allocator<x666::LexError> >::size() const>:
      size() const _GLIBCXX_NOEXCEPT
  440b86:	55                   	push   %rbp
  440b87:	48 89 e5             	mov    %rsp,%rbp
  440b8a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
  440b8e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  440b92:	48 8b 40 08          	mov    0x8(%rax),%rax
  440b96:	48 89 c2             	mov    %rax,%rdx
  440b99:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  440b9d:	48 8b 00             	mov    (%rax),%rax
  440ba0:	48 29 c2             	sub    %rax,%rdx
  440ba3:	48 89 d0             	mov    %rdx,%rax
  440ba6:	48 c1 f8 03          	sar    $0x3,%rax
  440baa:	48 89 c2             	mov    %rax,%rdx
  440bad:	48 b8 cd cc cc cc cc 	movabs $0xcccccccccccccccd,%rax
  440bb4:	cc cc cc 
  440bb7:	48 0f af c2          	imul   %rdx,%rax
  440bbb:	5d                   	pop    %rbp
  440bbc:	c3                   	retq   

0000000000440bbd <unsigned long const& std::max<unsigned long>(unsigned long const&, unsigned long const&)>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
  440bbd:	55                   	push   %rbp
  440bbe:	48 89 e5             	mov    %rsp,%rbp
  440bc1:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  440bc5:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
  440bc9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  440bcd:	48 8b 10             	mov    (%rax),%rdx
  440bd0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  440bd4:	48 8b 00             	mov    (%rax),%rax
  440bd7:	48 39 c2             	cmp    %rax,%rdx
  440bda:	73 06                	jae    440be2 <unsigned long const& std::max<unsigned long>(unsigned long const&, unsigned long const&)+0x25>
	return __b;
  440bdc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  440be0:	eb 04                	jmp    440be6 <unsigned long const& std::max<unsigned long>(unsigned long const&, unsigned long const&)+0x29>
      return __a;
  440be2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    }
  440be6:	5d                   	pop    %rbp
  440be7:	c3                   	retq   

0000000000440be8 <std::allocator_traits<std::allocator<x666::LexError> >::allocate(std::allocator<x666::LexError>&, unsigned long)>:
      allocate(allocator_type& __a, size_type __n)
  440be8:	55                   	push   %rbp
  440be9:	48 89 e5             	mov    %rsp,%rbp
  440bec:	48 83 ec 10          	sub    $0x10,%rsp
  440bf0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  440bf4:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      { return __a.allocate(__n); }
  440bf8:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  440bfc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  440c00:	ba 00 00 00 00       	mov    $0x0,%edx
  440c05:	48 89 ce             	mov    %rcx,%rsi
  440c08:	48 89 c7             	mov    %rax,%rdi
  440c0b:	e8 00 18 00 00       	callq  442410 <__gnu_cxx::new_allocator<x666::LexError>::allocate(unsigned long, void const*)>
  440c10:	c9                   	leaveq 
  440c11:	c3                   	retq   

0000000000440c12 <std::move_iterator<x666::LexError*>::move_iterator(x666::LexError*)>:
      move_iterator(iterator_type __i)
  440c12:	55                   	push   %rbp
  440c13:	48 89 e5             	mov    %rsp,%rbp
  440c16:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  440c1a:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      : _M_current(__i) { }
  440c1e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  440c22:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  440c26:	48 89 10             	mov    %rdx,(%rax)
  440c29:	90                   	nop
  440c2a:	5d                   	pop    %rbp
  440c2b:	c3                   	retq   

0000000000440c2c <x666::LexError* std::__uninitialized_copy_a<std::move_iterator<x666::LexError*>, x666::LexError*, x666::LexError>(std::move_iterator<x666::LexError*>, std::move_iterator<x666::LexError*>, x666::LexError*, std::allocator<x666::LexError>&)>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
  440c2c:	55                   	push   %rbp
  440c2d:	48 89 e5             	mov    %rsp,%rbp
  440c30:	48 83 ec 20          	sub    $0x20,%rsp
  440c34:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  440c38:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  440c3c:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  440c40:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
    { return std::uninitialized_copy(__first, __last, __result); }
  440c44:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  440c48:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  440c4c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  440c50:	48 89 ce             	mov    %rcx,%rsi
  440c53:	48 89 c7             	mov    %rax,%rdi
  440c56:	e8 01 18 00 00       	callq  44245c <x666::LexError* std::uninitialized_copy<std::move_iterator<x666::LexError*>, x666::LexError*>(std::move_iterator<x666::LexError*>, std::move_iterator<x666::LexError*>, x666::LexError*)>
  440c5b:	c9                   	leaveq 
  440c5c:	c3                   	retq   
  440c5d:	90                   	nop

0000000000440c5e <void __gnu_cxx::new_allocator<x666::LexError>::destroy<x666::LexError>(x666::LexError*)>:
	destroy(_Up* __p) { __p->~_Up(); }
  440c5e:	55                   	push   %rbp
  440c5f:	48 89 e5             	mov    %rsp,%rbp
  440c62:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  440c66:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  440c6a:	90                   	nop
  440c6b:	5d                   	pop    %rbp
  440c6c:	c3                   	retq   

0000000000440c6d <std::_Deque_iterator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*>::_S_buffer_size()>:
      static size_t _S_buffer_size() _GLIBCXX_NOEXCEPT
  440c6d:	55                   	push   %rbp
  440c6e:	48 89 e5             	mov    %rsp,%rbp
      { return __deque_buf_size(sizeof(_Tp)); }
  440c71:	bf 08 00 00 00       	mov    $0x8,%edi
  440c76:	e8 b3 20 ff ff       	callq  432d2e <std::__deque_buf_size(unsigned long)>
  440c7b:	5d                   	pop    %rbp
  440c7c:	c3                   	retq   

0000000000440c7d <void std::allocator_traits<std::allocator<x666::Parser::BracketEntry> >::construct<x666::Parser::BracketEntry, x666::Parser::BracketEntry>(std::allocator<x666::Parser::BracketEntry>&, x666::Parser::BracketEntry*, x666::Parser::BracketEntry&&)>:
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
  440c7d:	55                   	push   %rbp
  440c7e:	48 89 e5             	mov    %rsp,%rbp
  440c81:	48 83 ec 20          	sub    $0x20,%rsp
  440c85:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  440c89:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  440c8d:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
  440c91:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  440c95:	48 89 c7             	mov    %rax,%rdi
  440c98:	e8 4b ed ff ff       	callq  43f9e8 <x666::Parser::BracketEntry&& std::forward<x666::Parser::BracketEntry>(std::remove_reference<x666::Parser::BracketEntry>::type&)>
  440c9d:	48 89 c2             	mov    %rax,%rdx
  440ca0:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  440ca4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  440ca8:	48 89 ce             	mov    %rcx,%rsi
  440cab:	48 89 c7             	mov    %rax,%rdi
  440cae:	e8 db 17 00 00       	callq  44248e <void __gnu_cxx::new_allocator<x666::Parser::BracketEntry>::construct<x666::Parser::BracketEntry, x666::Parser::BracketEntry>(x666::Parser::BracketEntry*, x666::Parser::BracketEntry&&)>
  440cb3:	90                   	nop
  440cb4:	c9                   	leaveq 
  440cb5:	c3                   	retq   

0000000000440cb6 <void std::deque<x666::Parser::BracketEntry, std::allocator<x666::Parser::BracketEntry> >::_M_push_back_aux<x666::Parser::BracketEntry>(x666::Parser::BracketEntry&&)>:
      deque<_Tp, _Alloc>::
  440cb6:	55                   	push   %rbp
  440cb7:	48 89 e5             	mov    %rsp,%rbp
  440cba:	53                   	push   %rbx
  440cbb:	48 83 ec 18          	sub    $0x18,%rsp
  440cbf:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  440cc3:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	_M_reserve_map_at_back();
  440cc7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  440ccb:	be 01 00 00 00       	mov    $0x1,%esi
  440cd0:	48 89 c7             	mov    %rax,%rdi
  440cd3:	e8 04 18 00 00       	callq  4424dc <std::deque<x666::Parser::BracketEntry, std::allocator<x666::Parser::BracketEntry> >::_M_reserve_map_at_back(unsigned long)>
	*(this->_M_impl._M_finish._M_node + 1) = this->_M_allocate_node();
  440cd8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  440cdc:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  440ce0:	48 8b 52 48          	mov    0x48(%rdx),%rdx
  440ce4:	48 8d 5a 08          	lea    0x8(%rdx),%rbx
  440ce8:	48 89 c7             	mov    %rax,%rdi
  440ceb:	e8 4e 18 00 00       	callq  44253e <std::_Deque_base<x666::Parser::BracketEntry, std::allocator<x666::Parser::BracketEntry> >::_M_allocate_node()>
  440cf0:	48 89 03             	mov    %rax,(%rbx)
	    _Alloc_traits::construct(this->_M_impl,
  440cf3:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  440cf7:	48 89 c7             	mov    %rax,%rdi
  440cfa:	e8 e9 ec ff ff       	callq  43f9e8 <x666::Parser::BracketEntry&& std::forward<x666::Parser::BracketEntry>(std::remove_reference<x666::Parser::BracketEntry>::type&)>
  440cff:	48 89 c2             	mov    %rax,%rdx
  440d02:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  440d06:	48 8b 48 30          	mov    0x30(%rax),%rcx
  440d0a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  440d0e:	48 89 ce             	mov    %rcx,%rsi
  440d11:	48 89 c7             	mov    %rax,%rdi
  440d14:	e8 64 ff ff ff       	callq  440c7d <void std::allocator_traits<std::allocator<x666::Parser::BracketEntry> >::construct<x666::Parser::BracketEntry, x666::Parser::BracketEntry>(std::allocator<x666::Parser::BracketEntry>&, x666::Parser::BracketEntry*, x666::Parser::BracketEntry&&)>
	    this->_M_impl._M_finish._M_set_node(this->_M_impl._M_finish._M_node
  440d19:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  440d1d:	48 83 c0 30          	add    $0x30,%rax
  440d21:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  440d25:	48 8b 52 48          	mov    0x48(%rdx),%rdx
  440d29:	48 83 c2 08          	add    $0x8,%rdx
  440d2d:	48 89 d6             	mov    %rdx,%rsi
  440d30:	48 89 c7             	mov    %rax,%rdi
  440d33:	e8 18 00 00 00       	callq  440d50 <std::_Deque_iterator<x666::Parser::BracketEntry, x666::Parser::BracketEntry&, x666::Parser::BracketEntry*>::_M_set_node(x666::Parser::BracketEntry**)>
	    this->_M_impl._M_finish._M_cur = this->_M_impl._M_finish._M_first;
  440d38:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  440d3c:	48 8b 50 38          	mov    0x38(%rax),%rdx
  440d40:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  440d44:	48 89 50 30          	mov    %rdx,0x30(%rax)
      }
  440d48:	90                   	nop
  440d49:	48 83 c4 18          	add    $0x18,%rsp
  440d4d:	5b                   	pop    %rbx
  440d4e:	5d                   	pop    %rbp
  440d4f:	c3                   	retq   

0000000000440d50 <std::_Deque_iterator<x666::Parser::BracketEntry, x666::Parser::BracketEntry&, x666::Parser::BracketEntry*>::_M_set_node(x666::Parser::BracketEntry**)>:
      _M_set_node(_Map_pointer __new_node) _GLIBCXX_NOEXCEPT
  440d50:	55                   	push   %rbp
  440d51:	48 89 e5             	mov    %rsp,%rbp
  440d54:	53                   	push   %rbx
  440d55:	48 83 ec 18          	sub    $0x18,%rsp
  440d59:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  440d5d:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	_M_node = __new_node;
  440d61:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  440d65:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  440d69:	48 89 50 18          	mov    %rdx,0x18(%rax)
	_M_first = *__new_node;
  440d6d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  440d71:	48 8b 10             	mov    (%rax),%rdx
  440d74:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  440d78:	48 89 50 08          	mov    %rdx,0x8(%rax)
	_M_last = _M_first + difference_type(_S_buffer_size());
  440d7c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  440d80:	48 8b 58 08          	mov    0x8(%rax),%rbx
  440d84:	e8 73 0f 00 00       	callq  441cfc <std::_Deque_iterator<x666::Parser::BracketEntry, x666::Parser::BracketEntry&, x666::Parser::BracketEntry*>::_S_buffer_size()>
  440d89:	48 c1 e0 04          	shl    $0x4,%rax
  440d8d:	48 8d 14 03          	lea    (%rbx,%rax,1),%rdx
  440d91:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  440d95:	48 89 50 10          	mov    %rdx,0x10(%rax)
      }
  440d99:	90                   	nop
  440d9a:	48 83 c4 18          	add    $0x18,%rsp
  440d9e:	5b                   	pop    %rbx
  440d9f:	5d                   	pop    %rbp
  440da0:	c3                   	retq   
  440da1:	90                   	nop

0000000000440da2 <void __gnu_cxx::new_allocator<x666::Parser::BracketEntry>::destroy<x666::Parser::BracketEntry>(x666::Parser::BracketEntry*)>:
  440da2:	55                   	push   %rbp
  440da3:	48 89 e5             	mov    %rsp,%rbp
  440da6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  440daa:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  440dae:	90                   	nop
  440daf:	5d                   	pop    %rbp
  440db0:	c3                   	retq   
  440db1:	90                   	nop

0000000000440db2 <std::tuple<x666::Bracket*, std::default_delete<x666::Bracket> >::tuple<x666::Bracket*, std::default_delete<x666::Bracket>, true>()>:
      constexpr tuple()
  440db2:	55                   	push   %rbp
  440db3:	48 89 e5             	mov    %rsp,%rbp
  440db6:	48 83 ec 10          	sub    $0x10,%rsp
  440dba:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      : _Inherited() { }
  440dbe:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  440dc2:	48 89 c7             	mov    %rax,%rdi
  440dc5:	e8 9e 17 00 00       	callq  442568 <std::_Tuple_impl<0ul, x666::Bracket*, std::default_delete<x666::Bracket> >::_Tuple_impl()>
  440dca:	90                   	nop
  440dcb:	c9                   	leaveq 
  440dcc:	c3                   	retq   

0000000000440dcd <x666::Bracket*& std::__get_helper<0ul, x666::Bracket*, std::default_delete<x666::Bracket> >(std::_Tuple_impl<0ul, x666::Bracket*, std::default_delete<x666::Bracket> >&)>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
  440dcd:	55                   	push   %rbp
  440dce:	48 89 e5             	mov    %rsp,%rbp
  440dd1:	48 83 ec 10          	sub    $0x10,%rsp
  440dd5:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
  440dd9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  440ddd:	48 89 c7             	mov    %rax,%rdi
  440de0:	e8 aa 17 00 00       	callq  44258f <std::_Tuple_impl<0ul, x666::Bracket*, std::default_delete<x666::Bracket> >::_M_head(std::_Tuple_impl<0ul, x666::Bracket*, std::default_delete<x666::Bracket> >&)>
  440de5:	c9                   	leaveq 
  440de6:	c3                   	retq   

0000000000440de7 <std::tuple_element<1ul, std::tuple<x666::Bracket*, std::default_delete<x666::Bracket> > >::type& std::get<1ul, x666::Bracket*, std::default_delete<x666::Bracket> >(std::tuple<x666::Bracket*, std::default_delete<x666::Bracket> >&)>:
    get(tuple<_Elements...>& __t) noexcept
  440de7:	55                   	push   %rbp
  440de8:	48 89 e5             	mov    %rsp,%rbp
  440deb:	48 83 ec 10          	sub    $0x10,%rsp
  440def:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return std::__get_helper<__i>(__t); }
  440df3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  440df7:	48 89 c7             	mov    %rax,%rdi
  440dfa:	e8 aa 17 00 00       	callq  4425a9 <std::default_delete<x666::Bracket>& std::__get_helper<1ul, std::default_delete<x666::Bracket>>(std::_Tuple_impl<1ul, std::default_delete<x666::Bracket>>&)>
  440dff:	c9                   	leaveq 
  440e00:	c3                   	retq   
  440e01:	90                   	nop

0000000000440e02 <std::__uniq_ptr_impl<x666::Bracket, std::default_delete<x666::Bracket> >::_M_ptr() const>:
  440e02:	55                   	push   %rbp
  440e03:	48 89 e5             	mov    %rsp,%rbp
  440e06:	48 83 ec 10          	sub    $0x10,%rsp
  440e0a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  440e0e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  440e12:	48 89 c7             	mov    %rax,%rdi
  440e15:	e8 a9 17 00 00       	callq  4425c3 <std::tuple_element<0ul, std::tuple<x666::Bracket*, std::default_delete<x666::Bracket> > >::type const& std::get<0ul, x666::Bracket*, std::default_delete<x666::Bracket> >(std::tuple<x666::Bracket*, std::default_delete<x666::Bracket> > const&)>
  440e1a:	48 8b 00             	mov    (%rax),%rax
  440e1d:	c9                   	leaveq 
  440e1e:	c3                   	retq   
  440e1f:	90                   	nop

0000000000440e20 <std::_Tuple_impl<0ul, x666::Expression*, std::default_delete<x666::Expression> >::_Tuple_impl<x666::Expression*&, std::default_delete<x666::Bracket>, void>(x666::Expression*&, std::default_delete<x666::Bracket>&&)>:
        constexpr _Tuple_impl(_UHead&& __head, _UTail&&... __tail)
  440e20:	55                   	push   %rbp
  440e21:	48 89 e5             	mov    %rsp,%rbp
  440e24:	53                   	push   %rbx
  440e25:	48 83 ec 28          	sub    $0x28,%rsp
  440e29:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  440e2d:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  440e31:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
	  _Base(std::forward<_UHead>(__head)) { }
  440e35:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  440e39:	48 89 c7             	mov    %rax,%rdi
  440e3c:	e8 5e d5 ff ff       	callq  43e39f <std::default_delete<x666::Bracket>&& std::forward<std::default_delete<x666::Bracket> >(std::remove_reference<std::default_delete<x666::Bracket> >::type&)>
  440e41:	48 89 c2             	mov    %rax,%rdx
  440e44:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  440e48:	48 89 d6             	mov    %rdx,%rsi
  440e4b:	48 89 c7             	mov    %rax,%rdi
  440e4e:	e8 8b 17 00 00       	callq  4425de <std::_Tuple_impl<1ul, std::default_delete<x666::Expression> >::_Tuple_impl<std::default_delete<x666::Bracket> >(std::default_delete<x666::Bracket>&&)>
  440e53:	48 8b 5d e8          	mov    -0x18(%rbp),%rbx
  440e57:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  440e5b:	48 89 c7             	mov    %rax,%rdi
  440e5e:	e8 3a da ff ff       	callq  43e89d <x666::Expression*& std::forward<x666::Expression*&>(std::remove_reference<x666::Expression*&>::type&)>
  440e63:	48 89 c6             	mov    %rax,%rsi
  440e66:	48 89 df             	mov    %rbx,%rdi
  440e69:	e8 c0 0f 00 00       	callq  441e2e <std::_Head_base<0ul, x666::Expression*, false>::_Head_base<x666::Expression*&>(x666::Expression*&)>
  440e6e:	90                   	nop
  440e6f:	48 83 c4 28          	add    $0x28,%rsp
  440e73:	5b                   	pop    %rbx
  440e74:	5d                   	pop    %rbp
  440e75:	c3                   	retq   

0000000000440e76 <std::_Tuple_impl<1ul, std::default_delete<x666::Expression> >::_Tuple_impl()>:
      constexpr _Tuple_impl()
  440e76:	55                   	push   %rbp
  440e77:	48 89 e5             	mov    %rsp,%rbp
  440e7a:	48 83 ec 10          	sub    $0x10,%rsp
  440e7e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      : _Base() { }
  440e82:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  440e86:	48 89 c7             	mov    %rax,%rdi
  440e89:	e8 82 17 00 00       	callq  442610 <std::_Head_base<1ul, std::default_delete<x666::Expression>, true>::_Head_base()>
  440e8e:	90                   	nop
  440e8f:	c9                   	leaveq 
  440e90:	c3                   	retq   
  440e91:	90                   	nop

0000000000440e92 <std::_Head_base<0ul, x666::Expression*, false>::_Head_base()>:
      constexpr _Head_base()
  440e92:	55                   	push   %rbp
  440e93:	48 89 e5             	mov    %rsp,%rbp
  440e96:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      : _M_head_impl() { }
  440e9a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  440e9e:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  440ea5:	90                   	nop
  440ea6:	5d                   	pop    %rbp
  440ea7:	c3                   	retq   

0000000000440ea8 <std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > >::allocator()>:
      allocator() throw() { }
  440ea8:	55                   	push   %rbp
  440ea9:	48 89 e5             	mov    %rsp,%rbp
  440eac:	48 83 ec 10          	sub    $0x10,%rsp
  440eb0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  440eb4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  440eb8:	48 89 c7             	mov    %rax,%rdi
  440ebb:	e8 5c 17 00 00       	callq  44261c <__gnu_cxx::new_allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > >::new_allocator()>
  440ec0:	90                   	nop
  440ec1:	c9                   	leaveq 
  440ec2:	c3                   	retq   
  440ec3:	90                   	nop

0000000000440ec4 <std::_Deque_base<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > >::_Deque_impl::_Deque_impl()>:
	_Deque_impl()
  440ec4:	55                   	push   %rbp
  440ec5:	48 89 e5             	mov    %rsp,%rbp
  440ec8:	48 83 ec 10          	sub    $0x10,%rsp
  440ecc:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	  _M_start(), _M_finish()
  440ed0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  440ed4:	48 89 c7             	mov    %rax,%rdi
  440ed7:	e8 cc ff ff ff       	callq  440ea8 <std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > >::allocator()>
  440edc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  440ee0:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  440ee7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  440eeb:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
  440ef2:	00 
  440ef3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  440ef7:	48 83 c0 10          	add    $0x10,%rax
  440efb:	48 89 c7             	mov    %rax,%rdi
  440efe:	e8 25 17 00 00       	callq  442628 <std::_Deque_iterator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*>::_Deque_iterator()>
  440f03:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  440f07:	48 83 c0 30          	add    $0x30,%rax
  440f0b:	48 89 c7             	mov    %rax,%rdi
  440f0e:	e8 15 17 00 00       	callq  442628 <std::_Deque_iterator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*>::_Deque_iterator()>
	{ }
  440f13:	90                   	nop
  440f14:	c9                   	leaveq 
  440f15:	c3                   	retq   

0000000000440f16 <std::_Deque_base<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > >::_M_initialize_map(unsigned long)>:
    _Deque_base<_Tp, _Alloc>::
  440f16:	55                   	push   %rbp
  440f17:	48 89 e5             	mov    %rsp,%rbp
  440f1a:	53                   	push   %rbx
  440f1b:	48 83 ec 48          	sub    $0x48,%rsp
  440f1f:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
  440f23:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
      const size_t __num_nodes = (__num_elements/ __deque_buf_size(sizeof(_Tp))
  440f27:	bf 08 00 00 00       	mov    $0x8,%edi
  440f2c:	e8 fd 1d ff ff       	callq  432d2e <std::__deque_buf_size(unsigned long)>
  440f31:	48 89 c3             	mov    %rax,%rbx
  440f34:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  440f38:	ba 00 00 00 00       	mov    $0x0,%edx
  440f3d:	48 f7 f3             	div    %rbx
  440f40:	48 83 c0 01          	add    $0x1,%rax
  440f44:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
					   size_t(__num_nodes + 2));
  440f48:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  440f4c:	48 83 c0 02          	add    $0x2,%rax
  440f50:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  440f54:	48 c7 45 d0 08 00 00 	movq   $0x8,-0x30(%rbp)
  440f5b:	00 
  440f5c:	48 8d 55 c8          	lea    -0x38(%rbp),%rdx
  440f60:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  440f64:	48 89 d6             	mov    %rdx,%rsi
  440f67:	48 89 c7             	mov    %rax,%rdi
  440f6a:	e8 4e fc ff ff       	callq  440bbd <unsigned long const& std::max<unsigned long>(unsigned long const&, unsigned long const&)>
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
  440f6f:	48 8b 10             	mov    (%rax),%rdx
  440f72:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  440f76:	48 89 50 08          	mov    %rdx,0x8(%rax)
      this->_M_impl._M_map = _M_allocate_map(this->_M_impl._M_map_size);
  440f7a:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  440f7e:	48 8b 50 08          	mov    0x8(%rax),%rdx
  440f82:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  440f86:	48 89 d6             	mov    %rdx,%rsi
  440f89:	48 89 c7             	mov    %rax,%rdi
  440f8c:	e8 d1 16 00 00       	callq  442662 <std::_Deque_base<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > >::_M_allocate_map(unsigned long)>
  440f91:	48 89 c2             	mov    %rax,%rdx
  440f94:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  440f98:	48 89 10             	mov    %rdx,(%rax)
      _Map_pointer __nstart = (this->_M_impl._M_map
  440f9b:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  440f9f:	48 8b 10             	mov    (%rax),%rdx
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
  440fa2:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  440fa6:	48 8b 40 08          	mov    0x8(%rax),%rax
  440faa:	48 2b 45 e8          	sub    -0x18(%rbp),%rax
  440fae:	48 d1 e8             	shr    %rax
  440fb1:	48 c1 e0 03          	shl    $0x3,%rax
      _Map_pointer __nstart = (this->_M_impl._M_map
  440fb5:	48 01 d0             	add    %rdx,%rax
  440fb8:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
      _Map_pointer __nfinish = __nstart + __num_nodes;
  440fbc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  440fc0:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  440fc7:	00 
  440fc8:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  440fcc:	48 01 d0             	add    %rdx,%rax
  440fcf:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
	{ _M_create_nodes(__nstart, __nfinish); }
  440fd3:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  440fd7:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  440fdb:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  440fdf:	48 89 ce             	mov    %rcx,%rsi
  440fe2:	48 89 c7             	mov    %rax,%rdi
  440fe5:	e8 e4 16 00 00       	callq  4426ce <std::_Deque_base<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > >::_M_create_nodes(std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >**, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >**)>
      this->_M_impl._M_start._M_set_node(__nstart);
  440fea:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  440fee:	48 83 c0 10          	add    $0x10,%rax
  440ff2:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  440ff6:	48 89 d6             	mov    %rdx,%rsi
  440ff9:	48 89 c7             	mov    %rax,%rdi
  440ffc:	e8 9f f8 ff ff       	callq  4408a0 <std::_Deque_iterator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*>::_M_set_node(std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >**)>
      this->_M_impl._M_finish._M_set_node(__nfinish - 1);
  441001:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  441005:	48 83 c0 30          	add    $0x30,%rax
  441009:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  44100d:	48 83 ea 08          	sub    $0x8,%rdx
  441011:	48 89 d6             	mov    %rdx,%rsi
  441014:	48 89 c7             	mov    %rax,%rdi
  441017:	e8 84 f8 ff ff       	callq  4408a0 <std::_Deque_iterator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*>::_M_set_node(std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >**)>
      this->_M_impl._M_start._M_cur = _M_impl._M_start._M_first;
  44101c:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  441020:	48 8b 50 18          	mov    0x18(%rax),%rdx
  441024:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  441028:	48 89 50 10          	mov    %rdx,0x10(%rax)
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
  44102c:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  441030:	48 8b 58 38          	mov    0x38(%rax),%rbx
					% __deque_buf_size(sizeof(_Tp)));
  441034:	bf 08 00 00 00       	mov    $0x8,%edi
  441039:	e8 f0 1c ff ff       	callq  432d2e <std::__deque_buf_size(unsigned long)>
  44103e:	48 89 c1             	mov    %rax,%rcx
  441041:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  441045:	ba 00 00 00 00       	mov    $0x0,%edx
  44104a:	48 f7 f1             	div    %rcx
  44104d:	48 89 d0             	mov    %rdx,%rax
					+ __num_elements
  441050:	48 c1 e0 03          	shl    $0x3,%rax
  441054:	48 8d 14 03          	lea    (%rbx,%rax,1),%rdx
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
  441058:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  44105c:	48 89 50 30          	mov    %rdx,0x30(%rax)
    }
  441060:	eb 55                	jmp    4410b7 <std::_Deque_base<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > >::_M_initialize_map(unsigned long)+0x1a1>
      __catch(...)
  441062:	48 89 c7             	mov    %rax,%rdi
  441065:	e8 76 16 ff ff       	callq  4326e0 <__cxa_begin_catch@plt>
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
  44106a:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  44106e:	48 8b 50 08          	mov    0x8(%rax),%rdx
  441072:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  441076:	48 8b 08             	mov    (%rax),%rcx
  441079:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  44107d:	48 89 ce             	mov    %rcx,%rsi
  441080:	48 89 c7             	mov    %rax,%rdi
  441083:	e8 9a 28 ff ff       	callq  433922 <std::_Deque_base<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > >::_M_deallocate_map(std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >**, unsigned long)>
	  this->_M_impl._M_map = _Map_pointer();
  441088:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  44108c:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
	  this->_M_impl._M_map_size = 0;
  441093:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  441097:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
  44109e:	00 
	  __throw_exception_again;
  44109f:	e8 dc 17 ff ff       	callq  432880 <__cxa_rethrow@plt>
  4410a4:	48 89 c3             	mov    %rax,%rbx
      __catch(...)
  4410a7:	e8 14 18 ff ff       	callq  4328c0 <__cxa_end_catch@plt>
  4410ac:	48 89 d8             	mov    %rbx,%rax
  4410af:	48 89 c7             	mov    %rax,%rdi
  4410b2:	e8 59 18 ff ff       	callq  432910 <_Unwind_Resume@plt>
    }
  4410b7:	48 83 c4 48          	add    $0x48,%rsp
  4410bb:	5b                   	pop    %rbx
  4410bc:	5d                   	pop    %rbp
  4410bd:	c3                   	retq   

00000000004410be <std::_Deque_base<x666::LineInfo, std::allocator<x666::LineInfo> >::_Deque_impl::_Deque_impl()>:
	_Deque_impl()
  4410be:	55                   	push   %rbp
  4410bf:	48 89 e5             	mov    %rsp,%rbp
  4410c2:	48 83 ec 10          	sub    $0x10,%rsp
  4410c6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	  _M_start(), _M_finish()
  4410ca:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4410ce:	48 89 c7             	mov    %rax,%rdi
  4410d1:	e8 7c 16 00 00       	callq  442752 <std::allocator<x666::LineInfo>::allocator()>
  4410d6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4410da:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  4410e1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4410e5:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
  4410ec:	00 
  4410ed:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4410f1:	48 83 c0 10          	add    $0x10,%rax
  4410f5:	48 89 c7             	mov    %rax,%rdi
  4410f8:	e8 71 16 00 00       	callq  44276e <std::_Deque_iterator<x666::LineInfo, x666::LineInfo&, x666::LineInfo*>::_Deque_iterator()>
  4410fd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  441101:	48 83 c0 30          	add    $0x30,%rax
  441105:	48 89 c7             	mov    %rax,%rdi
  441108:	e8 61 16 00 00       	callq  44276e <std::_Deque_iterator<x666::LineInfo, x666::LineInfo&, x666::LineInfo*>::_Deque_iterator()>
	{ }
  44110d:	90                   	nop
  44110e:	c9                   	leaveq 
  44110f:	c3                   	retq   

0000000000441110 <std::_Deque_base<x666::LineInfo, std::allocator<x666::LineInfo> >::_M_initialize_map(unsigned long)>:
    _Deque_base<_Tp, _Alloc>::
  441110:	55                   	push   %rbp
  441111:	48 89 e5             	mov    %rsp,%rbp
  441114:	53                   	push   %rbx
  441115:	48 83 ec 48          	sub    $0x48,%rsp
  441119:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
  44111d:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
      const size_t __num_nodes = (__num_elements/ __deque_buf_size(sizeof(_Tp))
  441121:	bf 20 00 00 00       	mov    $0x20,%edi
  441126:	e8 03 1c ff ff       	callq  432d2e <std::__deque_buf_size(unsigned long)>
  44112b:	48 89 c3             	mov    %rax,%rbx
  44112e:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  441132:	ba 00 00 00 00       	mov    $0x0,%edx
  441137:	48 f7 f3             	div    %rbx
  44113a:	48 83 c0 01          	add    $0x1,%rax
  44113e:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
					   size_t(__num_nodes + 2));
  441142:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  441146:	48 83 c0 02          	add    $0x2,%rax
  44114a:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  44114e:	48 c7 45 d0 08 00 00 	movq   $0x8,-0x30(%rbp)
  441155:	00 
  441156:	48 8d 55 c8          	lea    -0x38(%rbp),%rdx
  44115a:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  44115e:	48 89 d6             	mov    %rdx,%rsi
  441161:	48 89 c7             	mov    %rax,%rdi
  441164:	e8 54 fa ff ff       	callq  440bbd <unsigned long const& std::max<unsigned long>(unsigned long const&, unsigned long const&)>
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
  441169:	48 8b 10             	mov    (%rax),%rdx
  44116c:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  441170:	48 89 50 08          	mov    %rdx,0x8(%rax)
      this->_M_impl._M_map = _M_allocate_map(this->_M_impl._M_map_size);
  441174:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  441178:	48 8b 50 08          	mov    0x8(%rax),%rdx
  44117c:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  441180:	48 89 d6             	mov    %rdx,%rsi
  441183:	48 89 c7             	mov    %rax,%rdi
  441186:	e8 1d 16 00 00       	callq  4427a8 <std::_Deque_base<x666::LineInfo, std::allocator<x666::LineInfo> >::_M_allocate_map(unsigned long)>
  44118b:	48 89 c2             	mov    %rax,%rdx
  44118e:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  441192:	48 89 10             	mov    %rdx,(%rax)
      _Map_pointer __nstart = (this->_M_impl._M_map
  441195:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  441199:	48 8b 10             	mov    (%rax),%rdx
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
  44119c:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  4411a0:	48 8b 40 08          	mov    0x8(%rax),%rax
  4411a4:	48 2b 45 e8          	sub    -0x18(%rbp),%rax
  4411a8:	48 d1 e8             	shr    %rax
  4411ab:	48 c1 e0 03          	shl    $0x3,%rax
      _Map_pointer __nstart = (this->_M_impl._M_map
  4411af:	48 01 d0             	add    %rdx,%rax
  4411b2:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
      _Map_pointer __nfinish = __nstart + __num_nodes;
  4411b6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4411ba:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  4411c1:	00 
  4411c2:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4411c6:	48 01 d0             	add    %rdx,%rax
  4411c9:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
	{ _M_create_nodes(__nstart, __nfinish); }
  4411cd:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  4411d1:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  4411d5:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  4411d9:	48 89 ce             	mov    %rcx,%rsi
  4411dc:	48 89 c7             	mov    %rax,%rdi
  4411df:	e8 30 16 00 00       	callq  442814 <std::_Deque_base<x666::LineInfo, std::allocator<x666::LineInfo> >::_M_create_nodes(x666::LineInfo**, x666::LineInfo**)>
      this->_M_impl._M_start._M_set_node(__nstart);
  4411e4:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  4411e8:	48 83 c0 10          	add    $0x10,%rax
  4411ec:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  4411f0:	48 89 d6             	mov    %rdx,%rsi
  4411f3:	48 89 c7             	mov    %rax,%rdi
  4411f6:	e8 75 f4 ff ff       	callq  440670 <std::_Deque_iterator<x666::LineInfo, x666::LineInfo&, x666::LineInfo*>::_M_set_node(x666::LineInfo**)>
      this->_M_impl._M_finish._M_set_node(__nfinish - 1);
  4411fb:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  4411ff:	48 83 c0 30          	add    $0x30,%rax
  441203:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  441207:	48 83 ea 08          	sub    $0x8,%rdx
  44120b:	48 89 d6             	mov    %rdx,%rsi
  44120e:	48 89 c7             	mov    %rax,%rdi
  441211:	e8 5a f4 ff ff       	callq  440670 <std::_Deque_iterator<x666::LineInfo, x666::LineInfo&, x666::LineInfo*>::_M_set_node(x666::LineInfo**)>
      this->_M_impl._M_start._M_cur = _M_impl._M_start._M_first;
  441216:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  44121a:	48 8b 50 18          	mov    0x18(%rax),%rdx
  44121e:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  441222:	48 89 50 10          	mov    %rdx,0x10(%rax)
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
  441226:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  44122a:	48 8b 58 38          	mov    0x38(%rax),%rbx
					% __deque_buf_size(sizeof(_Tp)));
  44122e:	bf 20 00 00 00       	mov    $0x20,%edi
  441233:	e8 f6 1a ff ff       	callq  432d2e <std::__deque_buf_size(unsigned long)>
  441238:	48 89 c1             	mov    %rax,%rcx
  44123b:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  44123f:	ba 00 00 00 00       	mov    $0x0,%edx
  441244:	48 f7 f1             	div    %rcx
  441247:	48 89 d0             	mov    %rdx,%rax
					+ __num_elements
  44124a:	48 c1 e0 05          	shl    $0x5,%rax
  44124e:	48 8d 14 03          	lea    (%rbx,%rax,1),%rdx
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
  441252:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  441256:	48 89 50 30          	mov    %rdx,0x30(%rax)
    }
  44125a:	eb 55                	jmp    4412b1 <std::_Deque_base<x666::LineInfo, std::allocator<x666::LineInfo> >::_M_initialize_map(unsigned long)+0x1a1>
      __catch(...)
  44125c:	48 89 c7             	mov    %rax,%rdi
  44125f:	e8 7c 14 ff ff       	callq  4326e0 <__cxa_begin_catch@plt>
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
  441264:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  441268:	48 8b 50 08          	mov    0x8(%rax),%rdx
  44126c:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  441270:	48 8b 08             	mov    (%rax),%rcx
  441273:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  441277:	48 89 ce             	mov    %rcx,%rsi
  44127a:	48 89 c7             	mov    %rax,%rdi
  44127d:	e8 ae 28 ff ff       	callq  433b30 <std::_Deque_base<x666::LineInfo, std::allocator<x666::LineInfo> >::_M_deallocate_map(x666::LineInfo**, unsigned long)>
	  this->_M_impl._M_map = _Map_pointer();
  441282:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  441286:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
	  this->_M_impl._M_map_size = 0;
  44128d:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  441291:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
  441298:	00 
	  __throw_exception_again;
  441299:	e8 e2 15 ff ff       	callq  432880 <__cxa_rethrow@plt>
  44129e:	48 89 c3             	mov    %rax,%rbx
      __catch(...)
  4412a1:	e8 1a 16 ff ff       	callq  4328c0 <__cxa_end_catch@plt>
  4412a6:	48 89 d8             	mov    %rbx,%rax
  4412a9:	48 89 c7             	mov    %rax,%rdi
  4412ac:	e8 5f 16 ff ff       	callq  432910 <_Unwind_Resume@plt>
    }
  4412b1:	48 83 c4 48          	add    $0x48,%rsp
  4412b5:	5b                   	pop    %rbx
  4412b6:	5d                   	pop    %rbp
  4412b7:	c3                   	retq   

00000000004412b8 <std::_Deque_base<x666::Parser::BracketEntry, std::allocator<x666::Parser::BracketEntry> >::_Deque_impl::_Deque_impl()>:
	_Deque_impl()
  4412b8:	55                   	push   %rbp
  4412b9:	48 89 e5             	mov    %rsp,%rbp
  4412bc:	48 83 ec 10          	sub    $0x10,%rsp
  4412c0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	  _M_start(), _M_finish()
  4412c4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4412c8:	48 89 c7             	mov    %rax,%rdi
  4412cb:	e8 c8 15 00 00       	callq  442898 <std::allocator<x666::Parser::BracketEntry>::allocator()>
  4412d0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4412d4:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  4412db:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4412df:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
  4412e6:	00 
  4412e7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4412eb:	48 83 c0 10          	add    $0x10,%rax
  4412ef:	48 89 c7             	mov    %rax,%rdi
  4412f2:	e8 bd 15 00 00       	callq  4428b4 <std::_Deque_iterator<x666::Parser::BracketEntry, x666::Parser::BracketEntry&, x666::Parser::BracketEntry*>::_Deque_iterator()>
  4412f7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4412fb:	48 83 c0 30          	add    $0x30,%rax
  4412ff:	48 89 c7             	mov    %rax,%rdi
  441302:	e8 ad 15 00 00       	callq  4428b4 <std::_Deque_iterator<x666::Parser::BracketEntry, x666::Parser::BracketEntry&, x666::Parser::BracketEntry*>::_Deque_iterator()>
	{ }
  441307:	90                   	nop
  441308:	c9                   	leaveq 
  441309:	c3                   	retq   

000000000044130a <std::_Deque_base<x666::Parser::BracketEntry, std::allocator<x666::Parser::BracketEntry> >::_M_initialize_map(unsigned long)>:
    _Deque_base<_Tp, _Alloc>::
  44130a:	55                   	push   %rbp
  44130b:	48 89 e5             	mov    %rsp,%rbp
  44130e:	53                   	push   %rbx
  44130f:	48 83 ec 48          	sub    $0x48,%rsp
  441313:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
  441317:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
      const size_t __num_nodes = (__num_elements/ __deque_buf_size(sizeof(_Tp))
  44131b:	bf 10 00 00 00       	mov    $0x10,%edi
  441320:	e8 09 1a ff ff       	callq  432d2e <std::__deque_buf_size(unsigned long)>
  441325:	48 89 c3             	mov    %rax,%rbx
  441328:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  44132c:	ba 00 00 00 00       	mov    $0x0,%edx
  441331:	48 f7 f3             	div    %rbx
  441334:	48 83 c0 01          	add    $0x1,%rax
  441338:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
					   size_t(__num_nodes + 2));
  44133c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  441340:	48 83 c0 02          	add    $0x2,%rax
  441344:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  441348:	48 c7 45 d0 08 00 00 	movq   $0x8,-0x30(%rbp)
  44134f:	00 
  441350:	48 8d 55 c8          	lea    -0x38(%rbp),%rdx
  441354:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  441358:	48 89 d6             	mov    %rdx,%rsi
  44135b:	48 89 c7             	mov    %rax,%rdi
  44135e:	e8 5a f8 ff ff       	callq  440bbd <unsigned long const& std::max<unsigned long>(unsigned long const&, unsigned long const&)>
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
  441363:	48 8b 10             	mov    (%rax),%rdx
  441366:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  44136a:	48 89 50 08          	mov    %rdx,0x8(%rax)
      this->_M_impl._M_map = _M_allocate_map(this->_M_impl._M_map_size);
  44136e:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  441372:	48 8b 50 08          	mov    0x8(%rax),%rdx
  441376:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  44137a:	48 89 d6             	mov    %rdx,%rsi
  44137d:	48 89 c7             	mov    %rax,%rdi
  441380:	e8 69 15 00 00       	callq  4428ee <std::_Deque_base<x666::Parser::BracketEntry, std::allocator<x666::Parser::BracketEntry> >::_M_allocate_map(unsigned long)>
  441385:	48 89 c2             	mov    %rax,%rdx
  441388:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  44138c:	48 89 10             	mov    %rdx,(%rax)
      _Map_pointer __nstart = (this->_M_impl._M_map
  44138f:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  441393:	48 8b 10             	mov    (%rax),%rdx
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
  441396:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  44139a:	48 8b 40 08          	mov    0x8(%rax),%rax
  44139e:	48 2b 45 e8          	sub    -0x18(%rbp),%rax
  4413a2:	48 d1 e8             	shr    %rax
  4413a5:	48 c1 e0 03          	shl    $0x3,%rax
      _Map_pointer __nstart = (this->_M_impl._M_map
  4413a9:	48 01 d0             	add    %rdx,%rax
  4413ac:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
      _Map_pointer __nfinish = __nstart + __num_nodes;
  4413b0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4413b4:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  4413bb:	00 
  4413bc:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4413c0:	48 01 d0             	add    %rdx,%rax
  4413c3:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
	{ _M_create_nodes(__nstart, __nfinish); }
  4413c7:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  4413cb:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  4413cf:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  4413d3:	48 89 ce             	mov    %rcx,%rsi
  4413d6:	48 89 c7             	mov    %rax,%rdi
  4413d9:	e8 7c 15 00 00       	callq  44295a <std::_Deque_base<x666::Parser::BracketEntry, std::allocator<x666::Parser::BracketEntry> >::_M_create_nodes(x666::Parser::BracketEntry**, x666::Parser::BracketEntry**)>
      this->_M_impl._M_start._M_set_node(__nstart);
  4413de:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  4413e2:	48 83 c0 10          	add    $0x10,%rax
  4413e6:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  4413ea:	48 89 d6             	mov    %rdx,%rsi
  4413ed:	48 89 c7             	mov    %rax,%rdi
  4413f0:	e8 5b f9 ff ff       	callq  440d50 <std::_Deque_iterator<x666::Parser::BracketEntry, x666::Parser::BracketEntry&, x666::Parser::BracketEntry*>::_M_set_node(x666::Parser::BracketEntry**)>
      this->_M_impl._M_finish._M_set_node(__nfinish - 1);
  4413f5:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  4413f9:	48 83 c0 30          	add    $0x30,%rax
  4413fd:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  441401:	48 83 ea 08          	sub    $0x8,%rdx
  441405:	48 89 d6             	mov    %rdx,%rsi
  441408:	48 89 c7             	mov    %rax,%rdi
  44140b:	e8 40 f9 ff ff       	callq  440d50 <std::_Deque_iterator<x666::Parser::BracketEntry, x666::Parser::BracketEntry&, x666::Parser::BracketEntry*>::_M_set_node(x666::Parser::BracketEntry**)>
      this->_M_impl._M_start._M_cur = _M_impl._M_start._M_first;
  441410:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  441414:	48 8b 50 18          	mov    0x18(%rax),%rdx
  441418:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  44141c:	48 89 50 10          	mov    %rdx,0x10(%rax)
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
  441420:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  441424:	48 8b 58 38          	mov    0x38(%rax),%rbx
					% __deque_buf_size(sizeof(_Tp)));
  441428:	bf 10 00 00 00       	mov    $0x10,%edi
  44142d:	e8 fc 18 ff ff       	callq  432d2e <std::__deque_buf_size(unsigned long)>
  441432:	48 89 c1             	mov    %rax,%rcx
  441435:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  441439:	ba 00 00 00 00       	mov    $0x0,%edx
  44143e:	48 f7 f1             	div    %rcx
  441441:	48 89 d0             	mov    %rdx,%rax
					+ __num_elements
  441444:	48 c1 e0 04          	shl    $0x4,%rax
  441448:	48 8d 14 03          	lea    (%rbx,%rax,1),%rdx
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
  44144c:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  441450:	48 89 50 30          	mov    %rdx,0x30(%rax)
    }
  441454:	eb 55                	jmp    4414ab <std::_Deque_base<x666::Parser::BracketEntry, std::allocator<x666::Parser::BracketEntry> >::_M_initialize_map(unsigned long)+0x1a1>
      __catch(...)
  441456:	48 89 c7             	mov    %rax,%rdi
  441459:	e8 82 12 ff ff       	callq  4326e0 <__cxa_begin_catch@plt>
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
  44145e:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  441462:	48 8b 50 08          	mov    0x8(%rax),%rdx
  441466:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  44146a:	48 8b 08             	mov    (%rax),%rcx
  44146d:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  441471:	48 89 ce             	mov    %rcx,%rsi
  441474:	48 89 c7             	mov    %rax,%rdi
  441477:	e8 b2 27 ff ff       	callq  433c2e <std::_Deque_base<x666::Parser::BracketEntry, std::allocator<x666::Parser::BracketEntry> >::_M_deallocate_map(x666::Parser::BracketEntry**, unsigned long)>
	  this->_M_impl._M_map = _Map_pointer();
  44147c:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  441480:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
	  this->_M_impl._M_map_size = 0;
  441487:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  44148b:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
  441492:	00 
	  __throw_exception_again;
  441493:	e8 e8 13 ff ff       	callq  432880 <__cxa_rethrow@plt>
  441498:	48 89 c3             	mov    %rax,%rbx
      __catch(...)
  44149b:	e8 20 14 ff ff       	callq  4328c0 <__cxa_end_catch@plt>
  4414a0:	48 89 d8             	mov    %rbx,%rax
  4414a3:	48 89 c7             	mov    %rax,%rdi
  4414a6:	e8 65 14 ff ff       	callq  432910 <_Unwind_Resume@plt>
    }
  4414ab:	48 83 c4 48          	add    $0x48,%rsp
  4414af:	5b                   	pop    %rbx
  4414b0:	5d                   	pop    %rbp
  4414b1:	c3                   	retq   

00000000004414b2 <std::allocator<x666::LexError>::allocator()>:
  4414b2:	55                   	push   %rbp
  4414b3:	48 89 e5             	mov    %rsp,%rbp
  4414b6:	48 83 ec 10          	sub    $0x10,%rsp
  4414ba:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4414be:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4414c2:	48 89 c7             	mov    %rax,%rdi
  4414c5:	e8 14 15 00 00       	callq  4429de <__gnu_cxx::new_allocator<x666::LexError>::new_allocator()>
  4414ca:	90                   	nop
  4414cb:	c9                   	leaveq 
  4414cc:	c3                   	retq   

00000000004414cd <std::__detail::__variant::_Variant_storage<false, x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> const& std::forward<std::__detail::__variant::_Variant_storage<false, x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> const&>(std::remove_reference<std::__detail::__variant::_Variant_storage<false, x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> const&>::type&)>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
  4414cd:	55                   	push   %rbp
  4414ce:	48 89 e5             	mov    %rsp,%rbp
  4414d1:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<_Tp&&>(__t); }
  4414d5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4414d9:	5d                   	pop    %rbp
  4414da:	c3                   	retq   

00000000004414db <std::__detail::__variant::_Variadic_union<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> const& std::forward<std::__detail::__variant::_Variadic_union<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> const&>(std::remove_reference<std::__detail::__variant::_Variadic_union<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> const&>::type&)>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
  4414db:	55                   	push   %rbp
  4414dc:	48 89 e5             	mov    %rsp,%rbp
  4414df:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<_Tp&&>(__t); }
  4414e3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4414e7:	5d                   	pop    %rbp
  4414e8:	c3                   	retq   

00000000004414e9 <decltype(auto) std::__detail::__variant::__get<std::__detail::__variant::_Variadic_union<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> const&>(std::in_place_index_t<0ul>, std::__detail::__variant::_Variadic_union<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> const&)>:
    constexpr decltype(auto) __get(in_place_index_t<0>, _Union&& __u)
  4414e9:	55                   	push   %rbp
  4414ea:	48 89 e5             	mov    %rsp,%rbp
  4414ed:	48 83 ec 10          	sub    $0x10,%rsp
  4414f1:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return std::forward<_Union>(__u)._M_first._M_get(); }
  4414f5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4414f9:	48 89 c7             	mov    %rax,%rdi
  4414fc:	e8 da ff ff ff       	callq  4414db <std::__detail::__variant::_Variadic_union<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> const& std::forward<std::__detail::__variant::_Variadic_union<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> const&>(std::remove_reference<std::__detail::__variant::_Variadic_union<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> const&>::type&)>
  441501:	48 89 c7             	mov    %rax,%rdi
  441504:	e8 25 bd ff ff       	callq  43d22e <std::__detail::__variant::_Uninitialized<x666::Identifier, false>::_M_get() const &>
  441509:	c9                   	leaveq 
  44150a:	c3                   	retq   

000000000044150b <decltype(auto) std::__detail::__variant::__get<0ul, std::__detail::__variant::_Variant_storage<false, x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> const&>(std::__detail::__variant::_Variant_storage<false, x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> const&)>:
    constexpr decltype(auto) __get(_Variant&& __v)
  44150b:	55                   	push   %rbp
  44150c:	48 89 e5             	mov    %rsp,%rbp
  44150f:	53                   	push   %rbx
  441510:	48 83 ec 18          	sub    $0x18,%rsp
  441514:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
      return __get(std::in_place_index<_Np>, std::forward<_Variant>(__v)._M_u);
  441518:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  44151c:	48 89 c7             	mov    %rax,%rdi
  44151f:	e8 a9 ff ff ff       	callq  4414cd <std::__detail::__variant::_Variant_storage<false, x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> const& std::forward<std::__detail::__variant::_Variant_storage<false, x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> const&>(std::remove_reference<std::__detail::__variant::_Variant_storage<false, x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> const&>::type&)>
  441524:	48 83 ec 08          	sub    $0x8,%rsp
  441528:	53                   	push   %rbx
  441529:	48 89 c7             	mov    %rax,%rdi
  44152c:	e8 b8 ff ff ff       	callq  4414e9 <decltype(auto) std::__detail::__variant::__get<std::__detail::__variant::_Variadic_union<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> const&>(std::in_place_index_t<0ul>, std::__detail::__variant::_Variadic_union<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> const&)>
  441531:	48 83 c4 10          	add    $0x10,%rsp
    }
  441535:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  441539:	c9                   	leaveq 
  44153a:	c3                   	retq   

000000000044153b <void std::__detail::__variant::__erased_dtor<std::__detail::__variant::_Variant_storage<false, x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> const&, 0ul>(std::__detail::__variant::_Variant_storage<false, x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> const&)>:
    __erased_dtor(_Variant&& __v)
  44153b:	55                   	push   %rbp
  44153c:	48 89 e5             	mov    %rsp,%rbp
  44153f:	48 83 ec 10          	sub    $0x10,%rsp
  441543:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { std::_Destroy(std::__addressof(__get<_Np>(__v))); }
  441547:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  44154b:	48 89 c7             	mov    %rax,%rdi
  44154e:	e8 b8 ff ff ff       	callq  44150b <decltype(auto) std::__detail::__variant::__get<0ul, std::__detail::__variant::_Variant_storage<false, x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> const&>(std::__detail::__variant::_Variant_storage<false, x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> const&)>
  441553:	48 89 c7             	mov    %rax,%rdi
  441556:	e8 2e eb ff ff       	callq  440089 <x666::Identifier const* std::__addressof<x666::Identifier const>(x666::Identifier const&)>
  44155b:	48 89 c7             	mov    %rax,%rdi
  44155e:	e8 58 08 00 00       	callq  441dbb <void std::_Destroy<x666::Identifier const>(x666::Identifier const*)>
  441563:	90                   	nop
  441564:	c9                   	leaveq 
  441565:	c3                   	retq   

0000000000441566 <std::__detail::__variant::_Variadic_union<x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> const& std::forward<std::__detail::__variant::_Variadic_union<x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> const&>(std::remove_reference<std::__detail::__variant::_Variadic_union<x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> const&>::type&)>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
  441566:	55                   	push   %rbp
  441567:	48 89 e5             	mov    %rsp,%rbp
  44156a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<_Tp&&>(__t); }
  44156e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  441572:	5d                   	pop    %rbp
  441573:	c3                   	retq   

0000000000441574 <decltype(auto) std::__detail::__variant::__get<std::__detail::__variant::_Variadic_union<x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> const&>(std::in_place_index_t<0ul>, std::__detail::__variant::_Variadic_union<x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> const&)>:
    constexpr decltype(auto) __get(in_place_index_t<0>, _Union&& __u)
  441574:	55                   	push   %rbp
  441575:	48 89 e5             	mov    %rsp,%rbp
  441578:	48 83 ec 10          	sub    $0x10,%rsp
  44157c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return std::forward<_Union>(__u)._M_first._M_get(); }
  441580:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  441584:	48 89 c7             	mov    %rax,%rdi
  441587:	e8 da ff ff ff       	callq  441566 <std::__detail::__variant::_Variadic_union<x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> const& std::forward<std::__detail::__variant::_Variadic_union<x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> const&>(std::remove_reference<std::__detail::__variant::_Variadic_union<x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> const&>::type&)>
  44158c:	48 89 c7             	mov    %rax,%rdi
  44158f:	e8 ce bc ff ff       	callq  43d262 <std::__detail::__variant::_Uninitialized<x666::StringLiteral, false>::_M_get() const &>
  441594:	c9                   	leaveq 
  441595:	c3                   	retq   

0000000000441596 <decltype(auto) std::__detail::__variant::__get<1ul, std::__detail::__variant::_Variadic_union<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> const&>(std::in_place_index_t<1ul>, std::__detail::__variant::_Variadic_union<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> const&)>:
    constexpr decltype(auto) __get(in_place_index_t<_Np>, _Union&& __u)
  441596:	55                   	push   %rbp
  441597:	48 89 e5             	mov    %rsp,%rbp
  44159a:	53                   	push   %rbx
  44159b:	48 83 ec 18          	sub    $0x18,%rsp
  44159f:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    { return __get(in_place_index<_Np-1>, std::forward<_Union>(__u)._M_rest); }
  4415a3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4415a7:	48 89 c7             	mov    %rax,%rdi
  4415aa:	e8 2c ff ff ff       	callq  4414db <std::__detail::__variant::_Variadic_union<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> const& std::forward<std::__detail::__variant::_Variadic_union<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> const&>(std::remove_reference<std::__detail::__variant::_Variadic_union<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> const&>::type&)>
  4415af:	48 83 ec 08          	sub    $0x8,%rsp
  4415b3:	53                   	push   %rbx
  4415b4:	48 89 c7             	mov    %rax,%rdi
  4415b7:	e8 b8 ff ff ff       	callq  441574 <decltype(auto) std::__detail::__variant::__get<std::__detail::__variant::_Variadic_union<x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> const&>(std::in_place_index_t<0ul>, std::__detail::__variant::_Variadic_union<x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> const&)>
  4415bc:	48 83 c4 10          	add    $0x10,%rsp
  4415c0:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  4415c4:	c9                   	leaveq 
  4415c5:	c3                   	retq   

00000000004415c6 <decltype(auto) std::__detail::__variant::__get<1ul, std::__detail::__variant::_Variant_storage<false, x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> const&>(std::__detail::__variant::_Variant_storage<false, x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> const&)>:
    constexpr decltype(auto) __get(_Variant&& __v)
  4415c6:	55                   	push   %rbp
  4415c7:	48 89 e5             	mov    %rsp,%rbp
  4415ca:	53                   	push   %rbx
  4415cb:	48 83 ec 18          	sub    $0x18,%rsp
  4415cf:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
      return __get(std::in_place_index<_Np>, std::forward<_Variant>(__v)._M_u);
  4415d3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4415d7:	48 89 c7             	mov    %rax,%rdi
  4415da:	e8 ee fe ff ff       	callq  4414cd <std::__detail::__variant::_Variant_storage<false, x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> const& std::forward<std::__detail::__variant::_Variant_storage<false, x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> const&>(std::remove_reference<std::__detail::__variant::_Variant_storage<false, x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> const&>::type&)>
  4415df:	48 83 ec 08          	sub    $0x8,%rsp
  4415e3:	53                   	push   %rbx
  4415e4:	48 89 c7             	mov    %rax,%rdi
  4415e7:	e8 aa ff ff ff       	callq  441596 <decltype(auto) std::__detail::__variant::__get<1ul, std::__detail::__variant::_Variadic_union<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> const&>(std::in_place_index_t<1ul>, std::__detail::__variant::_Variadic_union<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> const&)>
  4415ec:	48 83 c4 10          	add    $0x10,%rsp
    }
  4415f0:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  4415f4:	c9                   	leaveq 
  4415f5:	c3                   	retq   

00000000004415f6 <void std::__detail::__variant::__erased_dtor<std::__detail::__variant::_Variant_storage<false, x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> const&, 1ul>(std::__detail::__variant::_Variant_storage<false, x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> const&)>:
    __erased_dtor(_Variant&& __v)
  4415f6:	55                   	push   %rbp
  4415f7:	48 89 e5             	mov    %rsp,%rbp
  4415fa:	48 83 ec 10          	sub    $0x10,%rsp
  4415fe:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { std::_Destroy(std::__addressof(__get<_Np>(__v))); }
  441602:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  441606:	48 89 c7             	mov    %rax,%rdi
  441609:	e8 b8 ff ff ff       	callq  4415c6 <decltype(auto) std::__detail::__variant::__get<1ul, std::__detail::__variant::_Variant_storage<false, x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> const&>(std::__detail::__variant::_Variant_storage<false, x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> const&)>
  44160e:	48 89 c7             	mov    %rax,%rdi
  441611:	e8 45 eb ff ff       	callq  44015b <x666::StringLiteral const* std::__addressof<x666::StringLiteral const>(x666::StringLiteral const&)>
  441616:	48 89 c7             	mov    %rax,%rdi
  441619:	e8 c3 07 00 00       	callq  441de1 <void std::_Destroy<x666::StringLiteral const>(x666::StringLiteral const*)>
  44161e:	90                   	nop
  44161f:	c9                   	leaveq 
  441620:	c3                   	retq   

0000000000441621 <std::__detail::__variant::_Variadic_union<x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> const& std::forward<std::__detail::__variant::_Variadic_union<x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> const&>(std::remove_reference<std::__detail::__variant::_Variadic_union<x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> const&>::type&)>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
  441621:	55                   	push   %rbp
  441622:	48 89 e5             	mov    %rsp,%rbp
  441625:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<_Tp&&>(__t); }
  441629:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  44162d:	5d                   	pop    %rbp
  44162e:	c3                   	retq   

000000000044162f <decltype(auto) std::__detail::__variant::__get<std::__detail::__variant::_Variadic_union<x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> const&>(std::in_place_index_t<0ul>, std::__detail::__variant::_Variadic_union<x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> const&)>:
    constexpr decltype(auto) __get(in_place_index_t<0>, _Union&& __u)
  44162f:	55                   	push   %rbp
  441630:	48 89 e5             	mov    %rsp,%rbp
  441633:	48 83 ec 10          	sub    $0x10,%rsp
  441637:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return std::forward<_Union>(__u)._M_first._M_get(); }
  44163b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  44163f:	48 89 c7             	mov    %rax,%rdi
  441642:	e8 da ff ff ff       	callq  441621 <std::__detail::__variant::_Variadic_union<x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> const& std::forward<std::__detail::__variant::_Variadic_union<x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> const&>(std::remove_reference<std::__detail::__variant::_Variadic_union<x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> const&>::type&)>
  441647:	48 89 c7             	mov    %rax,%rdi
  44164a:	e8 f9 bb ff ff       	callq  43d248 <std::__detail::__variant::_Uninitialized<x666::IntLiteral, false>::_M_get() const &>
  44164f:	c9                   	leaveq 
  441650:	c3                   	retq   

0000000000441651 <decltype(auto) std::__detail::__variant::__get<1ul, std::__detail::__variant::_Variadic_union<x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> const&>(std::in_place_index_t<1ul>, std::__detail::__variant::_Variadic_union<x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> const&)>:
    constexpr decltype(auto) __get(in_place_index_t<_Np>, _Union&& __u)
  441651:	55                   	push   %rbp
  441652:	48 89 e5             	mov    %rsp,%rbp
  441655:	53                   	push   %rbx
  441656:	48 83 ec 18          	sub    $0x18,%rsp
  44165a:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    { return __get(in_place_index<_Np-1>, std::forward<_Union>(__u)._M_rest); }
  44165e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  441662:	48 89 c7             	mov    %rax,%rdi
  441665:	e8 fc fe ff ff       	callq  441566 <std::__detail::__variant::_Variadic_union<x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> const& std::forward<std::__detail::__variant::_Variadic_union<x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> const&>(std::remove_reference<std::__detail::__variant::_Variadic_union<x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> const&>::type&)>
  44166a:	48 83 ec 08          	sub    $0x8,%rsp
  44166e:	53                   	push   %rbx
  44166f:	48 89 c7             	mov    %rax,%rdi
  441672:	e8 b8 ff ff ff       	callq  44162f <decltype(auto) std::__detail::__variant::__get<std::__detail::__variant::_Variadic_union<x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> const&>(std::in_place_index_t<0ul>, std::__detail::__variant::_Variadic_union<x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> const&)>
  441677:	48 83 c4 10          	add    $0x10,%rsp
  44167b:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  44167f:	c9                   	leaveq 
  441680:	c3                   	retq   

0000000000441681 <decltype(auto) std::__detail::__variant::__get<2ul, std::__detail::__variant::_Variadic_union<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> const&>(std::in_place_index_t<2ul>, std::__detail::__variant::_Variadic_union<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> const&)>:
    constexpr decltype(auto) __get(in_place_index_t<_Np>, _Union&& __u)
  441681:	55                   	push   %rbp
  441682:	48 89 e5             	mov    %rsp,%rbp
  441685:	53                   	push   %rbx
  441686:	48 83 ec 18          	sub    $0x18,%rsp
  44168a:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    { return __get(in_place_index<_Np-1>, std::forward<_Union>(__u)._M_rest); }
  44168e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  441692:	48 89 c7             	mov    %rax,%rdi
  441695:	e8 41 fe ff ff       	callq  4414db <std::__detail::__variant::_Variadic_union<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> const& std::forward<std::__detail::__variant::_Variadic_union<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> const&>(std::remove_reference<std::__detail::__variant::_Variadic_union<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> const&>::type&)>
  44169a:	48 83 ec 08          	sub    $0x8,%rsp
  44169e:	53                   	push   %rbx
  44169f:	48 89 c7             	mov    %rax,%rdi
  4416a2:	e8 aa ff ff ff       	callq  441651 <decltype(auto) std::__detail::__variant::__get<1ul, std::__detail::__variant::_Variadic_union<x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> const&>(std::in_place_index_t<1ul>, std::__detail::__variant::_Variadic_union<x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> const&)>
  4416a7:	48 83 c4 10          	add    $0x10,%rsp
  4416ab:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  4416af:	c9                   	leaveq 
  4416b0:	c3                   	retq   

00000000004416b1 <decltype(auto) std::__detail::__variant::__get<2ul, std::__detail::__variant::_Variant_storage<false, x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> const&>(std::__detail::__variant::_Variant_storage<false, x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> const&)>:
    constexpr decltype(auto) __get(_Variant&& __v)
  4416b1:	55                   	push   %rbp
  4416b2:	48 89 e5             	mov    %rsp,%rbp
  4416b5:	53                   	push   %rbx
  4416b6:	48 83 ec 18          	sub    $0x18,%rsp
  4416ba:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
      return __get(std::in_place_index<_Np>, std::forward<_Variant>(__v)._M_u);
  4416be:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4416c2:	48 89 c7             	mov    %rax,%rdi
  4416c5:	e8 03 fe ff ff       	callq  4414cd <std::__detail::__variant::_Variant_storage<false, x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> const& std::forward<std::__detail::__variant::_Variant_storage<false, x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> const&>(std::remove_reference<std::__detail::__variant::_Variant_storage<false, x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> const&>::type&)>
  4416ca:	48 83 ec 08          	sub    $0x8,%rsp
  4416ce:	53                   	push   %rbx
  4416cf:	48 89 c7             	mov    %rax,%rdi
  4416d2:	e8 aa ff ff ff       	callq  441681 <decltype(auto) std::__detail::__variant::__get<2ul, std::__detail::__variant::_Variadic_union<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> const&>(std::in_place_index_t<2ul>, std::__detail::__variant::_Variadic_union<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> const&)>
  4416d7:	48 83 c4 10          	add    $0x10,%rsp
    }
  4416db:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  4416df:	c9                   	leaveq 
  4416e0:	c3                   	retq   

00000000004416e1 <void std::__detail::__variant::__erased_dtor<std::__detail::__variant::_Variant_storage<false, x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> const&, 2ul>(std::__detail::__variant::_Variant_storage<false, x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> const&)>:
    __erased_dtor(_Variant&& __v)
  4416e1:	55                   	push   %rbp
  4416e2:	48 89 e5             	mov    %rsp,%rbp
  4416e5:	48 83 ec 10          	sub    $0x10,%rsp
  4416e9:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { std::_Destroy(std::__addressof(__get<_Np>(__v))); }
  4416ed:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4416f1:	48 89 c7             	mov    %rax,%rdi
  4416f4:	e8 b8 ff ff ff       	callq  4416b1 <decltype(auto) std::__detail::__variant::__get<2ul, std::__detail::__variant::_Variant_storage<false, x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> const&>(std::__detail::__variant::_Variant_storage<false, x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> const&)>
  4416f9:	48 89 c7             	mov    %rax,%rdi
  4416fc:	e8 f1 e9 ff ff       	callq  4400f2 <x666::IntLiteral const* std::__addressof<x666::IntLiteral const>(x666::IntLiteral const&)>
  441701:	48 89 c7             	mov    %rax,%rdi
  441704:	e8 cd 06 00 00       	callq  441dd6 <void std::_Destroy<x666::IntLiteral const>(x666::IntLiteral const*)>
  441709:	90                   	nop
  44170a:	c9                   	leaveq 
  44170b:	c3                   	retq   

000000000044170c <std::__detail::__variant::_Variadic_union<x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> const& std::forward<std::__detail::__variant::_Variadic_union<x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> const&>(std::remove_reference<std::__detail::__variant::_Variadic_union<x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> const&>::type&)>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
  44170c:	55                   	push   %rbp
  44170d:	48 89 e5             	mov    %rsp,%rbp
  441710:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<_Tp&&>(__t); }
  441714:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  441718:	5d                   	pop    %rbp
  441719:	c3                   	retq   

000000000044171a <decltype(auto) std::__detail::__variant::__get<std::__detail::__variant::_Variadic_union<x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> const&>(std::in_place_index_t<0ul>, std::__detail::__variant::_Variadic_union<x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> const&)>:
    constexpr decltype(auto) __get(in_place_index_t<0>, _Union&& __u)
  44171a:	55                   	push   %rbp
  44171b:	48 89 e5             	mov    %rsp,%rbp
  44171e:	48 83 ec 10          	sub    $0x10,%rsp
  441722:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return std::forward<_Union>(__u)._M_first._M_get(); }
  441726:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  44172a:	48 89 c7             	mov    %rax,%rdi
  44172d:	e8 da ff ff ff       	callq  44170c <std::__detail::__variant::_Variadic_union<x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> const& std::forward<std::__detail::__variant::_Variadic_union<x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> const&>(std::remove_reference<std::__detail::__variant::_Variadic_union<x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> const&>::type&)>
  441732:	48 89 c7             	mov    %rax,%rdi
  441735:	e8 c2 00 00 00       	callq  4417fc <std::__detail::__variant::_Uninitialized<x666::Operator, true>::_M_get() const &>
  44173a:	c9                   	leaveq 
  44173b:	c3                   	retq   

000000000044173c <decltype(auto) std::__detail::__variant::__get<1ul, std::__detail::__variant::_Variadic_union<x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> const&>(std::in_place_index_t<1ul>, std::__detail::__variant::_Variadic_union<x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> const&)>:
    constexpr decltype(auto) __get(in_place_index_t<_Np>, _Union&& __u)
  44173c:	55                   	push   %rbp
  44173d:	48 89 e5             	mov    %rsp,%rbp
  441740:	53                   	push   %rbx
  441741:	48 83 ec 18          	sub    $0x18,%rsp
  441745:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    { return __get(in_place_index<_Np-1>, std::forward<_Union>(__u)._M_rest); }
  441749:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  44174d:	48 89 c7             	mov    %rax,%rdi
  441750:	e8 cc fe ff ff       	callq  441621 <std::__detail::__variant::_Variadic_union<x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> const& std::forward<std::__detail::__variant::_Variadic_union<x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> const&>(std::remove_reference<std::__detail::__variant::_Variadic_union<x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> const&>::type&)>
  441755:	48 83 ec 08          	sub    $0x8,%rsp
  441759:	53                   	push   %rbx
  44175a:	48 89 c7             	mov    %rax,%rdi
  44175d:	e8 b8 ff ff ff       	callq  44171a <decltype(auto) std::__detail::__variant::__get<std::__detail::__variant::_Variadic_union<x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> const&>(std::in_place_index_t<0ul>, std::__detail::__variant::_Variadic_union<x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> const&)>
  441762:	48 83 c4 10          	add    $0x10,%rsp
  441766:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  44176a:	c9                   	leaveq 
  44176b:	c3                   	retq   

000000000044176c <decltype(auto) std::__detail::__variant::__get<2ul, std::__detail::__variant::_Variadic_union<x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> const&>(std::in_place_index_t<2ul>, std::__detail::__variant::_Variadic_union<x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> const&)>:
    constexpr decltype(auto) __get(in_place_index_t<_Np>, _Union&& __u)
  44176c:	55                   	push   %rbp
  44176d:	48 89 e5             	mov    %rsp,%rbp
  441770:	53                   	push   %rbx
  441771:	48 83 ec 18          	sub    $0x18,%rsp
  441775:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    { return __get(in_place_index<_Np-1>, std::forward<_Union>(__u)._M_rest); }
  441779:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  44177d:	48 89 c7             	mov    %rax,%rdi
  441780:	e8 e1 fd ff ff       	callq  441566 <std::__detail::__variant::_Variadic_union<x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> const& std::forward<std::__detail::__variant::_Variadic_union<x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> const&>(std::remove_reference<std::__detail::__variant::_Variadic_union<x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> const&>::type&)>
  441785:	48 83 ec 08          	sub    $0x8,%rsp
  441789:	53                   	push   %rbx
  44178a:	48 89 c7             	mov    %rax,%rdi
  44178d:	e8 aa ff ff ff       	callq  44173c <decltype(auto) std::__detail::__variant::__get<1ul, std::__detail::__variant::_Variadic_union<x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> const&>(std::in_place_index_t<1ul>, std::__detail::__variant::_Variadic_union<x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> const&)>
  441792:	48 83 c4 10          	add    $0x10,%rsp
  441796:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  44179a:	c9                   	leaveq 
  44179b:	c3                   	retq   

000000000044179c <decltype(auto) std::__detail::__variant::__get<3ul, std::__detail::__variant::_Variadic_union<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> const&>(std::in_place_index_t<3ul>, std::__detail::__variant::_Variadic_union<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> const&)>:
    constexpr decltype(auto) __get(in_place_index_t<_Np>, _Union&& __u)
  44179c:	55                   	push   %rbp
  44179d:	48 89 e5             	mov    %rsp,%rbp
  4417a0:	53                   	push   %rbx
  4417a1:	48 83 ec 18          	sub    $0x18,%rsp
  4417a5:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    { return __get(in_place_index<_Np-1>, std::forward<_Union>(__u)._M_rest); }
  4417a9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4417ad:	48 89 c7             	mov    %rax,%rdi
  4417b0:	e8 26 fd ff ff       	callq  4414db <std::__detail::__variant::_Variadic_union<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> const& std::forward<std::__detail::__variant::_Variadic_union<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> const&>(std::remove_reference<std::__detail::__variant::_Variadic_union<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> const&>::type&)>
  4417b5:	48 83 ec 08          	sub    $0x8,%rsp
  4417b9:	53                   	push   %rbx
  4417ba:	48 89 c7             	mov    %rax,%rdi
  4417bd:	e8 aa ff ff ff       	callq  44176c <decltype(auto) std::__detail::__variant::__get<2ul, std::__detail::__variant::_Variadic_union<x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> const&>(std::in_place_index_t<2ul>, std::__detail::__variant::_Variadic_union<x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> const&)>
  4417c2:	48 83 c4 10          	add    $0x10,%rsp
  4417c6:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  4417ca:	c9                   	leaveq 
  4417cb:	c3                   	retq   

00000000004417cc <decltype(auto) std::__detail::__variant::__get<3ul, std::__detail::__variant::_Variant_storage<false, x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> const&>(std::__detail::__variant::_Variant_storage<false, x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> const&)>:
    constexpr decltype(auto) __get(_Variant&& __v)
  4417cc:	55                   	push   %rbp
  4417cd:	48 89 e5             	mov    %rsp,%rbp
  4417d0:	53                   	push   %rbx
  4417d1:	48 83 ec 18          	sub    $0x18,%rsp
  4417d5:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
      return __get(std::in_place_index<_Np>, std::forward<_Variant>(__v)._M_u);
  4417d9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4417dd:	48 89 c7             	mov    %rax,%rdi
  4417e0:	e8 e8 fc ff ff       	callq  4414cd <std::__detail::__variant::_Variant_storage<false, x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> const& std::forward<std::__detail::__variant::_Variant_storage<false, x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> const&>(std::remove_reference<std::__detail::__variant::_Variant_storage<false, x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> const&>::type&)>
  4417e5:	48 83 ec 08          	sub    $0x8,%rsp
  4417e9:	53                   	push   %rbx
  4417ea:	48 89 c7             	mov    %rax,%rdi
  4417ed:	e8 aa ff ff ff       	callq  44179c <decltype(auto) std::__detail::__variant::__get<3ul, std::__detail::__variant::_Variadic_union<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> const&>(std::in_place_index_t<3ul>, std::__detail::__variant::_Variadic_union<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> const&)>
  4417f2:	48 83 c4 10          	add    $0x10,%rsp
    }
  4417f6:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  4417fa:	c9                   	leaveq 
  4417fb:	c3                   	retq   

00000000004417fc <std::__detail::__variant::_Uninitialized<x666::Operator, true>::_M_get() const &>:
      constexpr const _Type& _M_get() const &
  4417fc:	55                   	push   %rbp
  4417fd:	48 89 e5             	mov    %rsp,%rbp
  441800:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_storage; }
  441804:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  441808:	5d                   	pop    %rbp
  441809:	c3                   	retq   

000000000044180a <x666::Operator const* std::__addressof<x666::Operator const>(x666::Operator const&)>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
  44180a:	55                   	push   %rbp
  44180b:	48 89 e5             	mov    %rsp,%rbp
  44180e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return __builtin_addressof(__r); }
  441812:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  441816:	5d                   	pop    %rbp
  441817:	c3                   	retq   

0000000000441818 <void std::__detail::__variant::__erased_dtor<std::__detail::__variant::_Variant_storage<false, x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> const&, 3ul>(std::__detail::__variant::_Variant_storage<false, x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> const&)>:
    __erased_dtor(_Variant&& __v)
  441818:	55                   	push   %rbp
  441819:	48 89 e5             	mov    %rsp,%rbp
  44181c:	48 83 ec 10          	sub    $0x10,%rsp
  441820:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { std::_Destroy(std::__addressof(__get<_Np>(__v))); }
  441824:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  441828:	48 89 c7             	mov    %rax,%rdi
  44182b:	e8 9c ff ff ff       	callq  4417cc <decltype(auto) std::__detail::__variant::__get<3ul, std::__detail::__variant::_Variant_storage<false, x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> const&>(std::__detail::__variant::_Variant_storage<false, x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> const&)>
  441830:	48 89 c7             	mov    %rax,%rdi
  441833:	e8 d2 ff ff ff       	callq  44180a <x666::Operator const* std::__addressof<x666::Operator const>(x666::Operator const&)>
  441838:	48 89 c7             	mov    %rax,%rdi
  44183b:	e8 a9 11 00 00       	callq  4429e9 <void std::_Destroy<x666::Operator const>(x666::Operator const*)>
  441840:	90                   	nop
  441841:	c9                   	leaveq 
  441842:	c3                   	retq   

0000000000441843 <std::__detail::__variant::_Variadic_union<x666::Newline, x666::EndOfFile, x666::LexError> const& std::forward<std::__detail::__variant::_Variadic_union<x666::Newline, x666::EndOfFile, x666::LexError> const&>(std::remove_reference<std::__detail::__variant::_Variadic_union<x666::Newline, x666::EndOfFile, x666::LexError> const&>::type&)>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
  441843:	55                   	push   %rbp
  441844:	48 89 e5             	mov    %rsp,%rbp
  441847:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<_Tp&&>(__t); }
  44184b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  44184f:	5d                   	pop    %rbp
  441850:	c3                   	retq   

0000000000441851 <decltype(auto) std::__detail::__variant::__get<std::__detail::__variant::_Variadic_union<x666::Newline, x666::EndOfFile, x666::LexError> const&>(std::in_place_index_t<0ul>, std::__detail::__variant::_Variadic_union<x666::Newline, x666::EndOfFile, x666::LexError> const&)>:
    constexpr decltype(auto) __get(in_place_index_t<0>, _Union&& __u)
  441851:	55                   	push   %rbp
  441852:	48 89 e5             	mov    %rsp,%rbp
  441855:	48 83 ec 10          	sub    $0x10,%rsp
  441859:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return std::forward<_Union>(__u)._M_first._M_get(); }
  44185d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  441861:	48 89 c7             	mov    %rax,%rdi
  441864:	e8 da ff ff ff       	callq  441843 <std::__detail::__variant::_Variadic_union<x666::Newline, x666::EndOfFile, x666::LexError> const& std::forward<std::__detail::__variant::_Variadic_union<x666::Newline, x666::EndOfFile, x666::LexError> const&>(std::remove_reference<std::__detail::__variant::_Variadic_union<x666::Newline, x666::EndOfFile, x666::LexError> const&>::type&)>
  441869:	48 89 c7             	mov    %rax,%rdi
  44186c:	e8 f3 00 00 00       	callq  441964 <std::__detail::__variant::_Uninitialized<x666::Newline, true>::_M_get() const &>
  441871:	c9                   	leaveq 
  441872:	c3                   	retq   

0000000000441873 <decltype(auto) std::__detail::__variant::__get<1ul, std::__detail::__variant::_Variadic_union<x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> const&>(std::in_place_index_t<1ul>, std::__detail::__variant::_Variadic_union<x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> const&)>:
    constexpr decltype(auto) __get(in_place_index_t<_Np>, _Union&& __u)
  441873:	55                   	push   %rbp
  441874:	48 89 e5             	mov    %rsp,%rbp
  441877:	53                   	push   %rbx
  441878:	48 83 ec 18          	sub    $0x18,%rsp
  44187c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    { return __get(in_place_index<_Np-1>, std::forward<_Union>(__u)._M_rest); }
  441880:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  441884:	48 89 c7             	mov    %rax,%rdi
  441887:	e8 80 fe ff ff       	callq  44170c <std::__detail::__variant::_Variadic_union<x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> const& std::forward<std::__detail::__variant::_Variadic_union<x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> const&>(std::remove_reference<std::__detail::__variant::_Variadic_union<x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> const&>::type&)>
  44188c:	48 83 ec 08          	sub    $0x8,%rsp
  441890:	53                   	push   %rbx
  441891:	48 89 c7             	mov    %rax,%rdi
  441894:	e8 b8 ff ff ff       	callq  441851 <decltype(auto) std::__detail::__variant::__get<std::__detail::__variant::_Variadic_union<x666::Newline, x666::EndOfFile, x666::LexError> const&>(std::in_place_index_t<0ul>, std::__detail::__variant::_Variadic_union<x666::Newline, x666::EndOfFile, x666::LexError> const&)>
  441899:	48 83 c4 10          	add    $0x10,%rsp
  44189d:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  4418a1:	c9                   	leaveq 
  4418a2:	c3                   	retq   

00000000004418a3 <decltype(auto) std::__detail::__variant::__get<2ul, std::__detail::__variant::_Variadic_union<x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> const&>(std::in_place_index_t<2ul>, std::__detail::__variant::_Variadic_union<x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> const&)>:
    constexpr decltype(auto) __get(in_place_index_t<_Np>, _Union&& __u)
  4418a3:	55                   	push   %rbp
  4418a4:	48 89 e5             	mov    %rsp,%rbp
  4418a7:	53                   	push   %rbx
  4418a8:	48 83 ec 18          	sub    $0x18,%rsp
  4418ac:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    { return __get(in_place_index<_Np-1>, std::forward<_Union>(__u)._M_rest); }
  4418b0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4418b4:	48 89 c7             	mov    %rax,%rdi
  4418b7:	e8 65 fd ff ff       	callq  441621 <std::__detail::__variant::_Variadic_union<x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> const& std::forward<std::__detail::__variant::_Variadic_union<x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> const&>(std::remove_reference<std::__detail::__variant::_Variadic_union<x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> const&>::type&)>
  4418bc:	48 83 ec 08          	sub    $0x8,%rsp
  4418c0:	53                   	push   %rbx
  4418c1:	48 89 c7             	mov    %rax,%rdi
  4418c4:	e8 aa ff ff ff       	callq  441873 <decltype(auto) std::__detail::__variant::__get<1ul, std::__detail::__variant::_Variadic_union<x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> const&>(std::in_place_index_t<1ul>, std::__detail::__variant::_Variadic_union<x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> const&)>
  4418c9:	48 83 c4 10          	add    $0x10,%rsp
  4418cd:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  4418d1:	c9                   	leaveq 
  4418d2:	c3                   	retq   

00000000004418d3 <decltype(auto) std::__detail::__variant::__get<3ul, std::__detail::__variant::_Variadic_union<x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> const&>(std::in_place_index_t<3ul>, std::__detail::__variant::_Variadic_union<x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> const&)>:
    constexpr decltype(auto) __get(in_place_index_t<_Np>, _Union&& __u)
  4418d3:	55                   	push   %rbp
  4418d4:	48 89 e5             	mov    %rsp,%rbp
  4418d7:	53                   	push   %rbx
  4418d8:	48 83 ec 18          	sub    $0x18,%rsp
  4418dc:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    { return __get(in_place_index<_Np-1>, std::forward<_Union>(__u)._M_rest); }
  4418e0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4418e4:	48 89 c7             	mov    %rax,%rdi
  4418e7:	e8 7a fc ff ff       	callq  441566 <std::__detail::__variant::_Variadic_union<x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> const& std::forward<std::__detail::__variant::_Variadic_union<x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> const&>(std::remove_reference<std::__detail::__variant::_Variadic_union<x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> const&>::type&)>
  4418ec:	48 83 ec 08          	sub    $0x8,%rsp
  4418f0:	53                   	push   %rbx
  4418f1:	48 89 c7             	mov    %rax,%rdi
  4418f4:	e8 aa ff ff ff       	callq  4418a3 <decltype(auto) std::__detail::__variant::__get<2ul, std::__detail::__variant::_Variadic_union<x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> const&>(std::in_place_index_t<2ul>, std::__detail::__variant::_Variadic_union<x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> const&)>
  4418f9:	48 83 c4 10          	add    $0x10,%rsp
  4418fd:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  441901:	c9                   	leaveq 
  441902:	c3                   	retq   

0000000000441903 <decltype(auto) std::__detail::__variant::__get<4ul, std::__detail::__variant::_Variadic_union<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> const&>(std::in_place_index_t<4ul>, std::__detail::__variant::_Variadic_union<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> const&)>:
    constexpr decltype(auto) __get(in_place_index_t<_Np>, _Union&& __u)
  441903:	55                   	push   %rbp
  441904:	48 89 e5             	mov    %rsp,%rbp
  441907:	53                   	push   %rbx
  441908:	48 83 ec 18          	sub    $0x18,%rsp
  44190c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    { return __get(in_place_index<_Np-1>, std::forward<_Union>(__u)._M_rest); }
  441910:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  441914:	48 89 c7             	mov    %rax,%rdi
  441917:	e8 bf fb ff ff       	callq  4414db <std::__detail::__variant::_Variadic_union<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> const& std::forward<std::__detail::__variant::_Variadic_union<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> const&>(std::remove_reference<std::__detail::__variant::_Variadic_union<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> const&>::type&)>
  44191c:	48 83 ec 08          	sub    $0x8,%rsp
  441920:	53                   	push   %rbx
  441921:	48 89 c7             	mov    %rax,%rdi
  441924:	e8 aa ff ff ff       	callq  4418d3 <decltype(auto) std::__detail::__variant::__get<3ul, std::__detail::__variant::_Variadic_union<x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> const&>(std::in_place_index_t<3ul>, std::__detail::__variant::_Variadic_union<x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> const&)>
  441929:	48 83 c4 10          	add    $0x10,%rsp
  44192d:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  441931:	c9                   	leaveq 
  441932:	c3                   	retq   

0000000000441933 <decltype(auto) std::__detail::__variant::__get<4ul, std::__detail::__variant::_Variant_storage<false, x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> const&>(std::__detail::__variant::_Variant_storage<false, x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> const&)>:
    constexpr decltype(auto) __get(_Variant&& __v)
  441933:	55                   	push   %rbp
  441934:	48 89 e5             	mov    %rsp,%rbp
  441937:	53                   	push   %rbx
  441938:	48 83 ec 18          	sub    $0x18,%rsp
  44193c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
      return __get(std::in_place_index<_Np>, std::forward<_Variant>(__v)._M_u);
  441940:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  441944:	48 89 c7             	mov    %rax,%rdi
  441947:	e8 81 fb ff ff       	callq  4414cd <std::__detail::__variant::_Variant_storage<false, x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> const& std::forward<std::__detail::__variant::_Variant_storage<false, x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> const&>(std::remove_reference<std::__detail::__variant::_Variant_storage<false, x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> const&>::type&)>
  44194c:	48 83 ec 08          	sub    $0x8,%rsp
  441950:	53                   	push   %rbx
  441951:	48 89 c7             	mov    %rax,%rdi
  441954:	e8 aa ff ff ff       	callq  441903 <decltype(auto) std::__detail::__variant::__get<4ul, std::__detail::__variant::_Variadic_union<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> const&>(std::in_place_index_t<4ul>, std::__detail::__variant::_Variadic_union<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> const&)>
  441959:	48 83 c4 10          	add    $0x10,%rsp
    }
  44195d:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  441961:	c9                   	leaveq 
  441962:	c3                   	retq   
  441963:	90                   	nop

0000000000441964 <std::__detail::__variant::_Uninitialized<x666::Newline, true>::_M_get() const &>:
      constexpr const _Type& _M_get() const &
  441964:	55                   	push   %rbp
  441965:	48 89 e5             	mov    %rsp,%rbp
  441968:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_storage; }
  44196c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  441970:	5d                   	pop    %rbp
  441971:	c3                   	retq   

0000000000441972 <x666::Newline const* std::__addressof<x666::Newline const>(x666::Newline const&)>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
  441972:	55                   	push   %rbp
  441973:	48 89 e5             	mov    %rsp,%rbp
  441976:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return __builtin_addressof(__r); }
  44197a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  44197e:	5d                   	pop    %rbp
  44197f:	c3                   	retq   

0000000000441980 <void std::__detail::__variant::__erased_dtor<std::__detail::__variant::_Variant_storage<false, x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> const&, 4ul>(std::__detail::__variant::_Variant_storage<false, x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> const&)>:
    __erased_dtor(_Variant&& __v)
  441980:	55                   	push   %rbp
  441981:	48 89 e5             	mov    %rsp,%rbp
  441984:	48 83 ec 10          	sub    $0x10,%rsp
  441988:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { std::_Destroy(std::__addressof(__get<_Np>(__v))); }
  44198c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  441990:	48 89 c7             	mov    %rax,%rdi
  441993:	e8 9b ff ff ff       	callq  441933 <decltype(auto) std::__detail::__variant::__get<4ul, std::__detail::__variant::_Variant_storage<false, x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> const&>(std::__detail::__variant::_Variant_storage<false, x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> const&)>
  441998:	48 89 c7             	mov    %rax,%rdi
  44199b:	e8 d2 ff ff ff       	callq  441972 <x666::Newline const* std::__addressof<x666::Newline const>(x666::Newline const&)>
  4419a0:	48 89 c7             	mov    %rax,%rdi
  4419a3:	e8 4c 10 00 00       	callq  4429f4 <void std::_Destroy<x666::Newline const>(x666::Newline const*)>
  4419a8:	90                   	nop
  4419a9:	c9                   	leaveq 
  4419aa:	c3                   	retq   

00000000004419ab <std::__detail::__variant::_Variadic_union<x666::EndOfFile, x666::LexError> const& std::forward<std::__detail::__variant::_Variadic_union<x666::EndOfFile, x666::LexError> const&>(std::remove_reference<std::__detail::__variant::_Variadic_union<x666::EndOfFile, x666::LexError> const&>::type&)>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
  4419ab:	55                   	push   %rbp
  4419ac:	48 89 e5             	mov    %rsp,%rbp
  4419af:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<_Tp&&>(__t); }
  4419b3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4419b7:	5d                   	pop    %rbp
  4419b8:	c3                   	retq   

00000000004419b9 <decltype(auto) std::__detail::__variant::__get<std::__detail::__variant::_Variadic_union<x666::EndOfFile, x666::LexError> const&>(std::in_place_index_t<0ul>, std::__detail::__variant::_Variadic_union<x666::EndOfFile, x666::LexError> const&)>:
    constexpr decltype(auto) __get(in_place_index_t<0>, _Union&& __u)
  4419b9:	55                   	push   %rbp
  4419ba:	48 89 e5             	mov    %rsp,%rbp
  4419bd:	48 83 ec 10          	sub    $0x10,%rsp
  4419c1:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return std::forward<_Union>(__u)._M_first._M_get(); }
  4419c5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4419c9:	48 89 c7             	mov    %rax,%rdi
  4419cc:	e8 da ff ff ff       	callq  4419ab <std::__detail::__variant::_Variadic_union<x666::EndOfFile, x666::LexError> const& std::forward<std::__detail::__variant::_Variadic_union<x666::EndOfFile, x666::LexError> const&>(std::remove_reference<std::__detail::__variant::_Variadic_union<x666::EndOfFile, x666::LexError> const&>::type&)>
  4419d1:	48 89 c7             	mov    %rax,%rdi
  4419d4:	e8 23 01 00 00       	callq  441afc <std::__detail::__variant::_Uninitialized<x666::EndOfFile, true>::_M_get() const &>
  4419d9:	c9                   	leaveq 
  4419da:	c3                   	retq   

00000000004419db <decltype(auto) std::__detail::__variant::__get<1ul, std::__detail::__variant::_Variadic_union<x666::Newline, x666::EndOfFile, x666::LexError> const&>(std::in_place_index_t<1ul>, std::__detail::__variant::_Variadic_union<x666::Newline, x666::EndOfFile, x666::LexError> const&)>:
    constexpr decltype(auto) __get(in_place_index_t<_Np>, _Union&& __u)
  4419db:	55                   	push   %rbp
  4419dc:	48 89 e5             	mov    %rsp,%rbp
  4419df:	53                   	push   %rbx
  4419e0:	48 83 ec 18          	sub    $0x18,%rsp
  4419e4:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    { return __get(in_place_index<_Np-1>, std::forward<_Union>(__u)._M_rest); }
  4419e8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4419ec:	48 89 c7             	mov    %rax,%rdi
  4419ef:	e8 4f fe ff ff       	callq  441843 <std::__detail::__variant::_Variadic_union<x666::Newline, x666::EndOfFile, x666::LexError> const& std::forward<std::__detail::__variant::_Variadic_union<x666::Newline, x666::EndOfFile, x666::LexError> const&>(std::remove_reference<std::__detail::__variant::_Variadic_union<x666::Newline, x666::EndOfFile, x666::LexError> const&>::type&)>
  4419f4:	48 83 ec 08          	sub    $0x8,%rsp
  4419f8:	53                   	push   %rbx
  4419f9:	48 89 c7             	mov    %rax,%rdi
  4419fc:	e8 b8 ff ff ff       	callq  4419b9 <decltype(auto) std::__detail::__variant::__get<std::__detail::__variant::_Variadic_union<x666::EndOfFile, x666::LexError> const&>(std::in_place_index_t<0ul>, std::__detail::__variant::_Variadic_union<x666::EndOfFile, x666::LexError> const&)>
  441a01:	48 83 c4 10          	add    $0x10,%rsp
  441a05:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  441a09:	c9                   	leaveq 
  441a0a:	c3                   	retq   

0000000000441a0b <decltype(auto) std::__detail::__variant::__get<2ul, std::__detail::__variant::_Variadic_union<x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> const&>(std::in_place_index_t<2ul>, std::__detail::__variant::_Variadic_union<x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> const&)>:
    constexpr decltype(auto) __get(in_place_index_t<_Np>, _Union&& __u)
  441a0b:	55                   	push   %rbp
  441a0c:	48 89 e5             	mov    %rsp,%rbp
  441a0f:	53                   	push   %rbx
  441a10:	48 83 ec 18          	sub    $0x18,%rsp
  441a14:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    { return __get(in_place_index<_Np-1>, std::forward<_Union>(__u)._M_rest); }
  441a18:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  441a1c:	48 89 c7             	mov    %rax,%rdi
  441a1f:	e8 e8 fc ff ff       	callq  44170c <std::__detail::__variant::_Variadic_union<x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> const& std::forward<std::__detail::__variant::_Variadic_union<x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> const&>(std::remove_reference<std::__detail::__variant::_Variadic_union<x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> const&>::type&)>
  441a24:	48 83 ec 08          	sub    $0x8,%rsp
  441a28:	53                   	push   %rbx
  441a29:	48 89 c7             	mov    %rax,%rdi
  441a2c:	e8 aa ff ff ff       	callq  4419db <decltype(auto) std::__detail::__variant::__get<1ul, std::__detail::__variant::_Variadic_union<x666::Newline, x666::EndOfFile, x666::LexError> const&>(std::in_place_index_t<1ul>, std::__detail::__variant::_Variadic_union<x666::Newline, x666::EndOfFile, x666::LexError> const&)>
  441a31:	48 83 c4 10          	add    $0x10,%rsp
  441a35:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  441a39:	c9                   	leaveq 
  441a3a:	c3                   	retq   

0000000000441a3b <decltype(auto) std::__detail::__variant::__get<3ul, std::__detail::__variant::_Variadic_union<x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> const&>(std::in_place_index_t<3ul>, std::__detail::__variant::_Variadic_union<x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> const&)>:
    constexpr decltype(auto) __get(in_place_index_t<_Np>, _Union&& __u)
  441a3b:	55                   	push   %rbp
  441a3c:	48 89 e5             	mov    %rsp,%rbp
  441a3f:	53                   	push   %rbx
  441a40:	48 83 ec 18          	sub    $0x18,%rsp
  441a44:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    { return __get(in_place_index<_Np-1>, std::forward<_Union>(__u)._M_rest); }
  441a48:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  441a4c:	48 89 c7             	mov    %rax,%rdi
  441a4f:	e8 cd fb ff ff       	callq  441621 <std::__detail::__variant::_Variadic_union<x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> const& std::forward<std::__detail::__variant::_Variadic_union<x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> const&>(std::remove_reference<std::__detail::__variant::_Variadic_union<x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> const&>::type&)>
  441a54:	48 83 ec 08          	sub    $0x8,%rsp
  441a58:	53                   	push   %rbx
  441a59:	48 89 c7             	mov    %rax,%rdi
  441a5c:	e8 aa ff ff ff       	callq  441a0b <decltype(auto) std::__detail::__variant::__get<2ul, std::__detail::__variant::_Variadic_union<x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> const&>(std::in_place_index_t<2ul>, std::__detail::__variant::_Variadic_union<x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> const&)>
  441a61:	48 83 c4 10          	add    $0x10,%rsp
  441a65:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  441a69:	c9                   	leaveq 
  441a6a:	c3                   	retq   

0000000000441a6b <decltype(auto) std::__detail::__variant::__get<4ul, std::__detail::__variant::_Variadic_union<x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> const&>(std::in_place_index_t<4ul>, std::__detail::__variant::_Variadic_union<x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> const&)>:
    constexpr decltype(auto) __get(in_place_index_t<_Np>, _Union&& __u)
  441a6b:	55                   	push   %rbp
  441a6c:	48 89 e5             	mov    %rsp,%rbp
  441a6f:	53                   	push   %rbx
  441a70:	48 83 ec 18          	sub    $0x18,%rsp
  441a74:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    { return __get(in_place_index<_Np-1>, std::forward<_Union>(__u)._M_rest); }
  441a78:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  441a7c:	48 89 c7             	mov    %rax,%rdi
  441a7f:	e8 e2 fa ff ff       	callq  441566 <std::__detail::__variant::_Variadic_union<x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> const& std::forward<std::__detail::__variant::_Variadic_union<x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> const&>(std::remove_reference<std::__detail::__variant::_Variadic_union<x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> const&>::type&)>
  441a84:	48 83 ec 08          	sub    $0x8,%rsp
  441a88:	53                   	push   %rbx
  441a89:	48 89 c7             	mov    %rax,%rdi
  441a8c:	e8 aa ff ff ff       	callq  441a3b <decltype(auto) std::__detail::__variant::__get<3ul, std::__detail::__variant::_Variadic_union<x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> const&>(std::in_place_index_t<3ul>, std::__detail::__variant::_Variadic_union<x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> const&)>
  441a91:	48 83 c4 10          	add    $0x10,%rsp
  441a95:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  441a99:	c9                   	leaveq 
  441a9a:	c3                   	retq   

0000000000441a9b <decltype(auto) std::__detail::__variant::__get<5ul, std::__detail::__variant::_Variadic_union<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> const&>(std::in_place_index_t<5ul>, std::__detail::__variant::_Variadic_union<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> const&)>:
    constexpr decltype(auto) __get(in_place_index_t<_Np>, _Union&& __u)
  441a9b:	55                   	push   %rbp
  441a9c:	48 89 e5             	mov    %rsp,%rbp
  441a9f:	53                   	push   %rbx
  441aa0:	48 83 ec 18          	sub    $0x18,%rsp
  441aa4:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    { return __get(in_place_index<_Np-1>, std::forward<_Union>(__u)._M_rest); }
  441aa8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  441aac:	48 89 c7             	mov    %rax,%rdi
  441aaf:	e8 27 fa ff ff       	callq  4414db <std::__detail::__variant::_Variadic_union<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> const& std::forward<std::__detail::__variant::_Variadic_union<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> const&>(std::remove_reference<std::__detail::__variant::_Variadic_union<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> const&>::type&)>
  441ab4:	48 83 ec 08          	sub    $0x8,%rsp
  441ab8:	53                   	push   %rbx
  441ab9:	48 89 c7             	mov    %rax,%rdi
  441abc:	e8 aa ff ff ff       	callq  441a6b <decltype(auto) std::__detail::__variant::__get<4ul, std::__detail::__variant::_Variadic_union<x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> const&>(std::in_place_index_t<4ul>, std::__detail::__variant::_Variadic_union<x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> const&)>
  441ac1:	48 83 c4 10          	add    $0x10,%rsp
  441ac5:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  441ac9:	c9                   	leaveq 
  441aca:	c3                   	retq   

0000000000441acb <decltype(auto) std::__detail::__variant::__get<5ul, std::__detail::__variant::_Variant_storage<false, x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> const&>(std::__detail::__variant::_Variant_storage<false, x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> const&)>:
    constexpr decltype(auto) __get(_Variant&& __v)
  441acb:	55                   	push   %rbp
  441acc:	48 89 e5             	mov    %rsp,%rbp
  441acf:	53                   	push   %rbx
  441ad0:	48 83 ec 18          	sub    $0x18,%rsp
  441ad4:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
      return __get(std::in_place_index<_Np>, std::forward<_Variant>(__v)._M_u);
  441ad8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  441adc:	48 89 c7             	mov    %rax,%rdi
  441adf:	e8 e9 f9 ff ff       	callq  4414cd <std::__detail::__variant::_Variant_storage<false, x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> const& std::forward<std::__detail::__variant::_Variant_storage<false, x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> const&>(std::remove_reference<std::__detail::__variant::_Variant_storage<false, x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> const&>::type&)>
  441ae4:	48 83 ec 08          	sub    $0x8,%rsp
  441ae8:	53                   	push   %rbx
  441ae9:	48 89 c7             	mov    %rax,%rdi
  441aec:	e8 aa ff ff ff       	callq  441a9b <decltype(auto) std::__detail::__variant::__get<5ul, std::__detail::__variant::_Variadic_union<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> const&>(std::in_place_index_t<5ul>, std::__detail::__variant::_Variadic_union<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> const&)>
  441af1:	48 83 c4 10          	add    $0x10,%rsp
    }
  441af5:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  441af9:	c9                   	leaveq 
  441afa:	c3                   	retq   
  441afb:	90                   	nop

0000000000441afc <std::__detail::__variant::_Uninitialized<x666::EndOfFile, true>::_M_get() const &>:
      constexpr const _Type& _M_get() const &
  441afc:	55                   	push   %rbp
  441afd:	48 89 e5             	mov    %rsp,%rbp
  441b00:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_storage; }
  441b04:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  441b08:	5d                   	pop    %rbp
  441b09:	c3                   	retq   

0000000000441b0a <x666::EndOfFile const* std::__addressof<x666::EndOfFile const>(x666::EndOfFile const&)>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
  441b0a:	55                   	push   %rbp
  441b0b:	48 89 e5             	mov    %rsp,%rbp
  441b0e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return __builtin_addressof(__r); }
  441b12:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  441b16:	5d                   	pop    %rbp
  441b17:	c3                   	retq   

0000000000441b18 <void std::__detail::__variant::__erased_dtor<std::__detail::__variant::_Variant_storage<false, x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> const&, 5ul>(std::__detail::__variant::_Variant_storage<false, x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> const&)>:
    __erased_dtor(_Variant&& __v)
  441b18:	55                   	push   %rbp
  441b19:	48 89 e5             	mov    %rsp,%rbp
  441b1c:	48 83 ec 10          	sub    $0x10,%rsp
  441b20:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { std::_Destroy(std::__addressof(__get<_Np>(__v))); }
  441b24:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  441b28:	48 89 c7             	mov    %rax,%rdi
  441b2b:	e8 9b ff ff ff       	callq  441acb <decltype(auto) std::__detail::__variant::__get<5ul, std::__detail::__variant::_Variant_storage<false, x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> const&>(std::__detail::__variant::_Variant_storage<false, x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> const&)>
  441b30:	48 89 c7             	mov    %rax,%rdi
  441b33:	e8 d2 ff ff ff       	callq  441b0a <x666::EndOfFile const* std::__addressof<x666::EndOfFile const>(x666::EndOfFile const&)>
  441b38:	48 89 c7             	mov    %rax,%rdi
  441b3b:	e8 bf 0e 00 00       	callq  4429ff <void std::_Destroy<x666::EndOfFile const>(x666::EndOfFile const*)>
  441b40:	90                   	nop
  441b41:	c9                   	leaveq 
  441b42:	c3                   	retq   

0000000000441b43 <std::__detail::__variant::_Variadic_union<x666::LexError> const& std::forward<std::__detail::__variant::_Variadic_union<x666::LexError> const&>(std::remove_reference<std::__detail::__variant::_Variadic_union<x666::LexError> const&>::type&)>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
  441b43:	55                   	push   %rbp
  441b44:	48 89 e5             	mov    %rsp,%rbp
  441b47:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<_Tp&&>(__t); }
  441b4b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  441b4f:	5d                   	pop    %rbp
  441b50:	c3                   	retq   

0000000000441b51 <decltype(auto) std::__detail::__variant::__get<std::__detail::__variant::_Variadic_union<x666::LexError> const&>(std::in_place_index_t<0ul>, std::__detail::__variant::_Variadic_union<x666::LexError> const&)>:
    constexpr decltype(auto) __get(in_place_index_t<0>, _Union&& __u)
  441b51:	55                   	push   %rbp
  441b52:	48 89 e5             	mov    %rsp,%rbp
  441b55:	48 83 ec 10          	sub    $0x10,%rsp
  441b59:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return std::forward<_Union>(__u)._M_first._M_get(); }
  441b5d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  441b61:	48 89 c7             	mov    %rax,%rdi
  441b64:	e8 da ff ff ff       	callq  441b43 <std::__detail::__variant::_Variadic_union<x666::LexError> const& std::forward<std::__detail::__variant::_Variadic_union<x666::LexError> const&>(std::remove_reference<std::__detail::__variant::_Variadic_union<x666::LexError> const&>::type&)>
  441b69:	48 89 c7             	mov    %rax,%rdi
  441b6c:	e8 99 0e 00 00       	callq  442a0a <std::__detail::__variant::_Uninitialized<x666::LexError, false>::_M_get() const &>
  441b71:	c9                   	leaveq 
  441b72:	c3                   	retq   

0000000000441b73 <decltype(auto) std::__detail::__variant::__get<1ul, std::__detail::__variant::_Variadic_union<x666::EndOfFile, x666::LexError> const&>(std::in_place_index_t<1ul>, std::__detail::__variant::_Variadic_union<x666::EndOfFile, x666::LexError> const&)>:
    constexpr decltype(auto) __get(in_place_index_t<_Np>, _Union&& __u)
  441b73:	55                   	push   %rbp
  441b74:	48 89 e5             	mov    %rsp,%rbp
  441b77:	53                   	push   %rbx
  441b78:	48 83 ec 18          	sub    $0x18,%rsp
  441b7c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    { return __get(in_place_index<_Np-1>, std::forward<_Union>(__u)._M_rest); }
  441b80:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  441b84:	48 89 c7             	mov    %rax,%rdi
  441b87:	e8 1f fe ff ff       	callq  4419ab <std::__detail::__variant::_Variadic_union<x666::EndOfFile, x666::LexError> const& std::forward<std::__detail::__variant::_Variadic_union<x666::EndOfFile, x666::LexError> const&>(std::remove_reference<std::__detail::__variant::_Variadic_union<x666::EndOfFile, x666::LexError> const&>::type&)>
  441b8c:	48 83 ec 08          	sub    $0x8,%rsp
  441b90:	53                   	push   %rbx
  441b91:	48 89 c7             	mov    %rax,%rdi
  441b94:	e8 b8 ff ff ff       	callq  441b51 <decltype(auto) std::__detail::__variant::__get<std::__detail::__variant::_Variadic_union<x666::LexError> const&>(std::in_place_index_t<0ul>, std::__detail::__variant::_Variadic_union<x666::LexError> const&)>
  441b99:	48 83 c4 10          	add    $0x10,%rsp
  441b9d:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  441ba1:	c9                   	leaveq 
  441ba2:	c3                   	retq   

0000000000441ba3 <decltype(auto) std::__detail::__variant::__get<2ul, std::__detail::__variant::_Variadic_union<x666::Newline, x666::EndOfFile, x666::LexError> const&>(std::in_place_index_t<2ul>, std::__detail::__variant::_Variadic_union<x666::Newline, x666::EndOfFile, x666::LexError> const&)>:
    constexpr decltype(auto) __get(in_place_index_t<_Np>, _Union&& __u)
  441ba3:	55                   	push   %rbp
  441ba4:	48 89 e5             	mov    %rsp,%rbp
  441ba7:	53                   	push   %rbx
  441ba8:	48 83 ec 18          	sub    $0x18,%rsp
  441bac:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    { return __get(in_place_index<_Np-1>, std::forward<_Union>(__u)._M_rest); }
  441bb0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  441bb4:	48 89 c7             	mov    %rax,%rdi
  441bb7:	e8 87 fc ff ff       	callq  441843 <std::__detail::__variant::_Variadic_union<x666::Newline, x666::EndOfFile, x666::LexError> const& std::forward<std::__detail::__variant::_Variadic_union<x666::Newline, x666::EndOfFile, x666::LexError> const&>(std::remove_reference<std::__detail::__variant::_Variadic_union<x666::Newline, x666::EndOfFile, x666::LexError> const&>::type&)>
  441bbc:	48 83 ec 08          	sub    $0x8,%rsp
  441bc0:	53                   	push   %rbx
  441bc1:	48 89 c7             	mov    %rax,%rdi
  441bc4:	e8 aa ff ff ff       	callq  441b73 <decltype(auto) std::__detail::__variant::__get<1ul, std::__detail::__variant::_Variadic_union<x666::EndOfFile, x666::LexError> const&>(std::in_place_index_t<1ul>, std::__detail::__variant::_Variadic_union<x666::EndOfFile, x666::LexError> const&)>
  441bc9:	48 83 c4 10          	add    $0x10,%rsp
  441bcd:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  441bd1:	c9                   	leaveq 
  441bd2:	c3                   	retq   

0000000000441bd3 <decltype(auto) std::__detail::__variant::__get<3ul, std::__detail::__variant::_Variadic_union<x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> const&>(std::in_place_index_t<3ul>, std::__detail::__variant::_Variadic_union<x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> const&)>:
    constexpr decltype(auto) __get(in_place_index_t<_Np>, _Union&& __u)
  441bd3:	55                   	push   %rbp
  441bd4:	48 89 e5             	mov    %rsp,%rbp
  441bd7:	53                   	push   %rbx
  441bd8:	48 83 ec 18          	sub    $0x18,%rsp
  441bdc:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    { return __get(in_place_index<_Np-1>, std::forward<_Union>(__u)._M_rest); }
  441be0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  441be4:	48 89 c7             	mov    %rax,%rdi
  441be7:	e8 20 fb ff ff       	callq  44170c <std::__detail::__variant::_Variadic_union<x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> const& std::forward<std::__detail::__variant::_Variadic_union<x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> const&>(std::remove_reference<std::__detail::__variant::_Variadic_union<x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> const&>::type&)>
  441bec:	48 83 ec 08          	sub    $0x8,%rsp
  441bf0:	53                   	push   %rbx
  441bf1:	48 89 c7             	mov    %rax,%rdi
  441bf4:	e8 aa ff ff ff       	callq  441ba3 <decltype(auto) std::__detail::__variant::__get<2ul, std::__detail::__variant::_Variadic_union<x666::Newline, x666::EndOfFile, x666::LexError> const&>(std::in_place_index_t<2ul>, std::__detail::__variant::_Variadic_union<x666::Newline, x666::EndOfFile, x666::LexError> const&)>
  441bf9:	48 83 c4 10          	add    $0x10,%rsp
  441bfd:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  441c01:	c9                   	leaveq 
  441c02:	c3                   	retq   

0000000000441c03 <decltype(auto) std::__detail::__variant::__get<4ul, std::__detail::__variant::_Variadic_union<x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> const&>(std::in_place_index_t<4ul>, std::__detail::__variant::_Variadic_union<x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> const&)>:
    constexpr decltype(auto) __get(in_place_index_t<_Np>, _Union&& __u)
  441c03:	55                   	push   %rbp
  441c04:	48 89 e5             	mov    %rsp,%rbp
  441c07:	53                   	push   %rbx
  441c08:	48 83 ec 18          	sub    $0x18,%rsp
  441c0c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    { return __get(in_place_index<_Np-1>, std::forward<_Union>(__u)._M_rest); }
  441c10:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  441c14:	48 89 c7             	mov    %rax,%rdi
  441c17:	e8 05 fa ff ff       	callq  441621 <std::__detail::__variant::_Variadic_union<x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> const& std::forward<std::__detail::__variant::_Variadic_union<x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> const&>(std::remove_reference<std::__detail::__variant::_Variadic_union<x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> const&>::type&)>
  441c1c:	48 83 ec 08          	sub    $0x8,%rsp
  441c20:	53                   	push   %rbx
  441c21:	48 89 c7             	mov    %rax,%rdi
  441c24:	e8 aa ff ff ff       	callq  441bd3 <decltype(auto) std::__detail::__variant::__get<3ul, std::__detail::__variant::_Variadic_union<x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> const&>(std::in_place_index_t<3ul>, std::__detail::__variant::_Variadic_union<x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> const&)>
  441c29:	48 83 c4 10          	add    $0x10,%rsp
  441c2d:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  441c31:	c9                   	leaveq 
  441c32:	c3                   	retq   

0000000000441c33 <decltype(auto) std::__detail::__variant::__get<5ul, std::__detail::__variant::_Variadic_union<x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> const&>(std::in_place_index_t<5ul>, std::__detail::__variant::_Variadic_union<x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> const&)>:
    constexpr decltype(auto) __get(in_place_index_t<_Np>, _Union&& __u)
  441c33:	55                   	push   %rbp
  441c34:	48 89 e5             	mov    %rsp,%rbp
  441c37:	53                   	push   %rbx
  441c38:	48 83 ec 18          	sub    $0x18,%rsp
  441c3c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    { return __get(in_place_index<_Np-1>, std::forward<_Union>(__u)._M_rest); }
  441c40:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  441c44:	48 89 c7             	mov    %rax,%rdi
  441c47:	e8 1a f9 ff ff       	callq  441566 <std::__detail::__variant::_Variadic_union<x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> const& std::forward<std::__detail::__variant::_Variadic_union<x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> const&>(std::remove_reference<std::__detail::__variant::_Variadic_union<x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> const&>::type&)>
  441c4c:	48 83 ec 08          	sub    $0x8,%rsp
  441c50:	53                   	push   %rbx
  441c51:	48 89 c7             	mov    %rax,%rdi
  441c54:	e8 aa ff ff ff       	callq  441c03 <decltype(auto) std::__detail::__variant::__get<4ul, std::__detail::__variant::_Variadic_union<x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> const&>(std::in_place_index_t<4ul>, std::__detail::__variant::_Variadic_union<x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> const&)>
  441c59:	48 83 c4 10          	add    $0x10,%rsp
  441c5d:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  441c61:	c9                   	leaveq 
  441c62:	c3                   	retq   

0000000000441c63 <decltype(auto) std::__detail::__variant::__get<6ul, std::__detail::__variant::_Variadic_union<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> const&>(std::in_place_index_t<6ul>, std::__detail::__variant::_Variadic_union<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> const&)>:
    constexpr decltype(auto) __get(in_place_index_t<_Np>, _Union&& __u)
  441c63:	55                   	push   %rbp
  441c64:	48 89 e5             	mov    %rsp,%rbp
  441c67:	53                   	push   %rbx
  441c68:	48 83 ec 18          	sub    $0x18,%rsp
  441c6c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    { return __get(in_place_index<_Np-1>, std::forward<_Union>(__u)._M_rest); }
  441c70:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  441c74:	48 89 c7             	mov    %rax,%rdi
  441c77:	e8 5f f8 ff ff       	callq  4414db <std::__detail::__variant::_Variadic_union<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> const& std::forward<std::__detail::__variant::_Variadic_union<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> const&>(std::remove_reference<std::__detail::__variant::_Variadic_union<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> const&>::type&)>
  441c7c:	48 83 ec 08          	sub    $0x8,%rsp
  441c80:	53                   	push   %rbx
  441c81:	48 89 c7             	mov    %rax,%rdi
  441c84:	e8 aa ff ff ff       	callq  441c33 <decltype(auto) std::__detail::__variant::__get<5ul, std::__detail::__variant::_Variadic_union<x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> const&>(std::in_place_index_t<5ul>, std::__detail::__variant::_Variadic_union<x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> const&)>
  441c89:	48 83 c4 10          	add    $0x10,%rsp
  441c8d:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  441c91:	c9                   	leaveq 
  441c92:	c3                   	retq   

0000000000441c93 <decltype(auto) std::__detail::__variant::__get<6ul, std::__detail::__variant::_Variant_storage<false, x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> const&>(std::__detail::__variant::_Variant_storage<false, x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> const&)>:
    constexpr decltype(auto) __get(_Variant&& __v)
  441c93:	55                   	push   %rbp
  441c94:	48 89 e5             	mov    %rsp,%rbp
  441c97:	53                   	push   %rbx
  441c98:	48 83 ec 18          	sub    $0x18,%rsp
  441c9c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
      return __get(std::in_place_index<_Np>, std::forward<_Variant>(__v)._M_u);
  441ca0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  441ca4:	48 89 c7             	mov    %rax,%rdi
  441ca7:	e8 21 f8 ff ff       	callq  4414cd <std::__detail::__variant::_Variant_storage<false, x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> const& std::forward<std::__detail::__variant::_Variant_storage<false, x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> const&>(std::remove_reference<std::__detail::__variant::_Variant_storage<false, x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> const&>::type&)>
  441cac:	48 83 ec 08          	sub    $0x8,%rsp
  441cb0:	53                   	push   %rbx
  441cb1:	48 89 c7             	mov    %rax,%rdi
  441cb4:	e8 aa ff ff ff       	callq  441c63 <decltype(auto) std::__detail::__variant::__get<6ul, std::__detail::__variant::_Variadic_union<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> const&>(std::in_place_index_t<6ul>, std::__detail::__variant::_Variadic_union<x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> const&)>
  441cb9:	48 83 c4 10          	add    $0x10,%rsp
    }
  441cbd:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  441cc1:	c9                   	leaveq 
  441cc2:	c3                   	retq   

0000000000441cc3 <x666::LexError const* std::__addressof<x666::LexError const>(x666::LexError const&)>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
  441cc3:	55                   	push   %rbp
  441cc4:	48 89 e5             	mov    %rsp,%rbp
  441cc7:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return __builtin_addressof(__r); }
  441ccb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  441ccf:	5d                   	pop    %rbp
  441cd0:	c3                   	retq   

0000000000441cd1 <void std::__detail::__variant::__erased_dtor<std::__detail::__variant::_Variant_storage<false, x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> const&, 6ul>(std::__detail::__variant::_Variant_storage<false, x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> const&)>:
    __erased_dtor(_Variant&& __v)
  441cd1:	55                   	push   %rbp
  441cd2:	48 89 e5             	mov    %rsp,%rbp
  441cd5:	48 83 ec 10          	sub    $0x10,%rsp
  441cd9:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { std::_Destroy(std::__addressof(__get<_Np>(__v))); }
  441cdd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  441ce1:	48 89 c7             	mov    %rax,%rdi
  441ce4:	e8 aa ff ff ff       	callq  441c93 <decltype(auto) std::__detail::__variant::__get<6ul, std::__detail::__variant::_Variant_storage<false, x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> const&>(std::__detail::__variant::_Variant_storage<false, x666::Identifier, x666::StringLiteral, x666::IntLiteral, x666::Operator, x666::Newline, x666::EndOfFile, x666::LexError> const&)>
  441ce9:	48 89 c7             	mov    %rax,%rdi
  441cec:	e8 d2 ff ff ff       	callq  441cc3 <x666::LexError const* std::__addressof<x666::LexError const>(x666::LexError const&)>
  441cf1:	48 89 c7             	mov    %rax,%rdi
  441cf4:	e8 2b 0d 00 00       	callq  442a24 <void std::_Destroy<x666::LexError const>(x666::LexError const*)>
  441cf9:	90                   	nop
  441cfa:	c9                   	leaveq 
  441cfb:	c3                   	retq   

0000000000441cfc <std::_Deque_iterator<x666::Parser::BracketEntry, x666::Parser::BracketEntry&, x666::Parser::BracketEntry*>::_S_buffer_size()>:
      static size_t _S_buffer_size() _GLIBCXX_NOEXCEPT
  441cfc:	55                   	push   %rbp
  441cfd:	48 89 e5             	mov    %rsp,%rbp
      { return __deque_buf_size(sizeof(_Tp)); }
  441d00:	bf 10 00 00 00       	mov    $0x10,%edi
  441d05:	e8 24 10 ff ff       	callq  432d2e <std::__deque_buf_size(unsigned long)>
  441d0a:	5d                   	pop    %rbp
  441d0b:	c3                   	retq   

0000000000441d0c <std::_Deque_iterator<x666::LineInfo, x666::LineInfo&, x666::LineInfo*>::_S_buffer_size()>:
      static size_t _S_buffer_size() _GLIBCXX_NOEXCEPT
  441d0c:	55                   	push   %rbp
  441d0d:	48 89 e5             	mov    %rsp,%rbp
      { return __deque_buf_size(sizeof(_Tp)); }
  441d10:	bf 20 00 00 00       	mov    $0x20,%edi
  441d15:	e8 14 10 ff ff       	callq  432d2e <std::__deque_buf_size(unsigned long)>
  441d1a:	5d                   	pop    %rbp
  441d1b:	c3                   	retq   

0000000000441d1c <std::_Deque_iterator<x666::LineInfo, x666::LineInfo const&, x666::LineInfo const*>::_Deque_iterator(std::_Deque_iterator<x666::LineInfo, x666::LineInfo&, x666::LineInfo*> const&)>:
      _Deque_iterator(const iterator& __x) _GLIBCXX_NOEXCEPT
  441d1c:	55                   	push   %rbp
  441d1d:	48 89 e5             	mov    %rsp,%rbp
  441d20:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  441d24:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      : _M_cur(__x._M_cur), _M_first(__x._M_first),
  441d28:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  441d2c:	48 8b 10             	mov    (%rax),%rdx
	_M_last(__x._M_last), _M_node(__x._M_node) { }
  441d2f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  441d33:	48 89 10             	mov    %rdx,(%rax)
      : _M_cur(__x._M_cur), _M_first(__x._M_first),
  441d36:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  441d3a:	48 8b 50 08          	mov    0x8(%rax),%rdx
	_M_last(__x._M_last), _M_node(__x._M_node) { }
  441d3e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  441d42:	48 89 50 08          	mov    %rdx,0x8(%rax)
  441d46:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  441d4a:	48 8b 50 10          	mov    0x10(%rax),%rdx
  441d4e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  441d52:	48 89 50 10          	mov    %rdx,0x10(%rax)
  441d56:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  441d5a:	48 8b 50 18          	mov    0x18(%rax),%rdx
  441d5e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  441d62:	48 89 50 18          	mov    %rdx,0x18(%rax)
  441d66:	90                   	nop
  441d67:	5d                   	pop    %rbp
  441d68:	c3                   	retq   
  441d69:	90                   	nop

0000000000441d6a <std::_Deque_iterator<x666::LineInfo, x666::LineInfo const&, x666::LineInfo const*>::_M_set_node(x666::LineInfo**)>:
      _M_set_node(_Map_pointer __new_node) _GLIBCXX_NOEXCEPT
  441d6a:	55                   	push   %rbp
  441d6b:	48 89 e5             	mov    %rsp,%rbp
  441d6e:	53                   	push   %rbx
  441d6f:	48 83 ec 18          	sub    $0x18,%rsp
  441d73:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  441d77:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	_M_node = __new_node;
  441d7b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  441d7f:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  441d83:	48 89 50 18          	mov    %rdx,0x18(%rax)
	_M_first = *__new_node;
  441d87:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  441d8b:	48 8b 10             	mov    (%rax),%rdx
  441d8e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  441d92:	48 89 50 08          	mov    %rdx,0x8(%rax)
	_M_last = _M_first + difference_type(_S_buffer_size());
  441d96:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  441d9a:	48 8b 58 08          	mov    0x8(%rax),%rbx
  441d9e:	e8 8c 0c 00 00       	callq  442a2f <std::_Deque_iterator<x666::LineInfo, x666::LineInfo const&, x666::LineInfo const*>::_S_buffer_size()>
  441da3:	48 c1 e0 05          	shl    $0x5,%rax
  441da7:	48 8d 14 03          	lea    (%rbx,%rax,1),%rdx
  441dab:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  441daf:	48 89 50 10          	mov    %rdx,0x10(%rax)
      }
  441db3:	90                   	nop
  441db4:	48 83 c4 18          	add    $0x18,%rsp
  441db8:	5b                   	pop    %rbx
  441db9:	5d                   	pop    %rbp
  441dba:	c3                   	retq   

0000000000441dbb <void std::_Destroy<x666::Identifier const>(x666::Identifier const*)>:
    _Destroy(_Tp* __pointer)
  441dbb:	55                   	push   %rbp
  441dbc:	48 89 e5             	mov    %rsp,%rbp
  441dbf:	48 83 ec 10          	sub    $0x10,%rsp
  441dc3:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { __pointer->~_Tp(); }
  441dc7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  441dcb:	48 89 c7             	mov    %rax,%rdi
  441dce:	e8 e5 3e ff ff       	callq  435cb8 <x666::Identifier::~Identifier()>
  441dd3:	90                   	nop
  441dd4:	c9                   	leaveq 
  441dd5:	c3                   	retq   

0000000000441dd6 <void std::_Destroy<x666::IntLiteral const>(x666::IntLiteral const*)>:
    _Destroy(_Tp* __pointer)
  441dd6:	55                   	push   %rbp
  441dd7:	48 89 e5             	mov    %rsp,%rbp
  441dda:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { __pointer->~_Tp(); }
  441dde:	90                   	nop
  441ddf:	5d                   	pop    %rbp
  441de0:	c3                   	retq   

0000000000441de1 <void std::_Destroy<x666::StringLiteral const>(x666::StringLiteral const*)>:
    _Destroy(_Tp* __pointer)
  441de1:	55                   	push   %rbp
  441de2:	48 89 e5             	mov    %rsp,%rbp
  441de5:	48 83 ec 10          	sub    $0x10,%rsp
  441de9:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { __pointer->~_Tp(); }
  441ded:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  441df1:	48 89 c7             	mov    %rax,%rdi
  441df4:	e8 db 3e ff ff       	callq  435cd4 <x666::StringLiteral::~StringLiteral()>
  441df9:	90                   	nop
  441dfa:	c9                   	leaveq 
  441dfb:	c3                   	retq   

0000000000441dfc <std::_Tuple_impl<1ul, std::default_delete<x666::Expression> >::_Tuple_impl<std::default_delete<x666::Expression> >(std::default_delete<x666::Expression>&&)>:
        constexpr _Tuple_impl(_UHead&& __head)
  441dfc:	55                   	push   %rbp
  441dfd:	48 89 e5             	mov    %rsp,%rbp
  441e00:	48 83 ec 10          	sub    $0x10,%rsp
  441e04:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  441e08:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	: _Base(std::forward<_UHead>(__head)) { }
  441e0c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  441e10:	48 89 c7             	mov    %rax,%rdi
  441e13:	e8 77 b0 ff ff       	callq  43ce8f <std::default_delete<x666::Expression>&& std::forward<std::default_delete<x666::Expression> >(std::remove_reference<std::default_delete<x666::Expression> >::type&)>
  441e18:	48 89 c2             	mov    %rax,%rdx
  441e1b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  441e1f:	48 89 d6             	mov    %rdx,%rsi
  441e22:	48 89 c7             	mov    %rax,%rdi
  441e25:	e8 16 0c 00 00       	callq  442a40 <std::_Head_base<1ul, std::default_delete<x666::Expression>, true>::_Head_base<std::default_delete<x666::Expression> >(std::default_delete<x666::Expression>&&)>
  441e2a:	90                   	nop
  441e2b:	c9                   	leaveq 
  441e2c:	c3                   	retq   
  441e2d:	90                   	nop

0000000000441e2e <std::_Head_base<0ul, x666::Expression*, false>::_Head_base<x666::Expression*&>(x666::Expression*&)>:
        constexpr _Head_base(_UHead&& __h)
  441e2e:	55                   	push   %rbp
  441e2f:	48 89 e5             	mov    %rsp,%rbp
  441e32:	48 83 ec 10          	sub    $0x10,%rsp
  441e36:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  441e3a:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
  441e3e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  441e42:	48 89 c7             	mov    %rax,%rdi
  441e45:	e8 53 ca ff ff       	callq  43e89d <x666::Expression*& std::forward<x666::Expression*&>(std::remove_reference<x666::Expression*&>::type&)>
  441e4a:	48 8b 10             	mov    (%rax),%rdx
  441e4d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  441e51:	48 89 10             	mov    %rdx,(%rax)
  441e54:	90                   	nop
  441e55:	c9                   	leaveq 
  441e56:	c3                   	retq   
  441e57:	90                   	nop

0000000000441e58 <std::_Tuple_impl<0ul, x666::BinaryOp*, std::default_delete<x666::BinaryOp> >::_Tuple_impl()>:
      constexpr _Tuple_impl()
  441e58:	55                   	push   %rbp
  441e59:	48 89 e5             	mov    %rsp,%rbp
  441e5c:	48 83 ec 10          	sub    $0x10,%rsp
  441e60:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      : _Inherited(), _Base() { }
  441e64:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  441e68:	48 89 c7             	mov    %rax,%rdi
  441e6b:	e8 f0 0b 00 00       	callq  442a60 <std::_Tuple_impl<1ul, std::default_delete<x666::BinaryOp> >::_Tuple_impl()>
  441e70:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  441e74:	48 89 c7             	mov    %rax,%rdi
  441e77:	e8 00 0c 00 00       	callq  442a7c <std::_Head_base<0ul, x666::BinaryOp*, false>::_Head_base()>
  441e7c:	90                   	nop
  441e7d:	c9                   	leaveq 
  441e7e:	c3                   	retq   

0000000000441e7f <std::_Tuple_impl<0ul, x666::BinaryOp*, std::default_delete<x666::BinaryOp> >::_M_head(std::_Tuple_impl<0ul, x666::BinaryOp*, std::default_delete<x666::BinaryOp> >&)>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
  441e7f:	55                   	push   %rbp
  441e80:	48 89 e5             	mov    %rsp,%rbp
  441e83:	48 83 ec 10          	sub    $0x10,%rsp
  441e87:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  441e8b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  441e8f:	48 89 c7             	mov    %rax,%rdi
  441e92:	e8 fb 0b 00 00       	callq  442a92 <std::_Head_base<0ul, x666::BinaryOp*, false>::_M_head(std::_Head_base<0ul, x666::BinaryOp*, false>&)>
  441e97:	c9                   	leaveq 
  441e98:	c3                   	retq   

0000000000441e99 <std::default_delete<x666::BinaryOp>& std::__get_helper<1ul, std::default_delete<x666::BinaryOp>>(std::_Tuple_impl<1ul, std::default_delete<x666::BinaryOp>>&)>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
  441e99:	55                   	push   %rbp
  441e9a:	48 89 e5             	mov    %rsp,%rbp
  441e9d:	48 83 ec 10          	sub    $0x10,%rsp
  441ea1:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
  441ea5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  441ea9:	48 89 c7             	mov    %rax,%rdi
  441eac:	e8 ef 0b 00 00       	callq  442aa0 <std::_Tuple_impl<1ul, std::default_delete<x666::BinaryOp> >::_M_head(std::_Tuple_impl<1ul, std::default_delete<x666::BinaryOp> >&)>
  441eb1:	c9                   	leaveq 
  441eb2:	c3                   	retq   

0000000000441eb3 <std::tuple_element<0ul, std::tuple<x666::BinaryOp*, std::default_delete<x666::BinaryOp> > >::type const& std::get<0ul, x666::BinaryOp*, std::default_delete<x666::BinaryOp> >(std::tuple<x666::BinaryOp*, std::default_delete<x666::BinaryOp> > const&)>:
    get(const tuple<_Elements...>& __t) noexcept
  441eb3:	55                   	push   %rbp
  441eb4:	48 89 e5             	mov    %rsp,%rbp
  441eb7:	48 83 ec 10          	sub    $0x10,%rsp
  441ebb:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return std::__get_helper<__i>(__t); }
  441ebf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  441ec3:	48 89 c7             	mov    %rax,%rdi
  441ec6:	e8 ef 0b 00 00       	callq  442aba <x666::BinaryOp* const& std::__get_helper<0ul, x666::BinaryOp*, std::default_delete<x666::BinaryOp> >(std::_Tuple_impl<0ul, x666::BinaryOp*, std::default_delete<x666::BinaryOp> > const&)>
  441ecb:	c9                   	leaveq 
  441ecc:	c3                   	retq   
  441ecd:	90                   	nop

0000000000441ece <std::_Tuple_impl<1ul, std::default_delete<x666::Expression> >::_Tuple_impl<std::default_delete<x666::BinaryOp> >(std::default_delete<x666::BinaryOp>&&)>:
        constexpr _Tuple_impl(_UHead&& __head)
  441ece:	55                   	push   %rbp
  441ecf:	48 89 e5             	mov    %rsp,%rbp
  441ed2:	48 83 ec 10          	sub    $0x10,%rsp
  441ed6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  441eda:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	: _Base(std::forward<_UHead>(__head)) { }
  441ede:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  441ee2:	48 89 c7             	mov    %rax,%rdi
  441ee5:	e8 29 b1 ff ff       	callq  43d013 <std::default_delete<x666::BinaryOp>&& std::forward<std::default_delete<x666::BinaryOp> >(std::remove_reference<std::default_delete<x666::BinaryOp> >::type&)>
  441eea:	48 89 c2             	mov    %rax,%rdx
  441eed:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  441ef1:	48 89 d6             	mov    %rdx,%rsi
  441ef4:	48 89 c7             	mov    %rax,%rdi
  441ef7:	e8 d8 0b 00 00       	callq  442ad4 <std::_Head_base<1ul, std::default_delete<x666::Expression>, true>::_Head_base<std::default_delete<x666::BinaryOp> >(std::default_delete<x666::BinaryOp>&&)>
  441efc:	90                   	nop
  441efd:	c9                   	leaveq 
  441efe:	c3                   	retq   
  441eff:	90                   	nop

0000000000441f00 <std::_Tuple_impl<0ul, x666::UnaryOp*, std::default_delete<x666::UnaryOp> >::_Tuple_impl()>:
      constexpr _Tuple_impl()
  441f00:	55                   	push   %rbp
  441f01:	48 89 e5             	mov    %rsp,%rbp
  441f04:	48 83 ec 10          	sub    $0x10,%rsp
  441f08:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      : _Inherited(), _Base() { }
  441f0c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  441f10:	48 89 c7             	mov    %rax,%rdi
  441f13:	e8 ee 0b 00 00       	callq  442b06 <std::_Tuple_impl<1ul, std::default_delete<x666::UnaryOp> >::_Tuple_impl()>
  441f18:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  441f1c:	48 89 c7             	mov    %rax,%rdi
  441f1f:	e8 fe 0b 00 00       	callq  442b22 <std::_Head_base<0ul, x666::UnaryOp*, false>::_Head_base()>
  441f24:	90                   	nop
  441f25:	c9                   	leaveq 
  441f26:	c3                   	retq   

0000000000441f27 <std::_Tuple_impl<0ul, x666::UnaryOp*, std::default_delete<x666::UnaryOp> >::_M_head(std::_Tuple_impl<0ul, x666::UnaryOp*, std::default_delete<x666::UnaryOp> >&)>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
  441f27:	55                   	push   %rbp
  441f28:	48 89 e5             	mov    %rsp,%rbp
  441f2b:	48 83 ec 10          	sub    $0x10,%rsp
  441f2f:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  441f33:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  441f37:	48 89 c7             	mov    %rax,%rdi
  441f3a:	e8 f9 0b 00 00       	callq  442b38 <std::_Head_base<0ul, x666::UnaryOp*, false>::_M_head(std::_Head_base<0ul, x666::UnaryOp*, false>&)>
  441f3f:	c9                   	leaveq 
  441f40:	c3                   	retq   

0000000000441f41 <std::default_delete<x666::UnaryOp>& std::__get_helper<1ul, std::default_delete<x666::UnaryOp>>(std::_Tuple_impl<1ul, std::default_delete<x666::UnaryOp>>&)>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
  441f41:	55                   	push   %rbp
  441f42:	48 89 e5             	mov    %rsp,%rbp
  441f45:	48 83 ec 10          	sub    $0x10,%rsp
  441f49:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
  441f4d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  441f51:	48 89 c7             	mov    %rax,%rdi
  441f54:	e8 ed 0b 00 00       	callq  442b46 <std::_Tuple_impl<1ul, std::default_delete<x666::UnaryOp> >::_M_head(std::_Tuple_impl<1ul, std::default_delete<x666::UnaryOp> >&)>
  441f59:	c9                   	leaveq 
  441f5a:	c3                   	retq   

0000000000441f5b <std::tuple_element<0ul, std::tuple<x666::UnaryOp*, std::default_delete<x666::UnaryOp> > >::type const& std::get<0ul, x666::UnaryOp*, std::default_delete<x666::UnaryOp> >(std::tuple<x666::UnaryOp*, std::default_delete<x666::UnaryOp> > const&)>:
    get(const tuple<_Elements...>& __t) noexcept
  441f5b:	55                   	push   %rbp
  441f5c:	48 89 e5             	mov    %rsp,%rbp
  441f5f:	48 83 ec 10          	sub    $0x10,%rsp
  441f63:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return std::__get_helper<__i>(__t); }
  441f67:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  441f6b:	48 89 c7             	mov    %rax,%rdi
  441f6e:	e8 ed 0b 00 00       	callq  442b60 <x666::UnaryOp* const& std::__get_helper<0ul, x666::UnaryOp*, std::default_delete<x666::UnaryOp> >(std::_Tuple_impl<0ul, x666::UnaryOp*, std::default_delete<x666::UnaryOp> > const&)>
  441f73:	c9                   	leaveq 
  441f74:	c3                   	retq   
  441f75:	90                   	nop

0000000000441f76 <std::_Tuple_impl<1ul, std::default_delete<x666::Expression> >::_Tuple_impl<std::default_delete<x666::UnaryOp> >(std::default_delete<x666::UnaryOp>&&)>:
        constexpr _Tuple_impl(_UHead&& __head)
  441f76:	55                   	push   %rbp
  441f77:	48 89 e5             	mov    %rsp,%rbp
  441f7a:	48 83 ec 10          	sub    $0x10,%rsp
  441f7e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  441f82:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	: _Base(std::forward<_UHead>(__head)) { }
  441f86:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  441f8a:	48 89 c7             	mov    %rax,%rdi
  441f8d:	e8 f5 b1 ff ff       	callq  43d187 <std::default_delete<x666::UnaryOp>&& std::forward<std::default_delete<x666::UnaryOp> >(std::remove_reference<std::default_delete<x666::UnaryOp> >::type&)>
  441f92:	48 89 c2             	mov    %rax,%rdx
  441f95:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  441f99:	48 89 d6             	mov    %rdx,%rsi
  441f9c:	48 89 c7             	mov    %rax,%rdi
  441f9f:	e8 d6 0b 00 00       	callq  442b7a <std::_Head_base<1ul, std::default_delete<x666::Expression>, true>::_Head_base<std::default_delete<x666::UnaryOp> >(std::default_delete<x666::UnaryOp>&&)>
  441fa4:	90                   	nop
  441fa5:	c9                   	leaveq 
  441fa6:	c3                   	retq   
  441fa7:	90                   	nop

0000000000441fa8 <std::_Tuple_impl<0ul, x666::Literal*, std::default_delete<x666::Literal> >::_Tuple_impl()>:
      constexpr _Tuple_impl()
  441fa8:	55                   	push   %rbp
  441fa9:	48 89 e5             	mov    %rsp,%rbp
  441fac:	48 83 ec 10          	sub    $0x10,%rsp
  441fb0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      : _Inherited(), _Base() { }
  441fb4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  441fb8:	48 89 c7             	mov    %rax,%rdi
  441fbb:	e8 ec 0b 00 00       	callq  442bac <std::_Tuple_impl<1ul, std::default_delete<x666::Literal> >::_Tuple_impl()>
  441fc0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  441fc4:	48 89 c7             	mov    %rax,%rdi
  441fc7:	e8 fc 0b 00 00       	callq  442bc8 <std::_Head_base<0ul, x666::Literal*, false>::_Head_base()>
  441fcc:	90                   	nop
  441fcd:	c9                   	leaveq 
  441fce:	c3                   	retq   

0000000000441fcf <std::_Tuple_impl<0ul, x666::Literal*, std::default_delete<x666::Literal> >::_M_head(std::_Tuple_impl<0ul, x666::Literal*, std::default_delete<x666::Literal> >&)>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
  441fcf:	55                   	push   %rbp
  441fd0:	48 89 e5             	mov    %rsp,%rbp
  441fd3:	48 83 ec 10          	sub    $0x10,%rsp
  441fd7:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  441fdb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  441fdf:	48 89 c7             	mov    %rax,%rdi
  441fe2:	e8 f7 0b 00 00       	callq  442bde <std::_Head_base<0ul, x666::Literal*, false>::_M_head(std::_Head_base<0ul, x666::Literal*, false>&)>
  441fe7:	c9                   	leaveq 
  441fe8:	c3                   	retq   

0000000000441fe9 <std::default_delete<x666::Literal>& std::__get_helper<1ul, std::default_delete<x666::Literal>>(std::_Tuple_impl<1ul, std::default_delete<x666::Literal>>&)>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
  441fe9:	55                   	push   %rbp
  441fea:	48 89 e5             	mov    %rsp,%rbp
  441fed:	48 83 ec 10          	sub    $0x10,%rsp
  441ff1:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
  441ff5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  441ff9:	48 89 c7             	mov    %rax,%rdi
  441ffc:	e8 eb 0b 00 00       	callq  442bec <std::_Tuple_impl<1ul, std::default_delete<x666::Literal> >::_M_head(std::_Tuple_impl<1ul, std::default_delete<x666::Literal> >&)>
  442001:	c9                   	leaveq 
  442002:	c3                   	retq   

0000000000442003 <std::tuple_element<0ul, std::tuple<x666::Literal*, std::default_delete<x666::Literal> > >::type const& std::get<0ul, x666::Literal*, std::default_delete<x666::Literal> >(std::tuple<x666::Literal*, std::default_delete<x666::Literal> > const&)>:
    get(const tuple<_Elements...>& __t) noexcept
  442003:	55                   	push   %rbp
  442004:	48 89 e5             	mov    %rsp,%rbp
  442007:	48 83 ec 10          	sub    $0x10,%rsp
  44200b:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return std::__get_helper<__i>(__t); }
  44200f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  442013:	48 89 c7             	mov    %rax,%rdi
  442016:	e8 eb 0b 00 00       	callq  442c06 <x666::Literal* const& std::__get_helper<0ul, x666::Literal*, std::default_delete<x666::Literal> >(std::_Tuple_impl<0ul, x666::Literal*, std::default_delete<x666::Literal> > const&)>
  44201b:	c9                   	leaveq 
  44201c:	c3                   	retq   
  44201d:	90                   	nop

000000000044201e <std::_Tuple_impl<1ul, std::default_delete<x666::Expression> >::_Tuple_impl<std::default_delete<x666::Literal> >(std::default_delete<x666::Literal>&&)>:
        constexpr _Tuple_impl(_UHead&& __head)
  44201e:	55                   	push   %rbp
  44201f:	48 89 e5             	mov    %rsp,%rbp
  442022:	48 83 ec 10          	sub    $0x10,%rsp
  442026:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  44202a:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	: _Base(std::forward<_UHead>(__head)) { }
  44202e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  442032:	48 89 c7             	mov    %rax,%rdi
  442035:	e8 03 b4 ff ff       	callq  43d43d <std::default_delete<x666::Literal>&& std::forward<std::default_delete<x666::Literal> >(std::remove_reference<std::default_delete<x666::Literal> >::type&)>
  44203a:	48 89 c2             	mov    %rax,%rdx
  44203d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  442041:	48 89 d6             	mov    %rdx,%rsi
  442044:	48 89 c7             	mov    %rax,%rdi
  442047:	e8 d4 0b 00 00       	callq  442c20 <std::_Head_base<1ul, std::default_delete<x666::Expression>, true>::_Head_base<std::default_delete<x666::Literal> >(std::default_delete<x666::Literal>&&)>
  44204c:	90                   	nop
  44204d:	c9                   	leaveq 
  44204e:	c3                   	retq   
  44204f:	90                   	nop

0000000000442050 <std::deque<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > >::_M_reserve_map_at_back(unsigned long)>:
      _M_reserve_map_at_back(size_type __nodes_to_add = 1)
  442050:	55                   	push   %rbp
  442051:	48 89 e5             	mov    %rsp,%rbp
  442054:	48 83 ec 10          	sub    $0x10,%rsp
  442058:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  44205c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
  442060:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  442064:	48 8d 50 01          	lea    0x1(%rax),%rdx
  442068:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  44206c:	48 8b 48 08          	mov    0x8(%rax),%rcx
	    - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))
  442070:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  442074:	48 8b 40 48          	mov    0x48(%rax),%rax
  442078:	48 89 c6             	mov    %rax,%rsi
  44207b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  44207f:	48 8b 00             	mov    (%rax),%rax
  442082:	48 29 c6             	sub    %rax,%rsi
  442085:	48 89 f0             	mov    %rsi,%rax
  442088:	48 c1 f8 03          	sar    $0x3,%rax
  44208c:	48 29 c1             	sub    %rax,%rcx
  44208f:	48 89 c8             	mov    %rcx,%rax
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
  442092:	48 39 c2             	cmp    %rax,%rdx
  442095:	76 18                	jbe    4420af <std::deque<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > >::_M_reserve_map_at_back(unsigned long)+0x5f>
	  _M_reallocate_map(__nodes_to_add, false);
  442097:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  44209b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  44209f:	ba 00 00 00 00       	mov    $0x0,%edx
  4420a4:	48 89 ce             	mov    %rcx,%rsi
  4420a7:	48 89 c7             	mov    %rax,%rdi
  4420aa:	e8 a3 0b 00 00       	callq  442c52 <std::deque<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > >::_M_reallocate_map(unsigned long, bool)>
      }
  4420af:	90                   	nop
  4420b0:	c9                   	leaveq 
  4420b1:	c3                   	retq   

00000000004420b2 <std::_Deque_base<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > >::_M_allocate_node()>:
      _M_allocate_node()
  4420b2:	55                   	push   %rbp
  4420b3:	48 89 e5             	mov    %rsp,%rbp
  4420b6:	48 83 ec 10          	sub    $0x10,%rsp
  4420ba:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	return _Traits::allocate(_M_impl, __deque_buf_size(sizeof(_Tp)));
  4420be:	bf 08 00 00 00       	mov    $0x8,%edi
  4420c3:	e8 66 0c ff ff       	callq  432d2e <std::__deque_buf_size(unsigned long)>
  4420c8:	48 89 c2             	mov    %rax,%rdx
  4420cb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4420cf:	48 89 d6             	mov    %rdx,%rsi
  4420d2:	48 89 c7             	mov    %rax,%rdi
  4420d5:	e8 98 02 00 00       	callq  442372 <std::allocator_traits<std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > >::allocate(std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > >&, unsigned long)>
      }
  4420da:	c9                   	leaveq 
  4420db:	c3                   	retq   

00000000004420dc <std::deque<x666::LineInfo, std::allocator<x666::LineInfo> >::_M_reallocate_map(unsigned long, bool)>:
        }
    }

  template <typename _Tp, typename _Alloc>
    void
    deque<_Tp, _Alloc>::
  4420dc:	55                   	push   %rbp
  4420dd:	48 89 e5             	mov    %rsp,%rbp
  4420e0:	53                   	push   %rbx
  4420e1:	48 83 ec 58          	sub    $0x58,%rsp
  4420e5:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
  4420e9:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
  4420ed:	89 d0                	mov    %edx,%eax
  4420ef:	88 45 ac             	mov    %al,-0x54(%rbp)
    _M_reallocate_map(size_type __nodes_to_add, bool __add_at_front)
    {
      const size_type __old_num_nodes
	= this->_M_impl._M_finish._M_node - this->_M_impl._M_start._M_node + 1;
  4420f2:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  4420f6:	48 8b 40 48          	mov    0x48(%rax),%rax
  4420fa:	48 89 c2             	mov    %rax,%rdx
  4420fd:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  442101:	48 8b 40 28          	mov    0x28(%rax),%rax
  442105:	48 29 c2             	sub    %rax,%rdx
  442108:	48 89 d0             	mov    %rdx,%rax
  44210b:	48 c1 f8 03          	sar    $0x3,%rax
  44210f:	48 83 c0 01          	add    $0x1,%rax
      const size_type __old_num_nodes
  442113:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
      const size_type __new_num_nodes = __old_num_nodes + __nodes_to_add;
  442117:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  44211b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  44211f:	48 01 d0             	add    %rdx,%rax
  442122:	48 89 45 d8          	mov    %rax,-0x28(%rbp)

      _Map_pointer __new_nstart;
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
  442126:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  44212a:	48 8b 50 08          	mov    0x8(%rax),%rdx
  44212e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  442132:	48 01 c0             	add    %rax,%rax
  442135:	48 39 c2             	cmp    %rax,%rdx
  442138:	0f 86 aa 00 00 00    	jbe    4421e8 <std::deque<x666::LineInfo, std::allocator<x666::LineInfo> >::_M_reallocate_map(unsigned long, bool)+0x10c>
	{
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
  44213e:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  442142:	48 8b 10             	mov    (%rax),%rdx
  442145:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  442149:	48 8b 40 08          	mov    0x8(%rax),%rax
					 - __new_num_nodes) / 2
  44214d:	48 2b 45 d8          	sub    -0x28(%rbp),%rax
  442151:	48 d1 e8             	shr    %rax
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
  442154:	48 8d 0c c5 00 00 00 	lea    0x0(,%rax,8),%rcx
  44215b:	00 
	                 + (__add_at_front ? __nodes_to_add : 0);
  44215c:	80 7d ac 00          	cmpb   $0x0,-0x54(%rbp)
  442160:	74 0a                	je     44216c <std::deque<x666::LineInfo, std::allocator<x666::LineInfo> >::_M_reallocate_map(unsigned long, bool)+0x90>
  442162:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  442166:	48 c1 e0 03          	shl    $0x3,%rax
  44216a:	eb 05                	jmp    442171 <std::deque<x666::LineInfo, std::allocator<x666::LineInfo> >::_M_reallocate_map(unsigned long, bool)+0x95>
  44216c:	b8 00 00 00 00       	mov    $0x0,%eax
  442171:	48 01 c8             	add    %rcx,%rax
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
  442174:	48 01 d0             	add    %rdx,%rax
  442177:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	  if (__new_nstart < this->_M_impl._M_start._M_node)
  44217b:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  44217f:	48 8b 40 28          	mov    0x28(%rax),%rax
  442183:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
  442187:	73 28                	jae    4421b1 <std::deque<x666::LineInfo, std::allocator<x666::LineInfo> >::_M_reallocate_map(unsigned long, bool)+0xd5>
	    std::copy(this->_M_impl._M_start._M_node,
		      this->_M_impl._M_finish._M_node + 1,
  442189:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  44218d:	48 8b 40 48          	mov    0x48(%rax),%rax
	    std::copy(this->_M_impl._M_start._M_node,
  442191:	48 8d 48 08          	lea    0x8(%rax),%rcx
  442195:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  442199:	48 8b 40 28          	mov    0x28(%rax),%rax
  44219d:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  4421a1:	48 89 ce             	mov    %rcx,%rsi
  4421a4:	48 89 c7             	mov    %rax,%rdi
  4421a7:	e8 c9 0c 00 00       	callq  442e75 <x666::LineInfo** std::copy<x666::LineInfo**, x666::LineInfo**>(x666::LineInfo**, x666::LineInfo**, x666::LineInfo**)>
  4421ac:	e9 09 01 00 00       	jmpq   4422ba <std::deque<x666::LineInfo, std::allocator<x666::LineInfo> >::_M_reallocate_map(unsigned long, bool)+0x1de>
		      __new_nstart);
	  else
	    std::copy_backward(this->_M_impl._M_start._M_node,
			       this->_M_impl._M_finish._M_node + 1,
			       __new_nstart + __old_num_nodes);
  4421b1:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4421b5:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  4421bc:	00 
	    std::copy_backward(this->_M_impl._M_start._M_node,
  4421bd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4421c1:	48 01 c2             	add    %rax,%rdx
			       this->_M_impl._M_finish._M_node + 1,
  4421c4:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  4421c8:	48 8b 40 48          	mov    0x48(%rax),%rax
	    std::copy_backward(this->_M_impl._M_start._M_node,
  4421cc:	48 8d 48 08          	lea    0x8(%rax),%rcx
  4421d0:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  4421d4:	48 8b 40 28          	mov    0x28(%rax),%rax
  4421d8:	48 89 ce             	mov    %rcx,%rsi
  4421db:	48 89 c7             	mov    %rax,%rdi
  4421de:	e8 de 0c 00 00       	callq  442ec1 <x666::LineInfo** std::copy_backward<x666::LineInfo**, x666::LineInfo**>(x666::LineInfo**, x666::LineInfo**, x666::LineInfo**)>
  4421e3:	e9 d2 00 00 00       	jmpq   4422ba <std::deque<x666::LineInfo, std::allocator<x666::LineInfo> >::_M_reallocate_map(unsigned long, bool)+0x1de>
	}
      else
	{
	  size_type __new_map_size = this->_M_impl._M_map_size
  4421e8:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  4421ec:	48 8b 58 08          	mov    0x8(%rax),%rbx
	                             + std::max(this->_M_impl._M_map_size,
  4421f0:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  4421f4:	48 8d 50 08          	lea    0x8(%rax),%rdx
  4421f8:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
  4421fc:	48 89 c6             	mov    %rax,%rsi
  4421ff:	48 89 d7             	mov    %rdx,%rdi
  442202:	e8 b6 e9 ff ff       	callq  440bbd <unsigned long const& std::max<unsigned long>(unsigned long const&, unsigned long const&)>
  442207:	48 8b 00             	mov    (%rax),%rax
  44220a:	48 01 d8             	add    %rbx,%rax
	  size_type __new_map_size = this->_M_impl._M_map_size
  44220d:	48 83 c0 02          	add    $0x2,%rax
  442211:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
						__nodes_to_add) + 2;

	  _Map_pointer __new_map = this->_M_allocate_map(__new_map_size);
  442215:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  442219:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  44221d:	48 89 d6             	mov    %rdx,%rsi
  442220:	48 89 c7             	mov    %rax,%rdi
  442223:	e8 80 05 00 00       	callq  4427a8 <std::_Deque_base<x666::LineInfo, std::allocator<x666::LineInfo> >::_M_allocate_map(unsigned long)>
  442228:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
  44222c:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  442230:	48 2b 45 d8          	sub    -0x28(%rbp),%rax
  442234:	48 d1 e8             	shr    %rax
  442237:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  44223e:	00 
	                 + (__add_at_front ? __nodes_to_add : 0);
  44223f:	80 7d ac 00          	cmpb   $0x0,-0x54(%rbp)
  442243:	74 0a                	je     44224f <std::deque<x666::LineInfo, std::allocator<x666::LineInfo> >::_M_reallocate_map(unsigned long, bool)+0x173>
  442245:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  442249:	48 c1 e0 03          	shl    $0x3,%rax
  44224d:	eb 05                	jmp    442254 <std::deque<x666::LineInfo, std::allocator<x666::LineInfo> >::_M_reallocate_map(unsigned long, bool)+0x178>
  44224f:	b8 00 00 00 00       	mov    $0x0,%eax
  442254:	48 01 c2             	add    %rax,%rdx
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
  442257:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  44225b:	48 01 d0             	add    %rdx,%rax
  44225e:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	  std::copy(this->_M_impl._M_start._M_node,
		    this->_M_impl._M_finish._M_node + 1,
  442262:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  442266:	48 8b 40 48          	mov    0x48(%rax),%rax
	  std::copy(this->_M_impl._M_start._M_node,
  44226a:	48 8d 48 08          	lea    0x8(%rax),%rcx
  44226e:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  442272:	48 8b 40 28          	mov    0x28(%rax),%rax
  442276:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  44227a:	48 89 ce             	mov    %rcx,%rsi
  44227d:	48 89 c7             	mov    %rax,%rdi
  442280:	e8 f0 0b 00 00       	callq  442e75 <x666::LineInfo** std::copy<x666::LineInfo**, x666::LineInfo**>(x666::LineInfo**, x666::LineInfo**, x666::LineInfo**)>
		    __new_nstart);
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
  442285:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  442289:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  44228d:	48 8b 52 08          	mov    0x8(%rdx),%rdx
  442291:	48 8b 4d b8          	mov    -0x48(%rbp),%rcx
  442295:	48 8b 09             	mov    (%rcx),%rcx
  442298:	48 89 ce             	mov    %rcx,%rsi
  44229b:	48 89 c7             	mov    %rax,%rdi
  44229e:	e8 8d 18 ff ff       	callq  433b30 <std::_Deque_base<x666::LineInfo, std::allocator<x666::LineInfo> >::_M_deallocate_map(x666::LineInfo**, unsigned long)>

	  this->_M_impl._M_map = __new_map;
  4422a3:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  4422a7:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  4422ab:	48 89 10             	mov    %rdx,(%rax)
	  this->_M_impl._M_map_size = __new_map_size;
  4422ae:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  4422b2:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  4422b6:	48 89 50 08          	mov    %rdx,0x8(%rax)
	}

      this->_M_impl._M_start._M_set_node(__new_nstart);
  4422ba:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  4422be:	48 83 c0 10          	add    $0x10,%rax
  4422c2:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  4422c6:	48 89 d6             	mov    %rdx,%rsi
  4422c9:	48 89 c7             	mov    %rax,%rdi
  4422cc:	e8 9f e3 ff ff       	callq  440670 <std::_Deque_iterator<x666::LineInfo, x666::LineInfo&, x666::LineInfo*>::_M_set_node(x666::LineInfo**)>
      this->_M_impl._M_finish._M_set_node(__new_nstart + __old_num_nodes - 1);
  4422d1:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  4422d5:	48 83 c0 30          	add    $0x30,%rax
  4422d9:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  4422dd:	48 c1 e2 03          	shl    $0x3,%rdx
  4422e1:	48 8d 4a f8          	lea    -0x8(%rdx),%rcx
  4422e5:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  4422e9:	48 01 ca             	add    %rcx,%rdx
  4422ec:	48 89 d6             	mov    %rdx,%rsi
  4422ef:	48 89 c7             	mov    %rax,%rdi
  4422f2:	e8 79 e3 ff ff       	callq  440670 <std::_Deque_iterator<x666::LineInfo, x666::LineInfo&, x666::LineInfo*>::_M_set_node(x666::LineInfo**)>
    }
  4422f7:	90                   	nop
  4422f8:	48 83 c4 58          	add    $0x58,%rsp
  4422fc:	5b                   	pop    %rbx
  4422fd:	5d                   	pop    %rbp
  4422fe:	c3                   	retq   

00000000004422ff <std::allocator_traits<std::allocator<x666::LineInfo> >::allocate(std::allocator<x666::LineInfo>&, unsigned long)>:
      allocate(allocator_type& __a, size_type __n)
  4422ff:	55                   	push   %rbp
  442300:	48 89 e5             	mov    %rsp,%rbp
  442303:	48 83 ec 10          	sub    $0x10,%rsp
  442307:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  44230b:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      { return __a.allocate(__n); }
  44230f:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  442313:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  442317:	ba 00 00 00 00       	mov    $0x0,%edx
  44231c:	48 89 ce             	mov    %rcx,%rsi
  44231f:	48 89 c7             	mov    %rax,%rdi
  442322:	e8 e7 0b 00 00       	callq  442f0e <__gnu_cxx::new_allocator<x666::LineInfo>::allocate(unsigned long, void const*)>
  442327:	c9                   	leaveq 
  442328:	c3                   	retq   
  442329:	90                   	nop

000000000044232a <std::vector<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > >::max_size() const>:
      max_size() const _GLIBCXX_NOEXCEPT
  44232a:	55                   	push   %rbp
  44232b:	48 89 e5             	mov    %rsp,%rbp
  44232e:	48 83 ec 10          	sub    $0x10,%rsp
  442332:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _Alloc_traits::max_size(_M_get_Tp_allocator()); }
  442336:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  44233a:	48 89 c7             	mov    %rax,%rdi
  44233d:	e8 28 0c 00 00       	callq  442f6a <std::_Vector_base<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > >::_M_get_Tp_allocator() const>
  442342:	48 89 c7             	mov    %rax,%rdi
  442345:	e8 06 0c 00 00       	callq  442f50 <std::allocator_traits<std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > >::max_size(std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > const&)>
  44234a:	c9                   	leaveq 
  44234b:	c3                   	retq   

000000000044234c <std::vector<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > >::size() const>:
      size() const _GLIBCXX_NOEXCEPT
  44234c:	55                   	push   %rbp
  44234d:	48 89 e5             	mov    %rsp,%rbp
  442350:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
  442354:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  442358:	48 8b 40 08          	mov    0x8(%rax),%rax
  44235c:	48 89 c2             	mov    %rax,%rdx
  44235f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  442363:	48 8b 00             	mov    (%rax),%rax
  442366:	48 29 c2             	sub    %rax,%rdx
  442369:	48 89 d0             	mov    %rdx,%rax
  44236c:	48 c1 f8 03          	sar    $0x3,%rax
  442370:	5d                   	pop    %rbp
  442371:	c3                   	retq   

0000000000442372 <std::allocator_traits<std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > >::allocate(std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > >&, unsigned long)>:
      allocate(allocator_type& __a, size_type __n)
  442372:	55                   	push   %rbp
  442373:	48 89 e5             	mov    %rsp,%rbp
  442376:	48 83 ec 10          	sub    $0x10,%rsp
  44237a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  44237e:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      { return __a.allocate(__n); }
  442382:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  442386:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  44238a:	ba 00 00 00 00       	mov    $0x0,%edx
  44238f:	48 89 ce             	mov    %rcx,%rsi
  442392:	48 89 c7             	mov    %rax,%rdi
  442395:	e8 de 0b 00 00       	callq  442f78 <__gnu_cxx::new_allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > >::allocate(unsigned long, void const*)>
  44239a:	c9                   	leaveq 
  44239b:	c3                   	retq   

000000000044239c <std::move_iterator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*>::move_iterator(std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*)>:
      move_iterator(iterator_type __i)
  44239c:	55                   	push   %rbp
  44239d:	48 89 e5             	mov    %rsp,%rbp
  4423a0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4423a4:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      : _M_current(__i) { }
  4423a8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4423ac:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  4423b0:	48 89 10             	mov    %rdx,(%rax)
  4423b3:	90                   	nop
  4423b4:	5d                   	pop    %rbp
  4423b5:	c3                   	retq   

00000000004423b6 <std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >* std::__uninitialized_copy_a<std::move_iterator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*>, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > >(std::move_iterator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*>, std::move_iterator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*>, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*, std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > >&)>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
  4423b6:	55                   	push   %rbp
  4423b7:	48 89 e5             	mov    %rsp,%rbp
  4423ba:	48 83 ec 20          	sub    $0x20,%rsp
  4423be:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4423c2:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  4423c6:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  4423ca:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
    { return std::uninitialized_copy(__first, __last, __result); }
  4423ce:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  4423d2:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  4423d6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4423da:	48 89 ce             	mov    %rcx,%rsi
  4423dd:	48 89 c7             	mov    %rax,%rdi
  4423e0:	e8 d5 0b 00 00       	callq  442fba <std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >* std::uninitialized_copy<std::move_iterator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*>, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*>(std::move_iterator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*>, std::move_iterator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*>, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*)>
  4423e5:	c9                   	leaveq 
  4423e6:	c3                   	retq   

00000000004423e7 <std::allocator_traits<std::allocator<x666::LexError> >::max_size(std::allocator<x666::LexError> const&)>:
      max_size(const allocator_type& __a) noexcept
  4423e7:	55                   	push   %rbp
  4423e8:	48 89 e5             	mov    %rsp,%rbp
  4423eb:	48 83 ec 10          	sub    $0x10,%rsp
  4423ef:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return __a.max_size(); }
  4423f3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4423f7:	48 89 c7             	mov    %rax,%rdi
  4423fa:	e8 ed 0b 00 00       	callq  442fec <__gnu_cxx::new_allocator<x666::LexError>::max_size() const>
  4423ff:	c9                   	leaveq 
  442400:	c3                   	retq   
  442401:	90                   	nop

0000000000442402 <std::_Vector_base<x666::LexError, std::allocator<x666::LexError> >::_M_get_Tp_allocator() const>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
  442402:	55                   	push   %rbp
  442403:	48 89 e5             	mov    %rsp,%rbp
  442406:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return *static_cast<const _Tp_alloc_type*>(&this->_M_impl); }
  44240a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  44240e:	5d                   	pop    %rbp
  44240f:	c3                   	retq   

0000000000442410 <__gnu_cxx::new_allocator<x666::LexError>::allocate(unsigned long, void const*)>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
  442410:	55                   	push   %rbp
  442411:	48 89 e5             	mov    %rsp,%rbp
  442414:	48 83 ec 20          	sub    $0x20,%rsp
  442418:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  44241c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  442420:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	if (__n > this->max_size())
  442424:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  442428:	48 89 c7             	mov    %rax,%rdi
  44242b:	e8 bc 0b 00 00       	callq  442fec <__gnu_cxx::new_allocator<x666::LexError>::max_size() const>
  442430:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  442434:	0f 97 c0             	seta   %al
  442437:	84 c0                	test   %al,%al
  442439:	74 05                	je     442440 <__gnu_cxx::new_allocator<x666::LexError>::allocate(unsigned long, void const*)+0x30>
	  std::__throw_bad_alloc();
  44243b:	e8 80 02 ff ff       	callq  4326c0 <std::__throw_bad_alloc()@plt>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
  442440:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  442444:	48 89 d0             	mov    %rdx,%rax
  442447:	48 c1 e0 02          	shl    $0x2,%rax
  44244b:	48 01 d0             	add    %rdx,%rax
  44244e:	48 c1 e0 03          	shl    $0x3,%rax
  442452:	48 89 c7             	mov    %rax,%rdi
  442455:	e8 96 03 ff ff       	callq  4327f0 <operator new(unsigned long)@plt>
      }
  44245a:	c9                   	leaveq 
  44245b:	c3                   	retq   

000000000044245c <x666::LexError* std::uninitialized_copy<std::move_iterator<x666::LexError*>, x666::LexError*>(std::move_iterator<x666::LexError*>, std::move_iterator<x666::LexError*>, x666::LexError*)>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
  44245c:	55                   	push   %rbp
  44245d:	48 89 e5             	mov    %rsp,%rbp
  442460:	48 83 ec 30          	sub    $0x30,%rsp
  442464:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  442468:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  44246c:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
  442470:	c6 45 ff 01          	movb   $0x1,-0x1(%rbp)
	__uninit_copy(__first, __last, __result);
  442474:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  442478:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  44247c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  442480:	48 89 ce             	mov    %rcx,%rsi
  442483:	48 89 c7             	mov    %rax,%rdi
  442486:	e8 86 0b 00 00       	callq  443011 <x666::LexError* std::__uninitialized_copy<false>::__uninit_copy<std::move_iterator<x666::LexError*>, x666::LexError*>(std::move_iterator<x666::LexError*>, std::move_iterator<x666::LexError*>, x666::LexError*)>
    }
  44248b:	c9                   	leaveq 
  44248c:	c3                   	retq   
  44248d:	90                   	nop

000000000044248e <void __gnu_cxx::new_allocator<x666::Parser::BracketEntry>::construct<x666::Parser::BracketEntry, x666::Parser::BracketEntry>(x666::Parser::BracketEntry*, x666::Parser::BracketEntry&&)>:
	construct(_Up* __p, _Args&&... __args)
  44248e:	55                   	push   %rbp
  44248f:	48 89 e5             	mov    %rsp,%rbp
  442492:	53                   	push   %rbx
  442493:	48 83 ec 28          	sub    $0x28,%rsp
  442497:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  44249b:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  44249f:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
  4424a3:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4424a7:	48 89 c7             	mov    %rax,%rdi
  4424aa:	e8 39 d5 ff ff       	callq  43f9e8 <x666::Parser::BracketEntry&& std::forward<x666::Parser::BracketEntry>(std::remove_reference<x666::Parser::BracketEntry>::type&)>
  4424af:	48 89 c3             	mov    %rax,%rbx
  4424b2:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4424b6:	48 89 c6             	mov    %rax,%rsi
  4424b9:	bf 10 00 00 00       	mov    $0x10,%edi
  4424be:	e8 c9 36 ff ff       	callq  435b8c <operator new(unsigned long, void*)>
  4424c3:	48 89 c1             	mov    %rax,%rcx
  4424c6:	48 8b 03             	mov    (%rbx),%rax
  4424c9:	48 8b 53 08          	mov    0x8(%rbx),%rdx
  4424cd:	48 89 01             	mov    %rax,(%rcx)
  4424d0:	48 89 51 08          	mov    %rdx,0x8(%rcx)
  4424d4:	90                   	nop
  4424d5:	48 83 c4 28          	add    $0x28,%rsp
  4424d9:	5b                   	pop    %rbx
  4424da:	5d                   	pop    %rbp
  4424db:	c3                   	retq   

00000000004424dc <std::deque<x666::Parser::BracketEntry, std::allocator<x666::Parser::BracketEntry> >::_M_reserve_map_at_back(unsigned long)>:
      _M_reserve_map_at_back(size_type __nodes_to_add = 1)
  4424dc:	55                   	push   %rbp
  4424dd:	48 89 e5             	mov    %rsp,%rbp
  4424e0:	48 83 ec 10          	sub    $0x10,%rsp
  4424e4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4424e8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
  4424ec:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4424f0:	48 8d 50 01          	lea    0x1(%rax),%rdx
  4424f4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4424f8:	48 8b 48 08          	mov    0x8(%rax),%rcx
	    - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))
  4424fc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  442500:	48 8b 40 48          	mov    0x48(%rax),%rax
  442504:	48 89 c6             	mov    %rax,%rsi
  442507:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  44250b:	48 8b 00             	mov    (%rax),%rax
  44250e:	48 29 c6             	sub    %rax,%rsi
  442511:	48 89 f0             	mov    %rsi,%rax
  442514:	48 c1 f8 03          	sar    $0x3,%rax
  442518:	48 29 c1             	sub    %rax,%rcx
  44251b:	48 89 c8             	mov    %rcx,%rax
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
  44251e:	48 39 c2             	cmp    %rax,%rdx
  442521:	76 18                	jbe    44253b <std::deque<x666::Parser::BracketEntry, std::allocator<x666::Parser::BracketEntry> >::_M_reserve_map_at_back(unsigned long)+0x5f>
	  _M_reallocate_map(__nodes_to_add, false);
  442523:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  442527:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  44252b:	ba 00 00 00 00       	mov    $0x0,%edx
  442530:	48 89 ce             	mov    %rcx,%rsi
  442533:	48 89 c7             	mov    %rax,%rdi
  442536:	e8 83 0b 00 00       	callq  4430be <std::deque<x666::Parser::BracketEntry, std::allocator<x666::Parser::BracketEntry> >::_M_reallocate_map(unsigned long, bool)>
      }
  44253b:	90                   	nop
  44253c:	c9                   	leaveq 
  44253d:	c3                   	retq   

000000000044253e <std::_Deque_base<x666::Parser::BracketEntry, std::allocator<x666::Parser::BracketEntry> >::_M_allocate_node()>:
      _M_allocate_node()
  44253e:	55                   	push   %rbp
  44253f:	48 89 e5             	mov    %rsp,%rbp
  442542:	48 83 ec 10          	sub    $0x10,%rsp
  442546:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	return _Traits::allocate(_M_impl, __deque_buf_size(sizeof(_Tp)));
  44254a:	bf 10 00 00 00       	mov    $0x10,%edi
  44254f:	e8 da 07 ff ff       	callq  432d2e <std::__deque_buf_size(unsigned long)>
  442554:	48 89 c2             	mov    %rax,%rdx
  442557:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  44255b:	48 89 d6             	mov    %rdx,%rsi
  44255e:	48 89 c7             	mov    %rax,%rdi
  442561:	e8 7b 0d 00 00       	callq  4432e1 <std::allocator_traits<std::allocator<x666::Parser::BracketEntry> >::allocate(std::allocator<x666::Parser::BracketEntry>&, unsigned long)>
      }
  442566:	c9                   	leaveq 
  442567:	c3                   	retq   

0000000000442568 <std::_Tuple_impl<0ul, x666::Bracket*, std::default_delete<x666::Bracket> >::_Tuple_impl()>:
      constexpr _Tuple_impl()
  442568:	55                   	push   %rbp
  442569:	48 89 e5             	mov    %rsp,%rbp
  44256c:	48 83 ec 10          	sub    $0x10,%rsp
  442570:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      : _Inherited(), _Base() { }
  442574:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  442578:	48 89 c7             	mov    %rax,%rdi
  44257b:	e8 8c 0d 00 00       	callq  44330c <std::_Tuple_impl<1ul, std::default_delete<x666::Bracket> >::_Tuple_impl()>
  442580:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  442584:	48 89 c7             	mov    %rax,%rdi
  442587:	e8 9c 0d 00 00       	callq  443328 <std::_Head_base<0ul, x666::Bracket*, false>::_Head_base()>
  44258c:	90                   	nop
  44258d:	c9                   	leaveq 
  44258e:	c3                   	retq   

000000000044258f <std::_Tuple_impl<0ul, x666::Bracket*, std::default_delete<x666::Bracket> >::_M_head(std::_Tuple_impl<0ul, x666::Bracket*, std::default_delete<x666::Bracket> >&)>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
  44258f:	55                   	push   %rbp
  442590:	48 89 e5             	mov    %rsp,%rbp
  442593:	48 83 ec 10          	sub    $0x10,%rsp
  442597:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  44259b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  44259f:	48 89 c7             	mov    %rax,%rdi
  4425a2:	e8 97 0d 00 00       	callq  44333e <std::_Head_base<0ul, x666::Bracket*, false>::_M_head(std::_Head_base<0ul, x666::Bracket*, false>&)>
  4425a7:	c9                   	leaveq 
  4425a8:	c3                   	retq   

00000000004425a9 <std::default_delete<x666::Bracket>& std::__get_helper<1ul, std::default_delete<x666::Bracket>>(std::_Tuple_impl<1ul, std::default_delete<x666::Bracket>>&)>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
  4425a9:	55                   	push   %rbp
  4425aa:	48 89 e5             	mov    %rsp,%rbp
  4425ad:	48 83 ec 10          	sub    $0x10,%rsp
  4425b1:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
  4425b5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4425b9:	48 89 c7             	mov    %rax,%rdi
  4425bc:	e8 8b 0d 00 00       	callq  44334c <std::_Tuple_impl<1ul, std::default_delete<x666::Bracket> >::_M_head(std::_Tuple_impl<1ul, std::default_delete<x666::Bracket> >&)>
  4425c1:	c9                   	leaveq 
  4425c2:	c3                   	retq   

00000000004425c3 <std::tuple_element<0ul, std::tuple<x666::Bracket*, std::default_delete<x666::Bracket> > >::type const& std::get<0ul, x666::Bracket*, std::default_delete<x666::Bracket> >(std::tuple<x666::Bracket*, std::default_delete<x666::Bracket> > const&)>:
    get(const tuple<_Elements...>& __t) noexcept
  4425c3:	55                   	push   %rbp
  4425c4:	48 89 e5             	mov    %rsp,%rbp
  4425c7:	48 83 ec 10          	sub    $0x10,%rsp
  4425cb:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return std::__get_helper<__i>(__t); }
  4425cf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4425d3:	48 89 c7             	mov    %rax,%rdi
  4425d6:	e8 8b 0d 00 00       	callq  443366 <x666::Bracket* const& std::__get_helper<0ul, x666::Bracket*, std::default_delete<x666::Bracket> >(std::_Tuple_impl<0ul, x666::Bracket*, std::default_delete<x666::Bracket> > const&)>
  4425db:	c9                   	leaveq 
  4425dc:	c3                   	retq   
  4425dd:	90                   	nop

00000000004425de <std::_Tuple_impl<1ul, std::default_delete<x666::Expression> >::_Tuple_impl<std::default_delete<x666::Bracket> >(std::default_delete<x666::Bracket>&&)>:
        constexpr _Tuple_impl(_UHead&& __head)
  4425de:	55                   	push   %rbp
  4425df:	48 89 e5             	mov    %rsp,%rbp
  4425e2:	48 83 ec 10          	sub    $0x10,%rsp
  4425e6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4425ea:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	: _Base(std::forward<_UHead>(__head)) { }
  4425ee:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4425f2:	48 89 c7             	mov    %rax,%rdi
  4425f5:	e8 a5 bd ff ff       	callq  43e39f <std::default_delete<x666::Bracket>&& std::forward<std::default_delete<x666::Bracket> >(std::remove_reference<std::default_delete<x666::Bracket> >::type&)>
  4425fa:	48 89 c2             	mov    %rax,%rdx
  4425fd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  442601:	48 89 d6             	mov    %rdx,%rsi
  442604:	48 89 c7             	mov    %rax,%rdi
  442607:	e8 74 0d 00 00       	callq  443380 <std::_Head_base<1ul, std::default_delete<x666::Expression>, true>::_Head_base<std::default_delete<x666::Bracket> >(std::default_delete<x666::Bracket>&&)>
  44260c:	90                   	nop
  44260d:	c9                   	leaveq 
  44260e:	c3                   	retq   
  44260f:	90                   	nop

0000000000442610 <std::_Head_base<1ul, std::default_delete<x666::Expression>, true>::_Head_base()>:
      constexpr _Head_base()
  442610:	55                   	push   %rbp
  442611:	48 89 e5             	mov    %rsp,%rbp
  442614:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      : _Head() { }
  442618:	90                   	nop
  442619:	5d                   	pop    %rbp
  44261a:	c3                   	retq   
  44261b:	90                   	nop

000000000044261c <__gnu_cxx::new_allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > >::new_allocator()>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
  44261c:	55                   	push   %rbp
  44261d:	48 89 e5             	mov    %rsp,%rbp
  442620:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  442624:	90                   	nop
  442625:	5d                   	pop    %rbp
  442626:	c3                   	retq   
  442627:	90                   	nop

0000000000442628 <std::_Deque_iterator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*>::_Deque_iterator()>:
      _Deque_iterator() _GLIBCXX_NOEXCEPT
  442628:	55                   	push   %rbp
  442629:	48 89 e5             	mov    %rsp,%rbp
  44262c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      : _M_cur(), _M_first(), _M_last(), _M_node() { }
  442630:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  442634:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  44263b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  44263f:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
  442646:	00 
  442647:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  44264b:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)
  442652:	00 
  442653:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  442657:	48 c7 40 18 00 00 00 	movq   $0x0,0x18(%rax)
  44265e:	00 
  44265f:	90                   	nop
  442660:	5d                   	pop    %rbp
  442661:	c3                   	retq   

0000000000442662 <std::_Deque_base<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > >::_M_allocate_map(unsigned long)>:
      _M_allocate_map(size_t __n)
  442662:	55                   	push   %rbp
  442663:	48 89 e5             	mov    %rsp,%rbp
  442666:	53                   	push   %rbx
  442667:	48 83 ec 28          	sub    $0x28,%rsp
  44266b:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  44266f:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
  442673:	48 8d 45 ef          	lea    -0x11(%rbp),%rax
  442677:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  44267b:	48 89 d6             	mov    %rdx,%rsi
  44267e:	48 89 c7             	mov    %rax,%rdi
  442681:	e8 ee 17 ff ff       	callq  433e74 <std::_Deque_base<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > >::_M_get_map_allocator() const>
	return _Map_alloc_traits::allocate(__map_alloc, __n);
  442686:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  44268a:	48 8d 45 ef          	lea    -0x11(%rbp),%rax
  44268e:	48 89 d6             	mov    %rdx,%rsi
  442691:	48 89 c7             	mov    %rax,%rdi
  442694:	e8 18 0d 00 00       	callq  4433b1 <std::allocator_traits<std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*> >::allocate(std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*>&, unsigned long)>
  442699:	48 89 c3             	mov    %rax,%rbx
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
  44269c:	48 8d 45 ef          	lea    -0x11(%rbp),%rax
  4426a0:	48 89 c7             	mov    %rax,%rdi
  4426a3:	e8 00 18 ff ff       	callq  433ea8 <std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*>::~allocator()>
	return _Map_alloc_traits::allocate(__map_alloc, __n);
  4426a8:	48 89 d8             	mov    %rbx,%rax
  4426ab:	eb 1a                	jmp    4426c7 <std::_Deque_base<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > >::_M_allocate_map(unsigned long)+0x65>
  4426ad:	48 89 c3             	mov    %rax,%rbx
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
  4426b0:	48 8d 45 ef          	lea    -0x11(%rbp),%rax
  4426b4:	48 89 c7             	mov    %rax,%rdi
  4426b7:	e8 ec 17 ff ff       	callq  433ea8 <std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*>::~allocator()>
  4426bc:	48 89 d8             	mov    %rbx,%rax
  4426bf:	48 89 c7             	mov    %rax,%rdi
  4426c2:	e8 49 02 ff ff       	callq  432910 <_Unwind_Resume@plt>
      }
  4426c7:	48 83 c4 28          	add    $0x28,%rsp
  4426cb:	5b                   	pop    %rbx
  4426cc:	5d                   	pop    %rbp
  4426cd:	c3                   	retq   

00000000004426ce <std::_Deque_base<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > >::_M_create_nodes(std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >**, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >**)>:
    _Deque_base<_Tp, _Alloc>::
  4426ce:	55                   	push   %rbp
  4426cf:	48 89 e5             	mov    %rsp,%rbp
  4426d2:	53                   	push   %rbx
  4426d3:	48 83 ec 38          	sub    $0x38,%rsp
  4426d7:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  4426db:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  4426df:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
  4426e3:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  4426e7:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  4426eb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4426ef:	48 3b 45 c8          	cmp    -0x38(%rbp),%rax
  4426f3:	73 54                	jae    442749 <std::_Deque_base<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > >::_M_create_nodes(std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >**, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >**)+0x7b>
	    *__cur = this->_M_allocate_node();
  4426f5:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4426f9:	48 89 c7             	mov    %rax,%rdi
  4426fc:	e8 b1 f9 ff ff       	callq  4420b2 <std::_Deque_base<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > >::_M_allocate_node()>
  442701:	48 89 c2             	mov    %rax,%rdx
  442704:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  442708:	48 89 10             	mov    %rdx,(%rax)
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
  44270b:	48 83 45 e8 08       	addq   $0x8,-0x18(%rbp)
  442710:	eb d9                	jmp    4426eb <std::_Deque_base<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > >::_M_create_nodes(std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >**, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >**)+0x1d>
      __catch(...)
  442712:	48 89 c7             	mov    %rax,%rdi
  442715:	e8 c6 ff fe ff       	callq  4326e0 <__cxa_begin_catch@plt>
	  _M_destroy_nodes(__nstart, __cur);
  44271a:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  44271e:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
  442722:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  442726:	48 89 ce             	mov    %rcx,%rsi
  442729:	48 89 c7             	mov    %rax,%rdi
  44272c:	e8 ab 11 ff ff       	callq  4338dc <std::_Deque_base<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > >::_M_destroy_nodes(std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >**, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >**)>
	  __throw_exception_again;
  442731:	e8 4a 01 ff ff       	callq  432880 <__cxa_rethrow@plt>
  442736:	48 89 c3             	mov    %rax,%rbx
      __catch(...)
  442739:	e8 82 01 ff ff       	callq  4328c0 <__cxa_end_catch@plt>
  44273e:	48 89 d8             	mov    %rbx,%rax
  442741:	48 89 c7             	mov    %rax,%rdi
  442744:	e8 c7 01 ff ff       	callq  432910 <_Unwind_Resume@plt>
    }
  442749:	90                   	nop
  44274a:	48 83 c4 38          	add    $0x38,%rsp
  44274e:	5b                   	pop    %rbx
  44274f:	5d                   	pop    %rbp
  442750:	c3                   	retq   
  442751:	90                   	nop

0000000000442752 <std::allocator<x666::LineInfo>::allocator()>:
  442752:	55                   	push   %rbp
  442753:	48 89 e5             	mov    %rsp,%rbp
  442756:	48 83 ec 10          	sub    $0x10,%rsp
  44275a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  44275e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  442762:	48 89 c7             	mov    %rax,%rdi
  442765:	e8 72 0c 00 00       	callq  4433dc <__gnu_cxx::new_allocator<x666::LineInfo>::new_allocator()>
  44276a:	90                   	nop
  44276b:	c9                   	leaveq 
  44276c:	c3                   	retq   
  44276d:	90                   	nop

000000000044276e <std::_Deque_iterator<x666::LineInfo, x666::LineInfo&, x666::LineInfo*>::_Deque_iterator()>:
      _Deque_iterator() _GLIBCXX_NOEXCEPT
  44276e:	55                   	push   %rbp
  44276f:	48 89 e5             	mov    %rsp,%rbp
  442772:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      : _M_cur(), _M_first(), _M_last(), _M_node() { }
  442776:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  44277a:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  442781:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  442785:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
  44278c:	00 
  44278d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  442791:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)
  442798:	00 
  442799:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  44279d:	48 c7 40 18 00 00 00 	movq   $0x0,0x18(%rax)
  4427a4:	00 
  4427a5:	90                   	nop
  4427a6:	5d                   	pop    %rbp
  4427a7:	c3                   	retq   

00000000004427a8 <std::_Deque_base<x666::LineInfo, std::allocator<x666::LineInfo> >::_M_allocate_map(unsigned long)>:
      _M_allocate_map(size_t __n)
  4427a8:	55                   	push   %rbp
  4427a9:	48 89 e5             	mov    %rsp,%rbp
  4427ac:	53                   	push   %rbx
  4427ad:	48 83 ec 28          	sub    $0x28,%rsp
  4427b1:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  4427b5:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
  4427b9:	48 8d 45 ef          	lea    -0x11(%rbp),%rax
  4427bd:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  4427c1:	48 89 d6             	mov    %rdx,%rsi
  4427c4:	48 89 c7             	mov    %rax,%rdi
  4427c7:	e8 76 17 ff ff       	callq  433f42 <std::_Deque_base<x666::LineInfo, std::allocator<x666::LineInfo> >::_M_get_map_allocator() const>
	return _Map_alloc_traits::allocate(__map_alloc, __n);
  4427cc:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  4427d0:	48 8d 45 ef          	lea    -0x11(%rbp),%rax
  4427d4:	48 89 d6             	mov    %rdx,%rsi
  4427d7:	48 89 c7             	mov    %rax,%rdi
  4427da:	e8 08 0c 00 00       	callq  4433e7 <std::allocator_traits<std::allocator<x666::LineInfo*> >::allocate(std::allocator<x666::LineInfo*>&, unsigned long)>
  4427df:	48 89 c3             	mov    %rax,%rbx
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
  4427e2:	48 8d 45 ef          	lea    -0x11(%rbp),%rax
  4427e6:	48 89 c7             	mov    %rax,%rdi
  4427e9:	e8 88 17 ff ff       	callq  433f76 <std::allocator<x666::LineInfo*>::~allocator()>
	return _Map_alloc_traits::allocate(__map_alloc, __n);
  4427ee:	48 89 d8             	mov    %rbx,%rax
  4427f1:	eb 1a                	jmp    44280d <std::_Deque_base<x666::LineInfo, std::allocator<x666::LineInfo> >::_M_allocate_map(unsigned long)+0x65>
  4427f3:	48 89 c3             	mov    %rax,%rbx
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
  4427f6:	48 8d 45 ef          	lea    -0x11(%rbp),%rax
  4427fa:	48 89 c7             	mov    %rax,%rdi
  4427fd:	e8 74 17 ff ff       	callq  433f76 <std::allocator<x666::LineInfo*>::~allocator()>
  442802:	48 89 d8             	mov    %rbx,%rax
  442805:	48 89 c7             	mov    %rax,%rdi
  442808:	e8 03 01 ff ff       	callq  432910 <_Unwind_Resume@plt>
      }
  44280d:	48 83 c4 28          	add    $0x28,%rsp
  442811:	5b                   	pop    %rbx
  442812:	5d                   	pop    %rbp
  442813:	c3                   	retq   

0000000000442814 <std::_Deque_base<x666::LineInfo, std::allocator<x666::LineInfo> >::_M_create_nodes(x666::LineInfo**, x666::LineInfo**)>:
    _Deque_base<_Tp, _Alloc>::
  442814:	55                   	push   %rbp
  442815:	48 89 e5             	mov    %rsp,%rbp
  442818:	53                   	push   %rbx
  442819:	48 83 ec 38          	sub    $0x38,%rsp
  44281d:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  442821:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  442825:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
  442829:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  44282d:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  442831:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  442835:	48 3b 45 c8          	cmp    -0x38(%rbp),%rax
  442839:	73 54                	jae    44288f <std::_Deque_base<x666::LineInfo, std::allocator<x666::LineInfo> >::_M_create_nodes(x666::LineInfo**, x666::LineInfo**)+0x7b>
	    *__cur = this->_M_allocate_node();
  44283b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  44283f:	48 89 c7             	mov    %rax,%rdi
  442842:	e8 ff dd ff ff       	callq  440646 <std::_Deque_base<x666::LineInfo, std::allocator<x666::LineInfo> >::_M_allocate_node()>
  442847:	48 89 c2             	mov    %rax,%rdx
  44284a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  44284e:	48 89 10             	mov    %rdx,(%rax)
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
  442851:	48 83 45 e8 08       	addq   $0x8,-0x18(%rbp)
  442856:	eb d9                	jmp    442831 <std::_Deque_base<x666::LineInfo, std::allocator<x666::LineInfo> >::_M_create_nodes(x666::LineInfo**, x666::LineInfo**)+0x1d>
      __catch(...)
  442858:	48 89 c7             	mov    %rax,%rdi
  44285b:	e8 80 fe fe ff       	callq  4326e0 <__cxa_begin_catch@plt>
	  _M_destroy_nodes(__nstart, __cur);
  442860:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  442864:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
  442868:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  44286c:	48 89 ce             	mov    %rcx,%rsi
  44286f:	48 89 c7             	mov    %rax,%rdi
  442872:	e8 73 12 ff ff       	callq  433aea <std::_Deque_base<x666::LineInfo, std::allocator<x666::LineInfo> >::_M_destroy_nodes(x666::LineInfo**, x666::LineInfo**)>
	  __throw_exception_again;
  442877:	e8 04 00 ff ff       	callq  432880 <__cxa_rethrow@plt>
  44287c:	48 89 c3             	mov    %rax,%rbx
      __catch(...)
  44287f:	e8 3c 00 ff ff       	callq  4328c0 <__cxa_end_catch@plt>
  442884:	48 89 d8             	mov    %rbx,%rax
  442887:	48 89 c7             	mov    %rax,%rdi
  44288a:	e8 81 00 ff ff       	callq  432910 <_Unwind_Resume@plt>
    }
  44288f:	90                   	nop
  442890:	48 83 c4 38          	add    $0x38,%rsp
  442894:	5b                   	pop    %rbx
  442895:	5d                   	pop    %rbp
  442896:	c3                   	retq   
  442897:	90                   	nop

0000000000442898 <std::allocator<x666::Parser::BracketEntry>::allocator()>:
  442898:	55                   	push   %rbp
  442899:	48 89 e5             	mov    %rsp,%rbp
  44289c:	48 83 ec 10          	sub    $0x10,%rsp
  4428a0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4428a4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4428a8:	48 89 c7             	mov    %rax,%rdi
  4428ab:	e8 62 0b 00 00       	callq  443412 <__gnu_cxx::new_allocator<x666::Parser::BracketEntry>::new_allocator()>
  4428b0:	90                   	nop
  4428b1:	c9                   	leaveq 
  4428b2:	c3                   	retq   
  4428b3:	90                   	nop

00000000004428b4 <std::_Deque_iterator<x666::Parser::BracketEntry, x666::Parser::BracketEntry&, x666::Parser::BracketEntry*>::_Deque_iterator()>:
      _Deque_iterator() _GLIBCXX_NOEXCEPT
  4428b4:	55                   	push   %rbp
  4428b5:	48 89 e5             	mov    %rsp,%rbp
  4428b8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      : _M_cur(), _M_first(), _M_last(), _M_node() { }
  4428bc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4428c0:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  4428c7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4428cb:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
  4428d2:	00 
  4428d3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4428d7:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)
  4428de:	00 
  4428df:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4428e3:	48 c7 40 18 00 00 00 	movq   $0x0,0x18(%rax)
  4428ea:	00 
  4428eb:	90                   	nop
  4428ec:	5d                   	pop    %rbp
  4428ed:	c3                   	retq   

00000000004428ee <std::_Deque_base<x666::Parser::BracketEntry, std::allocator<x666::Parser::BracketEntry> >::_M_allocate_map(unsigned long)>:
      _M_allocate_map(size_t __n)
  4428ee:	55                   	push   %rbp
  4428ef:	48 89 e5             	mov    %rsp,%rbp
  4428f2:	53                   	push   %rbx
  4428f3:	48 83 ec 28          	sub    $0x28,%rsp
  4428f7:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  4428fb:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
  4428ff:	48 8d 45 ef          	lea    -0x11(%rbp),%rax
  442903:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  442907:	48 89 d6             	mov    %rdx,%rsi
  44290a:	48 89 c7             	mov    %rax,%rdi
  44290d:	e8 ee 16 ff ff       	callq  434000 <std::_Deque_base<x666::Parser::BracketEntry, std::allocator<x666::Parser::BracketEntry> >::_M_get_map_allocator() const>
	return _Map_alloc_traits::allocate(__map_alloc, __n);
  442912:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  442916:	48 8d 45 ef          	lea    -0x11(%rbp),%rax
  44291a:	48 89 d6             	mov    %rdx,%rsi
  44291d:	48 89 c7             	mov    %rax,%rdi
  442920:	e8 f8 0a 00 00       	callq  44341d <std::allocator_traits<std::allocator<x666::Parser::BracketEntry*> >::allocate(std::allocator<x666::Parser::BracketEntry*>&, unsigned long)>
  442925:	48 89 c3             	mov    %rax,%rbx
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
  442928:	48 8d 45 ef          	lea    -0x11(%rbp),%rax
  44292c:	48 89 c7             	mov    %rax,%rdi
  44292f:	e8 00 17 ff ff       	callq  434034 <std::allocator<x666::Parser::BracketEntry*>::~allocator()>
	return _Map_alloc_traits::allocate(__map_alloc, __n);
  442934:	48 89 d8             	mov    %rbx,%rax
  442937:	eb 1a                	jmp    442953 <std::_Deque_base<x666::Parser::BracketEntry, std::allocator<x666::Parser::BracketEntry> >::_M_allocate_map(unsigned long)+0x65>
  442939:	48 89 c3             	mov    %rax,%rbx
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
  44293c:	48 8d 45 ef          	lea    -0x11(%rbp),%rax
  442940:	48 89 c7             	mov    %rax,%rdi
  442943:	e8 ec 16 ff ff       	callq  434034 <std::allocator<x666::Parser::BracketEntry*>::~allocator()>
  442948:	48 89 d8             	mov    %rbx,%rax
  44294b:	48 89 c7             	mov    %rax,%rdi
  44294e:	e8 bd ff fe ff       	callq  432910 <_Unwind_Resume@plt>
      }
  442953:	48 83 c4 28          	add    $0x28,%rsp
  442957:	5b                   	pop    %rbx
  442958:	5d                   	pop    %rbp
  442959:	c3                   	retq   

000000000044295a <std::_Deque_base<x666::Parser::BracketEntry, std::allocator<x666::Parser::BracketEntry> >::_M_create_nodes(x666::Parser::BracketEntry**, x666::Parser::BracketEntry**)>:
    _Deque_base<_Tp, _Alloc>::
  44295a:	55                   	push   %rbp
  44295b:	48 89 e5             	mov    %rsp,%rbp
  44295e:	53                   	push   %rbx
  44295f:	48 83 ec 38          	sub    $0x38,%rsp
  442963:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  442967:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  44296b:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
  44296f:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  442973:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  442977:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  44297b:	48 3b 45 c8          	cmp    -0x38(%rbp),%rax
  44297f:	73 54                	jae    4429d5 <std::_Deque_base<x666::Parser::BracketEntry, std::allocator<x666::Parser::BracketEntry> >::_M_create_nodes(x666::Parser::BracketEntry**, x666::Parser::BracketEntry**)+0x7b>
	    *__cur = this->_M_allocate_node();
  442981:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  442985:	48 89 c7             	mov    %rax,%rdi
  442988:	e8 b1 fb ff ff       	callq  44253e <std::_Deque_base<x666::Parser::BracketEntry, std::allocator<x666::Parser::BracketEntry> >::_M_allocate_node()>
  44298d:	48 89 c2             	mov    %rax,%rdx
  442990:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  442994:	48 89 10             	mov    %rdx,(%rax)
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
  442997:	48 83 45 e8 08       	addq   $0x8,-0x18(%rbp)
  44299c:	eb d9                	jmp    442977 <std::_Deque_base<x666::Parser::BracketEntry, std::allocator<x666::Parser::BracketEntry> >::_M_create_nodes(x666::Parser::BracketEntry**, x666::Parser::BracketEntry**)+0x1d>
      __catch(...)
  44299e:	48 89 c7             	mov    %rax,%rdi
  4429a1:	e8 3a fd fe ff       	callq  4326e0 <__cxa_begin_catch@plt>
	  _M_destroy_nodes(__nstart, __cur);
  4429a6:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  4429aa:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
  4429ae:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4429b2:	48 89 ce             	mov    %rcx,%rsi
  4429b5:	48 89 c7             	mov    %rax,%rdi
  4429b8:	e8 2b 12 ff ff       	callq  433be8 <std::_Deque_base<x666::Parser::BracketEntry, std::allocator<x666::Parser::BracketEntry> >::_M_destroy_nodes(x666::Parser::BracketEntry**, x666::Parser::BracketEntry**)>
	  __throw_exception_again;
  4429bd:	e8 be fe fe ff       	callq  432880 <__cxa_rethrow@plt>
  4429c2:	48 89 c3             	mov    %rax,%rbx
      __catch(...)
  4429c5:	e8 f6 fe fe ff       	callq  4328c0 <__cxa_end_catch@plt>
  4429ca:	48 89 d8             	mov    %rbx,%rax
  4429cd:	48 89 c7             	mov    %rax,%rdi
  4429d0:	e8 3b ff fe ff       	callq  432910 <_Unwind_Resume@plt>
    }
  4429d5:	90                   	nop
  4429d6:	48 83 c4 38          	add    $0x38,%rsp
  4429da:	5b                   	pop    %rbx
  4429db:	5d                   	pop    %rbp
  4429dc:	c3                   	retq   
  4429dd:	90                   	nop

00000000004429de <__gnu_cxx::new_allocator<x666::LexError>::new_allocator()>:
  4429de:	55                   	push   %rbp
  4429df:	48 89 e5             	mov    %rsp,%rbp
  4429e2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4429e6:	90                   	nop
  4429e7:	5d                   	pop    %rbp
  4429e8:	c3                   	retq   

00000000004429e9 <void std::_Destroy<x666::Operator const>(x666::Operator const*)>:
    _Destroy(_Tp* __pointer)
  4429e9:	55                   	push   %rbp
  4429ea:	48 89 e5             	mov    %rsp,%rbp
  4429ed:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { __pointer->~_Tp(); }
  4429f1:	90                   	nop
  4429f2:	5d                   	pop    %rbp
  4429f3:	c3                   	retq   

00000000004429f4 <void std::_Destroy<x666::Newline const>(x666::Newline const*)>:
    _Destroy(_Tp* __pointer)
  4429f4:	55                   	push   %rbp
  4429f5:	48 89 e5             	mov    %rsp,%rbp
  4429f8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { __pointer->~_Tp(); }
  4429fc:	90                   	nop
  4429fd:	5d                   	pop    %rbp
  4429fe:	c3                   	retq   

00000000004429ff <void std::_Destroy<x666::EndOfFile const>(x666::EndOfFile const*)>:
    _Destroy(_Tp* __pointer)
  4429ff:	55                   	push   %rbp
  442a00:	48 89 e5             	mov    %rsp,%rbp
  442a03:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { __pointer->~_Tp(); }
  442a07:	90                   	nop
  442a08:	5d                   	pop    %rbp
  442a09:	c3                   	retq   

0000000000442a0a <std::__detail::__variant::_Uninitialized<x666::LexError, false>::_M_get() const &>:
      const _Type& _M_get() const &
  442a0a:	55                   	push   %rbp
  442a0b:	48 89 e5             	mov    %rsp,%rbp
  442a0e:	48 83 ec 10          	sub    $0x10,%rsp
  442a12:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return *_M_storage._M_ptr(); }
  442a16:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  442a1a:	48 89 c7             	mov    %rax,%rdi
  442a1d:	e8 26 0a 00 00       	callq  443448 <__gnu_cxx::__aligned_membuf<x666::LexError>::_M_ptr() const>
  442a22:	c9                   	leaveq 
  442a23:	c3                   	retq   

0000000000442a24 <void std::_Destroy<x666::LexError const>(x666::LexError const*)>:
    _Destroy(_Tp* __pointer)
  442a24:	55                   	push   %rbp
  442a25:	48 89 e5             	mov    %rsp,%rbp
  442a28:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { __pointer->~_Tp(); }
  442a2c:	90                   	nop
  442a2d:	5d                   	pop    %rbp
  442a2e:	c3                   	retq   

0000000000442a2f <std::_Deque_iterator<x666::LineInfo, x666::LineInfo const&, x666::LineInfo const*>::_S_buffer_size()>:
      static size_t _S_buffer_size() _GLIBCXX_NOEXCEPT
  442a2f:	55                   	push   %rbp
  442a30:	48 89 e5             	mov    %rsp,%rbp
      { return __deque_buf_size(sizeof(_Tp)); }
  442a33:	bf 20 00 00 00       	mov    $0x20,%edi
  442a38:	e8 f1 02 ff ff       	callq  432d2e <std::__deque_buf_size(unsigned long)>
  442a3d:	5d                   	pop    %rbp
  442a3e:	c3                   	retq   
  442a3f:	90                   	nop

0000000000442a40 <std::_Head_base<1ul, std::default_delete<x666::Expression>, true>::_Head_base<std::default_delete<x666::Expression> >(std::default_delete<x666::Expression>&&)>:
        constexpr _Head_base(_UHead&& __h)
  442a40:	55                   	push   %rbp
  442a41:	48 89 e5             	mov    %rsp,%rbp
  442a44:	48 83 ec 10          	sub    $0x10,%rsp
  442a48:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  442a4c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	: _Head(std::forward<_UHead>(__h)) { }
  442a50:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  442a54:	48 89 c7             	mov    %rax,%rdi
  442a57:	e8 33 a4 ff ff       	callq  43ce8f <std::default_delete<x666::Expression>&& std::forward<std::default_delete<x666::Expression> >(std::remove_reference<std::default_delete<x666::Expression> >::type&)>
  442a5c:	90                   	nop
  442a5d:	c9                   	leaveq 
  442a5e:	c3                   	retq   
  442a5f:	90                   	nop

0000000000442a60 <std::_Tuple_impl<1ul, std::default_delete<x666::BinaryOp> >::_Tuple_impl()>:
      constexpr _Tuple_impl()
  442a60:	55                   	push   %rbp
  442a61:	48 89 e5             	mov    %rsp,%rbp
  442a64:	48 83 ec 10          	sub    $0x10,%rsp
  442a68:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      : _Base() { }
  442a6c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  442a70:	48 89 c7             	mov    %rax,%rdi
  442a73:	e8 ea 09 00 00       	callq  443462 <std::_Head_base<1ul, std::default_delete<x666::BinaryOp>, true>::_Head_base()>
  442a78:	90                   	nop
  442a79:	c9                   	leaveq 
  442a7a:	c3                   	retq   
  442a7b:	90                   	nop

0000000000442a7c <std::_Head_base<0ul, x666::BinaryOp*, false>::_Head_base()>:
      constexpr _Head_base()
  442a7c:	55                   	push   %rbp
  442a7d:	48 89 e5             	mov    %rsp,%rbp
  442a80:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      : _M_head_impl() { }
  442a84:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  442a88:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  442a8f:	90                   	nop
  442a90:	5d                   	pop    %rbp
  442a91:	c3                   	retq   

0000000000442a92 <std::_Head_base<0ul, x666::BinaryOp*, false>::_M_head(std::_Head_base<0ul, x666::BinaryOp*, false>&)>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
  442a92:	55                   	push   %rbp
  442a93:	48 89 e5             	mov    %rsp,%rbp
  442a96:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  442a9a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  442a9e:	5d                   	pop    %rbp
  442a9f:	c3                   	retq   

0000000000442aa0 <std::_Tuple_impl<1ul, std::default_delete<x666::BinaryOp> >::_M_head(std::_Tuple_impl<1ul, std::default_delete<x666::BinaryOp> >&)>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
  442aa0:	55                   	push   %rbp
  442aa1:	48 89 e5             	mov    %rsp,%rbp
  442aa4:	48 83 ec 10          	sub    $0x10,%rsp
  442aa8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  442aac:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  442ab0:	48 89 c7             	mov    %rax,%rdi
  442ab3:	e8 b5 09 00 00       	callq  44346d <std::_Head_base<1ul, std::default_delete<x666::BinaryOp>, true>::_M_head(std::_Head_base<1ul, std::default_delete<x666::BinaryOp>, true>&)>
  442ab8:	c9                   	leaveq 
  442ab9:	c3                   	retq   

0000000000442aba <x666::BinaryOp* const& std::__get_helper<0ul, x666::BinaryOp*, std::default_delete<x666::BinaryOp> >(std::_Tuple_impl<0ul, x666::BinaryOp*, std::default_delete<x666::BinaryOp> > const&)>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
  442aba:	55                   	push   %rbp
  442abb:	48 89 e5             	mov    %rsp,%rbp
  442abe:	48 83 ec 10          	sub    $0x10,%rsp
  442ac2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
  442ac6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  442aca:	48 89 c7             	mov    %rax,%rdi
  442acd:	e8 a9 09 00 00       	callq  44347b <std::_Tuple_impl<0ul, x666::BinaryOp*, std::default_delete<x666::BinaryOp> >::_M_head(std::_Tuple_impl<0ul, x666::BinaryOp*, std::default_delete<x666::BinaryOp> > const&)>
  442ad2:	c9                   	leaveq 
  442ad3:	c3                   	retq   

0000000000442ad4 <std::_Head_base<1ul, std::default_delete<x666::Expression>, true>::_Head_base<std::default_delete<x666::BinaryOp> >(std::default_delete<x666::BinaryOp>&&)>:
        constexpr _Head_base(_UHead&& __h)
  442ad4:	55                   	push   %rbp
  442ad5:	48 89 e5             	mov    %rsp,%rbp
  442ad8:	48 83 ec 10          	sub    $0x10,%rsp
  442adc:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  442ae0:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	: _Head(std::forward<_UHead>(__h)) { }
  442ae4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  442ae8:	48 89 c7             	mov    %rax,%rdi
  442aeb:	e8 23 a5 ff ff       	callq  43d013 <std::default_delete<x666::BinaryOp>&& std::forward<std::default_delete<x666::BinaryOp> >(std::remove_reference<std::default_delete<x666::BinaryOp> >::type&)>
  442af0:	48 89 c2             	mov    %rax,%rdx
  442af3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  442af7:	48 89 d6             	mov    %rdx,%rsi
  442afa:	48 89 c7             	mov    %rax,%rdi
  442afd:	e8 94 09 00 00       	callq  443496 <std::default_delete<x666::Expression>::default_delete<x666::BinaryOp, void>(std::default_delete<x666::BinaryOp> const&)>
  442b02:	90                   	nop
  442b03:	c9                   	leaveq 
  442b04:	c3                   	retq   
  442b05:	90                   	nop

0000000000442b06 <std::_Tuple_impl<1ul, std::default_delete<x666::UnaryOp> >::_Tuple_impl()>:
      constexpr _Tuple_impl()
  442b06:	55                   	push   %rbp
  442b07:	48 89 e5             	mov    %rsp,%rbp
  442b0a:	48 83 ec 10          	sub    $0x10,%rsp
  442b0e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      : _Base() { }
  442b12:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  442b16:	48 89 c7             	mov    %rax,%rdi
  442b19:	e8 88 09 00 00       	callq  4434a6 <std::_Head_base<1ul, std::default_delete<x666::UnaryOp>, true>::_Head_base()>
  442b1e:	90                   	nop
  442b1f:	c9                   	leaveq 
  442b20:	c3                   	retq   
  442b21:	90                   	nop

0000000000442b22 <std::_Head_base<0ul, x666::UnaryOp*, false>::_Head_base()>:
      constexpr _Head_base()
  442b22:	55                   	push   %rbp
  442b23:	48 89 e5             	mov    %rsp,%rbp
  442b26:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      : _M_head_impl() { }
  442b2a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  442b2e:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  442b35:	90                   	nop
  442b36:	5d                   	pop    %rbp
  442b37:	c3                   	retq   

0000000000442b38 <std::_Head_base<0ul, x666::UnaryOp*, false>::_M_head(std::_Head_base<0ul, x666::UnaryOp*, false>&)>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
  442b38:	55                   	push   %rbp
  442b39:	48 89 e5             	mov    %rsp,%rbp
  442b3c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  442b40:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  442b44:	5d                   	pop    %rbp
  442b45:	c3                   	retq   

0000000000442b46 <std::_Tuple_impl<1ul, std::default_delete<x666::UnaryOp> >::_M_head(std::_Tuple_impl<1ul, std::default_delete<x666::UnaryOp> >&)>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
  442b46:	55                   	push   %rbp
  442b47:	48 89 e5             	mov    %rsp,%rbp
  442b4a:	48 83 ec 10          	sub    $0x10,%rsp
  442b4e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  442b52:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  442b56:	48 89 c7             	mov    %rax,%rdi
  442b59:	e8 53 09 00 00       	callq  4434b1 <std::_Head_base<1ul, std::default_delete<x666::UnaryOp>, true>::_M_head(std::_Head_base<1ul, std::default_delete<x666::UnaryOp>, true>&)>
  442b5e:	c9                   	leaveq 
  442b5f:	c3                   	retq   

0000000000442b60 <x666::UnaryOp* const& std::__get_helper<0ul, x666::UnaryOp*, std::default_delete<x666::UnaryOp> >(std::_Tuple_impl<0ul, x666::UnaryOp*, std::default_delete<x666::UnaryOp> > const&)>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
  442b60:	55                   	push   %rbp
  442b61:	48 89 e5             	mov    %rsp,%rbp
  442b64:	48 83 ec 10          	sub    $0x10,%rsp
  442b68:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
  442b6c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  442b70:	48 89 c7             	mov    %rax,%rdi
  442b73:	e8 47 09 00 00       	callq  4434bf <std::_Tuple_impl<0ul, x666::UnaryOp*, std::default_delete<x666::UnaryOp> >::_M_head(std::_Tuple_impl<0ul, x666::UnaryOp*, std::default_delete<x666::UnaryOp> > const&)>
  442b78:	c9                   	leaveq 
  442b79:	c3                   	retq   

0000000000442b7a <std::_Head_base<1ul, std::default_delete<x666::Expression>, true>::_Head_base<std::default_delete<x666::UnaryOp> >(std::default_delete<x666::UnaryOp>&&)>:
        constexpr _Head_base(_UHead&& __h)
  442b7a:	55                   	push   %rbp
  442b7b:	48 89 e5             	mov    %rsp,%rbp
  442b7e:	48 83 ec 10          	sub    $0x10,%rsp
  442b82:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  442b86:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	: _Head(std::forward<_UHead>(__h)) { }
  442b8a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  442b8e:	48 89 c7             	mov    %rax,%rdi
  442b91:	e8 f1 a5 ff ff       	callq  43d187 <std::default_delete<x666::UnaryOp>&& std::forward<std::default_delete<x666::UnaryOp> >(std::remove_reference<std::default_delete<x666::UnaryOp> >::type&)>
  442b96:	48 89 c2             	mov    %rax,%rdx
  442b99:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  442b9d:	48 89 d6             	mov    %rdx,%rsi
  442ba0:	48 89 c7             	mov    %rax,%rdi
  442ba3:	e8 32 09 00 00       	callq  4434da <std::default_delete<x666::Expression>::default_delete<x666::UnaryOp, void>(std::default_delete<x666::UnaryOp> const&)>
  442ba8:	90                   	nop
  442ba9:	c9                   	leaveq 
  442baa:	c3                   	retq   
  442bab:	90                   	nop

0000000000442bac <std::_Tuple_impl<1ul, std::default_delete<x666::Literal> >::_Tuple_impl()>:
      constexpr _Tuple_impl()
  442bac:	55                   	push   %rbp
  442bad:	48 89 e5             	mov    %rsp,%rbp
  442bb0:	48 83 ec 10          	sub    $0x10,%rsp
  442bb4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      : _Base() { }
  442bb8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  442bbc:	48 89 c7             	mov    %rax,%rdi
  442bbf:	e8 26 09 00 00       	callq  4434ea <std::_Head_base<1ul, std::default_delete<x666::Literal>, true>::_Head_base()>
  442bc4:	90                   	nop
  442bc5:	c9                   	leaveq 
  442bc6:	c3                   	retq   
  442bc7:	90                   	nop

0000000000442bc8 <std::_Head_base<0ul, x666::Literal*, false>::_Head_base()>:
      constexpr _Head_base()
  442bc8:	55                   	push   %rbp
  442bc9:	48 89 e5             	mov    %rsp,%rbp
  442bcc:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      : _M_head_impl() { }
  442bd0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  442bd4:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  442bdb:	90                   	nop
  442bdc:	5d                   	pop    %rbp
  442bdd:	c3                   	retq   

0000000000442bde <std::_Head_base<0ul, x666::Literal*, false>::_M_head(std::_Head_base<0ul, x666::Literal*, false>&)>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
  442bde:	55                   	push   %rbp
  442bdf:	48 89 e5             	mov    %rsp,%rbp
  442be2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  442be6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  442bea:	5d                   	pop    %rbp
  442beb:	c3                   	retq   

0000000000442bec <std::_Tuple_impl<1ul, std::default_delete<x666::Literal> >::_M_head(std::_Tuple_impl<1ul, std::default_delete<x666::Literal> >&)>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
  442bec:	55                   	push   %rbp
  442bed:	48 89 e5             	mov    %rsp,%rbp
  442bf0:	48 83 ec 10          	sub    $0x10,%rsp
  442bf4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  442bf8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  442bfc:	48 89 c7             	mov    %rax,%rdi
  442bff:	e8 f1 08 00 00       	callq  4434f5 <std::_Head_base<1ul, std::default_delete<x666::Literal>, true>::_M_head(std::_Head_base<1ul, std::default_delete<x666::Literal>, true>&)>
  442c04:	c9                   	leaveq 
  442c05:	c3                   	retq   

0000000000442c06 <x666::Literal* const& std::__get_helper<0ul, x666::Literal*, std::default_delete<x666::Literal> >(std::_Tuple_impl<0ul, x666::Literal*, std::default_delete<x666::Literal> > const&)>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
  442c06:	55                   	push   %rbp
  442c07:	48 89 e5             	mov    %rsp,%rbp
  442c0a:	48 83 ec 10          	sub    $0x10,%rsp
  442c0e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
  442c12:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  442c16:	48 89 c7             	mov    %rax,%rdi
  442c19:	e8 e5 08 00 00       	callq  443503 <std::_Tuple_impl<0ul, x666::Literal*, std::default_delete<x666::Literal> >::_M_head(std::_Tuple_impl<0ul, x666::Literal*, std::default_delete<x666::Literal> > const&)>
  442c1e:	c9                   	leaveq 
  442c1f:	c3                   	retq   

0000000000442c20 <std::_Head_base<1ul, std::default_delete<x666::Expression>, true>::_Head_base<std::default_delete<x666::Literal> >(std::default_delete<x666::Literal>&&)>:
        constexpr _Head_base(_UHead&& __h)
  442c20:	55                   	push   %rbp
  442c21:	48 89 e5             	mov    %rsp,%rbp
  442c24:	48 83 ec 10          	sub    $0x10,%rsp
  442c28:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  442c2c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	: _Head(std::forward<_UHead>(__h)) { }
  442c30:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  442c34:	48 89 c7             	mov    %rax,%rdi
  442c37:	e8 01 a8 ff ff       	callq  43d43d <std::default_delete<x666::Literal>&& std::forward<std::default_delete<x666::Literal> >(std::remove_reference<std::default_delete<x666::Literal> >::type&)>
  442c3c:	48 89 c2             	mov    %rax,%rdx
  442c3f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  442c43:	48 89 d6             	mov    %rdx,%rsi
  442c46:	48 89 c7             	mov    %rax,%rdi
  442c49:	e8 d0 08 00 00       	callq  44351e <std::default_delete<x666::Expression>::default_delete<x666::Literal, void>(std::default_delete<x666::Literal> const&)>
  442c4e:	90                   	nop
  442c4f:	c9                   	leaveq 
  442c50:	c3                   	retq   
  442c51:	90                   	nop

0000000000442c52 <std::deque<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > >::_M_reallocate_map(unsigned long, bool)>:
    deque<_Tp, _Alloc>::
  442c52:	55                   	push   %rbp
  442c53:	48 89 e5             	mov    %rsp,%rbp
  442c56:	53                   	push   %rbx
  442c57:	48 83 ec 58          	sub    $0x58,%rsp
  442c5b:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
  442c5f:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
  442c63:	89 d0                	mov    %edx,%eax
  442c65:	88 45 ac             	mov    %al,-0x54(%rbp)
	= this->_M_impl._M_finish._M_node - this->_M_impl._M_start._M_node + 1;
  442c68:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  442c6c:	48 8b 40 48          	mov    0x48(%rax),%rax
  442c70:	48 89 c2             	mov    %rax,%rdx
  442c73:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  442c77:	48 8b 40 28          	mov    0x28(%rax),%rax
  442c7b:	48 29 c2             	sub    %rax,%rdx
  442c7e:	48 89 d0             	mov    %rdx,%rax
  442c81:	48 c1 f8 03          	sar    $0x3,%rax
  442c85:	48 83 c0 01          	add    $0x1,%rax
      const size_type __old_num_nodes
  442c89:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
      const size_type __new_num_nodes = __old_num_nodes + __nodes_to_add;
  442c8d:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  442c91:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  442c95:	48 01 d0             	add    %rdx,%rax
  442c98:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
  442c9c:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  442ca0:	48 8b 50 08          	mov    0x8(%rax),%rdx
  442ca4:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  442ca8:	48 01 c0             	add    %rax,%rax
  442cab:	48 39 c2             	cmp    %rax,%rdx
  442cae:	0f 86 aa 00 00 00    	jbe    442d5e <std::deque<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > >::_M_reallocate_map(unsigned long, bool)+0x10c>
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
  442cb4:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  442cb8:	48 8b 10             	mov    (%rax),%rdx
  442cbb:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  442cbf:	48 8b 40 08          	mov    0x8(%rax),%rax
					 - __new_num_nodes) / 2
  442cc3:	48 2b 45 d8          	sub    -0x28(%rbp),%rax
  442cc7:	48 d1 e8             	shr    %rax
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
  442cca:	48 8d 0c c5 00 00 00 	lea    0x0(,%rax,8),%rcx
  442cd1:	00 
	                 + (__add_at_front ? __nodes_to_add : 0);
  442cd2:	80 7d ac 00          	cmpb   $0x0,-0x54(%rbp)
  442cd6:	74 0a                	je     442ce2 <std::deque<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > >::_M_reallocate_map(unsigned long, bool)+0x90>
  442cd8:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  442cdc:	48 c1 e0 03          	shl    $0x3,%rax
  442ce0:	eb 05                	jmp    442ce7 <std::deque<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > >::_M_reallocate_map(unsigned long, bool)+0x95>
  442ce2:	b8 00 00 00 00       	mov    $0x0,%eax
  442ce7:	48 01 c8             	add    %rcx,%rax
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
  442cea:	48 01 d0             	add    %rdx,%rax
  442ced:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	  if (__new_nstart < this->_M_impl._M_start._M_node)
  442cf1:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  442cf5:	48 8b 40 28          	mov    0x28(%rax),%rax
  442cf9:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
  442cfd:	73 28                	jae    442d27 <std::deque<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > >::_M_reallocate_map(unsigned long, bool)+0xd5>
		      this->_M_impl._M_finish._M_node + 1,
  442cff:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  442d03:	48 8b 40 48          	mov    0x48(%rax),%rax
	    std::copy(this->_M_impl._M_start._M_node,
  442d07:	48 8d 48 08          	lea    0x8(%rax),%rcx
  442d0b:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  442d0f:	48 8b 40 28          	mov    0x28(%rax),%rax
  442d13:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  442d17:	48 89 ce             	mov    %rcx,%rsi
  442d1a:	48 89 c7             	mov    %rax,%rdi
  442d1d:	e8 0b 08 00 00       	callq  44352d <std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >** std::copy<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >**, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >**>(std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >**, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >**, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >**)>
  442d22:	e9 09 01 00 00       	jmpq   442e30 <std::deque<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > >::_M_reallocate_map(unsigned long, bool)+0x1de>
			       __new_nstart + __old_num_nodes);
  442d27:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  442d2b:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  442d32:	00 
	    std::copy_backward(this->_M_impl._M_start._M_node,
  442d33:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  442d37:	48 01 c2             	add    %rax,%rdx
			       this->_M_impl._M_finish._M_node + 1,
  442d3a:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  442d3e:	48 8b 40 48          	mov    0x48(%rax),%rax
	    std::copy_backward(this->_M_impl._M_start._M_node,
  442d42:	48 8d 48 08          	lea    0x8(%rax),%rcx
  442d46:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  442d4a:	48 8b 40 28          	mov    0x28(%rax),%rax
  442d4e:	48 89 ce             	mov    %rcx,%rsi
  442d51:	48 89 c7             	mov    %rax,%rdi
  442d54:	e8 20 08 00 00       	callq  443579 <std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >** std::copy_backward<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >**, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >**>(std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >**, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >**, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >**)>
  442d59:	e9 d2 00 00 00       	jmpq   442e30 <std::deque<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > >::_M_reallocate_map(unsigned long, bool)+0x1de>
	  size_type __new_map_size = this->_M_impl._M_map_size
  442d5e:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  442d62:	48 8b 58 08          	mov    0x8(%rax),%rbx
	                             + std::max(this->_M_impl._M_map_size,
  442d66:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  442d6a:	48 8d 50 08          	lea    0x8(%rax),%rdx
  442d6e:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
  442d72:	48 89 c6             	mov    %rax,%rsi
  442d75:	48 89 d7             	mov    %rdx,%rdi
  442d78:	e8 40 de ff ff       	callq  440bbd <unsigned long const& std::max<unsigned long>(unsigned long const&, unsigned long const&)>
  442d7d:	48 8b 00             	mov    (%rax),%rax
  442d80:	48 01 d8             	add    %rbx,%rax
	  size_type __new_map_size = this->_M_impl._M_map_size
  442d83:	48 83 c0 02          	add    $0x2,%rax
  442d87:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
	  _Map_pointer __new_map = this->_M_allocate_map(__new_map_size);
  442d8b:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  442d8f:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  442d93:	48 89 d6             	mov    %rdx,%rsi
  442d96:	48 89 c7             	mov    %rax,%rdi
  442d99:	e8 c4 f8 ff ff       	callq  442662 <std::_Deque_base<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > >::_M_allocate_map(unsigned long)>
  442d9e:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
  442da2:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  442da6:	48 2b 45 d8          	sub    -0x28(%rbp),%rax
  442daa:	48 d1 e8             	shr    %rax
  442dad:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  442db4:	00 
	                 + (__add_at_front ? __nodes_to_add : 0);
  442db5:	80 7d ac 00          	cmpb   $0x0,-0x54(%rbp)
  442db9:	74 0a                	je     442dc5 <std::deque<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > >::_M_reallocate_map(unsigned long, bool)+0x173>
  442dbb:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  442dbf:	48 c1 e0 03          	shl    $0x3,%rax
  442dc3:	eb 05                	jmp    442dca <std::deque<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > >::_M_reallocate_map(unsigned long, bool)+0x178>
  442dc5:	b8 00 00 00 00       	mov    $0x0,%eax
  442dca:	48 01 c2             	add    %rax,%rdx
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
  442dcd:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  442dd1:	48 01 d0             	add    %rdx,%rax
  442dd4:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
		    this->_M_impl._M_finish._M_node + 1,
  442dd8:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  442ddc:	48 8b 40 48          	mov    0x48(%rax),%rax
	  std::copy(this->_M_impl._M_start._M_node,
  442de0:	48 8d 48 08          	lea    0x8(%rax),%rcx
  442de4:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  442de8:	48 8b 40 28          	mov    0x28(%rax),%rax
  442dec:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  442df0:	48 89 ce             	mov    %rcx,%rsi
  442df3:	48 89 c7             	mov    %rax,%rdi
  442df6:	e8 32 07 00 00       	callq  44352d <std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >** std::copy<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >**, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >**>(std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >**, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >**, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >**)>
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
  442dfb:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  442dff:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  442e03:	48 8b 52 08          	mov    0x8(%rdx),%rdx
  442e07:	48 8b 4d b8          	mov    -0x48(%rbp),%rcx
  442e0b:	48 8b 09             	mov    (%rcx),%rcx
  442e0e:	48 89 ce             	mov    %rcx,%rsi
  442e11:	48 89 c7             	mov    %rax,%rdi
  442e14:	e8 09 0b ff ff       	callq  433922 <std::_Deque_base<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > >::_M_deallocate_map(std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >**, unsigned long)>
	  this->_M_impl._M_map = __new_map;
  442e19:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  442e1d:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  442e21:	48 89 10             	mov    %rdx,(%rax)
	  this->_M_impl._M_map_size = __new_map_size;
  442e24:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  442e28:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  442e2c:	48 89 50 08          	mov    %rdx,0x8(%rax)
      this->_M_impl._M_start._M_set_node(__new_nstart);
  442e30:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  442e34:	48 83 c0 10          	add    $0x10,%rax
  442e38:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  442e3c:	48 89 d6             	mov    %rdx,%rsi
  442e3f:	48 89 c7             	mov    %rax,%rdi
  442e42:	e8 59 da ff ff       	callq  4408a0 <std::_Deque_iterator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*>::_M_set_node(std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >**)>
      this->_M_impl._M_finish._M_set_node(__new_nstart + __old_num_nodes - 1);
  442e47:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  442e4b:	48 83 c0 30          	add    $0x30,%rax
  442e4f:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  442e53:	48 c1 e2 03          	shl    $0x3,%rdx
  442e57:	48 8d 4a f8          	lea    -0x8(%rdx),%rcx
  442e5b:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  442e5f:	48 01 ca             	add    %rcx,%rdx
  442e62:	48 89 d6             	mov    %rdx,%rsi
  442e65:	48 89 c7             	mov    %rax,%rdi
  442e68:	e8 33 da ff ff       	callq  4408a0 <std::_Deque_iterator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*>::_M_set_node(std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >**)>
    }
  442e6d:	90                   	nop
  442e6e:	48 83 c4 58          	add    $0x58,%rsp
  442e72:	5b                   	pop    %rbx
  442e73:	5d                   	pop    %rbp
  442e74:	c3                   	retq   

0000000000442e75 <x666::LineInfo** std::copy<x666::LineInfo**, x666::LineInfo**>(x666::LineInfo**, x666::LineInfo**, x666::LineInfo**)>:
   *  Note that the end of the output range is permitted to be contained
   *  within [first,last).
  */
  template<typename _II, typename _OI>
    inline _OI
    copy(_II __first, _II __last, _OI __result)
  442e75:	55                   	push   %rbp
  442e76:	48 89 e5             	mov    %rsp,%rbp
  442e79:	53                   	push   %rbx
  442e7a:	48 83 ec 28          	sub    $0x28,%rsp
  442e7e:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  442e82:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  442e86:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
	    typename iterator_traits<_II>::value_type>)
      __glibcxx_requires_valid_range(__first, __last);

      return (std::__copy_move_a2<__is_move_iterator<_II>::__value>
	      (std::__miter_base(__first), std::__miter_base(__last),
  442e8a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  442e8e:	48 89 c7             	mov    %rax,%rdi
  442e91:	e8 2f 07 00 00       	callq  4435c5 <x666::LineInfo** std::__miter_base<x666::LineInfo**>(x666::LineInfo**)>
  442e96:	48 89 c3             	mov    %rax,%rbx
  442e99:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  442e9d:	48 89 c7             	mov    %rax,%rdi
  442ea0:	e8 20 07 00 00       	callq  4435c5 <x666::LineInfo** std::__miter_base<x666::LineInfo**>(x666::LineInfo**)>
  442ea5:	48 89 c1             	mov    %rax,%rcx
	       __result));
  442ea8:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  442eac:	48 89 c2             	mov    %rax,%rdx
  442eaf:	48 89 de             	mov    %rbx,%rsi
  442eb2:	48 89 cf             	mov    %rcx,%rdi
  442eb5:	e8 19 07 00 00       	callq  4435d3 <x666::LineInfo** std::__copy_move_a2<false, x666::LineInfo**, x666::LineInfo**>(x666::LineInfo**, x666::LineInfo**, x666::LineInfo**)>
    }
  442eba:	48 83 c4 28          	add    $0x28,%rsp
  442ebe:	5b                   	pop    %rbx
  442ebf:	5d                   	pop    %rbp
  442ec0:	c3                   	retq   

0000000000442ec1 <x666::LineInfo** std::copy_backward<x666::LineInfo**, x666::LineInfo**>(x666::LineInfo**, x666::LineInfo**, x666::LineInfo**)>:
   *  Result may not be in the range (first,last].  Use copy instead.  Note
   *  that the start of the output range may overlap [first,last).
  */
  template<typename _BI1, typename _BI2>
    inline _BI2
    copy_backward(_BI1 __first, _BI1 __last, _BI2 __result)
  442ec1:	55                   	push   %rbp
  442ec2:	48 89 e5             	mov    %rsp,%rbp
  442ec5:	53                   	push   %rbx
  442ec6:	48 83 ec 28          	sub    $0x28,%rsp
  442eca:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  442ece:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  442ed2:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
	    typename iterator_traits<_BI1>::value_type,
	    typename iterator_traits<_BI2>::value_type>)
      __glibcxx_requires_valid_range(__first, __last);

      return (std::__copy_move_backward_a2<__is_move_iterator<_BI1>::__value>
	      (std::__miter_base(__first), std::__miter_base(__last),
  442ed6:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  442eda:	48 89 c7             	mov    %rax,%rdi
  442edd:	e8 e3 06 00 00       	callq  4435c5 <x666::LineInfo** std::__miter_base<x666::LineInfo**>(x666::LineInfo**)>
  442ee2:	48 89 c3             	mov    %rax,%rbx
  442ee5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  442ee9:	48 89 c7             	mov    %rax,%rdi
  442eec:	e8 d4 06 00 00       	callq  4435c5 <x666::LineInfo** std::__miter_base<x666::LineInfo**>(x666::LineInfo**)>
  442ef1:	48 89 c1             	mov    %rax,%rcx
	       __result));
  442ef4:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  442ef8:	48 89 c2             	mov    %rax,%rdx
  442efb:	48 89 de             	mov    %rbx,%rsi
  442efe:	48 89 cf             	mov    %rcx,%rdi
  442f01:	e8 25 07 00 00       	callq  44362b <x666::LineInfo** std::__copy_move_backward_a2<false, x666::LineInfo**, x666::LineInfo**>(x666::LineInfo**, x666::LineInfo**, x666::LineInfo**)>
    }
  442f06:	48 83 c4 28          	add    $0x28,%rsp
  442f0a:	5b                   	pop    %rbx
  442f0b:	5d                   	pop    %rbp
  442f0c:	c3                   	retq   
  442f0d:	90                   	nop

0000000000442f0e <__gnu_cxx::new_allocator<x666::LineInfo>::allocate(unsigned long, void const*)>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
  442f0e:	55                   	push   %rbp
  442f0f:	48 89 e5             	mov    %rsp,%rbp
  442f12:	48 83 ec 20          	sub    $0x20,%rsp
  442f16:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  442f1a:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  442f1e:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	if (__n > this->max_size())
  442f22:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  442f26:	48 89 c7             	mov    %rax,%rdi
  442f29:	e8 56 07 00 00       	callq  443684 <__gnu_cxx::new_allocator<x666::LineInfo>::max_size() const>
  442f2e:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  442f32:	0f 97 c0             	seta   %al
  442f35:	84 c0                	test   %al,%al
  442f37:	74 05                	je     442f3e <__gnu_cxx::new_allocator<x666::LineInfo>::allocate(unsigned long, void const*)+0x30>
	  std::__throw_bad_alloc();
  442f39:	e8 82 f7 fe ff       	callq  4326c0 <std::__throw_bad_alloc()@plt>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
  442f3e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  442f42:	48 c1 e0 05          	shl    $0x5,%rax
  442f46:	48 89 c7             	mov    %rax,%rdi
  442f49:	e8 a2 f8 fe ff       	callq  4327f0 <operator new(unsigned long)@plt>
      }
  442f4e:	c9                   	leaveq 
  442f4f:	c3                   	retq   

0000000000442f50 <std::allocator_traits<std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > >::max_size(std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > const&)>:
      max_size(const allocator_type& __a) noexcept
  442f50:	55                   	push   %rbp
  442f51:	48 89 e5             	mov    %rsp,%rbp
  442f54:	48 83 ec 10          	sub    $0x10,%rsp
  442f58:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return __a.max_size(); }
  442f5c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  442f60:	48 89 c7             	mov    %rax,%rdi
  442f63:	e8 30 07 00 00       	callq  443698 <__gnu_cxx::new_allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > >::max_size() const>
  442f68:	c9                   	leaveq 
  442f69:	c3                   	retq   

0000000000442f6a <std::_Vector_base<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > > >::_M_get_Tp_allocator() const>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
  442f6a:	55                   	push   %rbp
  442f6b:	48 89 e5             	mov    %rsp,%rbp
  442f6e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return *static_cast<const _Tp_alloc_type*>(&this->_M_impl); }
  442f72:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  442f76:	5d                   	pop    %rbp
  442f77:	c3                   	retq   

0000000000442f78 <__gnu_cxx::new_allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > >::allocate(unsigned long, void const*)>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
  442f78:	55                   	push   %rbp
  442f79:	48 89 e5             	mov    %rsp,%rbp
  442f7c:	48 83 ec 20          	sub    $0x20,%rsp
  442f80:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  442f84:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  442f88:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	if (__n > this->max_size())
  442f8c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  442f90:	48 89 c7             	mov    %rax,%rdi
  442f93:	e8 00 07 00 00       	callq  443698 <__gnu_cxx::new_allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > >::max_size() const>
  442f98:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  442f9c:	0f 97 c0             	seta   %al
  442f9f:	84 c0                	test   %al,%al
  442fa1:	74 05                	je     442fa8 <__gnu_cxx::new_allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > >::allocate(unsigned long, void const*)+0x30>
	  std::__throw_bad_alloc();
  442fa3:	e8 18 f7 fe ff       	callq  4326c0 <std::__throw_bad_alloc()@plt>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
  442fa8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  442fac:	48 c1 e0 03          	shl    $0x3,%rax
  442fb0:	48 89 c7             	mov    %rax,%rdi
  442fb3:	e8 38 f8 fe ff       	callq  4327f0 <operator new(unsigned long)@plt>
      }
  442fb8:	c9                   	leaveq 
  442fb9:	c3                   	retq   

0000000000442fba <std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >* std::uninitialized_copy<std::move_iterator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*>, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*>(std::move_iterator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*>, std::move_iterator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*>, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*)>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
  442fba:	55                   	push   %rbp
  442fbb:	48 89 e5             	mov    %rsp,%rbp
  442fbe:	48 83 ec 30          	sub    $0x30,%rsp
  442fc2:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  442fc6:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  442fca:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
  442fce:	c6 45 ff 01          	movb   $0x1,-0x1(%rbp)
	__uninit_copy(__first, __last, __result);
  442fd2:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  442fd6:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  442fda:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  442fde:	48 89 ce             	mov    %rcx,%rsi
  442fe1:	48 89 c7             	mov    %rax,%rdi
  442fe4:	e8 d4 06 00 00       	callq  4436bd <std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >* std::__uninitialized_copy<false>::__uninit_copy<std::move_iterator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*>, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*>(std::move_iterator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*>, std::move_iterator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*>, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*)>
    }
  442fe9:	c9                   	leaveq 
  442fea:	c3                   	retq   
  442feb:	90                   	nop

0000000000442fec <__gnu_cxx::new_allocator<x666::LexError>::max_size() const>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
  442fec:	55                   	push   %rbp
  442fed:	48 89 e5             	mov    %rsp,%rbp
  442ff0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return size_t(-1) / sizeof(_Tp); }
  442ff4:	48 b8 66 66 66 66 66 	movabs $0x666666666666666,%rax
  442ffb:	66 66 06 
  442ffe:	5d                   	pop    %rbp
  442fff:	c3                   	retq   

0000000000443000 <std::move_iterator<x666::LexError*>::operator*() const>:
      operator*() const
  443000:	55                   	push   %rbp
  443001:	48 89 e5             	mov    %rsp,%rbp
  443004:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return static_cast<reference>(*_M_current); }
  443008:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  44300c:	48 8b 00             	mov    (%rax),%rax
  44300f:	5d                   	pop    %rbp
  443010:	c3                   	retq   

0000000000443011 <x666::LexError* std::__uninitialized_copy<false>::__uninit_copy<std::move_iterator<x666::LexError*>, x666::LexError*>(std::move_iterator<x666::LexError*>, std::move_iterator<x666::LexError*>, x666::LexError*)>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
  443011:	55                   	push   %rbp
  443012:	48 89 e5             	mov    %rsp,%rbp
  443015:	53                   	push   %rbx
  443016:	48 83 ec 38          	sub    $0x38,%rsp
  44301a:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  44301e:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  443022:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
	  _ForwardIterator __cur = __result;
  443026:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  44302a:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	      for (; __first != __last; ++__first, (void)++__cur)
  44302e:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
  443032:	48 8d 45 d8          	lea    -0x28(%rbp),%rax
  443036:	48 89 d6             	mov    %rdx,%rsi
  443039:	48 89 c7             	mov    %rax,%rdi
  44303c:	e8 29 07 00 00       	callq  44376a <bool std::operator!=<x666::LexError*>(std::move_iterator<x666::LexError*> const&, std::move_iterator<x666::LexError*> const&)>
  443041:	84 c0                	test   %al,%al
  443043:	74 39                	je     44307e <x666::LexError* std::__uninitialized_copy<false>::__uninit_copy<std::move_iterator<x666::LexError*>, x666::LexError*>(std::move_iterator<x666::LexError*>, std::move_iterator<x666::LexError*>, x666::LexError*)+0x6d>
		std::_Construct(std::__addressof(*__cur), *__first);
  443045:	48 8d 45 d8          	lea    -0x28(%rbp),%rax
  443049:	48 89 c7             	mov    %rax,%rdi
  44304c:	e8 af ff ff ff       	callq  443000 <std::move_iterator<x666::LexError*>::operator*() const>
  443051:	48 89 c3             	mov    %rax,%rbx
  443054:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  443058:	48 89 c7             	mov    %rax,%rdi
  44305b:	e8 52 07 00 00       	callq  4437b2 <x666::LexError* std::__addressof<x666::LexError>(x666::LexError&)>
  443060:	48 89 de             	mov    %rbx,%rsi
  443063:	48 89 c7             	mov    %rax,%rdi
  443066:	e8 55 07 00 00       	callq  4437c0 <void std::_Construct<x666::LexError, x666::LexError>(x666::LexError*, x666::LexError&&)>
	      for (; __first != __last; ++__first, (void)++__cur)
  44306b:	48 8d 45 d8          	lea    -0x28(%rbp),%rax
  44306f:	48 89 c7             	mov    %rax,%rdi
  443072:	e8 1b 07 00 00       	callq  443792 <std::move_iterator<x666::LexError*>::operator++()>
  443077:	48 83 45 e8 28       	addq   $0x28,-0x18(%rbp)
  44307c:	eb b0                	jmp    44302e <x666::LexError* std::__uninitialized_copy<false>::__uninit_copy<std::move_iterator<x666::LexError*>, x666::LexError*>(std::move_iterator<x666::LexError*>, std::move_iterator<x666::LexError*>, x666::LexError*)+0x1d>
	      return __cur;
  44307e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  443082:	eb 33                	jmp    4430b7 <x666::LexError* std::__uninitialized_copy<false>::__uninit_copy<std::move_iterator<x666::LexError*>, x666::LexError*>(std::move_iterator<x666::LexError*>, std::move_iterator<x666::LexError*>, x666::LexError*)+0xa6>
	  __catch(...)
  443084:	48 89 c7             	mov    %rax,%rdi
  443087:	e8 54 f6 fe ff       	callq  4326e0 <__cxa_begin_catch@plt>
	      std::_Destroy(__result, __cur);
  44308c:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  443090:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  443094:	48 89 d6             	mov    %rdx,%rsi
  443097:	48 89 c7             	mov    %rax,%rdi
  44309a:	e8 7c 0c ff ff       	callq  433d1b <void std::_Destroy<x666::LexError*>(x666::LexError*, x666::LexError*)>
	      __throw_exception_again;
  44309f:	e8 dc f7 fe ff       	callq  432880 <__cxa_rethrow@plt>
  4430a4:	48 89 c3             	mov    %rax,%rbx
	  __catch(...)
  4430a7:	e8 14 f8 fe ff       	callq  4328c0 <__cxa_end_catch@plt>
  4430ac:	48 89 d8             	mov    %rbx,%rax
  4430af:	48 89 c7             	mov    %rax,%rdi
  4430b2:	e8 59 f8 fe ff       	callq  432910 <_Unwind_Resume@plt>
	}
  4430b7:	48 83 c4 38          	add    $0x38,%rsp
  4430bb:	5b                   	pop    %rbx
  4430bc:	5d                   	pop    %rbp
  4430bd:	c3                   	retq   

00000000004430be <std::deque<x666::Parser::BracketEntry, std::allocator<x666::Parser::BracketEntry> >::_M_reallocate_map(unsigned long, bool)>:
    deque<_Tp, _Alloc>::
  4430be:	55                   	push   %rbp
  4430bf:	48 89 e5             	mov    %rsp,%rbp
  4430c2:	53                   	push   %rbx
  4430c3:	48 83 ec 58          	sub    $0x58,%rsp
  4430c7:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
  4430cb:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
  4430cf:	89 d0                	mov    %edx,%eax
  4430d1:	88 45 ac             	mov    %al,-0x54(%rbp)
	= this->_M_impl._M_finish._M_node - this->_M_impl._M_start._M_node + 1;
  4430d4:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  4430d8:	48 8b 40 48          	mov    0x48(%rax),%rax
  4430dc:	48 89 c2             	mov    %rax,%rdx
  4430df:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  4430e3:	48 8b 40 28          	mov    0x28(%rax),%rax
  4430e7:	48 29 c2             	sub    %rax,%rdx
  4430ea:	48 89 d0             	mov    %rdx,%rax
  4430ed:	48 c1 f8 03          	sar    $0x3,%rax
  4430f1:	48 83 c0 01          	add    $0x1,%rax
      const size_type __old_num_nodes
  4430f5:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
      const size_type __new_num_nodes = __old_num_nodes + __nodes_to_add;
  4430f9:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  4430fd:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  443101:	48 01 d0             	add    %rdx,%rax
  443104:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
  443108:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  44310c:	48 8b 50 08          	mov    0x8(%rax),%rdx
  443110:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  443114:	48 01 c0             	add    %rax,%rax
  443117:	48 39 c2             	cmp    %rax,%rdx
  44311a:	0f 86 aa 00 00 00    	jbe    4431ca <std::deque<x666::Parser::BracketEntry, std::allocator<x666::Parser::BracketEntry> >::_M_reallocate_map(unsigned long, bool)+0x10c>
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
  443120:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  443124:	48 8b 10             	mov    (%rax),%rdx
  443127:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  44312b:	48 8b 40 08          	mov    0x8(%rax),%rax
					 - __new_num_nodes) / 2
  44312f:	48 2b 45 d8          	sub    -0x28(%rbp),%rax
  443133:	48 d1 e8             	shr    %rax
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
  443136:	48 8d 0c c5 00 00 00 	lea    0x0(,%rax,8),%rcx
  44313d:	00 
	                 + (__add_at_front ? __nodes_to_add : 0);
  44313e:	80 7d ac 00          	cmpb   $0x0,-0x54(%rbp)
  443142:	74 0a                	je     44314e <std::deque<x666::Parser::BracketEntry, std::allocator<x666::Parser::BracketEntry> >::_M_reallocate_map(unsigned long, bool)+0x90>
  443144:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  443148:	48 c1 e0 03          	shl    $0x3,%rax
  44314c:	eb 05                	jmp    443153 <std::deque<x666::Parser::BracketEntry, std::allocator<x666::Parser::BracketEntry> >::_M_reallocate_map(unsigned long, bool)+0x95>
  44314e:	b8 00 00 00 00       	mov    $0x0,%eax
  443153:	48 01 c8             	add    %rcx,%rax
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
  443156:	48 01 d0             	add    %rdx,%rax
  443159:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	  if (__new_nstart < this->_M_impl._M_start._M_node)
  44315d:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  443161:	48 8b 40 28          	mov    0x28(%rax),%rax
  443165:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
  443169:	73 28                	jae    443193 <std::deque<x666::Parser::BracketEntry, std::allocator<x666::Parser::BracketEntry> >::_M_reallocate_map(unsigned long, bool)+0xd5>
		      this->_M_impl._M_finish._M_node + 1,
  44316b:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  44316f:	48 8b 40 48          	mov    0x48(%rax),%rax
	    std::copy(this->_M_impl._M_start._M_node,
  443173:	48 8d 48 08          	lea    0x8(%rax),%rcx
  443177:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  44317b:	48 8b 40 28          	mov    0x28(%rax),%rax
  44317f:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  443183:	48 89 ce             	mov    %rcx,%rsi
  443186:	48 89 c7             	mov    %rax,%rdi
  443189:	e8 94 06 00 00       	callq  443822 <x666::Parser::BracketEntry** std::copy<x666::Parser::BracketEntry**, x666::Parser::BracketEntry**>(x666::Parser::BracketEntry**, x666::Parser::BracketEntry**, x666::Parser::BracketEntry**)>
  44318e:	e9 09 01 00 00       	jmpq   44329c <std::deque<x666::Parser::BracketEntry, std::allocator<x666::Parser::BracketEntry> >::_M_reallocate_map(unsigned long, bool)+0x1de>
			       __new_nstart + __old_num_nodes);
  443193:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  443197:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  44319e:	00 
	    std::copy_backward(this->_M_impl._M_start._M_node,
  44319f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4431a3:	48 01 c2             	add    %rax,%rdx
			       this->_M_impl._M_finish._M_node + 1,
  4431a6:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  4431aa:	48 8b 40 48          	mov    0x48(%rax),%rax
	    std::copy_backward(this->_M_impl._M_start._M_node,
  4431ae:	48 8d 48 08          	lea    0x8(%rax),%rcx
  4431b2:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  4431b6:	48 8b 40 28          	mov    0x28(%rax),%rax
  4431ba:	48 89 ce             	mov    %rcx,%rsi
  4431bd:	48 89 c7             	mov    %rax,%rdi
  4431c0:	e8 a9 06 00 00       	callq  44386e <x666::Parser::BracketEntry** std::copy_backward<x666::Parser::BracketEntry**, x666::Parser::BracketEntry**>(x666::Parser::BracketEntry**, x666::Parser::BracketEntry**, x666::Parser::BracketEntry**)>
  4431c5:	e9 d2 00 00 00       	jmpq   44329c <std::deque<x666::Parser::BracketEntry, std::allocator<x666::Parser::BracketEntry> >::_M_reallocate_map(unsigned long, bool)+0x1de>
	  size_type __new_map_size = this->_M_impl._M_map_size
  4431ca:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  4431ce:	48 8b 58 08          	mov    0x8(%rax),%rbx
	                             + std::max(this->_M_impl._M_map_size,
  4431d2:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  4431d6:	48 8d 50 08          	lea    0x8(%rax),%rdx
  4431da:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
  4431de:	48 89 c6             	mov    %rax,%rsi
  4431e1:	48 89 d7             	mov    %rdx,%rdi
  4431e4:	e8 d4 d9 ff ff       	callq  440bbd <unsigned long const& std::max<unsigned long>(unsigned long const&, unsigned long const&)>
  4431e9:	48 8b 00             	mov    (%rax),%rax
  4431ec:	48 01 d8             	add    %rbx,%rax
	  size_type __new_map_size = this->_M_impl._M_map_size
  4431ef:	48 83 c0 02          	add    $0x2,%rax
  4431f3:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
	  _Map_pointer __new_map = this->_M_allocate_map(__new_map_size);
  4431f7:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  4431fb:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  4431ff:	48 89 d6             	mov    %rdx,%rsi
  443202:	48 89 c7             	mov    %rax,%rdi
  443205:	e8 e4 f6 ff ff       	callq  4428ee <std::_Deque_base<x666::Parser::BracketEntry, std::allocator<x666::Parser::BracketEntry> >::_M_allocate_map(unsigned long)>
  44320a:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
  44320e:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  443212:	48 2b 45 d8          	sub    -0x28(%rbp),%rax
  443216:	48 d1 e8             	shr    %rax
  443219:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  443220:	00 
	                 + (__add_at_front ? __nodes_to_add : 0);
  443221:	80 7d ac 00          	cmpb   $0x0,-0x54(%rbp)
  443225:	74 0a                	je     443231 <std::deque<x666::Parser::BracketEntry, std::allocator<x666::Parser::BracketEntry> >::_M_reallocate_map(unsigned long, bool)+0x173>
  443227:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  44322b:	48 c1 e0 03          	shl    $0x3,%rax
  44322f:	eb 05                	jmp    443236 <std::deque<x666::Parser::BracketEntry, std::allocator<x666::Parser::BracketEntry> >::_M_reallocate_map(unsigned long, bool)+0x178>
  443231:	b8 00 00 00 00       	mov    $0x0,%eax
  443236:	48 01 c2             	add    %rax,%rdx
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
  443239:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  44323d:	48 01 d0             	add    %rdx,%rax
  443240:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
		    this->_M_impl._M_finish._M_node + 1,
  443244:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  443248:	48 8b 40 48          	mov    0x48(%rax),%rax
	  std::copy(this->_M_impl._M_start._M_node,
  44324c:	48 8d 48 08          	lea    0x8(%rax),%rcx
  443250:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  443254:	48 8b 40 28          	mov    0x28(%rax),%rax
  443258:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  44325c:	48 89 ce             	mov    %rcx,%rsi
  44325f:	48 89 c7             	mov    %rax,%rdi
  443262:	e8 bb 05 00 00       	callq  443822 <x666::Parser::BracketEntry** std::copy<x666::Parser::BracketEntry**, x666::Parser::BracketEntry**>(x666::Parser::BracketEntry**, x666::Parser::BracketEntry**, x666::Parser::BracketEntry**)>
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
  443267:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  44326b:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  44326f:	48 8b 52 08          	mov    0x8(%rdx),%rdx
  443273:	48 8b 4d b8          	mov    -0x48(%rbp),%rcx
  443277:	48 8b 09             	mov    (%rcx),%rcx
  44327a:	48 89 ce             	mov    %rcx,%rsi
  44327d:	48 89 c7             	mov    %rax,%rdi
  443280:	e8 a9 09 ff ff       	callq  433c2e <std::_Deque_base<x666::Parser::BracketEntry, std::allocator<x666::Parser::BracketEntry> >::_M_deallocate_map(x666::Parser::BracketEntry**, unsigned long)>
	  this->_M_impl._M_map = __new_map;
  443285:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  443289:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  44328d:	48 89 10             	mov    %rdx,(%rax)
	  this->_M_impl._M_map_size = __new_map_size;
  443290:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  443294:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  443298:	48 89 50 08          	mov    %rdx,0x8(%rax)
      this->_M_impl._M_start._M_set_node(__new_nstart);
  44329c:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  4432a0:	48 83 c0 10          	add    $0x10,%rax
  4432a4:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  4432a8:	48 89 d6             	mov    %rdx,%rsi
  4432ab:	48 89 c7             	mov    %rax,%rdi
  4432ae:	e8 9d da ff ff       	callq  440d50 <std::_Deque_iterator<x666::Parser::BracketEntry, x666::Parser::BracketEntry&, x666::Parser::BracketEntry*>::_M_set_node(x666::Parser::BracketEntry**)>
      this->_M_impl._M_finish._M_set_node(__new_nstart + __old_num_nodes - 1);
  4432b3:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  4432b7:	48 83 c0 30          	add    $0x30,%rax
  4432bb:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  4432bf:	48 c1 e2 03          	shl    $0x3,%rdx
  4432c3:	48 8d 4a f8          	lea    -0x8(%rdx),%rcx
  4432c7:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  4432cb:	48 01 ca             	add    %rcx,%rdx
  4432ce:	48 89 d6             	mov    %rdx,%rsi
  4432d1:	48 89 c7             	mov    %rax,%rdi
  4432d4:	e8 77 da ff ff       	callq  440d50 <std::_Deque_iterator<x666::Parser::BracketEntry, x666::Parser::BracketEntry&, x666::Parser::BracketEntry*>::_M_set_node(x666::Parser::BracketEntry**)>
    }
  4432d9:	90                   	nop
  4432da:	48 83 c4 58          	add    $0x58,%rsp
  4432de:	5b                   	pop    %rbx
  4432df:	5d                   	pop    %rbp
  4432e0:	c3                   	retq   

00000000004432e1 <std::allocator_traits<std::allocator<x666::Parser::BracketEntry> >::allocate(std::allocator<x666::Parser::BracketEntry>&, unsigned long)>:
      allocate(allocator_type& __a, size_type __n)
  4432e1:	55                   	push   %rbp
  4432e2:	48 89 e5             	mov    %rsp,%rbp
  4432e5:	48 83 ec 10          	sub    $0x10,%rsp
  4432e9:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4432ed:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      { return __a.allocate(__n); }
  4432f1:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  4432f5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4432f9:	ba 00 00 00 00       	mov    $0x0,%edx
  4432fe:	48 89 ce             	mov    %rcx,%rsi
  443301:	48 89 c7             	mov    %rax,%rdi
  443304:	e8 b1 05 00 00       	callq  4438ba <__gnu_cxx::new_allocator<x666::Parser::BracketEntry>::allocate(unsigned long, void const*)>
  443309:	c9                   	leaveq 
  44330a:	c3                   	retq   
  44330b:	90                   	nop

000000000044330c <std::_Tuple_impl<1ul, std::default_delete<x666::Bracket> >::_Tuple_impl()>:
      constexpr _Tuple_impl()
  44330c:	55                   	push   %rbp
  44330d:	48 89 e5             	mov    %rsp,%rbp
  443310:	48 83 ec 10          	sub    $0x10,%rsp
  443314:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      : _Base() { }
  443318:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  44331c:	48 89 c7             	mov    %rax,%rdi
  44331f:	e8 d8 05 00 00       	callq  4438fc <std::_Head_base<1ul, std::default_delete<x666::Bracket>, true>::_Head_base()>
  443324:	90                   	nop
  443325:	c9                   	leaveq 
  443326:	c3                   	retq   
  443327:	90                   	nop

0000000000443328 <std::_Head_base<0ul, x666::Bracket*, false>::_Head_base()>:
      constexpr _Head_base()
  443328:	55                   	push   %rbp
  443329:	48 89 e5             	mov    %rsp,%rbp
  44332c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      : _M_head_impl() { }
  443330:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  443334:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  44333b:	90                   	nop
  44333c:	5d                   	pop    %rbp
  44333d:	c3                   	retq   

000000000044333e <std::_Head_base<0ul, x666::Bracket*, false>::_M_head(std::_Head_base<0ul, x666::Bracket*, false>&)>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
  44333e:	55                   	push   %rbp
  44333f:	48 89 e5             	mov    %rsp,%rbp
  443342:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  443346:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  44334a:	5d                   	pop    %rbp
  44334b:	c3                   	retq   

000000000044334c <std::_Tuple_impl<1ul, std::default_delete<x666::Bracket> >::_M_head(std::_Tuple_impl<1ul, std::default_delete<x666::Bracket> >&)>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
  44334c:	55                   	push   %rbp
  44334d:	48 89 e5             	mov    %rsp,%rbp
  443350:	48 83 ec 10          	sub    $0x10,%rsp
  443354:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  443358:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  44335c:	48 89 c7             	mov    %rax,%rdi
  44335f:	e8 a3 05 00 00       	callq  443907 <std::_Head_base<1ul, std::default_delete<x666::Bracket>, true>::_M_head(std::_Head_base<1ul, std::default_delete<x666::Bracket>, true>&)>
  443364:	c9                   	leaveq 
  443365:	c3                   	retq   

0000000000443366 <x666::Bracket* const& std::__get_helper<0ul, x666::Bracket*, std::default_delete<x666::Bracket> >(std::_Tuple_impl<0ul, x666::Bracket*, std::default_delete<x666::Bracket> > const&)>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
  443366:	55                   	push   %rbp
  443367:	48 89 e5             	mov    %rsp,%rbp
  44336a:	48 83 ec 10          	sub    $0x10,%rsp
  44336e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
  443372:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  443376:	48 89 c7             	mov    %rax,%rdi
  443379:	e8 97 05 00 00       	callq  443915 <std::_Tuple_impl<0ul, x666::Bracket*, std::default_delete<x666::Bracket> >::_M_head(std::_Tuple_impl<0ul, x666::Bracket*, std::default_delete<x666::Bracket> > const&)>
  44337e:	c9                   	leaveq 
  44337f:	c3                   	retq   

0000000000443380 <std::_Head_base<1ul, std::default_delete<x666::Expression>, true>::_Head_base<std::default_delete<x666::Bracket> >(std::default_delete<x666::Bracket>&&)>:
        constexpr _Head_base(_UHead&& __h)
  443380:	55                   	push   %rbp
  443381:	48 89 e5             	mov    %rsp,%rbp
  443384:	48 83 ec 10          	sub    $0x10,%rsp
  443388:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  44338c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	: _Head(std::forward<_UHead>(__h)) { }
  443390:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  443394:	48 89 c7             	mov    %rax,%rdi
  443397:	e8 03 b0 ff ff       	callq  43e39f <std::default_delete<x666::Bracket>&& std::forward<std::default_delete<x666::Bracket> >(std::remove_reference<std::default_delete<x666::Bracket> >::type&)>
  44339c:	48 89 c2             	mov    %rax,%rdx
  44339f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4433a3:	48 89 d6             	mov    %rdx,%rsi
  4433a6:	48 89 c7             	mov    %rax,%rdi
  4433a9:	e8 82 05 00 00       	callq  443930 <std::default_delete<x666::Expression>::default_delete<x666::Bracket, void>(std::default_delete<x666::Bracket> const&)>
  4433ae:	90                   	nop
  4433af:	c9                   	leaveq 
  4433b0:	c3                   	retq   

00000000004433b1 <std::allocator_traits<std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*> >::allocate(std::allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*>&, unsigned long)>:
      allocate(allocator_type& __a, size_type __n)
  4433b1:	55                   	push   %rbp
  4433b2:	48 89 e5             	mov    %rsp,%rbp
  4433b5:	48 83 ec 10          	sub    $0x10,%rsp
  4433b9:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4433bd:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      { return __a.allocate(__n); }
  4433c1:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  4433c5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4433c9:	ba 00 00 00 00       	mov    $0x0,%edx
  4433ce:	48 89 ce             	mov    %rcx,%rsi
  4433d1:	48 89 c7             	mov    %rax,%rdi
  4433d4:	e8 67 05 00 00       	callq  443940 <__gnu_cxx::new_allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*>::allocate(unsigned long, void const*)>
  4433d9:	c9                   	leaveq 
  4433da:	c3                   	retq   
  4433db:	90                   	nop

00000000004433dc <__gnu_cxx::new_allocator<x666::LineInfo>::new_allocator()>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
  4433dc:	55                   	push   %rbp
  4433dd:	48 89 e5             	mov    %rsp,%rbp
  4433e0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4433e4:	90                   	nop
  4433e5:	5d                   	pop    %rbp
  4433e6:	c3                   	retq   

00000000004433e7 <std::allocator_traits<std::allocator<x666::LineInfo*> >::allocate(std::allocator<x666::LineInfo*>&, unsigned long)>:
      allocate(allocator_type& __a, size_type __n)
  4433e7:	55                   	push   %rbp
  4433e8:	48 89 e5             	mov    %rsp,%rbp
  4433eb:	48 83 ec 10          	sub    $0x10,%rsp
  4433ef:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4433f3:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      { return __a.allocate(__n); }
  4433f7:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  4433fb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4433ff:	ba 00 00 00 00       	mov    $0x0,%edx
  443404:	48 89 ce             	mov    %rcx,%rsi
  443407:	48 89 c7             	mov    %rax,%rdi
  44340a:	e8 73 05 00 00       	callq  443982 <__gnu_cxx::new_allocator<x666::LineInfo*>::allocate(unsigned long, void const*)>
  44340f:	c9                   	leaveq 
  443410:	c3                   	retq   
  443411:	90                   	nop

0000000000443412 <__gnu_cxx::new_allocator<x666::Parser::BracketEntry>::new_allocator()>:
  443412:	55                   	push   %rbp
  443413:	48 89 e5             	mov    %rsp,%rbp
  443416:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  44341a:	90                   	nop
  44341b:	5d                   	pop    %rbp
  44341c:	c3                   	retq   

000000000044341d <std::allocator_traits<std::allocator<x666::Parser::BracketEntry*> >::allocate(std::allocator<x666::Parser::BracketEntry*>&, unsigned long)>:
      allocate(allocator_type& __a, size_type __n)
  44341d:	55                   	push   %rbp
  44341e:	48 89 e5             	mov    %rsp,%rbp
  443421:	48 83 ec 10          	sub    $0x10,%rsp
  443425:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  443429:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      { return __a.allocate(__n); }
  44342d:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  443431:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  443435:	ba 00 00 00 00       	mov    $0x0,%edx
  44343a:	48 89 ce             	mov    %rcx,%rsi
  44343d:	48 89 c7             	mov    %rax,%rdi
  443440:	e8 7f 05 00 00       	callq  4439c4 <__gnu_cxx::new_allocator<x666::Parser::BracketEntry*>::allocate(unsigned long, void const*)>
  443445:	c9                   	leaveq 
  443446:	c3                   	retq   
  443447:	90                   	nop

0000000000443448 <__gnu_cxx::__aligned_membuf<x666::LexError>::_M_ptr() const>:
      _M_ptr() const noexcept
  443448:	55                   	push   %rbp
  443449:	48 89 e5             	mov    %rsp,%rbp
  44344c:	48 83 ec 10          	sub    $0x10,%rsp
  443450:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return static_cast<const _Tp*>(_M_addr()); }
  443454:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  443458:	48 89 c7             	mov    %rax,%rdi
  44345b:	e8 a6 05 00 00       	callq  443a06 <__gnu_cxx::__aligned_membuf<x666::LexError>::_M_addr() const>
  443460:	c9                   	leaveq 
  443461:	c3                   	retq   

0000000000443462 <std::_Head_base<1ul, std::default_delete<x666::BinaryOp>, true>::_Head_base()>:
      constexpr _Head_base()
  443462:	55                   	push   %rbp
  443463:	48 89 e5             	mov    %rsp,%rbp
  443466:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      : _Head() { }
  44346a:	90                   	nop
  44346b:	5d                   	pop    %rbp
  44346c:	c3                   	retq   

000000000044346d <std::_Head_base<1ul, std::default_delete<x666::BinaryOp>, true>::_M_head(std::_Head_base<1ul, std::default_delete<x666::BinaryOp>, true>&)>:
      _M_head(_Head_base& __b) noexcept { return __b; }
  44346d:	55                   	push   %rbp
  44346e:	48 89 e5             	mov    %rsp,%rbp
  443471:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  443475:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  443479:	5d                   	pop    %rbp
  44347a:	c3                   	retq   

000000000044347b <std::_Tuple_impl<0ul, x666::BinaryOp*, std::default_delete<x666::BinaryOp> >::_M_head(std::_Tuple_impl<0ul, x666::BinaryOp*, std::default_delete<x666::BinaryOp> > const&)>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
  44347b:	55                   	push   %rbp
  44347c:	48 89 e5             	mov    %rsp,%rbp
  44347f:	48 83 ec 10          	sub    $0x10,%rsp
  443483:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  443487:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  44348b:	48 89 c7             	mov    %rax,%rdi
  44348e:	e8 81 05 00 00       	callq  443a14 <std::_Head_base<0ul, x666::BinaryOp*, false>::_M_head(std::_Head_base<0ul, x666::BinaryOp*, false> const&)>
  443493:	c9                   	leaveq 
  443494:	c3                   	retq   
  443495:	90                   	nop

0000000000443496 <std::default_delete<x666::Expression>::default_delete<x666::BinaryOp, void>(std::default_delete<x666::BinaryOp> const&)>:
        default_delete(const default_delete<_Up>&) noexcept { }
  443496:	55                   	push   %rbp
  443497:	48 89 e5             	mov    %rsp,%rbp
  44349a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  44349e:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  4434a2:	90                   	nop
  4434a3:	5d                   	pop    %rbp
  4434a4:	c3                   	retq   
  4434a5:	90                   	nop

00000000004434a6 <std::_Head_base<1ul, std::default_delete<x666::UnaryOp>, true>::_Head_base()>:
      constexpr _Head_base()
  4434a6:	55                   	push   %rbp
  4434a7:	48 89 e5             	mov    %rsp,%rbp
  4434aa:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      : _Head() { }
  4434ae:	90                   	nop
  4434af:	5d                   	pop    %rbp
  4434b0:	c3                   	retq   

00000000004434b1 <std::_Head_base<1ul, std::default_delete<x666::UnaryOp>, true>::_M_head(std::_Head_base<1ul, std::default_delete<x666::UnaryOp>, true>&)>:
      _M_head(_Head_base& __b) noexcept { return __b; }
  4434b1:	55                   	push   %rbp
  4434b2:	48 89 e5             	mov    %rsp,%rbp
  4434b5:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4434b9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4434bd:	5d                   	pop    %rbp
  4434be:	c3                   	retq   

00000000004434bf <std::_Tuple_impl<0ul, x666::UnaryOp*, std::default_delete<x666::UnaryOp> >::_M_head(std::_Tuple_impl<0ul, x666::UnaryOp*, std::default_delete<x666::UnaryOp> > const&)>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
  4434bf:	55                   	push   %rbp
  4434c0:	48 89 e5             	mov    %rsp,%rbp
  4434c3:	48 83 ec 10          	sub    $0x10,%rsp
  4434c7:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4434cb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4434cf:	48 89 c7             	mov    %rax,%rdi
  4434d2:	e8 4b 05 00 00       	callq  443a22 <std::_Head_base<0ul, x666::UnaryOp*, false>::_M_head(std::_Head_base<0ul, x666::UnaryOp*, false> const&)>
  4434d7:	c9                   	leaveq 
  4434d8:	c3                   	retq   
  4434d9:	90                   	nop

00000000004434da <std::default_delete<x666::Expression>::default_delete<x666::UnaryOp, void>(std::default_delete<x666::UnaryOp> const&)>:
  4434da:	55                   	push   %rbp
  4434db:	48 89 e5             	mov    %rsp,%rbp
  4434de:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4434e2:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  4434e6:	90                   	nop
  4434e7:	5d                   	pop    %rbp
  4434e8:	c3                   	retq   
  4434e9:	90                   	nop

00000000004434ea <std::_Head_base<1ul, std::default_delete<x666::Literal>, true>::_Head_base()>:
      constexpr _Head_base()
  4434ea:	55                   	push   %rbp
  4434eb:	48 89 e5             	mov    %rsp,%rbp
  4434ee:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      : _Head() { }
  4434f2:	90                   	nop
  4434f3:	5d                   	pop    %rbp
  4434f4:	c3                   	retq   

00000000004434f5 <std::_Head_base<1ul, std::default_delete<x666::Literal>, true>::_M_head(std::_Head_base<1ul, std::default_delete<x666::Literal>, true>&)>:
      _M_head(_Head_base& __b) noexcept { return __b; }
  4434f5:	55                   	push   %rbp
  4434f6:	48 89 e5             	mov    %rsp,%rbp
  4434f9:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4434fd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  443501:	5d                   	pop    %rbp
  443502:	c3                   	retq   

0000000000443503 <std::_Tuple_impl<0ul, x666::Literal*, std::default_delete<x666::Literal> >::_M_head(std::_Tuple_impl<0ul, x666::Literal*, std::default_delete<x666::Literal> > const&)>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
  443503:	55                   	push   %rbp
  443504:	48 89 e5             	mov    %rsp,%rbp
  443507:	48 83 ec 10          	sub    $0x10,%rsp
  44350b:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  44350f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  443513:	48 89 c7             	mov    %rax,%rdi
  443516:	e8 15 05 00 00       	callq  443a30 <std::_Head_base<0ul, x666::Literal*, false>::_M_head(std::_Head_base<0ul, x666::Literal*, false> const&)>
  44351b:	c9                   	leaveq 
  44351c:	c3                   	retq   
  44351d:	90                   	nop

000000000044351e <std::default_delete<x666::Expression>::default_delete<x666::Literal, void>(std::default_delete<x666::Literal> const&)>:
  44351e:	55                   	push   %rbp
  44351f:	48 89 e5             	mov    %rsp,%rbp
  443522:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  443526:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  44352a:	90                   	nop
  44352b:	5d                   	pop    %rbp
  44352c:	c3                   	retq   

000000000044352d <std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >** std::copy<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >**, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >**>(std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >**, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >**, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >**)>:
    copy(_II __first, _II __last, _OI __result)
  44352d:	55                   	push   %rbp
  44352e:	48 89 e5             	mov    %rsp,%rbp
  443531:	53                   	push   %rbx
  443532:	48 83 ec 28          	sub    $0x28,%rsp
  443536:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  44353a:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  44353e:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
	      (std::__miter_base(__first), std::__miter_base(__last),
  443542:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  443546:	48 89 c7             	mov    %rax,%rdi
  443549:	e8 f0 04 00 00       	callq  443a3e <std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >** std::__miter_base<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >**>(std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >**)>
  44354e:	48 89 c3             	mov    %rax,%rbx
  443551:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  443555:	48 89 c7             	mov    %rax,%rdi
  443558:	e8 e1 04 00 00       	callq  443a3e <std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >** std::__miter_base<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >**>(std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >**)>
  44355d:	48 89 c1             	mov    %rax,%rcx
	       __result));
  443560:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  443564:	48 89 c2             	mov    %rax,%rdx
  443567:	48 89 de             	mov    %rbx,%rsi
  44356a:	48 89 cf             	mov    %rcx,%rdi
  44356d:	e8 da 04 00 00       	callq  443a4c <std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >** std::__copy_move_a2<false, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >**, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >**>(std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >**, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >**, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >**)>
    }
  443572:	48 83 c4 28          	add    $0x28,%rsp
  443576:	5b                   	pop    %rbx
  443577:	5d                   	pop    %rbp
  443578:	c3                   	retq   

0000000000443579 <std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >** std::copy_backward<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >**, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >**>(std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >**, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >**, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >**)>:
    copy_backward(_BI1 __first, _BI1 __last, _BI2 __result)
  443579:	55                   	push   %rbp
  44357a:	48 89 e5             	mov    %rsp,%rbp
  44357d:	53                   	push   %rbx
  44357e:	48 83 ec 28          	sub    $0x28,%rsp
  443582:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  443586:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  44358a:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
	      (std::__miter_base(__first), std::__miter_base(__last),
  44358e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  443592:	48 89 c7             	mov    %rax,%rdi
  443595:	e8 a4 04 00 00       	callq  443a3e <std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >** std::__miter_base<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >**>(std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >**)>
  44359a:	48 89 c3             	mov    %rax,%rbx
  44359d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4435a1:	48 89 c7             	mov    %rax,%rdi
  4435a4:	e8 95 04 00 00       	callq  443a3e <std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >** std::__miter_base<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >**>(std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >**)>
  4435a9:	48 89 c1             	mov    %rax,%rcx
	       __result));
  4435ac:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4435b0:	48 89 c2             	mov    %rax,%rdx
  4435b3:	48 89 de             	mov    %rbx,%rsi
  4435b6:	48 89 cf             	mov    %rcx,%rdi
  4435b9:	e8 e6 04 00 00       	callq  443aa4 <std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >** std::__copy_move_backward_a2<false, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >**, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >**>(std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >**, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >**, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >**)>
    }
  4435be:	48 83 c4 28          	add    $0x28,%rsp
  4435c2:	5b                   	pop    %rbx
  4435c3:	5d                   	pop    %rbp
  4435c4:	c3                   	retq   

00000000004435c5 <x666::LineInfo** std::__miter_base<x666::LineInfo**>(x666::LineInfo**)>:

  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    inline _Iterator
    __miter_base(_Iterator __it)
  4435c5:	55                   	push   %rbp
  4435c6:	48 89 e5             	mov    %rsp,%rbp
  4435c9:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return __it; }
  4435cd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4435d1:	5d                   	pop    %rbp
  4435d2:	c3                   	retq   

00000000004435d3 <x666::LineInfo** std::__copy_move_a2<false, x666::LineInfo**, x666::LineInfo**>(x666::LineInfo**, x666::LineInfo**, x666::LineInfo**)>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
  4435d3:	55                   	push   %rbp
  4435d4:	48 89 e5             	mov    %rsp,%rbp
  4435d7:	41 54                	push   %r12
  4435d9:	53                   	push   %rbx
  4435da:	48 83 ec 20          	sub    $0x20,%rsp
  4435de:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  4435e2:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  4435e6:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
      return _OI(std::__copy_move_a<_IsMove>(std::__niter_base(__first),
  4435ea:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4435ee:	48 89 c7             	mov    %rax,%rdi
  4435f1:	e8 06 05 00 00       	callq  443afc <x666::LineInfo** std::__niter_base<x666::LineInfo**>(x666::LineInfo**)>
  4435f6:	49 89 c4             	mov    %rax,%r12
  4435f9:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4435fd:	48 89 c7             	mov    %rax,%rdi
  443600:	e8 f7 04 00 00       	callq  443afc <x666::LineInfo** std::__niter_base<x666::LineInfo**>(x666::LineInfo**)>
  443605:	48 89 c3             	mov    %rax,%rbx
  443608:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  44360c:	48 89 c7             	mov    %rax,%rdi
  44360f:	e8 e8 04 00 00       	callq  443afc <x666::LineInfo** std::__niter_base<x666::LineInfo**>(x666::LineInfo**)>
					     std::__niter_base(__result)));
  443614:	4c 89 e2             	mov    %r12,%rdx
  443617:	48 89 de             	mov    %rbx,%rsi
  44361a:	48 89 c7             	mov    %rax,%rdi
  44361d:	e8 e8 04 00 00       	callq  443b0a <x666::LineInfo** std::__copy_move_a<false, x666::LineInfo**, x666::LineInfo**>(x666::LineInfo**, x666::LineInfo**, x666::LineInfo**)>
    }
  443622:	48 83 c4 20          	add    $0x20,%rsp
  443626:	5b                   	pop    %rbx
  443627:	41 5c                	pop    %r12
  443629:	5d                   	pop    %rbp
  44362a:	c3                   	retq   

000000000044362b <x666::LineInfo** std::__copy_move_backward_a2<false, x666::LineInfo**, x666::LineInfo**>(x666::LineInfo**, x666::LineInfo**, x666::LineInfo**)>:
    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
  44362b:	55                   	push   %rbp
  44362c:	48 89 e5             	mov    %rsp,%rbp
  44362f:	41 54                	push   %r12
  443631:	53                   	push   %rbx
  443632:	48 83 ec 20          	sub    $0x20,%rsp
  443636:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  44363a:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  44363e:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
		  (std::__niter_base(__first), std::__niter_base(__last),
  443642:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  443646:	48 89 c7             	mov    %rax,%rdi
  443649:	e8 ae 04 00 00       	callq  443afc <x666::LineInfo** std::__niter_base<x666::LineInfo**>(x666::LineInfo**)>
  44364e:	49 89 c4             	mov    %rax,%r12
  443651:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  443655:	48 89 c7             	mov    %rax,%rdi
  443658:	e8 9f 04 00 00       	callq  443afc <x666::LineInfo** std::__niter_base<x666::LineInfo**>(x666::LineInfo**)>
  44365d:	48 89 c3             	mov    %rax,%rbx
  443660:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  443664:	48 89 c7             	mov    %rax,%rdi
  443667:	e8 90 04 00 00       	callq  443afc <x666::LineInfo** std::__niter_base<x666::LineInfo**>(x666::LineInfo**)>
		   std::__niter_base(__result)));
  44366c:	4c 89 e2             	mov    %r12,%rdx
  44366f:	48 89 de             	mov    %rbx,%rsi
  443672:	48 89 c7             	mov    %rax,%rdi
  443675:	e8 c1 04 00 00       	callq  443b3b <x666::LineInfo** std::__copy_move_backward_a<false, x666::LineInfo**, x666::LineInfo**>(x666::LineInfo**, x666::LineInfo**, x666::LineInfo**)>
    }
  44367a:	48 83 c4 20          	add    $0x20,%rsp
  44367e:	5b                   	pop    %rbx
  44367f:	41 5c                	pop    %r12
  443681:	5d                   	pop    %rbp
  443682:	c3                   	retq   
  443683:	90                   	nop

0000000000443684 <__gnu_cxx::new_allocator<x666::LineInfo>::max_size() const>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
  443684:	55                   	push   %rbp
  443685:	48 89 e5             	mov    %rsp,%rbp
  443688:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return size_t(-1) / sizeof(_Tp); }
  44368c:	48 b8 ff ff ff ff ff 	movabs $0x7ffffffffffffff,%rax
  443693:	ff ff 07 
  443696:	5d                   	pop    %rbp
  443697:	c3                   	retq   

0000000000443698 <__gnu_cxx::new_allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > >::max_size() const>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
  443698:	55                   	push   %rbp
  443699:	48 89 e5             	mov    %rsp,%rbp
  44369c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return size_t(-1) / sizeof(_Tp); }
  4436a0:	48 b8 ff ff ff ff ff 	movabs $0x1fffffffffffffff,%rax
  4436a7:	ff ff 1f 
  4436aa:	5d                   	pop    %rbp
  4436ab:	c3                   	retq   

00000000004436ac <std::move_iterator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*>::operator*() const>:
      operator*() const
  4436ac:	55                   	push   %rbp
  4436ad:	48 89 e5             	mov    %rsp,%rbp
  4436b0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return static_cast<reference>(*_M_current); }
  4436b4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4436b8:	48 8b 00             	mov    (%rax),%rax
  4436bb:	5d                   	pop    %rbp
  4436bc:	c3                   	retq   

00000000004436bd <std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >* std::__uninitialized_copy<false>::__uninit_copy<std::move_iterator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*>, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*>(std::move_iterator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*>, std::move_iterator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*>, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*)>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
  4436bd:	55                   	push   %rbp
  4436be:	48 89 e5             	mov    %rsp,%rbp
  4436c1:	53                   	push   %rbx
  4436c2:	48 83 ec 38          	sub    $0x38,%rsp
  4436c6:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  4436ca:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  4436ce:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
	  _ForwardIterator __cur = __result;
  4436d2:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  4436d6:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	      for (; __first != __last; ++__first, (void)++__cur)
  4436da:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
  4436de:	48 8d 45 d8          	lea    -0x28(%rbp),%rax
  4436e2:	48 89 d6             	mov    %rdx,%rsi
  4436e5:	48 89 c7             	mov    %rax,%rdi
  4436e8:	e8 7f 04 00 00       	callq  443b6c <bool std::operator!=<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*>(std::move_iterator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*> const&, std::move_iterator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*> const&)>
  4436ed:	84 c0                	test   %al,%al
  4436ef:	74 39                	je     44372a <std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >* std::__uninitialized_copy<false>::__uninit_copy<std::move_iterator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*>, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*>(std::move_iterator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*>, std::move_iterator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*>, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*)+0x6d>
		std::_Construct(std::__addressof(*__cur), *__first);
  4436f1:	48 8d 45 d8          	lea    -0x28(%rbp),%rax
  4436f5:	48 89 c7             	mov    %rax,%rdi
  4436f8:	e8 af ff ff ff       	callq  4436ac <std::move_iterator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*>::operator*() const>
  4436fd:	48 89 c3             	mov    %rax,%rbx
  443700:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  443704:	48 89 c7             	mov    %rax,%rdi
  443707:	e8 ed 06 ff ff       	callq  433df9 <std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >* std::__addressof<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > >(std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&)>
  44370c:	48 89 de             	mov    %rbx,%rsi
  44370f:	48 89 c7             	mov    %rax,%rdi
  443712:	e8 9d 04 00 00       	callq  443bb4 <void std::_Construct<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > >(std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&&)>
	      for (; __first != __last; ++__first, (void)++__cur)
  443717:	48 8d 45 d8          	lea    -0x28(%rbp),%rax
  44371b:	48 89 c7             	mov    %rax,%rdi
  44371e:	e8 71 04 00 00       	callq  443b94 <std::move_iterator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*>::operator++()>
  443723:	48 83 45 e8 08       	addq   $0x8,-0x18(%rbp)
  443728:	eb b0                	jmp    4436da <std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >* std::__uninitialized_copy<false>::__uninit_copy<std::move_iterator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*>, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*>(std::move_iterator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*>, std::move_iterator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*>, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*)+0x1d>
	      return __cur;
  44372a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  44372e:	eb 33                	jmp    443763 <std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >* std::__uninitialized_copy<false>::__uninit_copy<std::move_iterator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*>, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*>(std::move_iterator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*>, std::move_iterator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*>, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*)+0xa6>
	  __catch(...)
  443730:	48 89 c7             	mov    %rax,%rdi
  443733:	e8 a8 ef fe ff       	callq  4326e0 <__cxa_begin_catch@plt>
	      std::_Destroy(__result, __cur);
  443738:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  44373c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  443740:	48 89 d6             	mov    %rdx,%rsi
  443743:	48 89 c7             	mov    %rax,%rdi
  443746:	e8 6a 01 ff ff       	callq  4338b5 <void std::_Destroy<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*>(std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*)>
	      __throw_exception_again;
  44374b:	e8 30 f1 fe ff       	callq  432880 <__cxa_rethrow@plt>
  443750:	48 89 c3             	mov    %rax,%rbx
	  __catch(...)
  443753:	e8 68 f1 fe ff       	callq  4328c0 <__cxa_end_catch@plt>
  443758:	48 89 d8             	mov    %rbx,%rax
  44375b:	48 89 c7             	mov    %rax,%rdi
  44375e:	e8 ad f1 fe ff       	callq  432910 <_Unwind_Resume@plt>
	}
  443763:	48 83 c4 38          	add    $0x38,%rsp
  443767:	5b                   	pop    %rbx
  443768:	5d                   	pop    %rbp
  443769:	c3                   	retq   

000000000044376a <bool std::operator!=<x666::LexError*>(std::move_iterator<x666::LexError*> const&, std::move_iterator<x666::LexError*> const&)>:
    operator!=(const move_iterator<_Iterator>& __x,
  44376a:	55                   	push   %rbp
  44376b:	48 89 e5             	mov    %rsp,%rbp
  44376e:	48 83 ec 10          	sub    $0x10,%rsp
  443772:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  443776:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    { return !(__x == __y); }
  44377a:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  44377e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  443782:	48 89 d6             	mov    %rdx,%rsi
  443785:	48 89 c7             	mov    %rax,%rdi
  443788:	e8 7c 04 00 00       	callq  443c09 <bool std::operator==<x666::LexError*>(std::move_iterator<x666::LexError*> const&, std::move_iterator<x666::LexError*> const&)>
  44378d:	83 f0 01             	xor    $0x1,%eax
  443790:	c9                   	leaveq 
  443791:	c3                   	retq   

0000000000443792 <std::move_iterator<x666::LexError*>::operator++()>:
      operator++()
  443792:	55                   	push   %rbp
  443793:	48 89 e5             	mov    %rsp,%rbp
  443796:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	++_M_current;
  44379a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  44379e:	48 8b 00             	mov    (%rax),%rax
  4437a1:	48 8d 50 28          	lea    0x28(%rax),%rdx
  4437a5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4437a9:	48 89 10             	mov    %rdx,(%rax)
	return *this;
  4437ac:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
      }
  4437b0:	5d                   	pop    %rbp
  4437b1:	c3                   	retq   

00000000004437b2 <x666::LexError* std::__addressof<x666::LexError>(x666::LexError&)>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
  4437b2:	55                   	push   %rbp
  4437b3:	48 89 e5             	mov    %rsp,%rbp
  4437b6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return __builtin_addressof(__r); }
  4437ba:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4437be:	5d                   	pop    %rbp
  4437bf:	c3                   	retq   

00000000004437c0 <void std::_Construct<x666::LexError, x666::LexError>(x666::LexError*, x666::LexError&&)>:
    _Construct(_T1* __p, _Args&&... __args)
  4437c0:	55                   	push   %rbp
  4437c1:	48 89 e5             	mov    %rsp,%rbp
  4437c4:	53                   	push   %rbx
  4437c5:	48 83 ec 18          	sub    $0x18,%rsp
  4437c9:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  4437cd:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    { ::new(static_cast<void*>(__p)) _T1(std::forward<_Args>(__args)...); }
  4437d1:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4437d5:	48 89 c7             	mov    %rax,%rdi
  4437d8:	e8 46 2c ff ff       	callq  436423 <x666::LexError&& std::forward<x666::LexError>(std::remove_reference<x666::LexError>::type&)>
  4437dd:	48 89 c3             	mov    %rax,%rbx
  4437e0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4437e4:	48 89 c6             	mov    %rax,%rsi
  4437e7:	bf 28 00 00 00       	mov    $0x28,%edi
  4437ec:	e8 9b 23 ff ff       	callq  435b8c <operator new(unsigned long, void*)>
  4437f1:	48 89 c1             	mov    %rax,%rcx
  4437f4:	48 8b 03             	mov    (%rbx),%rax
  4437f7:	48 8b 53 08          	mov    0x8(%rbx),%rdx
  4437fb:	48 89 01             	mov    %rax,(%rcx)
  4437fe:	48 89 51 08          	mov    %rdx,0x8(%rcx)
  443802:	48 8b 43 10          	mov    0x10(%rbx),%rax
  443806:	48 8b 53 18          	mov    0x18(%rbx),%rdx
  44380a:	48 89 41 10          	mov    %rax,0x10(%rcx)
  44380e:	48 89 51 18          	mov    %rdx,0x18(%rcx)
  443812:	48 8b 43 20          	mov    0x20(%rbx),%rax
  443816:	48 89 41 20          	mov    %rax,0x20(%rcx)
  44381a:	90                   	nop
  44381b:	48 83 c4 18          	add    $0x18,%rsp
  44381f:	5b                   	pop    %rbx
  443820:	5d                   	pop    %rbp
  443821:	c3                   	retq   

0000000000443822 <x666::Parser::BracketEntry** std::copy<x666::Parser::BracketEntry**, x666::Parser::BracketEntry**>(x666::Parser::BracketEntry**, x666::Parser::BracketEntry**, x666::Parser::BracketEntry**)>:
    copy(_II __first, _II __last, _OI __result)
  443822:	55                   	push   %rbp
  443823:	48 89 e5             	mov    %rsp,%rbp
  443826:	53                   	push   %rbx
  443827:	48 83 ec 28          	sub    $0x28,%rsp
  44382b:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  44382f:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  443833:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
	      (std::__miter_base(__first), std::__miter_base(__last),
  443837:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  44383b:	48 89 c7             	mov    %rax,%rdi
  44383e:	e8 ff 03 00 00       	callq  443c42 <x666::Parser::BracketEntry** std::__miter_base<x666::Parser::BracketEntry**>(x666::Parser::BracketEntry**)>
  443843:	48 89 c3             	mov    %rax,%rbx
  443846:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  44384a:	48 89 c7             	mov    %rax,%rdi
  44384d:	e8 f0 03 00 00       	callq  443c42 <x666::Parser::BracketEntry** std::__miter_base<x666::Parser::BracketEntry**>(x666::Parser::BracketEntry**)>
  443852:	48 89 c1             	mov    %rax,%rcx
	       __result));
  443855:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  443859:	48 89 c2             	mov    %rax,%rdx
  44385c:	48 89 de             	mov    %rbx,%rsi
  44385f:	48 89 cf             	mov    %rcx,%rdi
  443862:	e8 e9 03 00 00       	callq  443c50 <x666::Parser::BracketEntry** std::__copy_move_a2<false, x666::Parser::BracketEntry**, x666::Parser::BracketEntry**>(x666::Parser::BracketEntry**, x666::Parser::BracketEntry**, x666::Parser::BracketEntry**)>
    }
  443867:	48 83 c4 28          	add    $0x28,%rsp
  44386b:	5b                   	pop    %rbx
  44386c:	5d                   	pop    %rbp
  44386d:	c3                   	retq   

000000000044386e <x666::Parser::BracketEntry** std::copy_backward<x666::Parser::BracketEntry**, x666::Parser::BracketEntry**>(x666::Parser::BracketEntry**, x666::Parser::BracketEntry**, x666::Parser::BracketEntry**)>:
    copy_backward(_BI1 __first, _BI1 __last, _BI2 __result)
  44386e:	55                   	push   %rbp
  44386f:	48 89 e5             	mov    %rsp,%rbp
  443872:	53                   	push   %rbx
  443873:	48 83 ec 28          	sub    $0x28,%rsp
  443877:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  44387b:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  44387f:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
	      (std::__miter_base(__first), std::__miter_base(__last),
  443883:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  443887:	48 89 c7             	mov    %rax,%rdi
  44388a:	e8 b3 03 00 00       	callq  443c42 <x666::Parser::BracketEntry** std::__miter_base<x666::Parser::BracketEntry**>(x666::Parser::BracketEntry**)>
  44388f:	48 89 c3             	mov    %rax,%rbx
  443892:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  443896:	48 89 c7             	mov    %rax,%rdi
  443899:	e8 a4 03 00 00       	callq  443c42 <x666::Parser::BracketEntry** std::__miter_base<x666::Parser::BracketEntry**>(x666::Parser::BracketEntry**)>
  44389e:	48 89 c1             	mov    %rax,%rcx
	       __result));
  4438a1:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4438a5:	48 89 c2             	mov    %rax,%rdx
  4438a8:	48 89 de             	mov    %rbx,%rsi
  4438ab:	48 89 cf             	mov    %rcx,%rdi
  4438ae:	e8 f5 03 00 00       	callq  443ca8 <x666::Parser::BracketEntry** std::__copy_move_backward_a2<false, x666::Parser::BracketEntry**, x666::Parser::BracketEntry**>(x666::Parser::BracketEntry**, x666::Parser::BracketEntry**, x666::Parser::BracketEntry**)>
    }
  4438b3:	48 83 c4 28          	add    $0x28,%rsp
  4438b7:	5b                   	pop    %rbx
  4438b8:	5d                   	pop    %rbp
  4438b9:	c3                   	retq   

00000000004438ba <__gnu_cxx::new_allocator<x666::Parser::BracketEntry>::allocate(unsigned long, void const*)>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
  4438ba:	55                   	push   %rbp
  4438bb:	48 89 e5             	mov    %rsp,%rbp
  4438be:	48 83 ec 20          	sub    $0x20,%rsp
  4438c2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4438c6:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  4438ca:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	if (__n > this->max_size())
  4438ce:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4438d2:	48 89 c7             	mov    %rax,%rdi
  4438d5:	e8 26 04 00 00       	callq  443d00 <__gnu_cxx::new_allocator<x666::Parser::BracketEntry>::max_size() const>
  4438da:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  4438de:	0f 97 c0             	seta   %al
  4438e1:	84 c0                	test   %al,%al
  4438e3:	74 05                	je     4438ea <__gnu_cxx::new_allocator<x666::Parser::BracketEntry>::allocate(unsigned long, void const*)+0x30>
	  std::__throw_bad_alloc();
  4438e5:	e8 d6 ed fe ff       	callq  4326c0 <std::__throw_bad_alloc()@plt>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
  4438ea:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4438ee:	48 c1 e0 04          	shl    $0x4,%rax
  4438f2:	48 89 c7             	mov    %rax,%rdi
  4438f5:	e8 f6 ee fe ff       	callq  4327f0 <operator new(unsigned long)@plt>
      }
  4438fa:	c9                   	leaveq 
  4438fb:	c3                   	retq   

00000000004438fc <std::_Head_base<1ul, std::default_delete<x666::Bracket>, true>::_Head_base()>:
      constexpr _Head_base()
  4438fc:	55                   	push   %rbp
  4438fd:	48 89 e5             	mov    %rsp,%rbp
  443900:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      : _Head() { }
  443904:	90                   	nop
  443905:	5d                   	pop    %rbp
  443906:	c3                   	retq   

0000000000443907 <std::_Head_base<1ul, std::default_delete<x666::Bracket>, true>::_M_head(std::_Head_base<1ul, std::default_delete<x666::Bracket>, true>&)>:
      _M_head(_Head_base& __b) noexcept { return __b; }
  443907:	55                   	push   %rbp
  443908:	48 89 e5             	mov    %rsp,%rbp
  44390b:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  44390f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  443913:	5d                   	pop    %rbp
  443914:	c3                   	retq   

0000000000443915 <std::_Tuple_impl<0ul, x666::Bracket*, std::default_delete<x666::Bracket> >::_M_head(std::_Tuple_impl<0ul, x666::Bracket*, std::default_delete<x666::Bracket> > const&)>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
  443915:	55                   	push   %rbp
  443916:	48 89 e5             	mov    %rsp,%rbp
  443919:	48 83 ec 10          	sub    $0x10,%rsp
  44391d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  443921:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  443925:	48 89 c7             	mov    %rax,%rdi
  443928:	e8 e7 03 00 00       	callq  443d14 <std::_Head_base<0ul, x666::Bracket*, false>::_M_head(std::_Head_base<0ul, x666::Bracket*, false> const&)>
  44392d:	c9                   	leaveq 
  44392e:	c3                   	retq   
  44392f:	90                   	nop

0000000000443930 <std::default_delete<x666::Expression>::default_delete<x666::Bracket, void>(std::default_delete<x666::Bracket> const&)>:
  443930:	55                   	push   %rbp
  443931:	48 89 e5             	mov    %rsp,%rbp
  443934:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  443938:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  44393c:	90                   	nop
  44393d:	5d                   	pop    %rbp
  44393e:	c3                   	retq   
  44393f:	90                   	nop

0000000000443940 <__gnu_cxx::new_allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*>::allocate(unsigned long, void const*)>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
  443940:	55                   	push   %rbp
  443941:	48 89 e5             	mov    %rsp,%rbp
  443944:	48 83 ec 20          	sub    $0x20,%rsp
  443948:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  44394c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  443950:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	if (__n > this->max_size())
  443954:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  443958:	48 89 c7             	mov    %rax,%rdi
  44395b:	e8 c2 03 00 00       	callq  443d22 <__gnu_cxx::new_allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*>::max_size() const>
  443960:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  443964:	0f 97 c0             	seta   %al
  443967:	84 c0                	test   %al,%al
  443969:	74 05                	je     443970 <__gnu_cxx::new_allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*>::allocate(unsigned long, void const*)+0x30>
	  std::__throw_bad_alloc();
  44396b:	e8 50 ed fe ff       	callq  4326c0 <std::__throw_bad_alloc()@plt>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
  443970:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  443974:	48 c1 e0 03          	shl    $0x3,%rax
  443978:	48 89 c7             	mov    %rax,%rdi
  44397b:	e8 70 ee fe ff       	callq  4327f0 <operator new(unsigned long)@plt>
      }
  443980:	c9                   	leaveq 
  443981:	c3                   	retq   

0000000000443982 <__gnu_cxx::new_allocator<x666::LineInfo*>::allocate(unsigned long, void const*)>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
  443982:	55                   	push   %rbp
  443983:	48 89 e5             	mov    %rsp,%rbp
  443986:	48 83 ec 20          	sub    $0x20,%rsp
  44398a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  44398e:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  443992:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	if (__n > this->max_size())
  443996:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  44399a:	48 89 c7             	mov    %rax,%rdi
  44399d:	e8 94 03 00 00       	callq  443d36 <__gnu_cxx::new_allocator<x666::LineInfo*>::max_size() const>
  4439a2:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  4439a6:	0f 97 c0             	seta   %al
  4439a9:	84 c0                	test   %al,%al
  4439ab:	74 05                	je     4439b2 <__gnu_cxx::new_allocator<x666::LineInfo*>::allocate(unsigned long, void const*)+0x30>
	  std::__throw_bad_alloc();
  4439ad:	e8 0e ed fe ff       	callq  4326c0 <std::__throw_bad_alloc()@plt>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
  4439b2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4439b6:	48 c1 e0 03          	shl    $0x3,%rax
  4439ba:	48 89 c7             	mov    %rax,%rdi
  4439bd:	e8 2e ee fe ff       	callq  4327f0 <operator new(unsigned long)@plt>
      }
  4439c2:	c9                   	leaveq 
  4439c3:	c3                   	retq   

00000000004439c4 <__gnu_cxx::new_allocator<x666::Parser::BracketEntry*>::allocate(unsigned long, void const*)>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
  4439c4:	55                   	push   %rbp
  4439c5:	48 89 e5             	mov    %rsp,%rbp
  4439c8:	48 83 ec 20          	sub    $0x20,%rsp
  4439cc:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4439d0:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  4439d4:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	if (__n > this->max_size())
  4439d8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4439dc:	48 89 c7             	mov    %rax,%rdi
  4439df:	e8 66 03 00 00       	callq  443d4a <__gnu_cxx::new_allocator<x666::Parser::BracketEntry*>::max_size() const>
  4439e4:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  4439e8:	0f 97 c0             	seta   %al
  4439eb:	84 c0                	test   %al,%al
  4439ed:	74 05                	je     4439f4 <__gnu_cxx::new_allocator<x666::Parser::BracketEntry*>::allocate(unsigned long, void const*)+0x30>
	  std::__throw_bad_alloc();
  4439ef:	e8 cc ec fe ff       	callq  4326c0 <std::__throw_bad_alloc()@plt>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
  4439f4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4439f8:	48 c1 e0 03          	shl    $0x3,%rax
  4439fc:	48 89 c7             	mov    %rax,%rdi
  4439ff:	e8 ec ed fe ff       	callq  4327f0 <operator new(unsigned long)@plt>
      }
  443a04:	c9                   	leaveq 
  443a05:	c3                   	retq   

0000000000443a06 <__gnu_cxx::__aligned_membuf<x666::LexError>::_M_addr() const>:
      _M_addr() const noexcept
  443a06:	55                   	push   %rbp
  443a07:	48 89 e5             	mov    %rsp,%rbp
  443a0a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return static_cast<const void*>(&_M_storage); }
  443a0e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  443a12:	5d                   	pop    %rbp
  443a13:	c3                   	retq   

0000000000443a14 <std::_Head_base<0ul, x666::BinaryOp*, false>::_M_head(std::_Head_base<0ul, x666::BinaryOp*, false> const&)>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
  443a14:	55                   	push   %rbp
  443a15:	48 89 e5             	mov    %rsp,%rbp
  443a18:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  443a1c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  443a20:	5d                   	pop    %rbp
  443a21:	c3                   	retq   

0000000000443a22 <std::_Head_base<0ul, x666::UnaryOp*, false>::_M_head(std::_Head_base<0ul, x666::UnaryOp*, false> const&)>:
  443a22:	55                   	push   %rbp
  443a23:	48 89 e5             	mov    %rsp,%rbp
  443a26:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  443a2a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  443a2e:	5d                   	pop    %rbp
  443a2f:	c3                   	retq   

0000000000443a30 <std::_Head_base<0ul, x666::Literal*, false>::_M_head(std::_Head_base<0ul, x666::Literal*, false> const&)>:
  443a30:	55                   	push   %rbp
  443a31:	48 89 e5             	mov    %rsp,%rbp
  443a34:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  443a38:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  443a3c:	5d                   	pop    %rbp
  443a3d:	c3                   	retq   

0000000000443a3e <std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >** std::__miter_base<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >**>(std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >**)>:
    __miter_base(_Iterator __it)
  443a3e:	55                   	push   %rbp
  443a3f:	48 89 e5             	mov    %rsp,%rbp
  443a42:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return __it; }
  443a46:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  443a4a:	5d                   	pop    %rbp
  443a4b:	c3                   	retq   

0000000000443a4c <std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >** std::__copy_move_a2<false, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >**, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >**>(std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >**, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >**, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >**)>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
  443a4c:	55                   	push   %rbp
  443a4d:	48 89 e5             	mov    %rsp,%rbp
  443a50:	41 54                	push   %r12
  443a52:	53                   	push   %rbx
  443a53:	48 83 ec 20          	sub    $0x20,%rsp
  443a57:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  443a5b:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  443a5f:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
      return _OI(std::__copy_move_a<_IsMove>(std::__niter_base(__first),
  443a63:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  443a67:	48 89 c7             	mov    %rax,%rdi
  443a6a:	e8 ef 02 00 00       	callq  443d5e <std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >** std::__niter_base<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >**>(std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >**)>
  443a6f:	49 89 c4             	mov    %rax,%r12
  443a72:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  443a76:	48 89 c7             	mov    %rax,%rdi
  443a79:	e8 e0 02 00 00       	callq  443d5e <std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >** std::__niter_base<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >**>(std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >**)>
  443a7e:	48 89 c3             	mov    %rax,%rbx
  443a81:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  443a85:	48 89 c7             	mov    %rax,%rdi
  443a88:	e8 d1 02 00 00       	callq  443d5e <std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >** std::__niter_base<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >**>(std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >**)>
					     std::__niter_base(__result)));
  443a8d:	4c 89 e2             	mov    %r12,%rdx
  443a90:	48 89 de             	mov    %rbx,%rsi
  443a93:	48 89 c7             	mov    %rax,%rdi
  443a96:	e8 d1 02 00 00       	callq  443d6c <std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >** std::__copy_move_a<false, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >**, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >**>(std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >**, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >**, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >**)>
    }
  443a9b:	48 83 c4 20          	add    $0x20,%rsp
  443a9f:	5b                   	pop    %rbx
  443aa0:	41 5c                	pop    %r12
  443aa2:	5d                   	pop    %rbp
  443aa3:	c3                   	retq   

0000000000443aa4 <std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >** std::__copy_move_backward_a2<false, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >**, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >**>(std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >**, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >**, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >**)>:
    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
  443aa4:	55                   	push   %rbp
  443aa5:	48 89 e5             	mov    %rsp,%rbp
  443aa8:	41 54                	push   %r12
  443aaa:	53                   	push   %rbx
  443aab:	48 83 ec 20          	sub    $0x20,%rsp
  443aaf:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  443ab3:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  443ab7:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
		  (std::__niter_base(__first), std::__niter_base(__last),
  443abb:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  443abf:	48 89 c7             	mov    %rax,%rdi
  443ac2:	e8 97 02 00 00       	callq  443d5e <std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >** std::__niter_base<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >**>(std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >**)>
  443ac7:	49 89 c4             	mov    %rax,%r12
  443aca:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  443ace:	48 89 c7             	mov    %rax,%rdi
  443ad1:	e8 88 02 00 00       	callq  443d5e <std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >** std::__niter_base<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >**>(std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >**)>
  443ad6:	48 89 c3             	mov    %rax,%rbx
  443ad9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  443add:	48 89 c7             	mov    %rax,%rdi
  443ae0:	e8 79 02 00 00       	callq  443d5e <std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >** std::__niter_base<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >**>(std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >**)>
		   std::__niter_base(__result)));
  443ae5:	4c 89 e2             	mov    %r12,%rdx
  443ae8:	48 89 de             	mov    %rbx,%rsi
  443aeb:	48 89 c7             	mov    %rax,%rdi
  443aee:	e8 aa 02 00 00       	callq  443d9d <std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >** std::__copy_move_backward_a<false, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >**, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >**>(std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >**, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >**, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >**)>
    }
  443af3:	48 83 c4 20          	add    $0x20,%rsp
  443af7:	5b                   	pop    %rbx
  443af8:	41 5c                	pop    %r12
  443afa:	5d                   	pop    %rbp
  443afb:	c3                   	retq   

0000000000443afc <x666::LineInfo** std::__niter_base<x666::LineInfo**>(x666::LineInfo**)>:
    __niter_base(_Iterator __it)
  443afc:	55                   	push   %rbp
  443afd:	48 89 e5             	mov    %rsp,%rbp
  443b00:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return __it; }
  443b04:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  443b08:	5d                   	pop    %rbp
  443b09:	c3                   	retq   

0000000000443b0a <x666::LineInfo** std::__copy_move_a<false, x666::LineInfo**, x666::LineInfo**>(x666::LineInfo**, x666::LineInfo**, x666::LineInfo**)>:
    __copy_move_a(_II __first, _II __last, _OI __result)
  443b0a:	55                   	push   %rbp
  443b0b:	48 89 e5             	mov    %rsp,%rbp
  443b0e:	48 83 ec 30          	sub    $0x30,%rsp
  443b12:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  443b16:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  443b1a:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
      const bool __simple = (__is_trivial(_ValueTypeI)
  443b1e:	c6 45 ff 01          	movb   $0x1,-0x1(%rbp)
			      _Category>::__copy_m(__first, __last, __result);
  443b22:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  443b26:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  443b2a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  443b2e:	48 89 ce             	mov    %rcx,%rsi
  443b31:	48 89 c7             	mov    %rax,%rdi
  443b34:	e8 95 02 00 00       	callq  443dce <x666::LineInfo** std::__copy_move<false, true, std::random_access_iterator_tag>::__copy_m<x666::LineInfo*>(x666::LineInfo* const*, x666::LineInfo* const*, x666::LineInfo**)>
    }
  443b39:	c9                   	leaveq 
  443b3a:	c3                   	retq   

0000000000443b3b <x666::LineInfo** std::__copy_move_backward_a<false, x666::LineInfo**, x666::LineInfo**>(x666::LineInfo**, x666::LineInfo**, x666::LineInfo**)>:
    __copy_move_backward_a(_BI1 __first, _BI1 __last, _BI2 __result)
  443b3b:	55                   	push   %rbp
  443b3c:	48 89 e5             	mov    %rsp,%rbp
  443b3f:	48 83 ec 30          	sub    $0x30,%rsp
  443b43:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  443b47:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  443b4b:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
      const bool __simple = (__is_trivial(_ValueType1)
  443b4f:	c6 45 ff 01          	movb   $0x1,-0x1(%rbp)
								 __result);
  443b53:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  443b57:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  443b5b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  443b5f:	48 89 ce             	mov    %rcx,%rsi
  443b62:	48 89 c7             	mov    %rax,%rdi
  443b65:	e8 c9 02 00 00       	callq  443e33 <x666::LineInfo** std::__copy_move_backward<false, true, std::random_access_iterator_tag>::__copy_move_b<x666::LineInfo*>(x666::LineInfo* const*, x666::LineInfo* const*, x666::LineInfo**)>
    }
  443b6a:	c9                   	leaveq 
  443b6b:	c3                   	retq   

0000000000443b6c <bool std::operator!=<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*>(std::move_iterator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*> const&, std::move_iterator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*> const&)>:
    operator!=(const move_iterator<_Iterator>& __x,
  443b6c:	55                   	push   %rbp
  443b6d:	48 89 e5             	mov    %rsp,%rbp
  443b70:	48 83 ec 10          	sub    $0x10,%rsp
  443b74:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  443b78:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    { return !(__x == __y); }
  443b7c:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  443b80:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  443b84:	48 89 d6             	mov    %rdx,%rsi
  443b87:	48 89 c7             	mov    %rax,%rdi
  443b8a:	e8 2e 03 00 00       	callq  443ebd <bool std::operator==<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*>(std::move_iterator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*> const&, std::move_iterator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*> const&)>
  443b8f:	83 f0 01             	xor    $0x1,%eax
  443b92:	c9                   	leaveq 
  443b93:	c3                   	retq   

0000000000443b94 <std::move_iterator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*>::operator++()>:
      operator++()
  443b94:	55                   	push   %rbp
  443b95:	48 89 e5             	mov    %rsp,%rbp
  443b98:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	++_M_current;
  443b9c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  443ba0:	48 8b 00             	mov    (%rax),%rax
  443ba3:	48 8d 50 08          	lea    0x8(%rax),%rdx
  443ba7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  443bab:	48 89 10             	mov    %rdx,(%rax)
	return *this;
  443bae:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
      }
  443bb2:	5d                   	pop    %rbp
  443bb3:	c3                   	retq   

0000000000443bb4 <void std::_Construct<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > >(std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&&)>:
    _Construct(_T1* __p, _Args&&... __args)
  443bb4:	55                   	push   %rbp
  443bb5:	48 89 e5             	mov    %rsp,%rbp
  443bb8:	53                   	push   %rbx
  443bb9:	48 83 ec 18          	sub    $0x18,%rsp
  443bbd:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  443bc1:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    { ::new(static_cast<void*>(__p)) _T1(std::forward<_Args>(__args)...); }
  443bc5:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  443bc9:	48 89 c7             	mov    %rax,%rdi
  443bcc:	e8 75 7e ff ff       	callq  43ba46 <std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&& std::forward<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > >(std::remove_reference<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> > >::type&)>
  443bd1:	48 89 c3             	mov    %rax,%rbx
  443bd4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  443bd8:	48 89 c6             	mov    %rax,%rsi
  443bdb:	bf 08 00 00 00       	mov    $0x8,%edi
  443be0:	e8 a7 1f ff ff       	callq  435b8c <operator new(unsigned long, void*)>
  443be5:	48 89 de             	mov    %rbx,%rsi
  443be8:	48 89 c7             	mov    %rax,%rdi
  443beb:	e8 04 7e ff ff       	callq  43b9f4 <std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >::unique_ptr(std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >&&)>
  443bf0:	90                   	nop
  443bf1:	48 83 c4 18          	add    $0x18,%rsp
  443bf5:	5b                   	pop    %rbx
  443bf6:	5d                   	pop    %rbp
  443bf7:	c3                   	retq   

0000000000443bf8 <std::move_iterator<x666::LexError*>::base() const>:
      base() const
  443bf8:	55                   	push   %rbp
  443bf9:	48 89 e5             	mov    %rsp,%rbp
  443bfc:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_current; }
  443c00:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  443c04:	48 8b 00             	mov    (%rax),%rax
  443c07:	5d                   	pop    %rbp
  443c08:	c3                   	retq   

0000000000443c09 <bool std::operator==<x666::LexError*>(std::move_iterator<x666::LexError*> const&, std::move_iterator<x666::LexError*> const&)>:
    operator==(const move_iterator<_Iterator>& __x,
  443c09:	55                   	push   %rbp
  443c0a:	48 89 e5             	mov    %rsp,%rbp
  443c0d:	53                   	push   %rbx
  443c0e:	48 83 ec 18          	sub    $0x18,%rsp
  443c12:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  443c16:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    { return __x.base() == __y.base(); }
  443c1a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  443c1e:	48 89 c7             	mov    %rax,%rdi
  443c21:	e8 d2 ff ff ff       	callq  443bf8 <std::move_iterator<x666::LexError*>::base() const>
  443c26:	48 89 c3             	mov    %rax,%rbx
  443c29:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  443c2d:	48 89 c7             	mov    %rax,%rdi
  443c30:	e8 c3 ff ff ff       	callq  443bf8 <std::move_iterator<x666::LexError*>::base() const>
  443c35:	48 39 c3             	cmp    %rax,%rbx
  443c38:	0f 94 c0             	sete   %al
  443c3b:	48 83 c4 18          	add    $0x18,%rsp
  443c3f:	5b                   	pop    %rbx
  443c40:	5d                   	pop    %rbp
  443c41:	c3                   	retq   

0000000000443c42 <x666::Parser::BracketEntry** std::__miter_base<x666::Parser::BracketEntry**>(x666::Parser::BracketEntry**)>:
    __miter_base(_Iterator __it)
  443c42:	55                   	push   %rbp
  443c43:	48 89 e5             	mov    %rsp,%rbp
  443c46:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return __it; }
  443c4a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  443c4e:	5d                   	pop    %rbp
  443c4f:	c3                   	retq   

0000000000443c50 <x666::Parser::BracketEntry** std::__copy_move_a2<false, x666::Parser::BracketEntry**, x666::Parser::BracketEntry**>(x666::Parser::BracketEntry**, x666::Parser::BracketEntry**, x666::Parser::BracketEntry**)>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
  443c50:	55                   	push   %rbp
  443c51:	48 89 e5             	mov    %rsp,%rbp
  443c54:	41 54                	push   %r12
  443c56:	53                   	push   %rbx
  443c57:	48 83 ec 20          	sub    $0x20,%rsp
  443c5b:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  443c5f:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  443c63:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
      return _OI(std::__copy_move_a<_IsMove>(std::__niter_base(__first),
  443c67:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  443c6b:	48 89 c7             	mov    %rax,%rdi
  443c6e:	e8 83 02 00 00       	callq  443ef6 <x666::Parser::BracketEntry** std::__niter_base<x666::Parser::BracketEntry**>(x666::Parser::BracketEntry**)>
  443c73:	49 89 c4             	mov    %rax,%r12
  443c76:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  443c7a:	48 89 c7             	mov    %rax,%rdi
  443c7d:	e8 74 02 00 00       	callq  443ef6 <x666::Parser::BracketEntry** std::__niter_base<x666::Parser::BracketEntry**>(x666::Parser::BracketEntry**)>
  443c82:	48 89 c3             	mov    %rax,%rbx
  443c85:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  443c89:	48 89 c7             	mov    %rax,%rdi
  443c8c:	e8 65 02 00 00       	callq  443ef6 <x666::Parser::BracketEntry** std::__niter_base<x666::Parser::BracketEntry**>(x666::Parser::BracketEntry**)>
					     std::__niter_base(__result)));
  443c91:	4c 89 e2             	mov    %r12,%rdx
  443c94:	48 89 de             	mov    %rbx,%rsi
  443c97:	48 89 c7             	mov    %rax,%rdi
  443c9a:	e8 65 02 00 00       	callq  443f04 <x666::Parser::BracketEntry** std::__copy_move_a<false, x666::Parser::BracketEntry**, x666::Parser::BracketEntry**>(x666::Parser::BracketEntry**, x666::Parser::BracketEntry**, x666::Parser::BracketEntry**)>
    }
  443c9f:	48 83 c4 20          	add    $0x20,%rsp
  443ca3:	5b                   	pop    %rbx
  443ca4:	41 5c                	pop    %r12
  443ca6:	5d                   	pop    %rbp
  443ca7:	c3                   	retq   

0000000000443ca8 <x666::Parser::BracketEntry** std::__copy_move_backward_a2<false, x666::Parser::BracketEntry**, x666::Parser::BracketEntry**>(x666::Parser::BracketEntry**, x666::Parser::BracketEntry**, x666::Parser::BracketEntry**)>:
    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
  443ca8:	55                   	push   %rbp
  443ca9:	48 89 e5             	mov    %rsp,%rbp
  443cac:	41 54                	push   %r12
  443cae:	53                   	push   %rbx
  443caf:	48 83 ec 20          	sub    $0x20,%rsp
  443cb3:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  443cb7:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  443cbb:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
		  (std::__niter_base(__first), std::__niter_base(__last),
  443cbf:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  443cc3:	48 89 c7             	mov    %rax,%rdi
  443cc6:	e8 2b 02 00 00       	callq  443ef6 <x666::Parser::BracketEntry** std::__niter_base<x666::Parser::BracketEntry**>(x666::Parser::BracketEntry**)>
  443ccb:	49 89 c4             	mov    %rax,%r12
  443cce:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  443cd2:	48 89 c7             	mov    %rax,%rdi
  443cd5:	e8 1c 02 00 00       	callq  443ef6 <x666::Parser::BracketEntry** std::__niter_base<x666::Parser::BracketEntry**>(x666::Parser::BracketEntry**)>
  443cda:	48 89 c3             	mov    %rax,%rbx
  443cdd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  443ce1:	48 89 c7             	mov    %rax,%rdi
  443ce4:	e8 0d 02 00 00       	callq  443ef6 <x666::Parser::BracketEntry** std::__niter_base<x666::Parser::BracketEntry**>(x666::Parser::BracketEntry**)>
		   std::__niter_base(__result)));
  443ce9:	4c 89 e2             	mov    %r12,%rdx
  443cec:	48 89 de             	mov    %rbx,%rsi
  443cef:	48 89 c7             	mov    %rax,%rdi
  443cf2:	e8 3e 02 00 00       	callq  443f35 <x666::Parser::BracketEntry** std::__copy_move_backward_a<false, x666::Parser::BracketEntry**, x666::Parser::BracketEntry**>(x666::Parser::BracketEntry**, x666::Parser::BracketEntry**, x666::Parser::BracketEntry**)>
    }
  443cf7:	48 83 c4 20          	add    $0x20,%rsp
  443cfb:	5b                   	pop    %rbx
  443cfc:	41 5c                	pop    %r12
  443cfe:	5d                   	pop    %rbp
  443cff:	c3                   	retq   

0000000000443d00 <__gnu_cxx::new_allocator<x666::Parser::BracketEntry>::max_size() const>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
  443d00:	55                   	push   %rbp
  443d01:	48 89 e5             	mov    %rsp,%rbp
  443d04:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return size_t(-1) / sizeof(_Tp); }
  443d08:	48 b8 ff ff ff ff ff 	movabs $0xfffffffffffffff,%rax
  443d0f:	ff ff 0f 
  443d12:	5d                   	pop    %rbp
  443d13:	c3                   	retq   

0000000000443d14 <std::_Head_base<0ul, x666::Bracket*, false>::_M_head(std::_Head_base<0ul, x666::Bracket*, false> const&)>:
  443d14:	55                   	push   %rbp
  443d15:	48 89 e5             	mov    %rsp,%rbp
  443d18:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  443d1c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  443d20:	5d                   	pop    %rbp
  443d21:	c3                   	retq   

0000000000443d22 <__gnu_cxx::new_allocator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*>::max_size() const>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
  443d22:	55                   	push   %rbp
  443d23:	48 89 e5             	mov    %rsp,%rbp
  443d26:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return size_t(-1) / sizeof(_Tp); }
  443d2a:	48 b8 ff ff ff ff ff 	movabs $0x1fffffffffffffff,%rax
  443d31:	ff ff 1f 
  443d34:	5d                   	pop    %rbp
  443d35:	c3                   	retq   

0000000000443d36 <__gnu_cxx::new_allocator<x666::LineInfo*>::max_size() const>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
  443d36:	55                   	push   %rbp
  443d37:	48 89 e5             	mov    %rsp,%rbp
  443d3a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return size_t(-1) / sizeof(_Tp); }
  443d3e:	48 b8 ff ff ff ff ff 	movabs $0x1fffffffffffffff,%rax
  443d45:	ff ff 1f 
  443d48:	5d                   	pop    %rbp
  443d49:	c3                   	retq   

0000000000443d4a <__gnu_cxx::new_allocator<x666::Parser::BracketEntry*>::max_size() const>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
  443d4a:	55                   	push   %rbp
  443d4b:	48 89 e5             	mov    %rsp,%rbp
  443d4e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return size_t(-1) / sizeof(_Tp); }
  443d52:	48 b8 ff ff ff ff ff 	movabs $0x1fffffffffffffff,%rax
  443d59:	ff ff 1f 
  443d5c:	5d                   	pop    %rbp
  443d5d:	c3                   	retq   

0000000000443d5e <std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >** std::__niter_base<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >**>(std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >**)>:
    __niter_base(_Iterator __it)
  443d5e:	55                   	push   %rbp
  443d5f:	48 89 e5             	mov    %rsp,%rbp
  443d62:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return __it; }
  443d66:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  443d6a:	5d                   	pop    %rbp
  443d6b:	c3                   	retq   

0000000000443d6c <std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >** std::__copy_move_a<false, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >**, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >**>(std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >**, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >**, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >**)>:
    __copy_move_a(_II __first, _II __last, _OI __result)
  443d6c:	55                   	push   %rbp
  443d6d:	48 89 e5             	mov    %rsp,%rbp
  443d70:	48 83 ec 30          	sub    $0x30,%rsp
  443d74:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  443d78:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  443d7c:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
      const bool __simple = (__is_trivial(_ValueTypeI)
  443d80:	c6 45 ff 01          	movb   $0x1,-0x1(%rbp)
			      _Category>::__copy_m(__first, __last, __result);
  443d84:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  443d88:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  443d8c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  443d90:	48 89 ce             	mov    %rcx,%rsi
  443d93:	48 89 c7             	mov    %rax,%rdi
  443d96:	e8 cb 01 00 00       	callq  443f66 <std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >** std::__copy_move<false, true, std::random_access_iterator_tag>::__copy_m<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*>(std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >* const*, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >* const*, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >**)>
    }
  443d9b:	c9                   	leaveq 
  443d9c:	c3                   	retq   

0000000000443d9d <std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >** std::__copy_move_backward_a<false, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >**, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >**>(std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >**, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >**, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >**)>:
    __copy_move_backward_a(_BI1 __first, _BI1 __last, _BI2 __result)
  443d9d:	55                   	push   %rbp
  443d9e:	48 89 e5             	mov    %rsp,%rbp
  443da1:	48 83 ec 30          	sub    $0x30,%rsp
  443da5:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  443da9:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  443dad:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
      const bool __simple = (__is_trivial(_ValueType1)
  443db1:	c6 45 ff 01          	movb   $0x1,-0x1(%rbp)
								 __result);
  443db5:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  443db9:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  443dbd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  443dc1:	48 89 ce             	mov    %rcx,%rsi
  443dc4:	48 89 c7             	mov    %rax,%rdi
  443dc7:	e8 ff 01 00 00       	callq  443fcb <std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >** std::__copy_move_backward<false, true, std::random_access_iterator_tag>::__copy_move_b<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*>(std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >* const*, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >* const*, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >**)>
    }
  443dcc:	c9                   	leaveq 
  443dcd:	c3                   	retq   

0000000000443dce <x666::LineInfo** std::__copy_move<false, true, std::random_access_iterator_tag>::__copy_m<x666::LineInfo*>(x666::LineInfo* const*, x666::LineInfo* const*, x666::LineInfo**)>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
  443dce:	55                   	push   %rbp
  443dcf:	48 89 e5             	mov    %rsp,%rbp
  443dd2:	48 83 ec 30          	sub    $0x30,%rsp
  443dd6:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  443dda:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  443dde:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
	  const ptrdiff_t _Num = __last - __first;
  443de2:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  443de6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  443dea:	48 29 c2             	sub    %rax,%rdx
  443ded:	48 89 d0             	mov    %rdx,%rax
  443df0:	48 c1 f8 03          	sar    $0x3,%rax
  443df4:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	  if (_Num)
  443df8:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  443dfd:	74 1f                	je     443e1e <x666::LineInfo** std::__copy_move<false, true, std::random_access_iterator_tag>::__copy_m<x666::LineInfo*>(x666::LineInfo* const*, x666::LineInfo* const*, x666::LineInfo**)+0x50>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
  443dff:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  443e03:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  443e0a:	00 
  443e0b:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  443e0f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  443e13:	48 89 ce             	mov    %rcx,%rsi
  443e16:	48 89 c7             	mov    %rax,%rdi
  443e19:	e8 92 ea fe ff       	callq  4328b0 <memmove@plt>
	  return __result + _Num;
  443e1e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  443e22:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  443e29:	00 
  443e2a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  443e2e:	48 01 d0             	add    %rdx,%rax
	}
  443e31:	c9                   	leaveq 
  443e32:	c3                   	retq   

0000000000443e33 <x666::LineInfo** std::__copy_move_backward<false, true, std::random_access_iterator_tag>::__copy_move_b<x666::LineInfo*>(x666::LineInfo* const*, x666::LineInfo* const*, x666::LineInfo**)>:
	__copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
  443e33:	55                   	push   %rbp
  443e34:	48 89 e5             	mov    %rsp,%rbp
  443e37:	48 83 ec 30          	sub    $0x30,%rsp
  443e3b:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  443e3f:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  443e43:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
	  const ptrdiff_t _Num = __last - __first;
  443e47:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  443e4b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  443e4f:	48 29 c2             	sub    %rax,%rdx
  443e52:	48 89 d0             	mov    %rdx,%rax
  443e55:	48 c1 f8 03          	sar    $0x3,%rax
  443e59:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	  if (_Num)
  443e5d:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  443e62:	74 30                	je     443e94 <x666::LineInfo** std::__copy_move_backward<false, true, std::random_access_iterator_tag>::__copy_move_b<x666::LineInfo*>(x666::LineInfo* const*, x666::LineInfo* const*, x666::LineInfo**)+0x61>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
  443e64:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  443e68:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  443e6f:	00 
  443e70:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  443e74:	48 c1 e0 03          	shl    $0x3,%rax
  443e78:	48 f7 d8             	neg    %rax
  443e7b:	48 89 c1             	mov    %rax,%rcx
  443e7e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  443e82:	48 01 c8             	add    %rcx,%rax
  443e85:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  443e89:	48 89 ce             	mov    %rcx,%rsi
  443e8c:	48 89 c7             	mov    %rax,%rdi
  443e8f:	e8 1c ea fe ff       	callq  4328b0 <memmove@plt>
	  return __result - _Num;
  443e94:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  443e98:	48 c1 e0 03          	shl    $0x3,%rax
  443e9c:	48 f7 d8             	neg    %rax
  443e9f:	48 89 c2             	mov    %rax,%rdx
  443ea2:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  443ea6:	48 01 d0             	add    %rdx,%rax
	}
  443ea9:	c9                   	leaveq 
  443eaa:	c3                   	retq   
  443eab:	90                   	nop

0000000000443eac <std::move_iterator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*>::base() const>:
      base() const
  443eac:	55                   	push   %rbp
  443ead:	48 89 e5             	mov    %rsp,%rbp
  443eb0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_current; }
  443eb4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  443eb8:	48 8b 00             	mov    (%rax),%rax
  443ebb:	5d                   	pop    %rbp
  443ebc:	c3                   	retq   

0000000000443ebd <bool std::operator==<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*>(std::move_iterator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*> const&, std::move_iterator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*> const&)>:
    operator==(const move_iterator<_Iterator>& __x,
  443ebd:	55                   	push   %rbp
  443ebe:	48 89 e5             	mov    %rsp,%rbp
  443ec1:	53                   	push   %rbx
  443ec2:	48 83 ec 18          	sub    $0x18,%rsp
  443ec6:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  443eca:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    { return __x.base() == __y.base(); }
  443ece:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  443ed2:	48 89 c7             	mov    %rax,%rdi
  443ed5:	e8 d2 ff ff ff       	callq  443eac <std::move_iterator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*>::base() const>
  443eda:	48 89 c3             	mov    %rax,%rbx
  443edd:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  443ee1:	48 89 c7             	mov    %rax,%rdi
  443ee4:	e8 c3 ff ff ff       	callq  443eac <std::move_iterator<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*>::base() const>
  443ee9:	48 39 c3             	cmp    %rax,%rbx
  443eec:	0f 94 c0             	sete   %al
  443eef:	48 83 c4 18          	add    $0x18,%rsp
  443ef3:	5b                   	pop    %rbx
  443ef4:	5d                   	pop    %rbp
  443ef5:	c3                   	retq   

0000000000443ef6 <x666::Parser::BracketEntry** std::__niter_base<x666::Parser::BracketEntry**>(x666::Parser::BracketEntry**)>:
    __niter_base(_Iterator __it)
  443ef6:	55                   	push   %rbp
  443ef7:	48 89 e5             	mov    %rsp,%rbp
  443efa:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return __it; }
  443efe:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  443f02:	5d                   	pop    %rbp
  443f03:	c3                   	retq   

0000000000443f04 <x666::Parser::BracketEntry** std::__copy_move_a<false, x666::Parser::BracketEntry**, x666::Parser::BracketEntry**>(x666::Parser::BracketEntry**, x666::Parser::BracketEntry**, x666::Parser::BracketEntry**)>:
    __copy_move_a(_II __first, _II __last, _OI __result)
  443f04:	55                   	push   %rbp
  443f05:	48 89 e5             	mov    %rsp,%rbp
  443f08:	48 83 ec 30          	sub    $0x30,%rsp
  443f0c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  443f10:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  443f14:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
      const bool __simple = (__is_trivial(_ValueTypeI)
  443f18:	c6 45 ff 01          	movb   $0x1,-0x1(%rbp)
			      _Category>::__copy_m(__first, __last, __result);
  443f1c:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  443f20:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  443f24:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  443f28:	48 89 ce             	mov    %rcx,%rsi
  443f2b:	48 89 c7             	mov    %rax,%rdi
  443f2e:	e8 10 01 00 00       	callq  444043 <x666::Parser::BracketEntry** std::__copy_move<false, true, std::random_access_iterator_tag>::__copy_m<x666::Parser::BracketEntry*>(x666::Parser::BracketEntry* const*, x666::Parser::BracketEntry* const*, x666::Parser::BracketEntry**)>
    }
  443f33:	c9                   	leaveq 
  443f34:	c3                   	retq   

0000000000443f35 <x666::Parser::BracketEntry** std::__copy_move_backward_a<false, x666::Parser::BracketEntry**, x666::Parser::BracketEntry**>(x666::Parser::BracketEntry**, x666::Parser::BracketEntry**, x666::Parser::BracketEntry**)>:
    __copy_move_backward_a(_BI1 __first, _BI1 __last, _BI2 __result)
  443f35:	55                   	push   %rbp
  443f36:	48 89 e5             	mov    %rsp,%rbp
  443f39:	48 83 ec 30          	sub    $0x30,%rsp
  443f3d:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  443f41:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  443f45:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
      const bool __simple = (__is_trivial(_ValueType1)
  443f49:	c6 45 ff 01          	movb   $0x1,-0x1(%rbp)
								 __result);
  443f4d:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  443f51:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  443f55:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  443f59:	48 89 ce             	mov    %rcx,%rsi
  443f5c:	48 89 c7             	mov    %rax,%rdi
  443f5f:	e8 44 01 00 00       	callq  4440a8 <x666::Parser::BracketEntry** std::__copy_move_backward<false, true, std::random_access_iterator_tag>::__copy_move_b<x666::Parser::BracketEntry*>(x666::Parser::BracketEntry* const*, x666::Parser::BracketEntry* const*, x666::Parser::BracketEntry**)>
    }
  443f64:	c9                   	leaveq 
  443f65:	c3                   	retq   

0000000000443f66 <std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >** std::__copy_move<false, true, std::random_access_iterator_tag>::__copy_m<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*>(std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >* const*, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >* const*, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >**)>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
  443f66:	55                   	push   %rbp
  443f67:	48 89 e5             	mov    %rsp,%rbp
  443f6a:	48 83 ec 30          	sub    $0x30,%rsp
  443f6e:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  443f72:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  443f76:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
	  const ptrdiff_t _Num = __last - __first;
  443f7a:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  443f7e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  443f82:	48 29 c2             	sub    %rax,%rdx
  443f85:	48 89 d0             	mov    %rdx,%rax
  443f88:	48 c1 f8 03          	sar    $0x3,%rax
  443f8c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	  if (_Num)
  443f90:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  443f95:	74 1f                	je     443fb6 <std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >** std::__copy_move<false, true, std::random_access_iterator_tag>::__copy_m<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*>(std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >* const*, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >* const*, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >**)+0x50>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
  443f97:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  443f9b:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  443fa2:	00 
  443fa3:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  443fa7:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  443fab:	48 89 ce             	mov    %rcx,%rsi
  443fae:	48 89 c7             	mov    %rax,%rdi
  443fb1:	e8 fa e8 fe ff       	callq  4328b0 <memmove@plt>
	  return __result + _Num;
  443fb6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  443fba:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  443fc1:	00 
  443fc2:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  443fc6:	48 01 d0             	add    %rdx,%rax
	}
  443fc9:	c9                   	leaveq 
  443fca:	c3                   	retq   

0000000000443fcb <std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >** std::__copy_move_backward<false, true, std::random_access_iterator_tag>::__copy_move_b<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*>(std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >* const*, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >* const*, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >**)>:
	__copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
  443fcb:	55                   	push   %rbp
  443fcc:	48 89 e5             	mov    %rsp,%rbp
  443fcf:	48 83 ec 30          	sub    $0x30,%rsp
  443fd3:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  443fd7:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  443fdb:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
	  const ptrdiff_t _Num = __last - __first;
  443fdf:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  443fe3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  443fe7:	48 29 c2             	sub    %rax,%rdx
  443fea:	48 89 d0             	mov    %rdx,%rax
  443fed:	48 c1 f8 03          	sar    $0x3,%rax
  443ff1:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	  if (_Num)
  443ff5:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  443ffa:	74 30                	je     44402c <std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >** std::__copy_move_backward<false, true, std::random_access_iterator_tag>::__copy_move_b<std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >*>(std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >* const*, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >* const*, std::unique_ptr<x666::Expression, std::default_delete<x666::Expression> >**)+0x61>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
  443ffc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  444000:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  444007:	00 
  444008:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  44400c:	48 c1 e0 03          	shl    $0x3,%rax
  444010:	48 f7 d8             	neg    %rax
  444013:	48 89 c1             	mov    %rax,%rcx
  444016:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  44401a:	48 01 c8             	add    %rcx,%rax
  44401d:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  444021:	48 89 ce             	mov    %rcx,%rsi
  444024:	48 89 c7             	mov    %rax,%rdi
  444027:	e8 84 e8 fe ff       	callq  4328b0 <memmove@plt>
	  return __result - _Num;
  44402c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  444030:	48 c1 e0 03          	shl    $0x3,%rax
  444034:	48 f7 d8             	neg    %rax
  444037:	48 89 c2             	mov    %rax,%rdx
  44403a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  44403e:	48 01 d0             	add    %rdx,%rax
	}
  444041:	c9                   	leaveq 
  444042:	c3                   	retq   

0000000000444043 <x666::Parser::BracketEntry** std::__copy_move<false, true, std::random_access_iterator_tag>::__copy_m<x666::Parser::BracketEntry*>(x666::Parser::BracketEntry* const*, x666::Parser::BracketEntry* const*, x666::Parser::BracketEntry**)>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
  444043:	55                   	push   %rbp
  444044:	48 89 e5             	mov    %rsp,%rbp
  444047:	48 83 ec 30          	sub    $0x30,%rsp
  44404b:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  44404f:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  444053:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
	  const ptrdiff_t _Num = __last - __first;
  444057:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  44405b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  44405f:	48 29 c2             	sub    %rax,%rdx
  444062:	48 89 d0             	mov    %rdx,%rax
  444065:	48 c1 f8 03          	sar    $0x3,%rax
  444069:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	  if (_Num)
  44406d:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  444072:	74 1f                	je     444093 <x666::Parser::BracketEntry** std::__copy_move<false, true, std::random_access_iterator_tag>::__copy_m<x666::Parser::BracketEntry*>(x666::Parser::BracketEntry* const*, x666::Parser::BracketEntry* const*, x666::Parser::BracketEntry**)+0x50>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
  444074:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  444078:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  44407f:	00 
  444080:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  444084:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  444088:	48 89 ce             	mov    %rcx,%rsi
  44408b:	48 89 c7             	mov    %rax,%rdi
  44408e:	e8 1d e8 fe ff       	callq  4328b0 <memmove@plt>
	  return __result + _Num;
  444093:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  444097:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  44409e:	00 
  44409f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4440a3:	48 01 d0             	add    %rdx,%rax
	}
  4440a6:	c9                   	leaveq 
  4440a7:	c3                   	retq   

00000000004440a8 <x666::Parser::BracketEntry** std::__copy_move_backward<false, true, std::random_access_iterator_tag>::__copy_move_b<x666::Parser::BracketEntry*>(x666::Parser::BracketEntry* const*, x666::Parser::BracketEntry* const*, x666::Parser::BracketEntry**)>:
	__copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
  4440a8:	55                   	push   %rbp
  4440a9:	48 89 e5             	mov    %rsp,%rbp
  4440ac:	48 83 ec 30          	sub    $0x30,%rsp
  4440b0:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  4440b4:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  4440b8:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
	  const ptrdiff_t _Num = __last - __first;
  4440bc:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  4440c0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4440c4:	48 29 c2             	sub    %rax,%rdx
  4440c7:	48 89 d0             	mov    %rdx,%rax
  4440ca:	48 c1 f8 03          	sar    $0x3,%rax
  4440ce:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	  if (_Num)
  4440d2:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  4440d7:	74 30                	je     444109 <x666::Parser::BracketEntry** std::__copy_move_backward<false, true, std::random_access_iterator_tag>::__copy_move_b<x666::Parser::BracketEntry*>(x666::Parser::BracketEntry* const*, x666::Parser::BracketEntry* const*, x666::Parser::BracketEntry**)+0x61>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
  4440d9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4440dd:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  4440e4:	00 
  4440e5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4440e9:	48 c1 e0 03          	shl    $0x3,%rax
  4440ed:	48 f7 d8             	neg    %rax
  4440f0:	48 89 c1             	mov    %rax,%rcx
  4440f3:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4440f7:	48 01 c8             	add    %rcx,%rax
  4440fa:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  4440fe:	48 89 ce             	mov    %rcx,%rsi
  444101:	48 89 c7             	mov    %rax,%rdi
  444104:	e8 a7 e7 fe ff       	callq  4328b0 <memmove@plt>
	  return __result - _Num;
  444109:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  44410d:	48 c1 e0 03          	shl    $0x3,%rax
  444111:	48 f7 d8             	neg    %rax
  444114:	48 89 c2             	mov    %rax,%rdx
  444117:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  44411b:	48 01 d0             	add    %rdx,%rax
	}
  44411e:	c9                   	leaveq 
  44411f:	c3                   	retq   

0000000000444120 <std::bad_variant_access::~bad_variant_access()>:
  class bad_variant_access : public exception
  444120:	55                   	push   %rbp
  444121:	48 89 e5             	mov    %rsp,%rbp
  444124:	48 83 ec 10          	sub    $0x10,%rsp
  444128:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  44412c:	ba 08 4b 44 00       	mov    $0x444b08,%edx
  444131:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  444135:	48 89 10             	mov    %rdx,(%rax)
  444138:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  44413c:	48 89 c7             	mov    %rax,%rdi
  44413f:	e8 fc e7 fe ff       	callq  432940 <std::exception::~exception()@plt>
  444144:	90                   	nop
  444145:	c9                   	leaveq 
  444146:	c3                   	retq   
  444147:	90                   	nop

0000000000444148 <std::bad_variant_access::~bad_variant_access()>:
  444148:	55                   	push   %rbp
  444149:	48 89 e5             	mov    %rsp,%rbp
  44414c:	48 83 ec 10          	sub    $0x10,%rsp
  444150:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  444154:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  444158:	48 89 c7             	mov    %rax,%rdi
  44415b:	e8 c0 ff ff ff       	callq  444120 <std::bad_variant_access::~bad_variant_access()>
  444160:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  444164:	be 10 00 00 00       	mov    $0x10,%esi
  444169:	48 89 c7             	mov    %rax,%rdi
  44416c:	e8 8f e6 fe ff       	callq  432800 <operator delete(void*, unsigned long)@plt>
  444171:	c9                   	leaveq 
  444172:	c3                   	retq   
  444173:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  44417a:	00 00 00 
  44417d:	0f 1f 00             	nopl   (%rax)

0000000000444180 <__libc_csu_init>:
  444180:	41 57                	push   %r15
  444182:	41 56                	push   %r14
  444184:	41 89 ff             	mov    %edi,%r15d
  444187:	41 55                	push   %r13
  444189:	41 54                	push   %r12
  44418b:	4c 8d 25 46 cb 20 00 	lea    0x20cb46(%rip),%r12        # 650cd8 <__frame_dummy_init_array_entry>
  444192:	55                   	push   %rbp
  444193:	48 8d 2d 5e cb 20 00 	lea    0x20cb5e(%rip),%rbp        # 650cf8 <__init_array_end>
  44419a:	53                   	push   %rbx
  44419b:	49 89 f6             	mov    %rsi,%r14
  44419e:	49 89 d5             	mov    %rdx,%r13
  4441a1:	4c 29 e5             	sub    %r12,%rbp
  4441a4:	48 83 ec 08          	sub    $0x8,%rsp
  4441a8:	48 c1 fd 03          	sar    $0x3,%rbp
  4441ac:	e8 9f e4 fe ff       	callq  432650 <_init>
  4441b1:	48 85 ed             	test   %rbp,%rbp
  4441b4:	74 20                	je     4441d6 <__libc_csu_init+0x56>
  4441b6:	31 db                	xor    %ebx,%ebx
  4441b8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  4441bf:	00 
  4441c0:	4c 89 ea             	mov    %r13,%rdx
  4441c3:	4c 89 f6             	mov    %r14,%rsi
  4441c6:	44 89 ff             	mov    %r15d,%edi
  4441c9:	41 ff 14 dc          	callq  *(%r12,%rbx,8)
  4441cd:	48 83 c3 01          	add    $0x1,%rbx
  4441d1:	48 39 dd             	cmp    %rbx,%rbp
  4441d4:	75 ea                	jne    4441c0 <__libc_csu_init+0x40>
  4441d6:	48 83 c4 08          	add    $0x8,%rsp
  4441da:	5b                   	pop    %rbx
  4441db:	5d                   	pop    %rbp
  4441dc:	41 5c                	pop    %r12
  4441de:	41 5d                	pop    %r13
  4441e0:	41 5e                	pop    %r14
  4441e2:	41 5f                	pop    %r15
  4441e4:	c3                   	retq   
  4441e5:	90                   	nop
  4441e6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  4441ed:	00 00 00 

00000000004441f0 <__libc_csu_fini>:
  4441f0:	f3 c3                	repz retq 

Disassembly of section .fini:

00000000004441f4 <_fini>:
  4441f4:	48 83 ec 08          	sub    $0x8,%rsp
  4441f8:	48 83 c4 08          	add    $0x8,%rsp
  4441fc:	c3                   	retq   
