CMAKE_MINIMUM_REQUIRED(VERSION 3.0)

PROJECT(x666 VERSION 0.0)

INCLUDE_DIRECTORIES(${CMAKE_SOURCE_DIR})
SET(CMAKE_BINARY_DIR ${CMAKE_SOURCE_DIR}/build)

if(NOT CMAKE_BUILD_TYPE)
  set(CMAKE_BUILD_TYPE Debug)
endif(NOT CMAKE_BUILD_TYPE)
SET(COMMON_FLAGS "-std=c++17 -Wall -Wpedantic -Wextra -Werror -fno-builtin")
SET(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} ${COMMON_FLAGS} -O0 -g")
SET(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} ${COMMON_FLAGS} -O3 -ffat-lto-objects -flto -fPIC")
SET(CMAKE_SHARED_LINKER_FLAGS_RELEASE "${CMAKE_SHARED_LINKER_FLAGS}")
SET(CMAKE_STATIC_LINKER_FLAGS_RELEASE "${CMAKE_STATIC_LINKER_FLAGS}")
SET(CMAKE_EXE_LINKER_FLAGS_RELEASE "${CMAKE_EXE_LINKER_FLAGS} -ffat-lto-objects -flto -Wno-error")
SET(CMAKE_SHARED_LINKER_FLAGS_DEBUG "${CMAKE_SHARED_LINKER_FLAGS}")
SET(CMAKE_STATIC_LINKER_FLAGS_DEBUG "${CMAKE_STATIC_LINKER_FLAGS}")
SET(CMAKE_EXE_LINKER_FLAGS_DEBUG "${CMAKE_EXE_LINKER_FLAGS}")


INCLUDE_DIRECTORIES(${CMAKE_SOURCE_DIR}/include)

SET(SOURCES
  src/main.cpp
  src/Lexer.cpp
  src/Parser.cpp
)

ADD_EXECUTABLE(x666 ${SOURCES})

INSTALL(TARGETS x666 DESTINATION bin)